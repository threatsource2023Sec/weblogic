version=1.0
L10nPackage=weblogic.management.scripting.utils
I18nPackage=weblogic.management.scripting.utils
subsystem=Management

getMe=You can get me
cmoShortDesc=Current Managed Object
DomainNameShortDescription=Name of the weblogic domain
ServerNameShortDescription=Name of the server connected to
ConnectedShortDescription=Indicates if connected to a WLS
UserNameShortDescription=username that is currently connected to WLS
isAdminServerShortDescription=Indicates if connected to admin server
VersionShortDescription=WLS version information
RecordingShortDescription=Indicates if recording commands to a file
Exitonerror=Indicates if a script exits on error
cmoSyntax=cmo.<methodName>
cmoDescription=Current Managed Object that the user navigated to.
cmoExample=cmo.getType()
dnSyntax=print domainName
dnDesc=The name of the domain that the wlst user is currently connected to.
dnExample=print domainName
snSyntax=print serverName
snDesc=The name of the server that the WLST user is currently connected to.
snExample=print serverName
unSyntax=print username
unDescription=The username of the wlst user that is currently connected to the server.
unExample=print username
isAsSyntax=print isAdminServer
isAsDescr=Indicates if the server the wlst user connected to is an Admin Server
isASExample=print isAdminServer
versionSyntax=print version
vDesc=Indicates the version of the weblogic server that the user is currently connected to.
vEx=print version
recordingSyntax=print recording
rDesc=Indicates if the wlst interaction is being recorded to a file.
rExample=print recording
eoeSyntax=print exitonerror
eoeDesc=If ''true'', the script will stop execution in case of a WLST exception
eoeex=print exitonerror
wlstDesc=\nWLST is a command line scripting tool to configure and administer WebLogic Server. Try:\n
helpAll=Lists all the functions available.\n
hall=help(''ALL'')
hbrowse=help(''browse'')
helpBrowsee=Lists the browse functions available.\n
hControl=Lists the control functions available.\n
hdeploy=Lists the deploy functions available.\n
hdiagnostic=Lists the diagnostic functions available.\n
hedit=Lists the edit functions available.\n
hinfo=Lists the information functions available.\n
hlc=Lists the lifecycle functions available.\n
hvar=Lists all the global variables available.\n
hcontrol=Control functions for WLST
hLifeCycle=LifeCycle functions for WLS
hbr=Browse related functions for WLST
hcont=Controls the changes to managed objects
hinf=Information functions for WLST
hdep=Deployment functions for WLST
hal=All functions available in WLST
hv=Global variables in WLST
cd_shortDescription=Navigate the hierarchy of beans.
cd_description=\nNavigates the hierarchy of configuration or runtime beans. This \ncommand uses a model that is similar to navigating a file system \nin a Windows or UNIX command shell. For example, to navigate back \nto a parent configuration or runtime bean, enter cd(''..''). The \ncharacter string .. (dot-dot), refers to the directory immediately \nabove the current directory. To get back to the root configuration \nbean after navigating to a configuration or runtime bean that is \ndeep in the hierarchy, enter cd(''/''). \n \nYou can navigate to configuration or runtime beans in the current \nhierarchy and to any child or instance. \n \nThe cd command returns a stub of the configuration or runtime bean \ninstance, if one exists. If you navigate to a type, this command \nreturns a stub of the configuration or runtime bean instance from \nwhich you navigated. In the event of an error, the command returns \na WLSTException. \n \nNote that the cmo variable is initialized to the root of all domain \nconfiguration beans when you first connect WLST to a server \ninstance. It reflects the parent bean type until you navigate \nto a bean instance. For more information about the cmo variable, \nsee "Changing the Current Management Object" in "WebLogic Server \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html \n
cd_syntax=cd(mbeanName) \n- mbeanName = Path to the configuration or runtime bean in the namespace. \n
currentTree_shortDescription=Return the current location in the hierarchy.
currentTree_description=\nReturns the current location in the hierarchy. This command enables \nyou to store the current location in the hierarchy and easily return \nto it after browsing. In the event of an error, the command returns \na WLSTException. \n
currentTree_syntax=currentTree() \n
prompt_shortDescription=Toggle prompt information.
prompt_description=\nToggles the display of path information at the prompt, when entered \nwithout an argument. This command is useful when the prompt becomes \ntoo long due to the length of the path. \n \nYou can also explicitly specify on or off as an argument to the \ncommand. When you specify off, WLST hides the WLST prompt and defaults \nto the Jython prompt. By default, the WLST prompt displays the \npath information. \n \nWhen you disable the prompt details, to determine your current \nlocation in the hierarchy, you can use the pwd command. \nSee help(''pwd''). \n \nIn the event of an error, the command returns a WLSTException. \n
prompt_syntax=prompt(myPrompt) \n- myPrompt = Optional. Hides or displays WLST prompt. Valid values \n include off or on. \n o off = Hides the WLST prompt. If you run prompt(''off'') when \n using WLST online, the prompt defaults to the Jython prompt. \n You can create a new prompt using Jython syntax. For more \n information about programming using Jython, see \n http://www.jython.org. In this case, if you subsequently \n enter the prompt command without arguments, WLST displays \n the WLST command prompt without the path information. \n To redisplay the path information, enter prompt again, or \n enter prompt(''on''). \n \n o on = Displays the default WLST prompt, including the \n path information. \n
pwd_shortDescription=Display the current working directory.
pwd_description=\nDisplays the current location in the configuration or runtime bean \nhierarchy. \n \nThis command is useful when you have turned off the prompt display of \nthe path information using the prompt command. See help(''prompt''). \n \nIn the event of an error, the command returns a WLSTException. \n
pwd_syntax=pwd() \n
addHelpCommandGroup_shortDescription=Adds a new command help group to those shown by the WLST help() command.
addHelpCommandGroup_description=\nAdds a new command help group to those shown by the WLST help() command, \nand specifies the resource bundle in which the help information is \ndefined for the group. \n
addHelpCommandGroup_syntax=addHelpCommandGroup(commandGroup, resourceBundleName) \n- commandGroup: Use a unique name for the command group. Do not use \na command group name that is already shown by the WLST help() command. \n \n- resourceBundleName: Represents either a class name or \nproperty resource file name. The resource bundle contains help text \nfor entries for the command group using a standard pattern. \n \nThe resource bundle name will be passed to ResourceBundle.getBundle(...). \nMultiple command groups can use the same resource bundle. \n \nThe resource bundle must be present in the classpath. \n
addHelpCommand_shortDescription=Adds new command help for a command to an existing command group.
addHelpCommand_description=\nAdds new command help for a command to an existing command group. \nOnce added to the group, the command (along with a brief description) \nis displayed in the command list for the group when you enter \nthe help('commandGroup') command. You can also specify whether or not \nthe command is listed by the help('online') and help('offline') commands. \n
addHelpCommand_syntax=addHelpCommand(commandName,commandGroup,[online=false, offline=false]) \n \n- commandName: The name of the command as defined in the command group \nspecified by commandGroup. \n \n- commandGroup: The commandGroup to which the command belongs. \n \n- online: Optional. Boolean value that determines whether or not the \ncommand shows up in the help('online') output. The default value is 'false'. \n \n- offline: Optional. Boolean value that determines whether or not the \ncommand shows up in the help('offline') output. The default value is 'false'. \n
addTemplate_shortDescription=(Deprecated) Extend the current domain.
addTemplate_description=\nNOTE: This command is deprecated for WebLogic Server. You should update \nyour script to use the selectTemplate command as described in \nhelp(''selectTemplate''). \n \nExtends the current domain using the specified application or \nservice extension template. In the event of an error, the command \nreturns a WLSTException. \n
addTemplate_syntax=addTemplate(templateFileName) \n- templateFileName = Name of the application or service extension \n template. \n
closeDomain_shortDescription=Close the current domain.
closeDomain_description=\nCloses the current domain. The domain is no longer available for \nediting once it is closed. In the event of an error, the command \nreturns a WLSTException. \n
closeDomain_syntax=closeDomain() \n
closeTemplate_shortDescription=Close the current domain template.
closeTemplate_description=\nCloses the current domain template. The domain template is no longer \navailable once it is closed. In the event of an error, the command \nreturns a WLSTException. \n
closeTemplate_syntax=closeTemplate() \n
createDomain_shortDescription=Create a new domain.
createDomain_description=\nCreates a domain using the specified template. In the event of an \nerror, the command returns a WLSTException. \n \nNote the following: \n \n The createDomain command is similar in functionality to the unpack command, \n as described in "Creating Templates and Domains Using the pack and \n unpack Commands" at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
createDomain_syntax=createDomain(domainTemplate, domainDir, user, password) \n- domainTemplate = Name and location of the domain template from \n which you want to create a domain. \n \n- domainDir = Name of the directory to which you want to write the \n domain configuration information. \n \n- user = Name of the default user. \n \n- password = Password of the default user. \n
validateConfig_shortDescription=Validate a Domain configuration.
validateConfig_description=\nValidate a Domain configuration using the supplied option. In the event of a \nvalidation error, the command returns a WLSTException. \n \nCurrently supported options: \n \n InternalPortConflict - validate Admin and Managed server listen port conflicts in \n current Domain configuration. \n \n ExternalPortConflict - validate Admin and Managed server listen port conflicts against \n ports in use by active processes on this machine (host). \n \n KeyStorePasswords - Validates if any selected template that contains a valid metadata \n							does not have the credential store created for it, yet. In the event of \n							a validation error, the command returns a WLSTException.
validateConfig_syntax=validateConfig('option') \n \n Currently supported options are \n \n - InternalPortConflict	 \n - ExternalPortConflict \n	 - KeyStorePasswords
setDistDestType_shortDescription=Sets the distributed destination type.
setDistDestType_description=Sets the distributed destination type. In the event of an \nunsupported operation, the command returns a WLSTException. \n \nCurrently supported distributed destination types: \n \n UDD - Uniform Distributed Destination \n \n WDD - Weighted Distributed Destination \n
setDistDestType_syntax=setDistDestType('jmsSystemResourceName','distDestType') \n \n Currently supported distributed destination types are \n \n - UDD	 \n - WDD \n
setSharedSecretStoreWithPassword_shortDescription=set the shared secret store and password.
setSharedSecretStoreWithPassword_description=set the shared secret store and password. In the event of an \nunsupported operation, the command returns a WLSTException. \n \n
setSharedSecretStoreWithPassword_syntax=setSharedSecretStoreWithPassword('sharedSecretStore','secretStorePassword') \n \n
clone_shortDescription=Clone the server object.
clone_description=Clones the orignal server. In the event of an \nunsupported operation, the command returns a WLSTException. \n \nCurrently supported types: \n \n Server \n \n
clone_syntax=clone('orignalServerName','cloneServerName','type') \n \n Currently supported types are \n \n - Server	 \n
getNodeManagerHome_shortDescription=Gets the Node Manager home.
getNodeManagerHome_description=Gets the Node Manager home. In the event of an \nunsupported operation, the command returns a WLSTException.
getNodeManagerHome_syntax=getNodeManagerHome()
getOldNodeManagerHome_shortDescription=Gets the old Node Manager home used for Node Manager upgrade.
getOldNodeManagerHome_description=Gets the old Node Manager home directory used for Node Manager upgrade during domain reconfiguration. \nIn the event of an unsupported operation, the command returns a WLSTException.
getOldNodeManagerHome_syntax=getOldNodeManagerHome()
getNodeManagerType_shortDescription=Gets the Node Manager type.
getNodeManagerType_description=Gets the Node Manager type. In the event of an \nunsupported operation, the command returns a WLSTException.
getNodeManagerType_syntax=getNodeManagerType()
getNodeManagerUpgradeType_shortDescription=Gets the Node Manager upgrade type used for Node Manager upgrade.
getNodeManagerUpgradeType_description=Gets the Node Manager upgrade type used for Node Manager upgrade during domain reconfiguration. \nIn the event of an unsupported operation, the command returns a WLSTException.
getNodeManagerUpgradeType_syntax=getNodeManagerUpgradeType()
getNodeManagerUpgradeOverwriteDefault_shortDescription=Gets the value of the Node Manager upgrade overwrite default flag.
getNodeManagerUpgradeOverwriteDefault_description=Gets the value of the Node Manager upgrade overwrite default flag. In the event of an \nunsupported operation, the command returns a WLSTException.
getNodeManagerUpgradeOverwriteDefault_syntax=getOldNodeManagerHome()
storeKeyStorePassword_shortDescription=Creates a Credential Store for the templates with a valid metaData.
storeKeyStorePassword_description=\nCreates a Credential Store for the templates with a valid metaData. In the event of a \nvalidation error, the command returns a WLSTException. \n \n
storeKeyStorePassword_syntax=storeKeyStorePassword('template_location','password') \n
connect_shortDescription=Connect WLST to a WebLogic Server instance.
connect_description=\nConnects WLST to a WebLogic Server instance. \n \nYou can specify the username and password on the command line, or you \ncan specify ran encrypted password that is stored locally by specifying the \nlocations of the user configuration and key files as arguments to the \nconnect command. For information about creating the user configuration \nand key files, see help(''storeUserConfig''). \n \nIf you run the connect command without specifying the username and \npassword, WLST attempts to process the command using one of the \nmethods listed below (in order of precedence): \n \n1. WLST searches for the default user configuration and key files that \n contain an encrypted username and password. \n \n2. If the connect command was run from the domain directory in which \n the server was started, WLST attempts to load the username and \n password from the boot.properties file. \n \n3. WLST prompts for a username, password, and URL. \n \nPlease note the following: \n- If you run the connect command in a script without specifying the username \n password or user configuration file and key file, a WLSTException occurs. \n In interactive mode, you are prompted for the username and password. \n \n- Oracle strongly recommends that you connect WLST to the \n server through the SSL port or Administration Port. If you do not, \n the following warning message is displayed: \n \n Warning: An insecure protocol was used to connect to the server. \n To ensure on-the-wire security, the SSL port or Admin port should \n be used instead. \n \n- If you are connecting to a WebLogic Server instance through \n an SSL listen port on a server that is using the demonstration \n SSL keys and certificates, you should invoke WLST using the \n following command: \n \n java -Dweblogic.security.SSL.ignoreHostnameVerification=true \n -Dweblogic.security.TrustKeyStore=DemoTrust weblogic.WLST \n \n For more information about invoking WLST, see "Main Steps for Using \n WLST" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- If you are connecting to a WebLogic Server instance via HTTP, \n ensure that the TunnelingEnabled attribute is set to true for the \n WebLogic Server instance. For more information, see "TunnelingEnabled" \n in "WebLogic Server MBean Reference" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- When trying to connect to the WebLogic Server Administration Server from WLST \n using localhost as the host name, the following message may be displayed if \n the listen-address attribute of the Administration Server has been restricted \n to certain IP addresses: \n \n javax.naming.CommunicationException [Root exception is \n java.net.ConnectException : <t3://HOST:PORT> : Destination unreachable; \n nested exception is: java.net.ConnectException: Connection refused; No \n available router to destination \n \n You can use either of the following workarounds for this issue: \n o Check that the listen-address attribute of the Administration Server has been set \n correctly. For example, in the domain configuration file: \n <server> \n <name>AdminServer</name> \n <ssl> \n . \n . \n . \n </ssl> \n <machine>your_machine</machine> \n <listen-address><your_ip_address></listen-address> \n </server> \n \n o Use the hostname of the Administration Server, instead of localhost, in the WLST \n connect command. \n \nAfter successfully connecting to a WebLogic Server instance, all the \nlocal variables are initialized. \n \nIn the event of an error, the command returns a WLSTException. \n
connect_syntax=connect([username, password], [url], [adminServerName], [timeout], [idd]) \nconnect([userConfigFile, userKeyFile], [adminServerName], [url], [timeout], [idd]) \nconnect([url], [adminServerName], [timeout]) \nconnect([username, password], [url], [retryAttempts, [retryDelay]]) \n- username = Optional. Username of the operator who is connecting WLST \n to the server. If not specified on the command line, WLST processes the \n command as described above. \n \n- password = Optional. Password of the operator who is connecting WLST \n to the server. If not specified on the command line, WLST processes the \n command as described above. \n \n- url = Optional. Listen address and listen port of the server instance, \n specified using the following format: \n [protocol://]listen-address:listen-port. If not specified, this \n argument defaults to t3://localhost:7001. \n \n- userConfigFile = Name and location of a user configuration file which \n contains an encrypted username and password. When you create a user \n configuration file, the storeUserConfig command uses a key file to \n encrypt the username and password. Only the key file that encrypts a \n user configuration file can decrypt the username and password. See \n help(''storeUserConfig''). \n \n- userKeyFile = Name and location of the key file that is associated \n with the specified user configuration file and is used to decrypt it. \n See help(''storeUserConfig''). \n \n- adminServerName = Optional. Name of the Administration Server, it \n can also be used to specify a Managed Server name. \n This value is used when WLST is invoked from a domain directory. \n This argument defaults to myserver. \n \n- timeout = Optional. A name/value pair that specifies the number \n of milliseconds that WLST waits for online commands to complete (return). \n For example, timeout=10000 \n When you invoke a WLST online command, WLST connects to an MBean \n server, invokes an MBean server method, and returns the results of \n the invocation. If the MBean server method does not return within \n the timeout period, WLST abandons its invocation attempt. \n The default value is 0, which indicates that the operation will not \n time out. Note, however, that a timeout of 5 minutes may occur at a \n different layer. \n \n- idd = Optional. A name/value pair that specifies the Identity Domain of \n the user. For example, idd=dbUsers \n This arguments defaults to None. \n \n- retryAttempts = Optional. This property specifies the number of retry attempts to \n establish the initial WLST connection. \n \n- retryDelay = Optional. This property specifies the retry interval (in millisecond). \n The interval reflects how long WLST delays before attempting the \n connection again. \n
disconnect_shortDescription=Disconnect WLST.
disconnect_description=\nDisconnects WLST from a WebLogic Server instance. The disconnect \ncommand does not cause WLST to exit the interactive scripting shell; \nit closes the current WebLogic Server instance connection and resets \nall the variables while keeping the interactive shell alive. \n \nIn the event of an error, the command returns a WLSTException. \n \nYou can connect to another WebLogic Server instance using the \nconnect command, as described in help(''connect''). \n
disconnect_syntax=disconnect(force) \n- force = Optional. Boolean value specifying whether WLST should \n disconnect without waiting for the active sessions to complete. \n This argument defaults to false, indicating that all active \n sessions must complete before disconnect. \n
exit_shortDescription=Exit WLST from the user session.
exit_description=\nExits WLST from the user session and closes the scripting shell. \n \nIf there is an edit session in progress, WLST prompts you for \nconfirmation. To skip the prompt, set the defaultAnswer argument to y. \n \nBy default, the WLST exit command calls System.exit(0) for the current \nWLST JVM. If you would like the JVM to exit with a different exit \ncode, you can specify a value using the exitCode argument. \n \nWhen the WLST exit command is issued within an Ant script, it may \nalso exit the execution of the Ant script. It is recommended that when \ninvoking WLST within an Ant script, you fork a new JVM by specifying \nfork="true". \n \nIn the event of an error, the command returns a WLSTException. \n
exit_syntax=exit([defaultAnswer], [exitcode]) \n- defaultAnswer	= Optional. Default response, if you would prefer \n not to be prompted at the command line. Valid values are y and n. \n This argument defaults to null, and WLST prompts you for a response. \n \n- exitcode = Optional. Exit code to set when exiting WLST. \n \n
readDomain_shortDescription=Open an existing domain for updating.
readDomain_description=\nOpens an existing domain for updating. \n \nWhen you open a domain, you are placed into the configuration \nbean hierarchy for that domain, and the prompt is updated to reflect \nthe current location in the configuration hierarchy. For example: \n \n wls:/offline/wls> \n \nWebLogic Server configuration beans exist within a hierarchical structure. \nIn the WLST file system, configuration bean hierarchies correspond to drives; \ntypes and instances are directories; attributes and operations are files. \nWLST traverses the hierarchical structure of configuration beans using \ncommands such as cd, ls, and pwd in a similar way that you would navigate \na file system in a UNIX or Windows command shell. After navigating to a \nconfiguration bean instance, you interact with the bean using WLST commands. \nFor more information, see "Navigating and Interrogating MBeans" in "WebLogic \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
readDomain_syntax=readDomain(domainDirName) \n- domainDirName = Name of the domain directory that you wish to open. \n
readDomainForUpgrade_shortDescription=Open an existing domain for reconfiguration
readDomainForUpgrade_description=\nOpen an existing domain for reconfiguration to the current version. \n \nThe readDomainForUpgrade()function performs three basic tasks: it calls the \nWLS API to upgrade the core infrastructure; it reads the resulting domain \ninto memory similarly to the readDomain()function; and finally, it selects \nthe required reconfiguration templates and applies them to the domain \nsimilarly to the addTemplate() function. \n \nNote that if the core WLS upgrade portion of this is successful, it cannot \nbe undone, but the addition of the reconfiguration templates must be \ncommitted via the updateDomain()function later in the session in order \nto become effective. \n
readDomainForUpgrade_syntax=readDomainForUpgrade(domainDirName, [properties]) \n- domainDirName = Name of the domain directory that you wish to open \n for reconfiguration. \n \n- properties = Optional. WLS-defined properties for core WLS infrastructure \n upgrade. May be a java.util.Properties object, a python Dictionary object, \n or a semi-colon delimited string of name=value pairs. \n
readTemplate_shortDescription=(Deprecated) Open an existing domain template.
readTemplate_description=\nNOTE: This command is deprecated for WebLogic Server. If you are creating domain, \nyou should update your script to use the selectTemplate command as described in \nhelp(''selectTemplate''). If you are updating the domain template, you should \nupdate your script to use the readTemplateForUpdate command as described in \nhelp(''readTemplateForUpdate''). \n \nOpens an existing domain template for domain creation and optionally \nspecifies the config-groups topology profile to use (full WLS only). \n \nWhen you open a domain template, you are placed into the configuration \nbean hierarchy for that domain template, and the prompt is updated to reflect \nthe current location in the configuration hierarchy. For example: \n \n wls:/offline/wls> \n \nWebLogic Server configuration beans exist within hierarchical structures. \nIn the WLST file system, configuration bean hierarchies correspond to \ndrives; types and instances are directories; attributes and operations \nare files. WLST traverses the hierarchical structure of configuration \nbeans using commands such as cd, ls, and pwd in a similar way that you \nwould navigate a file system in a UNIX or Windows command shell. After \nnavigating to an configuration bean instance, you interact with the \nbean using WLST commands. For more information, see "Navigating and \nInterrogating MBeans" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nNOTE: Using WLST and a domain template, you can only create and access \nsecurity information when you are creating a new domain. When you are \nupdating a domain, you cannot access security information through WLST. \n \nIn the event of an error, the command returns a WLSTException. \n
readTemplate_syntax=readTemplate(templateFileName, topologyProfile) \n- templateFileName = Name of the JAR file corresponding to the domain \n template. \n- topologyProfile = (optional) Name of the config-groups topology profile \n to use (full WLS only). \n
readTemplateForUpdate_shortDescription=Opens an existing domain template for template update.
readTemplateForUpdate_description=\nOpens an existing domain template for template update. \n \nWhen you open a domain template, you are placed into the configuration \nbean hierarchy for that domain template, and the prompt is updated to reflect \nthe current location in the configuration hierarchy. For example: \n \n wls:/offline/wls> \n \nWebLogic Server configuration beans exist within hierarchical structures. \nIn the WLST file system, configuration bean hierarchies correspond to \ndrives; types and instances are directories; attributes and operations \nare files. WLST traverses the hierarchical structure of configuration \nbeans using commands such as cd, ls, and pwd in a similar way that you \nwould navigate a file system in a UNIX or Windows command shell. After \nnavigating to an configuration bean instance, you interact with the \nbean using WLST commands. For more information, see "Navigating and \nInterrogating MBeans" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nNOTE: Using WLST and a domain template, you can only create and access \nsecurity information when you are creating a new domain. When you are \nupdating a domain, you cannot access security information through WLST. \n \nIn the event of an error, the command returns a WLSTException. \n
readTemplateForUpdate_syntax=readTemplateForUpdate(templateFileName) \n- templateFileName = Name of the JAR file corresponding to the domain \n template. \n
selectTemplate_shortDescription=Selects an existing domain template or application template.
selectTemplate_description=\n Selects an existing domain template or application template for domain creation. \n
selectTemplate_syntax=selectTemplate(templateName, templateVersion) \n- templateName: Template name is required. This should be an exact template name defined in template descriptor (template-info.xml). \n templateVersion: Template Version is optional. \n
selectCustomTemplate_shortDescription=Selects an existing custom domain template or application template.
selectCustomTemplate_description=\n Selects an existing custom domain template or application template for domain creation. \n
selectCustomTemplate_syntax=selectCustomTemplate(templateFileName) \n- templateFileName = Name of the JAR file corresponding to the domain \n template. \n
unselectTemplate_shortDescription=Unselect the existing selected domain template or application template.
unselectTemplate_description=\n Unselect the existing selected domain template or application template for domain creation. \n
unselectTemplate_syntax=unselectTemplate(templateName, templateVersion) \n- templateName: Template name is required. This should be an exact template name defined in template descriptor (template-info.xml). \n templateVersion: Template Version is optional. \n
unselectCustomTemplate_shortDescription=Unselect the existing selected custom domain template or application template.
unselectCustomTemplate_description=\n Unselect the existing selected custom domain template or application template for domain creation. \n
unselectCustomTemplate_syntax=unselectCustomTemplate(templateFileName) \n- templateFileName = Name of the JAR file corresponding to the domain \n template. \n
setTopologyProfile_shortDescription=Sets the topology profile.
setTopologyProfile_description=\n Sets the topology profile. \n \n NOTE : This should be set before selecting any template. \n If no profile set, the default profile will be used. The default topology profile is 'Expanded'. \n
setTopologyProfile_syntax=setTopologyProfile(topologyProfile) \n- topologyProfile = Topology Profile is required. The possible values for Topology Profile are 'Expanded' and 'Compact'. \n
loadTemplates_shortDescription=Loads all the selected templates using select template.
loadTemplates_description=\n Loads all the selected templates using select template. \n
loadTemplates_syntax=loadTemplates()
showTemplates_shortDescription=Display all currently selected and loaded templates.
showTemplates_description=\n Display all currently selected and loaded templates. \n
showTemplates_syntax=showTemplates()
showAvailableTemplates_shortDescription=Display all currently available templates for loading.
showAvailableTemplates_description=\n Display all currently available templates for loading. \n
showAvailableTemplates_syntax=showAvailableTemplates('showHidden', 'verbose', 'includeApplied') \n showHidden : This flag is optional. This will display hidden templates. The default value is 'false'. \n verbose : This flag is optional. This will display the complete template location path. The default value is 'false'. \n includeApplied : This flag is optional. This will display applied templates. The default value is 'false'. \n
consolidateDatasources_shortDescription=Consolidate serveral original Data Sources to one consolidated Data Source.
consolidateDatasources_description=Consolidate serveral original Data Sources to one consolidated Data Source.
consolidateDatasources_syntax=consolidateDatasources(consolidatedDSName, DSName1,..., DSNameN) \nconsolidatedDSName : the consolidated Data Source's name that DSName1 ... DSNameN are consolidated to. \nDSName1, ... DSNameN : the names of the Data Sources which need to be consolidated. \nNOTE: Before running this command, the consolidatedDS must have been already exited/created in the domain. \n
isASMAutoProvConfigurable_shortDescription=Indicates if domain contains elements configurable for ASM HA.
isASMAutoProvConfigurable_description=\nReturns true if the configuration contains elements that are eligible for \nHigh-Availablity configuration for ASM; otherwise, it returns false. \n
isASMAutoProvConfigurable_syntax=isASMAutoProvConfigurable() \n
isASMAutoProvSet_shortDescription=Indicates if ASM configuration had been set by the user.
isASMAutoProvSet_description=\nReturns true if the user has set the HA configuration options for ASM for this domain. \nThis function does not indicate if ASM HA configuration is enabled, just that the \noption has been set and can no longer be changed. \n
isASMAutoProvSet_syntax=isASMAutoProvSet() \n
isASMAutoProvEnabled_shortDescription=Indicates if configuration for ASM HA has been enabled.
isASMAutoProvEnabled_description=\nReturns true if automatic configuation of ASM for High-Availability has been enabled. \n
isASMAutoProvEnabled_syntax=isASMAutoProvEnabled() \n
enableASMAutoProv_shortDescription=Enables or disables automatic ASM HA configuration.
enableASMAutoProv_description=\nEnables or disables the automatic configuration option for ASM HA. If the \noption has already been set and committed for this domain, it cannot be changed, \nand enableASMAutoProv() throws an exception. \n
enableASMAutoProv_syntax=enableASMAutoProv(flag) \n- flag = boolean value indicating if auto configuration for ASM HA is enabled. \n
isASMDBBasisEnabled_shortDescription=Indicates if ASM HA has been configured to use database basis.
isASMDBBasisEnabled_description=\nReturns true if automatic ASM HA has been enabled and set to use database \nbasis. Returns false if ASM HA is enable and consensus basis is being used. \nIf automatic ASM HA has not been enabled, this function returns None. \n
isASMDBBasisEnabled_syntax=isASMDBBasisEnabled() \n
enableASMDBBasis_shortDescription=Sets ASM configuration to use database basis.
enableASMDBBasis_description=\nEnables database basis for ASM HA configuration if the flag is true; otherwise \nuses consensus basis. Throws an exception if automatic HA configuration for ASM \nis not enabled. \n
enableASMDBBasis_syntax=enableASMDBBasis(flag) \n- flag = boolean value indicating if database basis should be used for ASM HA. \n
isJTATLogPersistenceConfigurable_shortDescription=Indicates if domain contains elements eligible for TLog configuration.
isJTATLogPersistenceConfigurable_description=\nReturns true if the configuration contains one or more Servers that are eligible for \nJTA TLog configuration for High-Availablity; otherwise, it returns false. \n
isJTATLogPersistenceConfigurable_syntax=isJTATLogPersistenceConfigurable() \n
isJTATLogDBPersistenceSet_shortDescription=Indicates if JTA TLog persistence configuration had been set by the user.
isJTATLogDBPersistenceSet_description=\nReturns true if the user has set the HA configuration options for JTA TLog \npersistence for this domain. This function does not indicate if TLog DB persistence \nconfiguration is enabled, just that the option can no longer be changed. \n
isJTATLogDBPersistenceSet_syntax=isJTATLogDBPersistenceSet() \n
isJTATLogDBPersistenceEnabled_shortDescription=Indicates if JTA TLog Persistence configuration is using JDBC persistence.
isJTATLogDBPersistenceEnabled_description=\nReturns true if JTA TLog Persistence configuration had been set to JDBC persistence. Returns \nfalse if default persistence is being used. \n
isJTATLogDBPersistenceEnabled_syntax=isJTATLogDBPersistenceEnabled() \n
enableJTATLogDBPersistence_shortDescription=Sets JTA TLog Persistence configuration to JDBC persistence.
enableJTATLogDBPersistence_description=\nSets JTA TLog Persistence configuration to JDBC persistence if the flag is true; \notherwise, default persistence will be used. If this option has already been set and \ncommitted for this domain, it cannot be changed, and enableJTATLogDBPersistence() \nthrows an exception. \n
enableJTATLogDBPersistence_syntax=enableJTATLogDBPersistence(flag) \n- flag = boolean value indicating if JDBC persistence is enabled. \n
isJMSStorePersistenceConfigurable_shortDescription=Indicates if domain contains a JMSServer eligible for JDBC persistence configuration.
isJMSStorePersistenceConfigurable_description=\nReturns true if the configuration contains one or more JMSServers that are eligible for \nJDBC persistence configuration for High-Availablity; otherwise, it returns false. \n
isJMSStorePersistenceConfigurable_syntax=isJMSStorePersistenceConfigurable() \n
isJMSStoreDBPersistenceSet_shortDescription=Indicates if JMSServer persistence configuration had been set by the user.
isJMSStoreDBPersistenceSet_description=\nReturns true if the user has set the HA configuration options for JMSServer \npersistence for this domain. This function does not indicate if JMSServer persistence \nconfiguration is enabled, just that the option can no longer be changed. \n
isJMSStoreDBPersistenceSet_syntax=isJMSStoreDBPersistenceSet() \n
isJMSStoreDBPersistenceEnabled_shortDescription=Indicates if JMS Server Persistence configuration had been set to JDBC persistence.
isJMSStoreDBPersistenceEnabled_description=\nReturns true if JMS Server Persistence configuration had been set to JDBC persistence. Returns \nfalse if File persistence is being used. \n
isJMSStoreDBPersistenceEnabled_syntax=isJMSStoreDBPersistenceEnabled() \n
enableJMSStoreDBPersistence_shortDescription=Sets JMS Server Persistence configuration to JDBC persistence.
enableJMSStoreDBPersistence_description=\nSets JMS Server Persistence configuration to JDBC persistence if the flag is true; \notherwise, file persistence will be used. If this option has already been set and \ncommitted for this domain, it cannot be changed, and enableJMSStoreDBPersistence() \nthrows an exception. \n
enableJMSStoreDBPersistence_syntax=enableJMSStoreDBPersistence(flag) \n- flag = boolean value indicating if JDBC persistence is enabled. \n
initializejdbcstores_shortDescription=Create database persistence tables
initializejdbcstores_description=\nCreates database persistence tables for JDBC Stores and Server Transaction logs, if \nnecessary. Connections information will be retrieved from the configuration of stores \nand servers listed in the command arguments. If none are listed, all JDBCStores and \nservers with transactions logs will be initialized. \n
initializejdbcstores_syntax=initializejdbcstores(storeNames=None, serverNames=None, ddl=None) \n- storeNames = names of JDBC stores to create tables \n- serverNames = names of Servers to create TLog stores \n- ddl = path to custom ddl file \n \n if both storeNames and serversNames are None, all available JDBC and servers \n with transaction logs will be used. \n
updateDomain_shortDescription=Update and save the current domain.
updateDomain_description=\nUpdates and saves the current domain. The domain continues to be \neditable after you update and save it. \n \nIn the event of an error, the command returns a WLSTException. \n
updateDomain_syntax=updateDomain() \n
writeDomain_shortDescription=Write the domain configuration information.
writeDomain_description=\nWrites the domain configuration information to the specified directory. \n \nOnce your write the domain to the file system, you can continue to update \nthe domain template object that exists in memory, and reissue the \nwriteDomain command to store the domain configuration to a new or existing \nfile. \n \nBy default, when you write a domain, the associated applications are written \nto BEAHOME/user_projects/applications/domainname, where BEAHOME specifies \nthe home directory and domainname specifies the name of the domain. \nThis directory must be empty; otherwise, WLST displays an error. \n \nWhen you have finished using the domain template object in memory, close \nit using the closeTemplate command. For more information, see help(''closeTemplate''). \nIf you want to edit the domain that has been saved to disk, you can open it \nusing the readDomain command. For more information, see help(''readDomain''). \n \nNOTE: The name of the domain is derived from the name of the domain \ndirectory. For example, for a domain saved to \nc:/Oracle/Middleware/user_projects/domains/myMedrec, the domain name is myMedrec. \n \nBefore writing the domain, you must define a password for the default user, \nif it is not already defined. For example: \ncd(''/Security/base_domain/User/adminusername'') \ncmo.setPassword(''adminpassword'') \n \nIn the event of an error, the command returns a WLSTException. \n
writeDomain_syntax=writeDomain(domainDir) \n- domainDir = Name of the directory to which you want to write the domain \n configuration information. \n
writeTemplate_shortDescription=Write the domain template.
writeTemplate_description=\nWrites the domain configuration information to the specified domain \ntemplate. You can use the domain template to recreate the domain. \n \nOnce your write the configuration information to the domain template, \nyou can continue to update the domain or domain template object \nthat exists in memory, and reissue the writeDomain or writeTemplate command \nto store the domain configuration to a new or existing domain or domain \ntemplate file. For more information, see help(''writeDomain'') or \nhelp(''writeTemplate''), respectively. \n \nIn the event of an error, the command returns a WLSTException. \n \nNote that the writeTemplate command is similar in functionality \nto the pack command, as described in "Creating Templates and \nDomains Using the pack and unpack Commands" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. However, \nwriteTemplate does not support creating a Managed Server template. \n
writeTemplate_syntax=writeTemplate(templateName) \n- domainTemplate = Name of the domain template to store the \n domain configuration information. \n
getStartupGroup_shortDescription=Retrieve the server startup group.
getStartupGroup_description=Retrieves the server startup group associated with a server. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
getStartupGroup_syntax=getStartupGroup('server_name') \n \n server_name = the server name for which a server startup group, \n if any, will be returned. \n \n
addStartupGroup_shortDescription=Add a new server startup group.
addStartupGroup_description=Add a new server startup group based on an existing server-group. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
addStartupGroup_syntax=addStartupGroup('server_startup_group_name', 'server_group_name') \n \n server_startup_group_name = name of the new server startup group \n server_group_name = name of an existing server group within \n the domain \n \n
deleteStartupGroup_shortDescription=Delete the server startup group.
deleteStartupGroup_description=Delete the server startup group. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
deleteStartupGroup_syntax=deleteStartupGroup('startup_group_name') \n \n startup_group_name = name of the new server startup group, \n \n
setStartupGroup_shortDescription=Set the server startup group.
setStartupGroup_description=Set the server startup group for a server \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
setStartupGroup_syntax=setStartupGroup('server_name', 'server_startup_group_name') \n \n server_name = the server name \n server_startup_group_name = name of an existing server startup group \n within the domain \n \n
getDatabaseDefaults_shortDescription=Connect to the database to retrieve schema information.
getDatabaseDefaults_description=Connect LocalSvcTblDataSource to the database server to retrieve \nschema information and automatically bind these retrieved parameters 	\nwith local schema components. Datasource LocalSvcTblDataSource \nmust be configured with necessary connection parameters before \ncall getDatabaseDefaults(). 	\n 	\nNotes: This command can be used only if the domain being created or modified 	\nincludes Fusion Middleware components that require the use of the 	\nOracle Fusion Middleware RCU to load database schemas. The 	\nLocalSvcTblDatasource connects to the schema corresponding to the 	\nSTB component in RCU. 	\n 	\ngetDatabaseDefaults() retrieves the schema password that was set when 	\nthe schema was first created using RCU. If the schema password was 	\nchanged after running RCU and before domain creation, you must specify 	\nthe password again after calling getDatabaseDefaults and before calling 	\nwriteDomain() in a WLST script. For example: 	\n 	\n getDatabaseDefaults() 	\n cd('/JDBCSystemResource/LocalSvcTblDataSource/JdbcResource/ 	\n LocalSvcTblDataSource/JDBCDriverParams/NO_NAME_0') 	\n set('PasswordEncrypted', 'new_password') 	\n writeDomain(DOMAIN_HOME)
getDatabaseDefaults_syntax=getDatabaseDefaults() \n \n Connect to the database to retrieve schema information. \n
listServerGroups_shortDescription=Retrieves a map of the config-groups server groups which are user expandable.
listServerGroups_description=Retrieves a map of the config-groups server groups which are user expandable. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
listServerGroups_syntax=listServerGroups(printOutput="false") \n \n printOutput = If "false" (default) the output will be formatted for \n programmatic consumption with the server group names returned in a jython \n dictionary type which uses the server group name as its key and the server \n group description as the value. \n If "true" the output will be formatted for easy to read user consumption \n in the form of a table which contains columns for the server group name \n and that server group's corresponding description. \n
getServerGroups_shortDescription=Retrieves a list of the server groups which the specified server is a member.
getServerGroups_description=Retrieves a list of the config-groups user expandable server groups which the specified server is a member. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
getServerGroups_syntax=getServerGroups('server_name') \n \n server_name = the server name for which a config-groups server groups \n associated, if any, will be returned. \n
setServerGroups_shortDescription=Sets the server groups for the specified server.
setServerGroups_description=Sets the config-groups user expandable server groups for the specified server. \nIn the event of an \nunsupported operation, the command returns a WLSTException. \n \n
setServerGroups_syntax=setServerGroups('server_name', ['SERVER-GROUP-NAME']) \n \n server_name = the server name to associated with the user expandable config-groups \n server groups specified. \n SERVER-GROUP-NAME = a list of the user expandable server group names to associate \n with the specified server. \n
deploy_shortDescription=Deploy an application.
deploy_description=\nDeploys an application to a WebLogic Server instance. The deploy \ncommand returns a WLSTProgress object that you can access to check the \nstatus of the command. For more information about the WLSTProgress \nobject, see "WLSTProgress Object" in "WebLogic Server Scripting Tool" \nat \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. In \nthe event of an error, the command returns a WLSTException. \n \nNote that if there is an edit session in progress, the deploy command \ndoes not block user interaction until the deployment is complete. \n
deploy_syntax=\ndeploy(appName, path, [targets], [stageMode], [planPath], [resourceGroup], [resourceGroupTemplate], [partition], [options]) \n- appName = Name of the application or standalone J2EE module to be \n deployed. \n \n- path = Name of the application directory, archive file, or root of \n the exploded archive directory to be deployed. \n \n- targets = Optional. Comma-separated list of the targets. Each target \n may be qualified with a J2EE module name (for example, module1@server1) \n enabling you to deploy different modules of the application archive on \n different servers. This argument defaults to the server to which WLST \n is currently connected. \n \n- stageMode = Optional. Staging mode for the application you are \n deploying. Valid values are stage, nostage, and external_stage. This \n argument defaults to null. For information about the staging modes, see \n "Staging Modes" in "Overview of WebLogic Server Deployment" in \n "Deploying WebLogic Server Applications" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- planPath = Optional. Name of the deployment plan file. The filename \n can be absolute or relative to the application directory. This argument \n defaults to the plan/plan.xml file in the application directory, if one \n exists. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o deploymentPrincipalName = String value specifying the principal for \n deploying the file or archive during server starts (static deployment; it \n does not effect the current deployment task). Make sure the user exists. \n This option adds deployment-principal-name to the app-deployment \n element in the config.xml file. \n \n o forceUndeployTimeout = Time (in seconds) to wait for in-flight work to \n complete before undeploying the application. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether \n the graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o upload = (true|false) Boolean value specifying whether the application files \n are uploaded to the WebLogic Server Administration Server''s upload directory \n prior to deployment. Use this option when you are on a different machine \n from the Administration Server and you cannot copy the deployment files \n by other means. This option defaults to false. \n \n o remote = (true|false) Boolean value specifying whether the operation will \n be remote from the file system that contains the source. Use this option \n when you are on a different machine from the Administration Server and the \n deployment files are already at the specified location where the Administration \n Server is located. This option defaults to false. \n \n o deploymentOrder = deployment order in Integer. Specify the deployment \n order of the application. The application with the lowest deployment \n order value is deployed first. \n \n o versionIdentifier = Version identifier. \n \n o planStageMode = Staging mode for the deployment plan. \n Valid values are stage, nostage, and external_stage.
distributeApplication_shortDescription=Copy the deployment bundle to targets.
distributeApplication_description=\nCopies the deployment bundle to the specified targets. The deployment \nbundle includes module, configuration data, and any additional \ngenerated code. The distributeApplication command does not start \ndeployment. \n \nThe distributeApplication command returns a WLSTProgress object that \nyou can access to check the status of the command. For more information \nabout the WLSTProgress object, see "WLSTProgress Object" in "WebLogic \nServer Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. In the \nevent of an error, the command returns a WLSTException. \n
distributeApplication_syntax=\n \ndistributeApplication(appPath, [planPath], [targets], [resourceGroup], [resourceGroupTemplate], [partition], [options]) \n- appPath = Name of the archive file or root of the exploded archive \n directory to be deployed. \n \n- planPath = Optional. Name of the deployment plan file. The filename \n can be absolute or relative to the application directory. This argument \n defaults to the plan/plan.xml file in the application directory, if one \n exists. \n \n- targets = Optional. Comma-separated list of the targets. Each target \n may be qualified with a J2EE module name (for example, module1@server1) \n enabling you to deploy different modules of the application archive on \n different servers. This argument defaults to the server to which WLST is \n currently connected. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o upload = (true|false) Boolean value specifying whether the application files \n are uploaded to the WebLogic Server Administration Server''s upload directory \n prior to deployment. Use this option when you are on a different machine \n from the Administration Server and you cannot copy the deployment files \n by other means. This option defaults to false. \n \n o remote = (true|false) Boolean value specifying whether the operation will \n be remote from the file system that contains the source. Use this option \n when you are on a different machine from the Administration Server and the \n deployment files are already at the specified location where the Administration \n Server is located. This option defaults to false. \n \n o versionIdentifier = Version identifier. \n
getWLDM_shortDescription=Return the WebLogic DeploymentManager object.
getWLDM_description=\nReturns the WebLogic DeploymentManager object. You can use the object \nmethods to configure and deploy applications. WLST must be connected to \nan Administration Server to run this command. \n \nIn the event of an error, the command returns a WLSTException. \n
getWLDM_syntax=getWLDM() \n
loadApplication_shortDescription=Load an application and deployment plan.
loadApplication_description=\nLoads an application and deployment plan into memory. When used in \nonline mode, you can connect only to the Administration Server; you \ncannot connect to a Managed Server. The loadApplication command \nreturns a WLSTPlan object that you can access to make changes to \nthe deployment plan. For more information about the \nWLSTPlan object, see "WLSTPlan Object" in "WebLogic Server Scripting \nTool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
loadApplication_syntax=\nloadApplication(appPath, [planPath], [createPlan]) \n- appPath = Name of the top-level parent application directory, \n archive file, or root of the exploded archive directory containing the \n application to be loaded. \n \n- planPath = Optional. Name of the deployment plan file. The filename \n can be absolute or relative to the application directory. This argument \n defaults to the plan/plan.xml file in the application directory, if one \n exists. \n \n- createPlan = Optional. Boolean value specifying whether WLST should \n create a plan in the application directory if the specified plan does \n not exist. This argument defaults to true. \n
redeploy_shortDescription=Reload classes and redeploys an application.
redeploy_description=\nReloads classes and redeploys a previously deployed application. The \nredeploy command returns a WLSTProgress object that you can access to \ncheck the status of the command. For more information about the \nWLSTProgress object, see "WLSTProgress Object" in "WebLogic Server \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n \nFor more information about redeploying applications, see \n"Overview of Common Deployment Scenarios" in "Deploying \nWebLogic Server Applications" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
redeploy_syntax=\nredeploy(appName, [planPath], [resourceGroupTemplate], [partition], [removePlanOverride], [options]) \n- appName = Name of the application to be redeployed. \n \n- planPath = Optional. Name of the deployment plan file. The filename \n can be absolute or relative to the application directory. This argument \n defaults to the plan/plan.xml file in the application directory, if one \n exists. \n \n- removePlanOverride = (true|false) Boolean value indicating whether the \n previous plan override at resource group level should be removed. \n This option defaults to false. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o appPath = Location of the application source file. \n \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o delta = A list of file paths or names relative to the root of the staged application \n that are to be replaced. \n \n o deploymentPrincipalName = String value specifying the principal for redeploying the \n file or archive during server starts. You can use this option to overwrite the current \n deployment-principal-name in the config.xml file. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o upload = (true|false) Boolean value specifying whether the application files \n are uploaded to the WebLogic Server Administration Server''s upload directory \n prior to deployment. Use this option when you are on a different machine \n from the Administration Server and you cannot copy the deployment files \n by other means. This option defaults to false. If this option is used, \n then the appPath option should also be specified. \n \n o remote = (true|false) Boolean value specifying whether the operation will \n be remote from the file system that contains the source. Use this option \n when you are on a different machine from the Administration Server and the \n deployment files are already at the specified location where the Administration \n Server is located. This option defaults to false. \n \n o versionIdentifier = Version identifier. \n
startApplication_shortDescription=Start an application.
startApplication_description=\nStarts an application, making it available to users. The application \nmust be fully configured and available in the domain. The \nstartApplication command returns a WLSTProgress object that you can \naccess to check the status of the command. For more information \nabout the WLSTProgress object, see "WLSTProgress Object" in "WebLogic \nServer Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
startApplication_syntax=startApplication(appName, [partition], [options]) \n- appName = Name of the application to start, as specified in the \n plan.xml file. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o targets = Comma-separated list of targets on which you would like this \n application to be started. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o versionIdentifier = Version identifier. \n
stopApplication_shortDescription=Stop an application, making it unavailable to users.
stopApplication_description=\nStops an application, making it unavailable to users. The application \nmust be fully configured and available in the domain. The \nstopApplication command returns a WLSTProgress object that you can \naccess to check the status of the command. For more information about \nthe WLSTProgress object, see "WLSTProgress Object" in "WebLogic Server \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
stopApplication_syntax=stopApplication(appName, [partition], [block], [timeout]) \n- appName = Name of the application to stop, as specified in the \n plan.xml file. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o versionIdentifier = Version identifier. \n
undeploy_shortDescription=Undeploy an application.
undeploy_description=\nUndeploys an application from the specified servers. \n \nThe undeploy command returns a WLSTProgress object that you can \naccess to check the status of the command. For more information about \nthe WLSTProgress object, see "WLSTProgress Object" in "WebLogic Server \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n \nFor more information about undeploying applications, see "Common \nDeployment Operations" in "Deploying Applications to WebLogic Server" at \nat \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
undeploy_syntax=undeploy(appName, [targets], [resourceGroupTemplate], [partition], [block], [subModuleTargets], [timeout]) \n- appName = Deployment name for the deployed application. \n \n- targets = Optional. List of the target servers from which the \n application will be removed. If not specified, defaults to all current \n targets. \n \n- resourceGroupTemplate = Optional. Name of the resource group template this \n deployment is scoped to. The specified resource group template needs to \n be pre-existed before executing the deployment command. \n \n- partition = Optional. Name of the partition this deployment is scoped to. \n The partition name will be derived from the current invocation context if \n not specified. The specified partition need to be pre-existed before \n executing the deployment command. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o delta = A list of file paths or names relative to the root of the staged application \n that are to be removed from the distribution. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o versionIdentifier = Version identifier. \n
updateApplication_shortDescription=Update an application configuration using a new deployment plan.
updateApplication_description=\nUpdates an application configuration using a new deployment plan. \nThe application must be fully configured and available in the domain. \n \nThe updateApplication command returns a WLSTProgress object that you can \naccess to check the status of the command. For more information about \nthe WLSTProgress object, see "WLSTProgress Object" in "WebLogic Server \nScripting Tool" http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
updateApplication_syntax=updateApplication(appName, [planPath], [resourceGroupTemplate], [partition], [removePlanOverride], [options]) \n- appName = Name of the application, as specified in the current \n plan.xml file. \n \n- planPath = Optional. Name of the new deployment plan file. The \n filename can be absolute or relative to the application directory. \n \n- resourceGroupTemplate = Optional. Name of the resource group template this \n deployment is scoped to. The specified resource group template needs to \n be pre-existed before executing the deployment command. \n \n- partition = Optional. Name of the partition this deployment is scoped to. \n The partition name will be derived from the current invocation context if \n not specified. The specified partition need to be pre-existed before \n executing the deployment command. \n \n- removePlanOverride = (true|false) Boolean value indicating whether the \n previous plan override at resource group level should be removed. \n This option defaults to false. \n \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o altDD = Location of the alternate application deployment descriptor on the \n admin server. \n \n o altWlsDD = Location of the alternate WebLogic application deployment \n descriptor on the admin server. \n \n o archiveVersion = Archive version number. \n \n o block = (true|false) Boolean value specifying whether WLST should block \n user interaction until the command completes. This option defaults to \n true. If set to false, WLST returns control to the user after issuing \n the command; you can query the WLSTProgress object to determine the \n status of the command. If you are importing WLST as a Jython module, \n block is always set to true. For more information, see "Importing WLST \n as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o clusterDeploymentTimeout = Time, in milliseconds, granted for a \n cluster deployment task on this application. \n \n o createPlan = (true|false) Boolean value indicating that user would like to \n create a default plan. This option defaults to false. \n \n o defaultSubmoduleTargets = (true|false) Boolean value indicating that \n targeting for any JMS submodules should be derived by the system. \n \n o forceUndeployTimeout = Force undeployment timeout value. \n \n o gracefulIgnoreSessions = (true|false) Boolean value specifying whether the \n graceful production to Admin mode operation should ignore pending HTTP \n sessions. This option defaults to false and only applies if \n gracefulProductionToAdmin is set to true. \n \n o gracefulProductionToAdmin = (true|false) Boolean value specifying whether \n the production to Admin mode operation should be graceful. This option \n defaults to false. \n \n o libImplVersion = Implementation version of the library, if it \n is not present in the manifest. \n \n o libraryModule = (true|false) Boolean value specifying whether the module \n is a library module. This option defaults to false. \n \n o libSpecVersion = Specification version of the library, if it \n is not present in the manifest. \n \n o planVersion = Plan version number. \n \n o retireGracefully = (true|false) Retirement policy to gracefully retire an \n application only after it has completed all in-flight work. This \n policy is only meaningful for stop and redeploy operations and is \n mutually exclusive to the retire timeout policy. \n \n o retireTimeout = Time (in seconds) WLST waits before retiring an \n application that has been replaced with a newer version. This option \n default to -1, which specifies graceful timeout. \n \n o rmiGracePeriod = Time (in seconds) WLST waits for RMI requests before \n retiring an application that has been replaced with a newer version. \n RMI requests arriving within a grace period of prior request scheduled \n within the grace period will be accepted, and otherwise rejected. This \n option default to -1, which specifies no grace period. \n \n o securityModel = Security model. Valid values include: DDOnly, \n CustomRoles, CustomRolesAndPolicy, and Advanced. \n \n o securityValidationEnabled = (true|false) Boolean value specifying whether \n security validation is enabled. \n \n o subModuleTargets = Submodule level targets for JMS modules. For example, \n submod@mod-jms.xml@target | submoduleName@target. \n \n o adminMode = (true|false) Boolean value specifying whether to start the Web \n application with restricted access. This option defaults to false. \n \n o timeout = Time (in milliseconds) that WLST waits for the \n deployment process to complete before canceling the operation. \n A value of 0 indicates that the operation will not time out. \n This argument defaults to 300,000 ms (or 5 minutes). \n \n o upload = (true|false) Boolean value specifying whether the application files \n are uploaded to the WebLogic Server Administration Server''s upload directory \n prior to deployment. Use this option when you are on a different machine \n from the Administration Server and you cannot copy the deployment files \n by other means. This option defaults to false. \n \n o remote = (true|false) Boolean value specifying whether the operation will \n be remote from the file system that contains the source. Use this option \n when you are on a different machine from the Administration Server and the \n deployment files are already at the specified location where the Administration \n Server is located. This option defaults to false. \n \n o versionIdentifier = Version identifier. \n
appendToExtensionLoader_shortDescription=Distributes code source jar to targets to extend the Weblogic Extension Loader.
appendToExtensionLoader_description=\nDistributes code source jar to targets. It adds the jars to the \nWebLogic Extension Loader's class search space for the running servers. \n
appendToExtensionLoader_syntax=appendToExtensionLoader([options]) \n- options = Optional. Comma-separated list of deployment options, \n specified as name-value pairs. Valid options include: \n o targets = A comma-separated list of server names, cluster names, \n or both. The default value is All. \n \n o source = Specifies the code source jar to distribute. \n \n o upload = Transfers the specified code source jar to the Administration \n Server before distribution. Use this option when you are on a remote \n machine and you cannot copy the code source jar to the Administration \n Server by other means. The code source jar is uploaded to the WebLogic \n Administration Server upload directory before the distribution. \n
exportDiagnosticData_shortDescription=Execute a query (offline).
exportDiagnosticData_description=\nExecutes a query against the specified log file. The results are \nsaved to an XML, CSV or TXT file. The default output format is XML. \n \nFor more information about the WebLogic Server Diagnostic Service, \nsee "Configuring and Using the WebLogic Diagnostic Framework" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
exportDiagnosticData_syntax=exportDiagnosticData([options]) \n- options = Optional. Comma-separated list of export diagnostic \n options, specified as name-value pairs. Valid options include: \n o beginTimestamp = Timestamp (inclusive) of the earliest record \n to be added to the result set. This option defaults to 0. \n \n o endTimestamp = Timestamp (exclusive) of the latest record to \n be added to the result set. This option defaults to Long.MAX_VALUE. \n \n o last = The timestamp range specification for the last n records. \n When specified the beginTimestamp and endTimestamp options are ignored. \n The format is "XXd YYh ZZm", for example "1d 5h 30m" specifies data that is 1 day, 5 hours and 30 minutes old. \n Any combination of day, hour and minute components in any order can be specified. \n \n o exportFileName = Full path to the file to which the data is exported. \n This option defaults to "export.xml" in the current directory. \n \n o logicalName = Logical name of the log file being read. Valid \n values include: HarvestedDataArchive, EventsDataArchive, ServerLog, \n DomainLog, HTTPAccessLog, WebAppLog, ConnectorLog, and JMSMessageLog. \n This option defaults to ServerLog. \n \n o logName = Full path to the base log filename containing the log data \n to be exported. This option defaults to "myserver.log" in the current \n directory. \n \n o logRotationDir = Directory containing the rotated log files. This \n option defaults to "." (current directory). \n \n o query = Expression specifying the filter condition for the data \n records to be included in the result set. This option defaults to '''' \n (empty string), which returns all data. For more information, \n see "WLDF Query Language" in "Configuring and Using the \n Weblogic Diagnostic Framework" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n o storeDir = Location of the diagnostic store for the server. This option \n defaults to ../data/store/diagnostics. \n \n o format = The format in which the data will be exported. \n The supported formats are xml, txt and csv. \n The default format is xml. \n
exportDiagnosticDataFromServer_shortDescription=Execute a query (online).
exportDiagnosticDataFromServer_description=\nExecutes a query on the server side and retrieves the exported \nWebLogic Diagnostic Framework (WLDF) data. The results are saved to \nan XML,CSV or TXT file. The default output format is XML. This command \nrequires that you have a secure connection to the Managed Server. \n \nFor more information about the WebLogic Server Diagnostic Service, \nsee "Configuring and Using the WebLogic Diagnostic Framework" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
exportDiagnosticDataFromServer_syntax=exportDiagnosticDataFromServer([options]) \n- options = Optional. Comma-separated list of export diagnostic \n options, specified as name-value pairs. Valid options include: \n o beginTimestamp = Timestamp (inclusive) of the earliest record to \n be added to the result set. This option defaults to 0. \n \n o endTimestamp = Timestamp (exclusive) of the latest record to be \n added to the result set. This option defaults to Long.MAX_VALUE. \n \n o exportFileName = Full path to the file to which the data is exported. \n This option defaults to "export.xml" in the current directory. \n \n o logicalName = Logical name of the log file being read. Valid \n values include: HarvestedDataArchive, EventsDataArchive, ServerLog, \n DomainLog, HTTPAccessLog, WebAppLog, ConnectorLog, and JMSMessageLog. \n This option defaults to ServerLog. \n \n o query = Expression specifying the filter condition for the data \n records to be included in the result set. This option defaults to '''' \n (empty string), which returns all data. \n \n o server = Name of the Managed Server for which to retrieve the data. \n This option works only with the Administration Server. By default, \n data is retrieved only from the server to which WLST is connected. \n \n o partition = Name of the partition from which data will be retrieved. \n \n o format = The format in which the data will be exported. \n The supported formats are xml, txt and csv. \n The default format is xml. \n \n o last = The timestamp range specification for the last n records. \n When specified the beginTimestamp and endTimestamp options are ignored. \n The format is "XXd YYh ZZm", for example "1d 5h 30m" specifies data that is 1 day, 5 hours and 30 minutes old. \n Any combination of day, hour and minute components in any order can be specified. \n
getAvailableCapturedImages_shortDescription=Returns the list of Diagnostic Images available for downloading.
getAvailableCapturedImages_description=\nReturns the set of previously captured Diagnostic Image files that are stored \nin the server's configured image destination directory. \n \nIn the event of an error, the command throws a WLSTException. \n
getAvailableCapturedImages_syntax=getAvailableCapturedImages(Server=None)\n \n o Server (optional, AdminServer only) server from which list of available images will be obtained. \n o partition (optional) Partition name from which list of available diagnostic images will be obtained.
purgeCapturedImages_shortDescription=Purges the image files on the server as per the age criteria specified.
purgeCapturedImages_description=\nPurges the diagnostic image files on the server as per the age criteria specified from the server's configured image destination directory. \n \nIn the event of an error, the command throws a WLSTException. \n
getPurgeImages_syntax=purgeCapturedImages(server=None, partition=None, age=None)\n \n o server (optional, AdminServer only) server from which list of available images will be purged. \n o partition (optional) Partition name from which the diagnostic images will be purged. If not specified, command will apply to all images on the server. \n o age: Purge diagnostic images older than specified age (format Days:Hours:Minutes, hours and minutes are optional). If not specified all the existing image files will be purged.
saveDiagnosticImageCaptureFile_shortDescription=Downloads a captured Diagnostic Image.
saveDiagnosticImageCaptureFile_description=Downloads the specified Diagnostic Image file from the currently \nconnected server to the local machine. \n \nIn the event of an error, the command throws a WLSTException. \n
saveDiagnosticImageCaptureFile_syntax=saveDiagnosticImageCaptureFile(imageName, outputFile=None, Server=None, partition=None) \n \n o imageName = The name of the Diagnostic Image file to download. \n \n o outputFile = (optional) Local path to store retrieved image file to. \n This option defaults to the same value as 'imageName' in the \n current working directory. \n \n o Server = (optional, AdminServer only) Name of the server from which image is retrieved. \n Note that while connected to the admin server and retrieving an image from a \n managed server, appropriate Server argument must be specified. \n \n o partition = (optional) Name of the Partition from which image is retrieved. \n
saveDiagnosticImageCaptureEntryFile_shortDescription=Downloads an entry from a captured Diagnostic Image.
saveDiagnosticImageCaptureEntryFile_description=Downloads an entry from the specified Diagnostic Image file on the \ncurrently connected server. \n \nIn the event of an error, the command throws a WLSTException. \n
saveDiagnosticImageCaptureEntryFile_syntax=saveDiagnosticImageCaptureEntryFile(imageName, imageEntryName, outputFile=None, Server=None, partition=None) \n \n o imageName = The name of the Diagnostic Image file containing the desired entry. \n \n o imageEntryName = The name of the Diagnostic Image entry to download; this can be \n one of the following: \n \n\timage.summary \n\tJTA.img \n\tJRockitFlightRecorder.jfr \n\tWatchSource.img \n\tconfiguration.img \n\tWORK_MANAGER.img \n\tJNDI_IMAGE_SOURCE.img \n\tAPPLICATION.img \n\tInstrumentationImageSource.img \n\tSAF.img \n\tLogging.img \n\tPERSISTENT_STORE.img \n\tJDBC.img \n\tPathService.img \n\tJMS.img \n\tDeployment.img \n\tJVM.img \n\tCONNECTOR.img \n \n o outputFile = (optional) Local path to store the retrieved image entry data to. \n This option defaults to the same value specified by 'imageEntryName' in the \n current working directory. \n \n o Server = (optional, AdminServer only) Server from which image entry is retrieved. Note that \n while connected to admin server and retrieving an image entry from a managed server, \n appropriate Server argument must be specified. \n \n o partition = (optional) Name of the Partition from which image entry is retrieved. \n
listSystemResourceControls_shortDescription=Lists all the System Resource Control MBeans available on this server or specified targets
listSystemResourceControls_description=Lists all the System Resource Control MBeans names available on this server or specified targets
listSystemResourceControls_syntax=listSystemResourceControls(Server=None, Target=None) \n \n o Target = (optional, AdminServer only) Comma separated list of servers and/or clusters \n o Server = (optional, AdminServer only) Target server name System Resource Controls will be listed from. Deprecated in favor of Target argument. \n
enableSystemResource_shortDescription=Enables a System Resource Control on a Server
enableSystemResource_description=Enables a System Resource on a Server
enableSystemResource_syntax=enableSystemResource(resourceName, Target=None, Server=None) \n \n o Target = (optional, AdminServer only) Comma separated list of server and cluster names where the system resource is deployed \n o Server = (optional, AdminServer only) Target server name. Deprecated in favor of Target argument. \n
disableSystemResource_shortDescription=Disables a System Resource Control on a Server
disableSystemResource_description=Disables a System Resource on a Server
disableSystemResource_syntax=disableSystemResource(resourceName, Target=None, Server=None) \n \n o Target = (optional, AdminServer only) Comma separated list of server and cluster names where the system resource is deployed \n o Server = (optional, AdminServer only) Target server name. Deprecated in favor of Target argument. \n
createSystemResourceControl_shortDescription=Creates a diagnostics resource from an external descriptor file. \n
createSystemResourceControl_description=Creates a diagnostics resource from a diagnostic descriptor file without \nchanging the domain configuration. \n
createSystemResourceControl_syntax=createSystemResourceControl(resourceName, descriptorFile, Target=None, Server=None, enabled="false") \n \n o resourceName = Name of the diagnostic resource \n o descriptorFile = Local path to the diagnostic descriptor file \n o Target = (optional, AdminServer only) comma separated list of target server and/or cluster names. \n o Server = (optional, AdminServer only) Target server name. Deprecated in favor of Target argument. \n o enabled = (optional) If set to "true", enables the system resource after creating it. \n \n Note that the resource can be enabled or disabled separately through the \n enableSystemResource() and disableSystemResource() functions, and the \n features in the resource itself must be enabled to be active. \n
destroySystemResourceControl_description=Destroys a diagnostics resource that was deployed from an external descriptor \nusing the createSystemResourceControl() function. \n
destroySystemResourceControl_shortDescription=Destroys a diagnostics resource deployed from an external descriptor. \n
destroySystemResourceControl_syntax=destroySystemResourceControl(resourceName, Target=None, Server=None) \n \n o resourceName = Name of the diagnostic resource \n o Target = (optional, AdminServer only) comma separated list of target server and/or cluster names where the resource is currently deployed \n o Server = (optional, AdminServer only) The name of the server where the resource is currently deployed. Deprecated in favor of Target argument. \n
dumpDiagnosticData_shortDescription=Dumps the diagnostics data from a harvester to a local file.
dumpDiagnosticData_description=Dumps the Harvester diagnostics data to the local file. \n The data will be written in CSV format.
dumpDiagnosticData_syntax=dumpDiagnosticData('resourceName', 'fileName', frequency, duration, Server=None, dateFormat="HH:mm:ss:SSS") \n \n o resourceName: The name of the System Resource where data is polled from. \n o fileName: Name of the file where data will be dumped. \n o frequency: The frequency at which data will be polled from the system resource harvester. \n o duration: The total duration for which the data will be collected and saved. \n o Server: (optional, AdminServer only) The name of the server where the System Resource is running \n o dateFormat: (optional) SimpleDateFormat pattern, default is "EEE MM/dd/YY k:mm:ss:SSS z"
mergeDiagnosticData_shortDescription=Merges a set of CSV data files generated previously via the dumpDiagnosticData() command into a single merged file.
mergeDiagnosticData_description=Merges a set of data files (generated previously by the dumpDiagnosticData() command) in the \nspecified directory into a single merged file. The data from all files in the specified \ndirectory will be consolidated and written to CSV format.
mergeDiagnosticData_syntax=mergeDiagnosticData(inputDir, toFile="merged.csv") \n \n o inputDir: The name of the source directory containing the diagnostic data files \n o toFile: Name of the target merged data file (defaults to "merged.csv") \n
captureAndSaveDiagnosticImage_shortDescription=Captures a diagnostic Image and retrieves locally.
captureAndSaveDiagnosticImage_description=Captures a diagnostic Image and retrieves locally.
captureAndSaveDiagnosticImage_syntax=captureAndSaveDiagnosticImage(Server=None,outputFile=None,outputDir=None,Target=None) \n \n o Server = (optional, AdminServer only) The name of the target server. Deprecated in favor of Target argument \n o partition = (optional) Name of the Partition from which image files will be retrieved. \n o outputFile = (optional). The file to which image will be saved \n o outputDir = Destination directory (default=current directory) where image files will be copied if multiple files are retrieved. \n o Target = (optional, AdminServer only) Comma separated list of servers and/or clusters \n
getAvailableDiagnosticDataAccessorNames_shortDescription=Gets the Diagnostic data accessor names currently available for a server or partition.
getAvailableDiagnosticDataAccessorNames_description=\nGets the logical names of Diagnostic data Accessor instances currently \navailable on a server or partition returned as an array of String values. \n \nIn the event of an error, the command throws a WLSTException. \n
getAvailableDiagnosticDataAccessorNames_syntax=getAvailableDiagnosticDataAccessorNames(server=None, partition=None)\n \n o server (optional, AdminServer only) Server from which list of available data Accessor names will be obtained. \n If server is not specified, the data is retrieved from from the current server to which WLST is connected. \n server argument is only applicable if WLST is connected to the Administration Server. \n \n o partition (optional) Partition from which list of available data Accessor names will be obtained.
exportHarvestedTimeSeriesData_shortDescription=Exports the harvested metric data within the specified interval as a time series in CSV format.
exportHarvestedTimeSeriesData_description=\nExports the harvested metric data from the diagnostic archive \nfor a Server or Partition scoped WLDFSystemResource. \n \nIn the event of an error, the command throws a WLSTException. \n
exportHarvestedTimeSeriesData_syntax=exportHarvestedTimeSeriesData(wldfSystemResource, server=None, partition=None, beginTimestamp=-1L, endTimestamp=-1L, exportFile='export.csv', dateFormat="EEE MM/dd/YY k:mm:ss:SSS z")\n \n o wldfSystemResource (required) The name of the WLDFSystemResource whose harvested data needs to be exported. \n o server (optional, AdminServer only) Server from the harvested data will be retrieved. \n If server is not specified, the data is retrieved from from the current server to which WLST is connected. \n server argument is only applicable if WLST is connected to the Administration Server. \n o partition (optional) Partition name for which the data will be exported. \n o beginTimestamp (optional) Beginning timestamp of the harvested data to be retrieved. \n o endTimestamp (optional) Ending timestamp of the harvested data to be retrieved. \n o last = The timestamp range specification for the last n records. \n When specified the beginTimestamp and endTimestamp options are ignored. \n The format is "XXd YYh ZZm", for example "1d 5h 30m" specifies data that is 1 day, 5 hours and 30 minutes old. \n Any combination of day, hour and minute components in any order can be specified. \n o exportFile (optional) The file path to which the data is written in CSV format. \n o dateFormat (optional) java.text.SimpleDateFormat pattern string in which timestamp for harvested data will be rendered.
exportHarvestedTimeSeriesDataOffline_shortDescription=Exports the harvested metric data in offline mode within the specified interval as a time series in CSV format.
exportHarvestedTimeSeriesDataOffline_description=\nExports the harvested metric data from the diagnostic archive \nfor a WLDFSystemResource in the offline mode when Server is not running. \n \nIn the event of an error, the command throws a WLSTException. \n
exportHarvestedTimeSeriesDataOffline_syntax=exportHarvestedTimeSeriesDataOffline(wldfSystemResource, beginTimestamp=-1L, endTimestamp=-1L, exportFile='export.csv', dateFormat="EEE MM/dd/YY k:mm:ss:SSS z", storeDir=".")\n \n o wldfSystemResource (required) The name of the WLDFSystemResource whose harvested data needs to be exported. \n o beginTimestamp (optional) Beginning timestamp of the harvested data to be retrieved. \n o endTimestamp (optional) Ending timestamp of the harvested data to be retrieved. \n o last = The timestamp range specification for the last n records. \n When specified the beginTimestamp and endTimestamp options are ignored. \n The format is "XXd YYh ZZm", for example "1d 5h 30m" specifies data that is 1 day, 5 hours and 30 minutes old. \n Any combination of day, hour and minute components in any order can be specified. \n o exportFile (optional) The file path to which the data is written in CSV format. \n o dateFormat (optional) java.text.SimpleDateFormat pattern string in which timestamp for harvested data will be rendered. \n o storeDir (optional) Path to the WLDF store dir. The diagnostic data store for a Server instance is located at data/store/diagnostics dir under the Server's root dir.
listDebugPatches_shortDescription=List activated and available debug patches on specified targets.
listDebugPatches_description=\nList activated and available debug patches on specified targets. While connected to the admin \nserver, the optional parameter "target" can be specified to list debug patches on multiple \nmanaged servers and clusters. If the "target" parameter is not specified, list of debug patches \nonly from the connected server will be displayed. \n
listDebugPatches_syntax=listDebugPatches(target=None)\n \n o target = (optional, on admin server only) Comma separated list of target servers and clusters \n
showDebugPatchInfo_shortDescription=Show details about a debug patch on specified targets.
showDebugPatchInfo_description=\nShow details about a debug patch on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to display debug patch information from \nmultiple managed servers and clusters. If the "target" parameter is not specified, only the \ninformation from connected server will be displayed. The information will include contents of \nthe debug patch along with the contents of README file, if it is present in the debug patch. \n
showDebugPatchInfo_syntax=showDebugPatchInfo(patch, target=None)\n \n o target = (optional, on admin server only) Comma separated list of target servers and clusters. \n
activateDebugPatch_shortDescription=Activate a debug patch on specified targets.
activateDebugPatch_description=\nActivate a debug patch on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to activate the debug patch on multiple \nmanaged servers and clusters. If the "target" parameter is not specified, the debug \npatch will be activated only on the connected server. \n
activateDebugPatch_syntax=activateDebugPatch(patch, app=None, module=None, partition=None, target=None)\n \n o patch = (required) Name of the debug patch to be activated. \n o app = (optional) Activate debug patch within the scope of specified application. \n\t\tIf not specified, the debug patch will be activated at the system level. \n o module = (optional) Activate debug patch within the scope of given module in the application. \n\t\tThis parameter is ignored if app=None (system level debug patch). \n o partition = (optional) Activate debug patch within the scope of given partition. \n\t\tThis parameter is ignored if app=None (system level debug patch). \n o target = (optional, on admin server only) Comma separated list of target servers and clusters \n where the patch will be activated. \n
deactivateDebugPatches_shortDescription=De-activate debug patches on specified targets.
deactivateDebugPatches_description=\nDeactivate a debug patch on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to deactivate the debug patch on multiple \nmanaged servers and clusters. If the "target" parameter is not specified, the debug \npatch will be deactivated only on the connected server. \n
deactivateDebugPatches_syntax=deactivateDebugPatches(patches, app=None, module=None, partition=None, target=None)\n \n o patches = (required) Comma separated list of the debug patches to be deactivated. \n o app = (optional) Deactivate debug patches within the scope of specified application. \n\t\tIf not specified, the debug patches will be deactivated at the system level. \n o module = (optional) Deactivate debug patches within the scope of given module in the application. \n\t\tThis parameter is ignored if app=None (system level debug patch). \n o partition = (optional) Deactivate debug patches within the scope of given partition. \n\t\tThis parameter is ignored if app=None (system level debug patch). \n o target = (optional, on admin server only) Comma separated list of target servers and clusters \n where the patch will be deactivated. \n
listDebugPatchTasks_shortDescription=List debug patch tasks from specified targets.
listDebugPatchTasks_description=\nList debug patch activation/deactivation tasks on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to list tasks from multiple managed servers and clusters. \nIf the "target" parameter is not specified, tasks from only the connected server will be listed. \n
listDebugPatchTasks_syntax=listDebugPatchTasks(target=None)\n \n o target = (optional, on admin server only) Comma separated list of target servers and clusters. \n
purgeDebugPatchTasks_shortDescription=Purge debug patch tasks from specified targets.
purgeDebugPatchTasks_description=\nPurge debug patch activation/deactivation tasks on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to purge tasks from multiple managed servers and clusters. \nIf the "target" parameter is not specified, tasks from only the connected server will be purged. Only completed, \nfailed or cancelled tasks will be purged. \n
purgeDebugPatchTasks_syntax=purgeDebugPatchTasks(target=None)\n \n o target = (optional, on admin server only) Comma separated list of target servers and clusters. \n
deactivateAllDebugPatches_shortDescription=De-activate all debug patches from specified targets.
deactivateAllDebugPatches_description=\nDeactivate all debug patches on specified targets. While connected to the admin server, \nthe optional parameter "target" can be specified to deactivate all debug patches from \nmultiple managed servers and clusters. If the "target" parameter is not specified, \ndebug patches from only the connected server will be deactivated. \n
deactivateAllDebugPatches_syntax=deactivateAllDebugPatches(target=None)\n \n o target = (optional, on admin server only) Comma separated list of target servers and clusters. \n
activate_shortDescription=Activate the changes.
activate_description=\nActivates changes saved during the current editing session but not yet \ndeployed. This command prints a message if a server restart is required \nfor the changes that are being activated. \n \nMultiple edit sessions with different names may coexist in the system. \nWhile making changes on a named edit session, a user of another edit session \ncan concurrently make configuration modifications and activate those changes. \nTo prevent inconsistent modifications, the system will check for any external \nconfiguration changes before every activation. Any non-conflicting concurrent \nmodifications will be automatically merged. In case an unreslovable conflict \nis found, the system will terminate the activation and return an error. To \nlist all the existing edit sessions use showEditSession() command. To reslove \npotential modifiation conflicts, look at the resolve() command documentation. \n \nThe activate command returns the latest ActivationTask MBean which \nreflects the state of changes that a user is currently making or has \nmade recently. You can then invoke methods to get information about the \nlatest Configuration Manager activate task in progress or just \ncompleted. \n \nIn the event of an error, the command returns a WLSTException. \n \n Note the following locking mechanism behaviors when using activate: \n \n o - When there are more connactions to the same edit sessions under the same \n user account using an exclusive lock, activating changes using activate() \n in one connection releases the lock for that session, allowing the next \n connection to obtain the lock. Therefore, there is no need to use \n cancelEdit() after activate() in the first connection to release the lock. \n Doing so will actually cancel the edit session for the next connection in \n the queue, potentially causing an excaption. \n o - There is only ever one lock for one edit session in a domain and only a \n single user can have it at any given time. Unless it is an exclusive lock, \n the user can acquire a lock from any number of connections. Each \n connection will add its changes to the existing set of changes. When \n activate() is called in any connection, all changes made up to that point \n by all sessions are activated. Similarly, when cancelEdit() is called \n in any connection, all changes made up to that point by all connections \n are cancelled, the lock will be released by that user, and an edit lock \n can then be acquired by another user. \n
activate_syntax=\nactivate([timeout], [block]) \n- timeout = Optional. Time (in milliseconds) that WLST waits for the \n activation of configuration changes to complete before canceling the \n operation. A value of -1 indicates that the operation will not time out. \n This argument defaults to 300000 ms, i.e. 5 minutes. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the command completes. This argument defaults \n to false, indicating that user interaction is not blocked. In this case, \n WLST returns control to the user after issuing the command and assigns \n the task MBean associated with the current task to a variable that you \n can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
assign_shortDescription=Assign resources to one or more destinations.
assign_description=\nAssigns resources to one or more destinations. In the event of an \nerror, the command returns a WLSTException. \n
assign_syntax=\nassign(sourceType, sourceName, destinationType, destinationName) \n- sourceType = Type of configuration bean to be assigned. This value \n can be set to one of the following values: \n o AppDeployment \n o Library \n o securityType (such as User) \n o Server \n o service (such as JDBCSystemResource) \n o service.SubDeployment, where service specifies the service type \n of the SubDeployment (such as JMSSystemResource.SubDeployment); you \n can also specify nested subdeployments (such as \n AppDeployment.SubDeployment.SubDeployment) \n \n Guidelines for setting this value are provided below. \n \n- sourceName = Name of the resource to be assigned. Multiple names can \n be specified, separated by commas, or you can use the wildcard (*) \n character to specify all resources of the specified type. Specify \n subdeployments using the following format: service.subDeployment, \n where service specifies the parent service and subDeployment \n specifies the name of the subdeployment. For example, \n myJMSResource.myQueueSubDeployment. You can also specify nested \n subdeployments, such as MedRecEAR.MedRecAppScopedJMS.MedRecJMSServer. \n \n- destinationType = Type of destination. Guidelines for setting this \n value are provided below. \n \n- destinationName = Name of the destination. Multiple names can be \n specified, separated by commas. \n \nUse the following guidelines for setting the sourceType and \ndestinationType: \n \n- When assigning application deployments, set the \n values as follows: \n o sourceType: AppDeployment \n o destinationType: Target \n \n- When assigning libraries, set the values as follows: \n o sourceType: Library \n o destinationType: Target \n \n- When assigning services, set the values as follows: \n o sourceType: Name of the specific server, such as JDBCSystemResource \n o destinationType: Target \n \n- When assigning servers to clusters, set the values as follows: \n o sourceType: Server \n o destinationType: Cluster \n \n- When assigning subdeployments, set the values as follows: \n o sourceType: service.SubDeployment, where service specifies the \n parent of the SubDeployment, such as JMSSystemResource.SubDeployment; \n you can also specify nested subdeployments (such as \n AppDeployment.SubDeployment.SubDeployment) \n o destinationType: Target \n \n- When assigning security types, set the values as follows: \n o sourceType: Name of the security type, such as User \n o destinationType: Name of the destination security type, such as Group \n
assignAll_shortDescription=(Deprecated) Assign all applications or services.
assignAll_description=\nNOTE: This command is deprecated for WebLogic Server 9.0. You should \nupdate your script to use the assign command as described in \nhelp(''assign''). This command will still operate on any resources that \nexist for the specified sourceType. \n \nAssigns all applications or services to one or more destinations. \nNote that you must assign JMS server and JMS distributed destinations \nusing the assign command. \n \nIn the event of an error, the command returns a WLSTException. \n
assignAll_syntax=assignAll(sourceType, destinationType, destinationName) \n- sourceType = Type of applications or services to be assigned. This \n value can be set to Applications or Services. \n \n- destinationType = Type of destination. This value must be set to \n Target. \n \n- destinationName = Name(s) of the destination. Multiple names can be \n specified, separated by commas. \n
cancelEdit_shortDescription=Cancel an edit session.
cancelEdit_description=\nCancels an edit session, releases the edit lock, and discards unsaved \nchanges. The user issuing this command does not have to be the current \neditor; this allows an administrator to cancel an edit session, if \nnecessary, to enable other users to start an edit session. \n \nIn the event of an error, the command returns a WLSTException. \n \nFor additional information about cancelEdit(), see the help for the \nactivate() command.
cancelEdit_syntax=cancelEdit([defaultAnswer]) \n- defaultAnswer = Optional. Default response, if you would prefer \n not to be prompted at the command line. Valid values are y and n. \n This argument defaults to null, and WLST prompts you for a response. \n
create_shortDescription=Create a configuration bean.
create_description=\nCreates a configuration bean for the current bean. The \ncreate command returns a stub for the newly created configuration bean. \nIn the event of an error, the command returns a WLSTException. \n \nChild types must be created under an instance of their parent type. You \ncan only create configuration beans that are children of the current \nConfiguration Management Object (cmo) type. For more information about \nthe cmo variable, see "Changing the Current Management Object" in \n"WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nNOTE: Because WLST Offline enables you to access and update the \nconfiguration objects that appear in the configuration files only, if you \nwish to view and/or change attribute values for a configuration object \nthat is not already persisted in the configuration files as an XML element, \nyou must first create the configuration object. \n \nPlease note the following when using the create command with WLST Online: \n- You must be connected to an Administration Server. You cannot use the \n create command when WLST is connected to a Managed Server instance. \n \n- You must navigate to the edit configuration MBean hierarchy using the \n edit command before issuing this command. See help(''edit''). \n \n- You can use the create command to create a WebLogic Server \n configuration MBean that is a child of the current MBean type. \n \nPlease note the following when using the create command with WLST Offline: \n- Use of periods (''.'') within configuration bean names may produce \n unexpected results. \n \nFor more information about: \no Creating MBeans, see "Understanding WebLogic Server MBeans" in \n "Developing Custom Management Utilities with JMX" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \no Examples of creating specific types of MBean resources, for example, \n a JMS or JDBC system resource, refer to the WLST sample scripts \n installed with your product, as described in "WLST Sample Scripts" \n in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \no MBeans, their child types, attributes, and operations, see \n "WebLogic Server MBean Reference" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
create_syntax=create(name, childMBeanType, [baseProviderType]) \n- name = Name of the configuration bean that you are creating. \n \n- childMBeanType = Type of configuration bean that you are creating. \n You can create instances of any type defined in the config.xml file \n except custom security types. For more information about valid \n configuration beans, see "WebLogic Server MBean Reference" \n at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- baseProviderType = When creating a security provider, \n specifies the base security provider type, for example, \n AuthenticationProvider. This argument defaults to None. \n
delete_shortDescription=Delete a configuration bean.
delete_description=\nDeletes an instance of a configuration bean of the specified type for \nthe current configuration bean. In the event of an error, the command \nreturns a WLSTException. \n \nYou can only delete configuration beans that are children of current \nConfiguration Management Object (cmo). For more information about \nthe cmo variable, see "Changing the Current Management Object" \nin "WebLogic Server Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
delete_syntax=delete(name, childMBeanType) \n- name = Name of the configuration bean that you are to delete. \n \n- childMBeanType = Type of the configuration bean to be deleted. You can \n delete instances of any type defined in the config.xml file. For more \n information about valid configuration beans, see "WebLogic Server \n MBean Reference" at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
get_shortDescription=Return the value of the specified attribute.
get_description=\nReturns the value of the specified attribute. For more information \nabout the MBean attributes that can be viewed, see "WebLogic Server \nMBean Reference" at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n \nYou can list all attributes and their current values by entering ls(''a''). \nFor more information, see help(''ls''). \n \nAlternatively, you can use the cmo variable to perform any get method \non the current configuration bean. For example: cmo.getListenPort(). \nFor more information about the cmo variable, see "Changing the \nCurrent Management Object" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
get_syntax=get(attName) \n- attrName = Name of the attribute to be displayed. You can \n specify the full pathname of the attribute. If no pathname is \n specified, the attribute is displayed for the current \n configuration object. \n
getActivationTask_shortDescription=Return the latest ActivationTaskMBean.
getActivationTask_description=\nReturn the latest ActivationTask MBean on which a user can get status. \nThe ActivationTask MBean reflects the state of changes that a user is \ncurrently making or has made recently in WLST. You can then invoke \nmethods to get information about the latest Configuration Manager \nactivate task in progress or just completed. \n \nIn the event of an error, the command returns a WLSTException. \n
getActivationTask_syntax=getActivationTask() \n
getMBean_shortDescription=Return the MBean by browsing to path.
getMBean_description=\nReturns the MBean by browsing to the specified path. In the \nevent of an error, the command returns a WLSTException. \n \nNOTE: No exception is thrown if the MBean is not found. \n
getMBean_syntax=getMBean(mbeanPath) \n- mbeanPath = Path name to the MBean in the current hierarchy. \n
getPath_shortDescription=Return the MBean path.
getPath_description=\nReturns the MBean path for the specified MBean instance or ObjectName for \nthe MBean in the current tree. In the event of an error, the \ncommand returns a WLSTException. \n
getPath_syntax=getPath(mbean) \n- mbean = MBean instance or ObjectName for the MBean in the current tree \n for which you want to return the MBean path. \n
invoke_shortDescription=Invoke a management operation on the current bean.
invoke_description=\nInvokes a management operation on the current configuration bean. \nTypically, you use this command to invoke operations other than the \nget and set operations that most WebLogic Server configuration beans \nprovide. The class objects are loaded through the same class loader \nthat is used for loading the configuration bean on which the action is \ninvoked. You cannot use the invoke command when WLST is connected to a \nManaged Server instance. \n \nIf successful, the invoke command returns the object that is returned \nby the operation invoked. In the event of an error, the command \nreturns a WLSTException. \n
invoke_syntax=invoke(methodName, parameters, signatures) \n- methodName = Name of the method to be invoked. \n \n- parameters = An array of parameters to be passed to the method call. \n \n- signature = An array containing the signature of the action. \n
isRestartRequired_shortDescription=Determine whether a server restart is required.
isRestartRequired_description=\nDetermines whether a server restart is required. If you invoke this \ncommand while an edit session is in progress, the response is based on \nthe edits that are currently in progress. If you specify the name of an \nattribute, WLST indicates whether a server restart is required for that \nattribute only. \n \nIn the event of an error, the command returns a WLSTException. \n
isRestartRequired_syntax=isRestartRequired([attributeName]) \n- attributeName = Optional. Name of a specific attribute for which you \n want to check if a server restart is required. \n
loadDB_shortDescription=Load SQL files into a database.
loadDB_description=\nLoads SQL files into a database. The loadDB command loads the SQL files from \na template file. This command can only be issued after a domain template or \nextension template has been loaded into memory using the readTemplate or \naddTemplate command, respectively. \n \nBefore executing this command, ensure that the following conditions are true: \n- The appropriate database is running. \n \n- SQL files exist for the specified database and version. To verify \n that the appropriate SQL files exist, open the domain template and \n locate the relevant SQL file list, jdbc.index, in the _jdbc_ \n directory. For example, for PointBase version 4.4, the SQL file list \n is located at _jdbc_\Pointbase\44\jdbc.index. \n \nThe command fails if the above conditions are not met. \n \nIn the event of an error, the command returns a WLSTException. \n
loadDB_syntax=loadDB(dbVersion, connectionPoolName) \n- dbVersion = Version of the database for which the SQL files are \n intended to be used. \n \n- connectionPoolName = Name of the JDBC connection pool to be used \n to load SQL files. \n
loadProperties_shortDescription=Load property values from a file.
loadProperties_description=\nLoads property values from a file and makes them available in the \nWLST session. \n \nThis command cannot be used when you are importing WLST as a Jython module. \nFor more information, see "Importing WLST as a Jython Module" in "WebLogic \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
loadProperties_syntax=loadProperties(fileName) \n- fileName = Properties file pathname. \n
save_shortDescription=Save the edits that have been made.
save_description=\nSaves the edits that have been made but have not yet been saved. This \ncommand is only valid when an edit session is in progress. For \ninformation about starting an edit session, see help(''startEdit''). \n \nIn the event of an error, the command returns a WLSTException. \n
save_syntax=save() \n
set_shortDescription=Set the specified attribute value.
set_description=\nSets the specified attribute value for the current configuration bean. \nFor more information about the MBean attributes that can be set, see \n"WebLogic Server MBean Reference" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n \nYou can list all attributes and their current values by entering \nls(''a''). For more information, see help(''ls''). \n \nWhen you use this command for a domain configuration MBean, the \nnew values are saved in the config.xml file. Please note the following \nwhen using WLST Online: \n- You cannot use the set command when WLST is connected to a Managed \n Server instance. \n \n- While you cannot use WLST to change the values of MBeans on Managed \n Servers, it is possible to use the Management APIs to do so. \n Oracle recommends that you change only the values of \n configuration MBeans on the Administration Server. Changing the \n values of MBeans on Managed Servers can lead to an inconsistent \n domain configuration. \n \nAlternatively, you can use the cmo variable to perform any set \nmethod on the current configuration bean. For more information about \nthe cmo variable, see "Changing the Current Management Object" in \n"WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
set_syntax=set(attrName, value) \n- attrName = Name of the attribute to be set. \n \n- value = Value of the attribute to be set. This value should \n not be enclosed in single or double quotes. \n
setOption_shortDescription=Set options related to a domain creation or update.
setOption_description=\nSets options related to a domain creation or update. In the event \nof an error, the command returns a WLSTException. \n
setOption_syntax=setOption(optionName, optionValue) \n- optionName = Name of the option to set. \n Available options for domain creation include: \n o DomainName = Name of the domain. By default, the name of \n the domain is derived from the name of the domain directory. \n For example, for a domain saved to \n c:/Oracle/Middleware/user_projects/domains/myMedrec, the domain name is \n myMedrec. By setting DomainName, the name of the created \n domain will be independent of the domain directory name. \n \n o JavaHome = Home directory for the JVM to be used when \n starting the server. This option defaults to the Sun JDK \n installed with the product. \n \n o OverwriteDomain = Boolean value specifying whether \n to allow an existing domain to be overwritten. This option \n defaults to false. \n \n o ServerStartMode = Mode to use when starting the server for \n the newly created domain. This value can be dev (development) \n or prod (production). This option defaults to dev. \n \n Available options for domain upgrades include: \n o AllowCasualUpdate = Boolean value specifying whether \n to allow a domain to be updated without adding an extension \n template. The default is true. This option defaults to true. \n \n o ReplaceDuplicates = Boolean value specifying whether \n to keep original configuration elements in the domain or replace \n the elements with corresponding ones from an extension template \n when there is a conflict. This option defaults to true. \n \n Available options for both domain creation and domain upgrades \n include: \n o AppDir = Application directory to be used when a separate \n directory is desired for applications, as specified by the \n template. This option defaults to \n BEAHOME/user_projects/applications/domainname, where BEAHOME \n specifies the home directory and domainname specifies the \n name of the domain. \n \n o AutoAdjustSubDeploymentTarget = Boolean value \n specifying whether WLST automatically adjusts targets for \n the subdeployments of AppDeployments. This option defaults \n to true. To deactivate this feature, set the option to \n false and explicitly set the targeting for AppDeployment \n subdeployments before writing or updating the domain or \n domain template. \n \n o AutoDeploy = Boolean value specifying whether \n to activate auto deployment when a cluster or multiple \n Managed Servers are created. This option defaults to true. \n To deactivate this feature, set the option to false on the \n first line of your script. \n \n o NodeManagerType = Node Manager Type to be used to create \n a node manager for the domain. This option defaults to \n "PerDomainNodeManager". This value can be PerDomainNodeManager, \n CustomLocationNodeManager or ManualNodeManagerSetup. \n \n o NodeManagerHome = Node Manager home is a node manager directory to be \n created for the domain. This option is used when node manager type is \n CustomLocationNodeManager. \n \n o OldNodeManagerHome = A Node Manager home directory from which the existing \n configuration is taken for Node Manager upgrade during domain reconfiguration. \n This option applies only when the Node Manager upgrade type is "Migrate". \n \n o NodeManagerUpgradeType = Node Manager upgrade can be "New" or "Migrate". \n "New" does not use an old Node Manager configuration and creates the \n specified type of Node Manager. "Migrate" migrates the Node Manager configuration \n from the Node Manager home specified by the "OldNodeManagerHome" option. \n This option is used for upgrading Node Manager during domain reconfiguration when \n the Node Manager type is either PerDomainNodeManager or CustomLocationNodeManager. \n \n o NodeManagerUpgradeOverwriteDefault = A boolean flag that is used to overwrite the \n Oracle-recommended default values for mandatory Node Manager configuration. This \n option is used only when Node Manager upgrade type is "Migrate". The default value is false. \n \n- optionValue = Value for the option. Note that boolean values can be \n specified as a String (true, false) or integer (0, 1). \n
showChanges_shortDescription=Show the current changes that were made.
showChanges_description=\nShows the changes made by the current user to the configuration \nduring the current edit session. In the event of an error, the \ncommand returns a WLSTException. \n
showChanges_syntax=showChanges([onlyInMemory]) \n- onlyInMemory = Optional. Boolean value specifying whether to \n display only the changes that have not yet been saved. This argument \n defaults to false, indicating that all changes that have been made \n from the start of the session are displayed. \n
startEdit_shortDescription=Start a configuration edit session.
startEdit_description=\nStarts an actual configuration edit session on behalf of the currently \nconnected user. You must navigate to the edit configuration MBean \nhierarchy using the edit command before issuing this command. For \nmore information, see help(''edit''). \n \nThis command must be called prior to invoking any command to modify \nthe domain configuration. \n \nIn the event of an error, the command returns a WLSTException. \n \nNOTE: WLST automatically starts an edit session if it detects that \nthere is an edit session that is already in progress by the same user, \nwhich may have been started via the Administration Console or another \nWLST session. \n
startEdit_syntax=\nstartEdit([waitTimeInMillis], [timeoutInMillis], [exclusive]) \n- waitTimeInMillis = Optional. Time (in milliseconds) that WLST waits \n until it gets a lock, in the event that another user has a lock. This \n argument defaults to 0 ms. \n \n- timeoutInMillis = Optional. Time (in milliseconds) that WLST waits \n to release the edit lock. This argument defaults to -1 ms, indicating that \n this edit session never expires. \n \n- exclusive = Optional. Specifies whether the edit session should be an \n exclusive session. If set to true, if the same owner enters the startEdit \n command, WLST waits until the current edit session lock is released before \n starting the new edit session. The exclusive lock times out according to \n the time specified in timeoutInMillis. This argument defaults to false. \n
stopEdit_shortDescription=Stop current edit session and release lock.
stopEdit_description=\nStops the current edit session, releases the edit lock, and discards \nunsaved changes. In the event of an error, the command returns \na WLSTException. \n
stopEdit_syntax=stopEdit([defaultAnswer]) \n- defaultAnswer = Optional. Default response, if you would prefer \n not to be prompted at the command line. Valid values are y and n. This \n argument defaults to null, and WLST prompts you for a response. \n
unassign_shortDescription=Unassign applications or resources.
unassign_description=\nUnassign applications or resources from one or more destinations. \nIn the event of an error, the command returns a WLSTException. \n
unassign_syntax=\nunassign(sourceType, sourceName, destinationType, destinationName) \n- sourceType = Type of configuration bean to be unassigned. This value \n can be set to one of the following values: \n o AppDeployment \n o Library \n o securityType (such as User) \n o Server \n o service (such as JDBCSystemResource) \n o service.SubDeployment, where service specifies the service type \n of the SubDeployment (such as JMSSystemResource.SubDeployment); you \n can also specify nested subdeployments (such as \n AppDeployment.SubDeployment.SubDeployment) \n \n- sourceName = Name of the resource to be assigned. Multiple names can \n be specified, separated by commas, or you can use the wildcard (*) \n character to specify all resources of the specified type. Specify \n subdeployments using the following format: service.subDeployment, \n where service specifies the parent service and subDeployment specifies \n the name of the subdeployment. For example, \n myJMSResource.myQueueSubDeployment. You can also specify nested \n subdeployments, such as MedRecEAR.MedRecAppScopedJMS.MedRecJMSServer. \n \n- destinationType = Type of destination. Guidelines for setting this \n value are provided below. \n \n- destinationName = Name of the destination. Multiple names can be \n specified, separated by commas. \n \nUse the following guidelines for setting the sourceType and \ndestinationType: \n \n- When unassigning application deployments, set the \n values as follows: \n o sourceType: AppDeployment \n o destinationType: Target \n \n- When unassigning libraries, set the values as follows: \n o sourceType: Library \n o destinationType: Target \n \n- When unassigning security types, set the values as follows: \n o sourceType: Name of the security type, such as User \n o destinationType: Name of the destination security type, such as Group \n \n- When unassigning servers from clusters, set the values as follows: \n o sourceType: Server \n o destinationType: Cluster \n \n- When unassigning services, set the values as follows: \n o sourceType: Name of the specific server, such as JDBCSystemResource \n o destinationType: Target \n \n- When unassigning subdeployments, set the values as follows: \n o sourceType: service.SubDeployment, where service specifies the parent \n of the SubDeployment, such as JMSSystemResource.SubDeployment; you can \n also specify nested subdeployments (such as \n AppDeployment.SubDeployment.SubDeployment) \n o destinationType: Target \n
unassignAll_shortDescription=(Deprecated) Unassign all applications or services.
unassignAll_description=\nNOTE: This command is deprecated for WebLogic Server 9.0. You should \nupdate your script to use the assign command as described in \nhelp(''assign''). This command will still operate on any resources that \nexist for the specified sourceType. \n \nUnassigns all applications or services from one or more destinations. \nIn the event of an error, the command returns a WLSTException. \n
unassignAll_syntax=unassignAll(sourceType, destinationType, destinationName) \n- sourceType = Type of applications or services to be unassigned. This \n value can be set to Applications or Services. \n \n- destinationType = Type of destination. This value must be set to \n ''Target''. \n \n- destinationName = Name(s) of the destination. Multiple names can be \n specified, separated by commas. \n
undo_shortDescription=Revert all unsaved or unactivated edits.
undo_description=\nReverts all unsaved or unactivated edits. You specify whether to \nrevert all unactivated edits (including those that have been saved to \ndisk), or all edits made since the last save operation. This command \ndoes not release the edit session. \n \nIn the event of an error, the command returns a WLSTException. \n
undo_syntax=undo([unactivatedChanges], [defaultAnswer]) \n- unactivatedChanges = Optional. Boolean value specifying whether you \n want to undo all unactivated changes, including edits that have been \n saved to disk. This argument defaults to false, indicating that all \n edits since the last save operation are reverted. \n \n- defaultAnswer = Optional. Default response, if you would prefer \n not to be prompted at the command line. Valid values are y and n. \n This argument defaults to null, and WLST prompts you for a response. \n
validate_shortDescription=Validate the changes that have been made.
validate_description=\nValidates the changes that have been made but have not yet been saved. \nThis command enables you to verify that all changes are valid before \nsaving them. \n \nIn the event of an error, the command returns a WLSTException. \n
validate_syntax=validate() \n
configToScript_shortDescription=Convert a domain configuration to WLST script.
configToScript_description=\nConverts an existing server configuration (config directory) to an \nexecutable WLST script. You can use the resulting script to re-create \nthe resources on other servers. NOTE: pack and unpack are now the \nrecommended tools to create WebLogic domains and templates. configToScript \nwill be deprecated in a future release. \n \nBefore running the generated script, you should update the properties \nfile to specify values that are appropriate for your environments. \nWhen you run the generated script: \n- If a server is currently running, WLST will try to connect using the \n values in the properties file and then run the script commands to \n create the server resources. \n \n- If no server is currently running, WLST will start a server with the \n values in the properties file, run the script commands to create the \n server resources, and shutdown the server. This may cause you to exit \n from the WLST shell. \n \nThe configToScript command creates a user configuration file and an \nassociated key file to store encrypted attributes. The user \nconfiguration file contains the encrypted information. The key file \ncontains a secret key that is used to encrypt and decrypt the encrypted \ninformation. \n \nIn the event of an error, the command returns a WLSTException. \n
configToScript_syntax=\nconfigToScript([configPath], [pyPath], [overwrite], \n[propertiesFile], [createDeploymentScript]) \n- configPath = Optional. Path to the config directory that contains the \n configuration that you want to convert. This argument defaults to \n ./config. \n \n- pyPath = Optional. Path and filename to which you want to write \n the converted WLST script. This argument defaults to ./config/config.py. \n \n- overwrite = Optional. Boolean value specifying whether the script \n file should be overwritten if it already exists. This argument defaults \n to true, indicating that the script file is overwritten. \n \n- propertiesFile = Optional. Path to which you want WLST to write the \n properties files. This argument defaults to the pathname specified for \n the scriptPath argument. \n \n- createDeploymentScript = Optional. Boolean value specifying whether \n WLST creates a script that performs deployments only. This argument \n defaults to false, indicating that a deployment script is not created. \n
dumpStack_shortDescription=Display stack trace from the last exception.
dumpStack_description=\nDisplays stack trace from the last exception that occurred while \nperforming a WLST action, and resets the stack trace. \n \nIf successful, the dumpstack command returns the Throwable object. \nIn the event of an error, the command returns a WLSTException. \n
dumpStack_syntax=dumpStack() \n
dumpVariables_shortDescription=Display all the variables used by WLST.
dumpVariables_description=\nDisplays all the variables used by WLST, including their name and value. \nIn the event of an error, the command returns a WLSTException. \n
dumpVariables_syntax=dumpVariables() \n
find_shortDescription=Find MBeans and attributes.
find_description=\nFinds MBeans and attributes in the current hierarchy. WLST returns the \npathname to the MBean that stores the attribute and/or attribute type, \nand its value. If searchInstancesOnly is set to false, this command \nalso searches the MBeanType paths that are not instantiated in the \nserver, but that can be created. \n \nIn the event of an error, the command returns a WLSTException. \n
find_syntax=\nfind([name], [type], [searchInstancesOnly]) \n- name = Optional. Name of the attribute to find. \n \n- type = Optional. Type of the attribute to find. \n \n- searchInstancesOnly = Optional. Boolean value specifying whether to \n search registered instances only or to also search MBeanTypes \n paths that are not instantiated in the server, but that can be \n created. This argument defaults to true, indicating only the \n registered instances will be searched. \n
getConfigManager_shortDescription=Return the ConfigurationManagerMBean.
getConfigManager_description=\nReturns the ConfigurationManagerMBean which manages the \nchange process. You can then invoke methods to manage configuration \nchanges. \n \nProvided ConfigurationManagerMBean is related to the actual or last \nused named edit session. \n \nIn the event of an error, the command returns a WLSTException. \n
getConfigManager_syntax=getConfigManager() \n
getMBI_shortDescription=Return the MBeanInfo.
getMBI_description=\nReturns the MBeanInfo for the specified MBeanType or the cmo variable. \nIn the event of an error, the command returns a WLSTException. \n
getMBI_syntax=getMBI([mbeanType]) \n- mbeanType = Optional. MBeanType for which the MBeanInfo is displayed. \n
listChildTypes_shortDescription=List all the child MBeans for the cmo.
listChildTypes_description=\nLists all the child MBeans that can be created or deleted for the \ncmo. The cmo variable specifies the configuration bean instance \nto which you last navigated using WLST. For more information about the \ncmo variable, see "Changing the Current Management Object" in "WebLogic \nScripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
listChildTypes_syntax=listChildTypes([parent]) \n- parent = Optional. Parent type for which you want the children \n types listed. \n
ls_shortDescription=List all the child beans and/or attributes.
ls_description=\nLists all the child beans and/or attributes for the current \nconfiguration or runtime bean. You can optionally control the output \nby specifying an argument. If no argument is specified, the command \nlists all child beans and attributes in the domain. The output is \nreturned as a string. \n \nNOTE: Because WLST Offline enables you to access and update the \nconfiguration objects that appear in the configuration files only, if you \nwish to view and/or change attribute values for a configuration object \nthat is not already persisted in the configuration files as an XML element, \nyou must first create the configuration object. \n \nNOTE: Because WLST online caches child beans for performance reasons, an ls() \nmay not return child beans that were created in another process since the \ninitial ls() for the current bean. If a child bean is not present, \nthen cd to the parent directory and then back to refresh the cache. \n \nIn the event of an error, the command returns a WLSTException. \n \nThe following describes the property information that appears in the \nleft-hand column of the ls command output. \n \nNOTE: The property information is based on the MBeanInfo; it does not \nreflect user permissions. \n- d = Configuration or runtime bean with which you can use the cd \n command; analogous to a directory in a UNIX or Windows file \n system. \n- r = Readable property. \n- w = Writable property. \n- x = Executable property. \n
ls_syntax=ls( [''a'' | ''c'' | ''o'' | moPath], [returnMap], [returnType], [inheritance]) \n- a = Optional. Displays all the attribute names and values for the \n current configuration or runtime bean. If the attribute is \n encrypted, WLST displays six asterisks (******). \n \n- c = Optional. Displays all the child configuration beans that are \n contained in the current configuration or runtime bean. This argument \n is the default. \n \n- o = Optional. This argument is only applicable when you are online \n (that is, WLST is connected to a running server). Displays all \n operations that can be invoked on the current runtime MBean. \n Operations are not shown for configuration MBeans. \n \n- mbeanPath = Optional. Path name to the MBean in the current \n hierarchy for which you want to list all child beans and attributes. \n \n- returnMap = Optional. Boolean value specifying whether to return \n a map containing the return values. If specified with the c argument, \n WLST returns a list of objects that contain all the children and \n referral MBean names. If specified with the a argument, WLST returns \n a HashMap of attribute name-value pairs. This argument defaults to \n false, indicating that no map is returned; in this case, WLST \n returns a String. \n \n- returnType = Optional. Controls the output returned in the map. This \n argument can be set to ''a'', ''c'' or ''o'', and is only valid if returnMap \n is set to true. This argument defaults to ''c''. \n \n- inheritance = Optional. Boolean value specifying whether to include inheritance \n information for each attribute value. If specified, then WLST will identify \n attribute values that are inherited from a template by appending the value \n with an (Inherited) suffix. This argument defaults to false. \n
redirect_shortDescription=Redirect WLST output to the specified filename.
redirect_description=\nRedirects WLST output to the specified filename. In the event of \nan error, the command returns a WLSTException. \n
redirect_syntax=redirect(outputFile, [toStdOut]) \n- outputFile = Name of the file to which you want to record the WLST \n commands. The filename can be absolute or relative to the directory \n from which you enter the command. \n \n- toStdOut = Optional. Boolean value specifying whether the output \n should be sent to stdout. This argument defaults to true, indicating \n that the output will be sent to stdout. \n
removeListener_shortDescription=Remove a listener that was previously defined.
removeListener_description=\nRemoves a listener that was previously defined. If you do not specify an \nargument, WLST removes all listeners defined for all MBeans. For \ninformation about setting a listener, see help(''addListener''). \n \nIn the event of an error, the command returns a WLSTException. \n
removeListener_syntax=\nremoveListener([mbean], [listenerName]) \n- mbean = Optional. Name of the MBean or MBean object for which you \n want to remove the previously defined listeners. \n \n- listenerName = Optional. Name of the listener to be removed. \n
showListeners_shortDescription=Show all listeners that are currently defined.
showListeners_description=\nShows all listeners that are currently defined. For information about \nsetting a listener, see help(''addListener''). \n \nIn the event of an error, the command returns a WLSTException. \n
showListeners_syntax=showListeners() \n
startRecording_shortDescription=Record all user interactions with WLST.
startRecording_description=\nRecords all user interactions with WLST. This command is useful for \ncapturing commands for replay. This command cannot be used when you \nare importing WLST as a Jython module. For more information, see \n"Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
startRecording_syntax=\nstartRecording(recordFile, [recordAll]) \n- recordFile = Name of the file to which you want to record the WLST \n commands. The filename can be absolute or relative to the directory \n from which you invoked WLST. \n \n- recordAll = Optional. Boolean value specifying whether to capture \n all user interactions in the file. This argument defaults to false, \n indicating that only WLST commands are captured, and not WLST command \n output. \n
state_shortDescription=Return a map of servers/clusters and their state.
state_description=\nUsing Node Manager, returns a map of servers, clusters, or system \ncomponents and their state. \nNode Manager must be running. For more information about server \nstates, see "Understanding Server Life Cycle" in "Managing Server \nStartup and Shutdown" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
state_syntax=state(name, [type], [returnMap]) \n- name = Name of the server, cluster, or system component for which you want to retrieve \n the current state. \n \n- type = Optional. Type is Server, Cluster, or SystemComponent. If not specified, \n WLST will look for a server, cluster, or system component with the specified \n name. \n \n- returnMap = Optional. Boolean value specifying whether to return \n a map containing the return values. If returnMap is true, indicating that WLST \n returns a map of all states. This argument defaults to false, indicating that \n no map is returned. \n
stopRecording_shortDescription=Stop recording WLST commands.
stopRecording_description=\nStops recording WLST commands. For information about starting a record, \nsee help(''startRecording''). \n \nIn the event of an error, the command returns a WLSTException. \n
stopRecording_syntax=stopRecording() \n
stopRedirect_shortDescription=Stop redirection of WLST output.
stopRedirect_description=\nStops the redirection of WLST output to a file, if redirection is in progress. \nIn the event of an error, the command returns a WLSTException. \n
stopRedirect_syntax=stopRedirect() \n
storeUserConfig_shortDescription=Create a user configuration and key file.
storeUserConfig_description=\nCreates a user configuration file and an associated key file. The user \nconfiguration file contains an encrypted username and password. The key \nfile contains a secret key that is used to encrypt and decrypt the \nusername and password. \n \nOnly the key file that originally encrypted the username and password \ncan be used to decrypt the values. If you lose the key file, you must \ncreate a new user configuration and key file pair. \n \nIn the event of an error, the command returns a WLSTException. \n
storeUserConfig_syntax=storeUserConfig([userConfigFile], [userKeyFile], [nm]) \n- userConfigFile = optional. Name of the file to store the user configuration. \n The filename can be absolute or relative to the directory from which \n you enter the command. If not specified, the user-configuration file \n directory defaults to the JVM user-home directory. This directory value \n varies depending upon the SDK and type of operating system. The filename \n defaults to the operating system username prepended to \n WebLogicConfig.properties. For example, username-WebLogicConfig.properties. \n \n- userKeyFile = optional. Name of the file to store the key information \n that is associated with the user configuration file that you specify. \n The pathname can be absolute or relative to the directory from which you \n enter the command. If not specified, the key file directory defaults \n to the JVM user-home directory. This directory value varies depending \n upon the SDK and type of operating system. The filename defaults to the \n operating system username prepended to WebLogicKey.properties. For example, \n username-WebLogicKey.properties. \n \n- nm = Optional. Boolean value specifying whether to store the username \n and password for Node Manager or WebLogic Server. If set to true, \n the Node Manager username and password is stored. This argument \n default to false. \n
threadDump_shortDescription=Display a thread dump for the specified server.
threadDump_description=\nDisplays a thread dump for the specified server. In the event of an \nerror, the command returns a WLSTException. \n
threadDump_syntax=\nthreadDump([writeToFile], [fileName], [serverName]) \n- writeToFile = Optional. Boolean value specifying whether you want \n to save the output to a file. This argument defaults to true, \n indicating that output is saved to a file. \n \n- fileName = Optional. Name of the file to which the output is written. \n The filename can be absolute or relative to the directory where WLST \n is running. This argument defaults to Thread_Dump_serverName file, \n where serverName indicates the name of the server. This argument is \n valid only if writeToFile is set to true. \n \n- serverName = Optional. Server name for which the thread dump is \n requested. This argument defaults to the server to which WLST is \n connected. If you are connected to an Administration Server, you \n can display a thread dump for the Administration Server and any \n Managed Server that is running in the domain. If you are connected \n to a Managed Server, you can only display a thread dump for that \n Managed Server. \n
addListener_shortDescription=Add a JMX listener to the specified MBean.
addListener_description=\nAdds a JMX listener, to the specified MBean. Any changes made \nto the MBean are reported to standard out and/or are saved to the \nspecified configuration file. \n \nIn the event of an error, the command returns a WLSTException. \n
addListener_syntax=addListener(mbean, [attributeNames], [logFile], [listenerName]) \n- mbean = Name of the MBean or MBean object to listen on. \n \n- attributeNames = Optional. Comma-separated list of all attribute \n names on which you would like to add a listener. This argument defaults \n to null, and adds a listener for all attributes. \n \n- logFile = Optional. Name and location of the log file to which you \n want to write listener information. This argument defaults to standard out. \n \n- listenerName = Optional. Name of the listener. This argument defaults to a \n WLST generated name. \n
viewMBean_shortDescription=Display information about an MBean.
viewMBean_description=\nDisplays information about an MBean, such as the attribute names \nand values, and operations. In the event of an error, the command \nreturns a WLSTException. \n
viewMBean_syntax=viewMBean(mbean) \n- mbean = MBean for which you want to display information. \n
writeIniFile_shortDescription=Convert WLST definitions to Python file.
writeIniFile_description=\nConverts WLST definitions and method declarations to a Python (.py) \nfile to enable advanced users to import them as a Jython module. \nAfter importing, the definitions and method declarations are \navailable to other Jython modules and can be accessed directly \nusing Jython syntax. For more information, see \n"Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
writeIniFile_syntax=writeIniFile(filePath) \n- filePath = Full pathname to the file to which you want to save the converted \n information. \n
migrate_shortDescription=Migrate JTA, JMS or Server services.
migrate_description=\nMigrates a JTA and/or JMS related services to a targeted server within a \ncluster, or migrates a migratable server from one machine to another machine. \nIn the event of an error, the command returns a WLSTException. \n
migrate_syntax=migrate(sname, destinationName, [sourceDown], [destinationDown], [migrationType]) \n- sname = Name of the migratable target or migratable server from which the \n services/server should be migrated. \n \n- destinationName = Name of the server or machine to which you want to migrate \n the services. \n \n- sourceDown = Optional. Boolean value specifying whether the source \n server is down. This argument defaults to true, indicating that the \n source server is not running. \n \n When migrating JTA services, the sourceDown argument is ignored, if \n specified, and defaults to true. The source server must be down in \n order for the migration of JTA services to succeed. \n \n- destinationDown = Optional. Boolean value specifying whether the \n destination server is down. This argument defaults to false, indicating \n that the destination server is running. \n \n If the destination is not running, and you do not set this argument \n to true, WLST returns a MigrationException. \n \n When migrating a JMS service to a non-running server instance, the \n server instance will activate the JMS service upon the next startup. \n When migrating the JTA Transaction Recovery Service to a non-running \n server instance, the target server instance will assume recovery services \n when it is started. \n \n- migrationType = Optional. Type of service(s) that you want to migrate. \n Valid values include: \n o jms = Migrate JMS-related services (JMS server, SAF agent, path service, \n and the WebLogic persistent store) only \n o jta = Migrate JTA services only. \n o all = Migrate all JMS related services and JTA services. \n o server = Migrate a migratable server. \n This argument defaults to all. \n
resume_shortDescription=Resume a server instance.
resume_description=\nResumes a server instance that is suspended or in ADMIN state. This \ncommand moves a server to the RUNNING state. For more information \nabout server states, see "Understanding Server Life Cycle" in \n"Managing Server Startup and Shutdown" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
resume_syntax=resume([sname], [block]) \n- sname = Name of the server to resume. This argument defaults to \n the server to which WLST is currently connected. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the server is resumed. This argument defaults to \n false, indicating that user interaction is not blocked. In this case, \n WLST returns control to the user after issuing the command and assigns \n the task MBean associated with the current task to a variable that you \n can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
shutdown_shortDescription=Gracefully shut down a server, cluster, or system component.
shutdown_description=\nGracefully shuts down a running server instance, cluster, or system component. \nThis command waits for all the in-process work to be completed before \nshutting down the server, cluster, or system component. \n \nYou shut down a server to which WLST is connected by entering the \nshutdown command without any arguments. \n \nWhen connected to a Managed Server instance, you only use the shutdown \ncommand to shut down the Managed Server instance to which WLST is \nconnected; you cannot shut down another server while connected to a \nManaged Server instance. \n \nWLST must be connected to the Administration Server to shut down a system component. \n \nIn the event of an error, the command returns a WLSTException. \n
shutdown_syntax=shutdown([name], [entityType], [ignoreSessions], [timeOut], [force], [block], [props], [waitForAllSessions]) \n- name = Optional. Name of the server, cluster, or system component to shutdown. This \n argument defaults to the server to which WLST is currently connected. \n \n- entityType = Optional. Type is Server, Cluster, or SystemComponent. If not specified, \n WLST will look for a server, cluster, or system component with the specified \n name. \n \n- ignoreSessions = Optional. Boolean value specifying whether WLST \n should drop all HTTP sessions immediately or wait for HTTP sessions \n to complete or timeout while shutting down. This argument defaults \n to false, indicating that non-persisted HTTP sessions must complete or timeout. \n \n- timeOut = Optional. Time (in seconds) that WLST waits for \n subsystems to complete in-process work and suspend themselves before \n shutting down the server. This argument defaults to 0 seconds, \n indicating that there is no timeout. \n \n- force = Optional. Boolean value specifying whether WLST should \n terminate a server instance or a cluster without waiting for the \n active sessions to complete. This argument defaults to false, \n indicating that all active sessions must complete before shutdown. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the server is shutdown. This argument defaults to true, \n indicating that user interaction is blocked until the operation completes. \n If set to false, WLST returns control to the user after issuing the command \n and assigns the task MBean associate with the current task to a variable \n that you can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- props = Optional. Properties value specifying properties to pass \n to the system component. \n \n- waitForAllSessions = Optional. Boolean value specifying whether WLST \n should wait for all HTTP sessions to complete while shutting down. \n This argument defaults to false, indicating that WLST will only wait for \n non-persisted HTTP sessions to complete.
start_shortDescription=Start a Managed Server, cluster, or system component.
start_description=\nStarts a Managed Server instance, cluster, or system component using Node Manager. \nWLST must be connected to the Administration Server. If only starting \nManaged Servers, then WLST can just be connected to the Node Manager. \nFor more information about WLST commands used to connect to and use \nNode Manager, see help(''nodemanager''). \n \nIn the event of an error, the command returns a WLSTException. \n
start_syntax=\nstart(name, [type], [listenAddress], [port], [block], [props]) \n- name = Name of the Managed Server, cluster, or system component to start. \n \n- type = Optional. Type is Server, Cluster, or SystemComponent. If not specified, \n WLST will look for a server, cluster, or system component with the specified \n name. \n \n- listenAddress = Optional. Listen address of the server \n instance. If not specified, this defaults to localhost. \n This is ignored if type Cluster or SystemComponent is specified. \n \n- port = Optional. Listen port of the server instance. \n If not specified, this defaults to 7001. \n This is ignored if type Cluster or SystemComponent is specified. \n \n- block = Optional. Boolean value specifying whether WLST should \n block user interaction until the server or cluster is started. \n This argument defaults to true, indicating that user interaction \n is blocked until the operation completes. If set to false, WLST returns control \n to the user after issuing the command and assigns the task MBean associated \n with the current task to a variable that you can use to check its status. \n If you are importing WLST as a Jython module, block is always set \n to true. For more information, see "Importing WLST as a Jython Module" \n in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- props = Optional. Properties value specifying properties to pass \n to the system component. \n \n- disableMsiMode = Optional. Boolean value specifying whether to disable Managed Server Independence mode. \n A Managed Server that starts up without contacting its Administration Server to check for configuration \n updates is running in Managed Server Independence (MSI) mode. The default value is false which means \n Managed Server Independence mode is in effect. \n
startServer_shortDescription=Start the Administration Server.
startServer_description=\nStarts the Administration Server. In the event of an error, the command \nreturns a WLSTException. \n
startServer_syntax=startServer([adminServerName], [domainName], [url], [username], [password], [domainDir], [block], [timeout], [serverLog], [systemProperties], [jvmArgs], [spaceAsJvmArgsDelimiter]) \n- adminServerName = Optional. Name of the Administration Server to \n start. This argument defaults to myserver. \n \n- domainName = Optional. Name of the domain to which the Administration \n Server belongs. This argument defaults to mydomain. \n \n- url = Optional. URL of the Administration Server. This argument \n defaults to t3://localhost:7001. \n \n- username = Optional. Username use to connect WLST to the server. \n \n- password = Optional. Password used to connect WLST to the server. \n \n- domainDir = Optional. Domain directory in which the Administration \n Server is being started. This argument defaults to the current \n directory in which WLST is running. \n \n- block = Optional. Boolean value specifying whether WLST blocks user \n interaction until the server is started. This argument defaults to \n true, indicating that user interaction is blocked. In the block="false" case, \n WLST returns control to the user after issuing the command and assigns \n the task MBean associated with the current task to a variable that you \n can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- timeout = Optional. Time (in milliseconds) that WLST waits for the \n server to start before canceling the operation. The default value is \n 60000 milliseconds. This argument is only applicable when block is set \n to true. \n \n- serverLog = Optional. Location of the server log file. This argument \n defaults to stdout. \n \n- systemProperties = Optional. System properties to pass to the server \n process. System properties should be specified as comma-separated \n name-value pairs, and the name-value pairs should be separated by \n equals sign (=). \n \n- jvmArgs = Optional. JVM arguments to pass to the server process. \n Multiple arguments can be specified, separated by commas by default. \n \n- spaceAsJvmArgsDelimiter = Optional. Boolean value specifying whether \n JVM arguments are space delimited. The default value is 'false'. \n
suspend_shortDescription=Suspend a running server.
suspend_description=\nSuspends a running server. This command moves a server from the \nRUNNING state to the ADMIN state. For more information about server \nstates, see "Understanding Server Life Cycle" in "Managing Server \nStartup and Shutdown" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \nIn the event of an error, the command returns a WLSTException. \n
suspend_syntax=\nsuspend([sname], [ignoreSessions], [timeOut], [force], [block]) \n- sname = Optional. Name of the server to suspend. The argument \n defaults to the server to which WLST is currently connected. \n \n- ignoreSessions = Optional. Boolean value specifying whether WLST \n should drop all HTTP sessions immediately or wait for HTTP sessions \n to complete or time out while suspending. This argument defaults to \n false, indicating that HTTP sessions must complete or time out. \n \n- timeOut = Optional. Time (in seconds) the WLST waits for the server \n to complete in-process work before suspending the server. This argument \n defaults to 0 seconds, indicating that there is no timeout. \n \n- force = Optional. Boolean value specifying whether WLST should \n suspend the server without waiting for active sessions to complete. \n This argument defaults to false, indicating that all active sessions \n must complete before suspending the server. \n \n- block = Optional. Boolean value specifying whether WLST blocks user \n interaction until the server is started. This argument defaults to \n false, indicating that user interaction is not blocked. In this case, \n WLST returns control to the user after issuing the command and assigns \n the task MBean associated with the current task to a variable that \n you can use to check its status. If you are importing WLST as a \n Jython module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
softRestart_shortDescription=Restart a system component server instance.
softRestart_description=\nRestarts a running system component. \n \nWLST must be connected to the Administration Server to restart \na system component. \n \nIn the event of an error, the command returns a WLSTException. \n
softRestart_syntax=softRestart(name, [block], [properties]) \n- name = Name of the system component to restart. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the system component is restarted. This argument defaults to true, \n indicating that user interaction is blocked until the operation completes. \n If set to false, WLST returns control to the user after issuing the command \n and assigns the task MBean associate with the current task to a variable \n that you can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- properties = Optional. Properties value specifying properties to pass \n to the system component. \n
scaleUp_shortDescription=Increase the number of running servers for the specified dynamic cluster.
scaleUp_description=\n \nThe scaleUp command increases the number of running servers for the specified dynamic \ncluster by the number of specified servers. The non-runnning server number with the \nlowest server id starts first, followed by the next highest non-running server id. \nThe user can optionally specify that the dynamic cluster configuration should also be \nincreased if there are not enough non-running servers in the cluster to start. If so, \nthen the maximum size of the cluster is increased by the additional number of servers \nneeded and the specified number of servers is started. \n
scaleUp_syntax=scaleUp (clusterName, numServers, [updateConfiguration], [block], [timeoutSeconds], [type]) \n- clusterName = Name of the dynamic cluster. \n \n- numServers = Number of servers to start. \n \n- updateConfiguration = Optional. Boolean value specifying whether WLST should \n increase the maximum size of the cluster if there are not enough non-running \n servers. If not specified, this argument defaults to false. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the system component is restarted. This argument defaults to true, \n indicating that user interaction is blocked until the operation completes. \n If set to false, WLST returns control to the user after issuing the command \n and assigns the task MBean associate with the current task to a variable \n that you can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- timeoutSeconds = Optional. Time (in seconds) that WLST waits for the \n server(s) to start before canceling the operation. The default value is \n 600 seconds. \n \n- type = Optional. If specified, the argument value must be DynamicCluster. \n
scaleDown_shortDescription=Decrease the number of running servers in the specified dynamic cluster.
scaleDown_description=\n \nThe scaleDown command gracefully shuts down the number of running servers for the specified \ndynamic cluster by the specified number of servers. The server with the highest server id \nwill be shutdown first, then the next highest, etc. until the specified number of servers is \nshutdown. The user can optionally specify that the dynamic cluster configuration should \nalso be decreased. If so, then the maximum size of the cluster will be decreased. \n
scaleDown_syntax=scaleDown (clusterName, numServers, [updateConfiguration], [block], [timeoutSeconds], [type]) \n- clusterName = Name of the dynamic cluster. \n \n- numServers = Number of servers to shutdown. \n \n- updateConfiguration = Optional. Boolean value specifying whether WLST should \n decrease the maximum size of the cluster. If not specified, this argument defaults to false. \n \n- block = Optional. Boolean value specifying whether WLST should block \n user interaction until the system component is restarted. This argument defaults to true, \n indicating that user interaction is blocked until the operation completes. \n If set to false, WLST returns control to the user after issuing the command \n and assigns the task MBean associate with the current task to a variable \n that you can use to check its status. If you are importing WLST as a Jython \n module, block is always set to true. For more information, see \n "Importing WLST as a Jython Module" in "WebLogic Scripting Tool" at \n http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \n- timeoutSeconds = Optional. Time (in seconds) that WLST waits for the \n server(s) to start before canceling the operation. The default value is \n 300 seconds. \n \n- type = Optional. If specified, the argument value must be DynamicCluster. \n
nm_shortDescription=Determine whether WLST is connected to Node Manager.
nm_description=\nDetermines whether WLST is connected to Node Manager. Returns true or \nfalse and prints a descriptive message. Node Manager must be running \nbefore you can execute this command. \n \nIn the event of an error, the command returns a WLSTException. \n
nm_syntax=nm() \n
nmConnect_shortDescription=Connect WLST to Node Manager.
nmConnect_description=\nConnects WLST to Node Manager to establish a session. After connecting \nto Node Manager, you can invoke any Node Manager commands via WLST. \nNode Manager must be running before you can execute this command. \n \nOnce connected, the WLST prompt displays as follows, where domainName \nindicates the name of the domain that is being managed: \nwls:/nm/domainName>. If you then connect WLST to a WebLogic Server \ninstance, the prompt is changed to reflect the WebLogic Server instance. \nYou can use the nm command to determine whether WLST is connected to \nNode Manager. \n \nIn the event of an error, the command returns a WLSTException. \n
nmConnect_syntax=nmConnect([username, password], [host], [port], [domainName], [domainDir], [nmType], [verbose], [timeout]) \nnmConnect([userConfigFile, userKeyFile], [host], [port], [domainName], [domainDir], [nmType], [timeout]) \n- username = Username of the operator who is connecting WLST to Node \n Manager. Note that when running a server in production mode, you \n must specify the username and password explicitly on the command \n line to ensure that the appropriate username and password are used \n when connecting to Node Manager. \n \n- password = Password of the operator who is connecting WLST to Node \n Manager. Note that when running a server in production mode, you \n must specify the username and password explicitly on the command \n line to ensure that the appropriate username and password are used \n when connecting to Node Manager. \n \n- host = Optional. Host name of Node Manager. This argument defaults \n to localhost. \n \n- port = Optional. Port number of Node Manager. This argument defaults \n to a value that is based on the Node Manager server type, as follows: \n o For plain type, defaults to 5556 \n o For rsh type, defaults to 514 \n o For ssh type, defaults to 22 \n o For ssl type, defaults to 5556 \n \n- domainName = Optional. Name of the domain that you want to manage. \n This argument defaults to mydomain. \n \n- domainDir = Optional. Path of the domain directory to which you want \n to save the Node Manager secret file (nm_password.properties) and \n SerializedSystemIni.dat file. This argument defaults to the directory \n in which WLST was started. \n \n- nmType = Type of the Node Manager server. Valid values include: \n o plain: plain socket Java-based implementation. \n o rsh: RSH implementation \n o ssh: script-based SSH implementation \n o ssl: Java-based SSL implementation \n \n This argument defaults to ssl. \n \n- verbose = Optional. Boolean value specifying whether WLST connects \n to Node Manager in verbose mode. This argument defaults to false, \n disabling verbose mode. \n \n- timeout = Optional. timeout value of nmConnect. \n The defaults value is 0, \n which means the nmConnect never times out. \n \n- userConfigFile = Name and location of a user configuration file which \n contains an encrypted username and password. When you create a user \n configuration file, the storeUserConfig command uses a key file to \n encrypt the username and password. Only the key file that encrypts a \n user configuration file can decrypt the username and password. See \n help(''storeUserConfig''). \n \n- userKeyFile = Name and location of the key file that is associated \n with the specified user configuration file and is used to decrypt it. \n See help(''storeUserConfig''). \n
nmDisconnect_shortDescription=Disconnect WLST from a Node Manager session.
nmDisconnect_description=\nDisconnects WLST from a Node Manager session. WLST must be connected \nto Node Manager to run this command. \n \nIn the event of an error, the command returns a WLSTException. \n
nmDisconnect_syntax=nmDisconnect() \n
nmEnroll_shortDescription=Enroll the machine with Node Manager.
nmEnroll_description=\nEnrolls the machine on which WLST is currently running with Node \nManager. WLST must be connected to an Administration Server to \nrun this command; WLST does not need to be connected to Node Manager. \n \nThis command downloads the following files from the Administration \nServer: \no Node Manager secret file (nm_password.properties), which \n contains the encrypted username and password that is used for \n server authentication \n \no SerializedSystemIni.dat file \n \nThis command also updates the nodemanager.domains file under the \nWL_HOME/common/nodemanager directory with this new domain, where \nWL_HOME refers to the top-level installation directory for \nWebLogic Server. \n \nYou must run this command once per domain per machine, unless \nthe domain shares the root directory of the Administration Server. \n \nIf the machine is already enrolled when you run this command, the Node \nManager secret file (nm_password.properties) is refreshed with the \nlatest information from the Administration Server. \n \nIn the event of an error, the command returns a WLSTException. \n
nmEnroll_syntax=nmEnroll([domainDir], [nmHome]) \n- domainDir = Optional. Path of the domain directory to which you want \n to save the Node Manager secret file (nm_password.properties) and \n SerializedSystemIni.dat file. This argument defaults to the directory \n in which WLST was started. \n \n- nmHome = Optional. Path to the Node Manager home. The \n nodemanager.domains file, containing the domain information, \n is written to this directory. This argument defaults to \n W_HOME/common/nodemanager, where WL_HOME refers to the \n top-level installation directory for WebLogic Server. \n
nmKill_shortDescription=Kill the specified server instance.
nmKill_description=\nKills the specified server instance that was started with Node Manager. \n \nIf you do not specify a server name using the serverName argument, the \nargument defaults to myServer, which must match your server name or the \ncommand will fail. \n \nIf you attempt to kill a server instance that was not started using Node \nManager, the command displays an error. WLST must be connected to Node \nManager to run this command. \n \nIn the event of an error, the command returns a WLSTException. \n
nmKill_syntax=nmKill([serverName], [serverType], [pluginProps]) \n- serverName = Optional. Name of the server to be killed. This argument \n defaults to myserver. \n \n- serverType = Optional. The type of server to start. This argument \n defaults to WebLogic. Another valid option is Coherence. \n \n- pluginProps = Optional. The properties to use to kill the server \n defaults to None. Only relevant to plugin handling system components. \n
nmSoftRestart_shortDescription=Restart the specified system component server instance.
nmSoftRestart_description=\nRestarts the specified system component server instance that was started with Node Manager. \n \nIf you do not specify a server name using the serverName argument, the \nargument defaults to myServer, which must match your server name or the \ncommand will fail. \n \nIf you attempt to restart a system component server instance that was \nnot started using Node Manager, the command displays an error. WLST must \nbe connected to Node Manager to run this command. \n \nIn the event of an error, the command returns a WLSTException. \n
nmSoftRestart_syntax=nmSoftRestart([serverName], [serverType], [pluginProps]) \n- serverName = Optional. Name of the system component server to be restarted. \n This argument defaults to myserver. \n \n- serverType = Required. The type of server to start. Refer to the Administration \n Guide or other documentation for the system component to determine the \n appropriate value to use for this argument. \n \n- pluginProps = Optional. The properties to use to kill the server \n defaults to None. Only relevant to plugin handling system components. \n
nmGenBootStartupProps_shortDescription=Generate boot and startup properties
nmGenBootStartupProps_description=\nGenerates the Node Manager property files, boot.properties \nand startup.properties, for the specified server. The Node Manager \nproperty files are stored relative to the root directory of the \nspecified server. The target root directory must be on the \nsame machine on which you are running the command. \n \nYou must specify the name of a server; otherwise, the command will fail. \nIn the event of an error, the command returns a WLSTException. \n
nmGenBootStartupProps_syntax=nmGenBootStartupProps(serverName) \n- serverName = Name of the server for which Node Manager property files \n are generated. \n
nmLog_shortDescription=Return the Node Manager log.
nmLog_description=\nReturns the Node Manager log. WLST must be connected to Node Manager \nto run this command. In the event of an error, the command returns \na WLSTException. \n
nmLog_syntax=nmLog([writer]) \n- writer = Optional. java.io.Writer object to which you want to stream \n the log output. This argument defaults to the WLST writer stream. \n
nmServerLog_shortDescription=Return the server output log.
nmServerLog_description=\nReturns the server output log of the server that was started with Node \nManager. WLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n
nmServerLog_syntax=nmServerLog([serverName], [writer], [serverType]) \n- serverName = Optional. Name of the server for which you want to \n display the server output log. This argument defaults to myserver. \n \n- writer = Optional. java.io.Writer object to which you want to stream \n the log output. This argument defaults to the WLSTInterpreter \n standard out, if not specified. \n \n- serverType = Optional. The type of server to start. This argument \n defaults to WebLogic. Another valid option is Coherence. \n
nmServerStatus_shortDescription=Return the status of the server.
nmServerStatus_description=\nReturns the status of the server that was started with Node Manager. \nWLST must be connected to Node Manager to run this command. In the event \nof an error, the command returns a WLSTException. \n
nmServerStatus_syntax=nmServerStatus([serverName], [serverType]) \n- serverName = Optional. Name of the server for which you want to display \n the status. This argument defaults to myserver. \n \n- serverType = Optional. The type of server to start. This argument \n defaults to WebLogic. Another valid option is Coherence. \n
nmStart_shortDescription=Start a server using Node Manager.
nmStart_description=\nStarts a server in the current domain using Node Manager. \nWLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n \nNote: boot.properties must exist in order to start a server with nmStart. \nIf this is the first time you are starting a server, or the first time \nyou are using NodeManager, you must manually create it or run the \nnmGenBootStartupProps command to generate boot.properties and \nstartup.properties files for the server. \n \nAlternatively, you can use the nmStartprops argument to provide user \ncredentials (after connecting to Node Manager): \n \nprps = makePropertiesObject("AdminURL=http://listen_address:listen_port; \nUsername=username;Password=password") \nnmStart("AdminServer",props=prps) \nwls:/nm/mydomain> prps.setProperty('password', 'weblogic1') \nnmStart("AdminServer",props=prps) \n
nmStart_syntax=nmStart([serverName], [domainDir], [props], [writer], [serverType], [pluginProps]) \n- serverName = Optional. Name of the server to be started. \n \n- domainDir = Optional. Domain directory of the server to be started. \n This argument defaults to the current directory in which WLST is \n running. \n \n- props = Optional. System properties to apply to the new server. \n \n- writer = Optional. java.io.Writer object to which the server output \n is written. This argument defaults to the WLST writer. \n \n- serverType = Optional. The type of server to start. This argument \n defaults to WebLogic. Another valid option is Coherence \n \n- pluginProps = Optional. The properties to use to start the server \n defaults to None. Only relevant to plugin handling system components. \n
nmVersion_shortDescription=Return the Node Manager server version.
nmVersion_description=\nReturns the Node Manager server version. WLST must be connected to Node \nManager to run this command. In the event of an error, the command \nreturns a WLSTException. \n
nmVersion_syntax=nmVersion() \n
config_shortDescription=(Deprecated) Navigate to the last MBean in configuration hierarchy.
config_description=\nNote that this command is deprecated for WebLogic Server 9.0. You \nshould update your scripts to use the serverConfig command. For more \ninformation, see help(''serverConfig''). \n \nNavigates to the last MBean to which you navigated in the \nAdministration or Local configuration MBean hierarchy or to the root \nof the hierarchy, DomainMBean. For more information, see \n"Navigating Among MBean Hierarchies" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
config_syntax=config() \n
custom_shortDescription=Navigate to the root of custom MBeans.
custom_description=\nNavigates to the root of custom MBeans that are registered in the \nserver. WLST navigates, interrogates, and edits custom MBeans as it \ndoes domain MBeans; however, custom MBeans cannot use the cmo variable \nbecause a stub is not available. \n \nThe custom command is available when WLST is connected to an \nAdministration Server instance or a Managed Server instance. When \nconnected to a WebLogic Integration or WebLogic Portal server, WLST \ncan interact with all the WebLogic Integration or WebLogic Portal \nserver MBeans. \n \nFor more information about custom MBeans, see "Non-WebLogic Server \nMBeans" in "Programming WebLogic Management Services with JMX" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
custom_syntax=custom([ObjectNamePattern]) \n where ObjectNamePattern is a JMX query pattern such as "sip:*". The default \n value is null or "*:*". \n
domainCustom_shortDescription=Navigate to the root of domain custom MBeans.
domainCustom_description=\nNavigates to the root of domain custom MBeans that are registered in the \nDomain Runtime MBeanServer. WLST navigates, interrogates, and edits \ndomain custom MBeans; however, domain custom MBeans cannot use the cmo variable \nbecause a stub is not available. \n \nThe domainCustom command is available when WLST is connected to an \nAdministration Server instance. \n \nFor more information about domainCustom MBeans, see "Non-WebLogic Server \nMBeans" in "Programming WebLogic Management Services with JMX" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
domainCustom_syntax=domainCustom([ObjectNamePattern]) \n where ObjectNamePattern is a JMX query pattern such as "sip:*". The default \n value is null or "*:*". \n
editCustom_shortDescription=Navigate to the root of edit custom MBeans.
editCustom_description=\nNavigates to the root of custom MBeans that are registered in the \nEdit MBeanServer. WLST navigates, interrogates, and edits \ncustom MBeans in Edit MBeanServer; however, MBeans accessed from \neditCustom command cannot use the cmo variable \nbecause a stub is not available. \n \nThe editCustom command is available when WLST is connected to an \nAdministration Server instance. \n \nFor more information about custom MBeans, see "Accessing Other \nWebLogic MBeans and Custom MBeans" in Oracle WebLogic Scripting \nTool at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
editCustom_syntax=editCustom([ObjectNamePattern]) \n where ObjectNamePattern is a JMX query pattern such as "sip:*". The default \n value is null or "*:*". \n
domainConfig_shortDescription=Navigate to last domain configuration MBean or root.
domainConfig_description=\nNavigates to the last MBean to which you navigated \nin the Domain Configuration hierarchy or to the root of the hierarchy, \nDomainMBean. This read-only hierarchy stores the configuration MBeans \nthat represent your current domain. In the event of an error, the \ncommand returns a WLSTException. \n
domainConfig_syntax=domainConfig() \n
domainRuntime_shortDescription=Navigate to last domain runtime MBean or root.
domainRuntime_description=\nNavigates to the last MBean to which you navigated in the domain \nRuntime hierarchy or to the root of the hierarchy, DomainRuntimeMBean. \nThis read-only hierarchy stores the runtime MBeans that represent your \ncurrent domain. In the event of an error, the command returns a \nWLSTException. \n
domainRuntime_syntax=domainRuntime() \n
edit_shortDescription=Navigate to last edit configuration MBean or root.
edit_description=\nNavigates to the selected edit configuration MBean tree hierarchy. This \nwritable hierarchy stores all the configuration MBeans that represent your \ncurrent domain. In case the edit configuration MBean hierarchy has been \nnavigated earlier in this session, the context will switch to the MBean that \nhas been most recently navigated to, otherwise the command will navigate to \nthe root of the hierarchy, the DomainMBean. \n \nIn case an edit session with the chosen name does not exit, it will be \nautomatically created. The default (nameless) edit session is always \navailable and cannot be removed. \n \nNote that in order to edit configuration MBeans, you must connect to \nan Administration Server. When connected to a Managed Server, the WLST \nfunctionality is limited to read-only browsing of the configuration MBean \nhierarchy. While it is not possible to change MBean values on a Managed \nServer using WLST, you can use the Management APIs to do so. Nevertheless, \nOracle recommends that you only change the values of configuration MBeans \non the Administration Server, as changing configuration MBean values on \nManaged Servers can lead to inconsistencies in the domain configuration. \n \nIn case an error occurs, the command throws a WLSTException. \n \nFor more information about editing configuration beans, see "Editing \nConfiguration MBeans" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n
edit_syntax=edit([editSessionName]) \n- editSessionName = Optional. The name of the edit session to context \n of which you want to navigate. In case no edit session \n with the given name exists, it will be automatically \n created. \n
createEditSession_shortDescription=Creates a new edit session.
createEditSession_description=\nCreates a new named edit session with a given name and description. \nTo navigate to the context of the created edit session, use \nedit(editSessionName) command. \n \nThe creation of a new edit session can fail in case a session with a given \nname exists already or in case the specified edit session name contains \nan invalid character. \n
createEditSession_syntax=createEditSession(name, [descripton]) \n- name = Name (identifier) of an edit session. It can contian alphanumeric \n characters, _ (underscore) and - (dash) \n- description = Optional. Edit session description for an easier identification \n by a user.
destroyEditSession_shortDescription=Removes a named edit session.
destroyEditSession_description=\nRemoves a named edit session. \n \nNote that it is not possible to remove an edit session whose changes are \ncurrently being activated. It is also not possible to remove the default \n(nameless) edit session. \n \nBy default it is not possible to destroy an edit session that contains \nchanges which are still pending activation. Set force flag to true to destroy \na session with activation pending changes. \n
destroyEditSession_syntax=destroyEditSession(name, [force]) \n- name = Name (identifier) of the edit session to be removed. \n- force = OPTIONAL, defaults to 'false'. If set to 'true', then session with changes still pending activation will be destroyed. Otherwise such session will be preserved and the destroy command will fail.
showEditSession_shortDescription=Shows information about named edit sessions.
showEditSession_description=\nIn case the command is invoked without a parameter, it will display a list \nof all the existing edit sessions. In case a name of a singe edit session is \npassed in as a parameter, detailed information about the edit session will \nbe displayed. \n \nDetailed edit session information includes: \n- Creator: the name of the user who created the edit session \n- Editor: the name of the user who currently owns the edit session lock \n- Resolve recommended: if set to yes, this flag indicates that configration \n changes in another edit session have been activated and the configuration \n snapshot in this edit session can be deprecated as such. Use resolve() \n command to update the content of the session to match the latest runtime \n configuration and/or to resolve any modification conflicts. \n- Contains unactivated changes: provides information whether this edit \n sessions contains any configuration changes that have not been activated yet. \n \nTo access the detailed information about the default edit session, it is \nnecessary to specify default as the input parameter. \n
showEditSession_syntax=showEditSession([name]) \n- name = Optional. Name (identifier) if the edit session to display detailed \n information for. In case the parameter is not provided a list of all \n existing edit sessions will be displayed.
resolve_shortDescription=Checks for any external modifications and conflicts and resolves them.
resolve_description=\nThe command works with the current edit session. \nFirst, conflicts between changes made as part of the current session and \nchanges activated externally are detected. In case one or more conflicts are \nfound, the stopOnConflicts parameter determines the further processing: the \nconflicts are either automatically resolved using a set of predefined rules \nor the list of the conflicts is displayed and the command execution is \nterminated. \n \nAs part of the changes and conflicts resolution, once all conflicts have been \nresolved, the command also updates the current edit session with any \nnon-conflicting changes made externally since the session creation or last \nsuccessful call to resolve(). \n \nNote that the resolve() command only updates the content of the current edit \nsession. Any pending changes in the edit session are not being activated. \n \nIn order to use the command the user must own the edit session lock. \n \nThe resolve() command always displays the list of any found conflicts, method \nof their resolution as well as the list of all external changes applied to \nthis edit session as part of the resolve() invocation. \n
resolve_syntax=resolve([stopOnConflicts]) \n- stopOnConflicts = Optional. Default false. The flag instructs the command \n what to do in case of any detected conflicts. If set to \n false (by default), the command will try to resolve the \n conflicts automatically. If set to true, the command \n will merely list all the conflicts found and terminate \n the processing.
jndi_shortDescription=Navigate to the JNDI tree.
jndi_description=\nNavigates to the JNDI tree for the server to which WLST is currently \nconnected. This read-only tree holds all the elements that are currently \nbound in JNDI. In the event of an error, the command returns a WLSTException. \n
jndi_syntax=jndi() \n
runtime_shortDescription=(Deprecated) Navigates to the last MBean in runtime hierarchy
runtime_description=\nNote that this command is deprecated for WebLogic Server 9.0. You \nshould update your scripts to use the serverRuntime command. For \nmore information, see help(''serverRuntime''). \n \nNavigates to the last MBean to which you navigated in the runtime \nhierarchy or the root of all runtime objects, DomainRuntimeMBean. \nWhen connected to a Managed Server instance, the root of runtime \nMBeans is ServerRuntimeMBean. For more information, see "Browsing \nthe Runtime Information" in "WebLogic Scripting Tool" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
runtime_syntax=runtime() \n
serverConfig_shortDescription=Navigate to the last configuration MBean or root.
serverConfig_description=\nNavigates to the last MBean to which you navigated in the Configuration \nMBean hierarchy or to the root of the hierarchy, DomainMBean. \n \nThis read-only hierarchy stores the configuration MBeans that represent \nthe server to which WLST is currently connected. The MBean attribute values \ninclude any command-line overrides that a user specified while starting \nthe server. For more information, see "Navigating Among MBean Hierarchies" in \n"WebLogic Scripting Tool" at http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \n \nIn the event of an error, the command returns a WLSTException. \n
serverConfig_syntax=serverConfig() \n
serverRuntime_shortDescription=Navigate to the last runtime MBean or root.
serverRuntime_description=\nNavigates to the last MBean to which you navigated in the runtime MBean \nhierarchy or to the root of the hierarchy, ServerRuntimeMBean. This \nread-only hierarchy stores the runtime MBeans that represent the server \nto which WLST is currently connected. In the event of an error, the \ncommand returns a WLSTException. \n
serverRuntime_syntax=serverRuntime() \n
adminHome_shortDescription=Administration MBeanHome.
adminHome_description=\nNote that this variable is deprecated for WebLogic Server 9.0. \n \nAdministration MBean. This variable is available only when WLST is \nconnected to the Administration Server. \n
cmo_shortDescription=Current Management Object.
cmo_description=\nCurrent Management Object. The cmo variable is set to the configuration \nbean instance to which you navigate using WLST. You use \nthis variable to perform any create, get, set, or invoke method on the \ncurrent configuration bean instance. By default, this variable \nis initialized to the root of all configuration management objects, \nDomainMBean. \n
connected_shortDescription=Variable indicating whether WLST is connected.
connected_description=\nBoolean value specifying whether WLST is connected to a running server. \nWLST sets this variable to true when connected to a running server; \notherwise, WLST sets it to false. \n
domainName_shortDescription=Name of the domain to which WLST is connected.
domainName_description=\nName of the domain to which WLST is connected. \n
domainRuntimeService_shortDescription=DomainRuntimeServiceMBean MBean.
domainRuntimeService_description=\nDomainRuntimeServiceMBean MBean. This variable is \navailable only when WLST is connected to the Administration Server. \n
editService_shortDescription=EditServiceMBean MBean.
editService_description=\nEditServiceMBean MBean. This variable is available only when \nWLST is connected to the Administration Server. \n
exitonerror_shortDescription=Variable indicating whether WLST exits on error.
exitonerror_description=\nBoolean value specifying whether WLST terminates script execution when \nit encounters an exception. This variable defaults to true, indicating \nthat script execution is terminated when WLST encounters an error. \nThis variable is not applicable when running WLST in interactive mode. \n
home_shortDescription=Local MBeanHome.
home_description=\nNote that this variable is deprecated for WebLogic Server 9.0. \nLocal MBean. \n
isAdminServer_shortDescription=Variable indicating whether WLST is connected to an Admin Server.
isAdminServer_description=\nBoolean value specifying whether WLST is connected to a WebLogic \nAdministration Server instance. WLST sets this variable to true if \nWLST is connected to a WebLogic Administration Server; otherwise, \nWLST sets it to false. \n
mbs_shortDescription=MBeanServerConnection object.
mbs_description=\nMBeanServerConnection object that corresponds to the current location \nin the hierarchy. \n
recording_shortDescription=Variable indicating whether WLST is recording.
recording_description=\nBoolean value specifying whether WLST is recording commands. WLST sets \nthis variable to true when the startRecording command is entered; \notherwise, WLST sets this variable to false. \n
runtimeService_shortDescription=RuntimeServiceMBean MBean.
runtimeService_description=\nRuntimeServiceMBean MBean. \n
serverName_shortDescription=Name of the server to which WLST is connected.
serverName_description=\nName of the server to which WLST is connected. \n
typeService_shortDescription=TypeServiceMBean MBean.
typeService_description=\nTypeServiceMBean MBean. \n
username_shortDescription=Name of user currently connected to WLST.
username_description=\nName of user currently connected to WLST. \n
version_shortDescription=Current version of WLS.
version_description=\nCurrent version of the running server to which WLST is connected. \n
idd_shortDescription=Identity Domain of user currently connected to WLST.
idd_description=\nIdentity Domain of user currently connected to WLST. \n
lookup_shortDescription=Look up the specified MBean.
lookup_description=\nLooks up the specified MBean. The MBean must be a child of the current \nMBean. In the event of an error, the command returns a WLSTException. \n
lookup_syntax=lookup(name, [childMBeanType]) \n- name = Name of the MBean that you want to lookup. \n \n- childMBeanType = Optional. The type of the MBean that you want to lookup. \n
easeSyntax_shortDescription=Display help for easeSyntax().
easeSyntax_description=\nDisplays help for easeSyntax(). \n
easeSyntax_syntax=\neaseSyntax() for turning on easy syntax. \neaseSyntax for turning off easy syntax. \n
man_shortDescription=Display help from MBeanInfo.
man_description=\nDisplays help from MBeanInfo for the current MBean or its specified \nattribute. \n
man_syntax=\nman([''a'' | ''c'' | ''o'' | attrName]) \n- a = Optional. Displays help for all the attributes for the \n current MBean. \n \n- c = Optional. Displays help for all the child configuration beans \n that are contained in the current MBean. \n \n- o = Optional. Displays help for all operations that can be invoked \n on the current MBean. \n \n- attrName = Optional. MBean attribute name for which you would like \n to display help. If not specified, WLST displays helps for the \n current MBean. \n
encrypt_shortDescription=Encrypt the specified string.
encrypt_description=\nEncrypts the specified string. You can then use the encrypted string \nin your configuration file or as an argument to a command. \n \nThe weblogic.security.Encrypt utility encrypts cleartext strings for use \nwith WebLogic Server. The utility uses the encryption service of the \ncurrent directory, or the encryption service for a specified WebLogic \nServer domain root directory. \n \nNOTE: An encrypted string must have been encrypted by the encryption service \nin the WebLogic Server domain where it will be used. If not, the server \nwill not be able to decrypt the string. \n \nIn the event of an error, the command returns a WLSTException. \n
encrypt_syntax=encrypt(obj, [domainDir]) \n- obj = String that you want to encrypt. \n \n- domainDir = Optional. Name of the domain directory containing the \n security/SerializedSystemIni.dat file to use to encrypt the file. \n This argument defaults to the directory from which WLST was invoked. \n
startNodeManager_shortDescription=Start Node Manager.
startNodeManager_description=\nStart Node Manager at default port (5556). \n \nNOTE: The WebLogic Server custom installation process \noptionally installs and starts Node Manager as a Windows \nservice on Windows systems. For more information, see \n"About Node Manager Installation as a Windows Service" \nin "Oracle Products Installation Guide" at \nhttp://www.oracle.com/technetwork/middleware/weblogic/overview/index.html. \nIn this case, you do not need to start the Node Manager manually. \n \nIf Node Manager is already running when you invoke the startNodeManager \ncommand, the following message is displayed: \n A Node Manager has already been started. \n Cannot start another Node Manager process via WLST \n \nIn the event of an error, the command returns a WLSTException. \n
startNodeManager_syntax=startNodeManager([verbose], [block], [timeout], [jvmArgs], [nmProperties], [nmConnectOptions]) \n- verbose = Optional. Boolean value specifying whether WLST starts \n Node Manager in verbose mode. This argument defaults to false, disabling \n verbose mode. \n \n- block = (true|false) Boolean value specifying whether WLST should block \n until it successfully connects to the NodeManager or fails to connect to \n NodeManager within the time specified by timeout argument. \n This option defaults to false. When this option is set to \n true , you also need to provide username, password, host, \n port, domainName, and nmType that you use for nmConnect() \n \n- nmConnectOptions = Optional when block is false and \n required when block is true. Comma-separated list of nmConnect() \n options. The following arguments are required : username, password, host, \n port, domainName and the following arguments are optional : domainDir and nmType. \n- timeout = Optional. Number of milliseconds to wait for WLST \n to connect to the NodeManager.This option defaults to 120000 milliseconds. \n \n- jvmArgs = Optional. JVM arguments to pass to the NodeManager process. \n Multiple arguments can be specified, separated by commas. \n \n- nmProperties = Optional. Comma-separated list of Node Manager properties, \n specified as name-value pairs. Node Manager properties include, but are not \n limited to, the following: NodeManagerHome, ListenAddress, ListenPort, and \n PropertiesFile. \n
stopNodeManager_shortDescription=Stop Node Manager.
stopNodeManager_description=\nStop Node Manager. \n \nNOTE: In order to stop the Node Manager process, \nyou must have either started Node Manager with startNodeManager or \nNode Manager must have been started with the property QuitEnabled=true. \nYou can configure this property in \n$WLS_HOME/common/nodemanager/nodemanager.properties file. \nThis allows you to connect to the Node Manager and shut it down. \n \nIf the node manager is not running when you invoke the stopNodeManager \ncommand, the following message is displayed: \n \n Cannot stop the Node Manager unless you are connected to it. \n
stopNodeManager_syntax=stopNodeManager() \n
MainDescription_HelpString=WLST is a command line scripting tool to configure and administer WebLogic Server. Try: \n \n\t help(''all'')\t\t List all WLST commands available. \n\t help(''browse'')\t\t List commands for browsing the hierarchy. \n\t help(''common'')\t\t List the most commonly used commands. \n\t help(''control'')\t List commands for controlling the domain/server. \n\t help(''deployment'')\t List commands for deploying applications. \n\t help(''diagnostics'')\t List commands for performing diagnostics. \n\t help(''editing'')\t List commands for editing the configuration. \n\t help(''information'')\t List commands for displaying information. \n\t help(''lifecycle'')\t List commands for managing life cycle. \n\t help(''nodemanager'')\t List commands for using Node Manager. \n\t help(''offline'')\t List all offline commands available. \n\t help(''online'')\t\t List all online commands available. \n\t help(''storeadmin'')\t List all store admin commands. \n\t help(''trees'')\t\t List commands use to navigate MBean hierarchy. \n\t help(''variables'')\t List all global variables available. \n \n
control_HelpString=Control domains or servers.
lifecycle_HelpString=Manage domain or server lifecycle.
browse_HelpString=Browse the configuration hierarchy.
editing_HelpString=Edit the configuration.
information_HelpString=Get information.
deployment_HelpString=Deploy applications.
all_HelpString=All WLST commands available.
variables_HelpString=All global variables available.
trees_HelpString=Navigate the tree hierarchy.
nodemanager_HelpString=Use Node Manager.
miscellaneous_HelpString=List all the miscellaneous commands.
common_HelpString=Commonly used commands
diagnostics_HelpString=Get server diagnostics
HelpFor_HelpString=Help for
NoHelp1_HelpString=No help for
NoHelp2_HelpString=found. Please try help() for available options.
Description_HelpString=Description
Syntax_HelpString=Syntax
Example_HelpString=Example
storeadmin_HelpString=Lists the store admin commands.
openfilestore_shortDescription=Opens a file store.
openfilestore_description=Opens an existing file store for further operations. If a file store does not \nexist, a new one is created in an open state using the -create parameter. \nThis command returns 1 on success, 0 on failure. \n
openfilestore_syntax=openfilestore(store, dir='.', create='false') \n- store = Name of store to be opened. \n- dir = Optional. Name of file system directory containing store files. This argument defaults to '.'. \n- create = Optional. Will create non-existing filestore if set to true. This argument defaults to false. \n
openjdbcstore_shortDescription=Opens a JDBC store.
openjdbcstore_description=Opens an existing JDBC store for further operations. If a JDBC store does not \nexist, a new one is created in an open state. This command returns 1 on \nsuccess, 0 on failure. \n
openjdbcstore_syntax=openjdbcstore(store, [driver], [url], [propfile], [user], [password], [ddl], [tableNamePrefix]) \n- store = Name of store to be opened. \n- driver = Optional. Name of JDBC driver class. This argument defaults to null. \n- url = Optional. URL to connect to the database. This argument defaults to null. \n- propfile = Optional. JDBC properties file. This argument defaults to null. \n- user = Optional. Userid for accessing database. This argument defaults to null. \n- password = Optional. Password for accessing database. This argument defaults to null. \n- ddl = Optional. Name of DDL file defining database table format. This argument defaults to null. \n- tableNamePrefix = Optional. prefix for naming database table. This argument defaults to null. \n \nNote: driver and url must be specified either while invoking this function \nor in the propfile. If specified in both, the invocation values will over-ride the propfile values. All the other optional attributes can each be specified on \ninvocation, in the propfile, in neither, or in both. If specified in both, \nthe invocation values take precedence. \n
closestore_shortDescription=Closes a store.
closestore_description=Closes a prevoiusly opened FileStore or JDBCStore. This command returns 1 on \nsuccess, 0 on failure. \n
closestore_syntax=closestore(store) \n- store = Name of a previously opened JDBC or File store. \n
liststore_shortDescription=Lists store names, open stores, or connections in a store.
liststore_description=Lists storenames, opened stores, or connections (for interactive access) \nThis command returns 1 on success, 0 on failure. \n
liststore_syntax=liststore([store], [dir]) \n- store = Optional. Name of a previously opened JDBC or File store. \n- dir = Optional. Directory for which to list available store names. \n \nParameters store and dir cannot both be specified concurrently. If store is \nspecified, all connections in the store are listed. If dir is specified, all \nstore names in the directory are listed. If neither store nor dir are \nspecified, all open store names are listed. \n
dumpstore_shortDescription=Dumps store contents in human-readable format to an XML file.
dumpstore_description=Dumps store or connection contents in a human-readable format to \nuser-specified XML file. The XML file format is the same format used by the \ndiagnostic image of the persistent store. This command returns 1 on success, \n0 on failure. \n
dumpstore_syntax=dumpstore(store, outfile, [conn], [deep]) \n- store = Name of a previously opened JDBC or File store. \n- outfile = Name of xml file to dump the output to \n(with or without .xml suffix). \n- conn = Optional. Store connection name the dump should be restricted to. \nThis argument defaults to all connections. \n- deep = Optional. For "deep dump" - if true, adds store record data contents \nas hexdump to the dump output. This argument defaults to false. \n
compactstore_shortDescription=Compacts and defragments the space occupied by a file store.
compactstore_description=Compacts and defragments the space occupied by a file store. This command \nonly works offline and does not work for JDBC stores. \n \nNote: Running file stores are optimized for speed without regard for space. \nTherefore, running compact will reduce the store's size and utilize its \nallocated space more efficiently. This command returns 1 on success, 0 on \nfailure. \n
compactstore_syntax=compactstore(dir, [tempdir]) \n- dir = directory containing filestore contents. \n- tempdir = Optional. Directory to be used during compacting. Should not be \nunder dir, and should have extra space sufficient for the filestore. \n
getopenstores_shortDescription=Returns a list of opened stores (for script access).
getopenstores_description=Returns a list of opened stores (for script access). This command returns 1 on \nsuccess, 0 on failure. \n
getopenstores_syntax=getopenstores() \n
getstoreconns_shortDescription=Returns a list of connections in the specified store (for script access).
getstoreconns_description=Returns a list of connections in the specified store (for script access). \nThis command returns 1 on success, 0 on failure. \n
getstoreconns_syntax=getstoreconns(store) \n- store = Name of a previously opened JDBC or File store. \n
listApplications_shortDescription=Lists all applications that are currently deployed to the domain.
listApplications_description=\nLists all applications that are currently deployed to the domain. For \ninformation about application deployment, see help(''deployment''). \n \nIn the event of an error, the command returns a WLSTException. \n
listApplications_syntax=listApplications() \n
all_shortDescription=List all WLST commands available.
browse_shortDescription=List commands for browsing the hierarchy.
common_shortDescription=List the most commonly used commands.
control_shortDescription=List commands for controlling the domain/server.
deployment_shortDescription=List commands for deploying applications.
diagnostics_shortDescription=List commands for performing diagnostics.
editing_shortDescription=List commands for editing the configuration.
information_shortDescription=List commands for displaying information.
lifecycle_shortDescription=List commands for managing life cycle.
nodemanager_shortDescription=List commands for using Node Manager.
offline_shortDescription=List all offline commands available.
online_shortDescription=List all online commands available.
storeadmin_shortDescription=List all store admin commands.
trees_shortDescription=List commands use to navigate MBean hierarchy.
variable_shortDescription=List all global variables available.
offline_HelpString=Offline commands.
online_HelpString=Online commands.
nmDiagnostics_shortDescription=Get diagnostics for a system component.
nmDiagnostics_description=\nGet diagnostics for a system component of the specified type in the current domain using Node Manager. \nWLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n
nmDiagnostics_syntax=nmDiagnostics(diagnosticType, command, [writer], serverType) \n- diagnosticType = The diagnostic type, e.g. 'METRICS' or 'LOGGING' \n \n- command = An array of Strings constituting the command to be executed \n by the diagnostics plugin. \n \n- writer = Optional. java.io.Writer object to which the diagnostics output \n is written. This argument defaults to the WLST writer. \n \n- serverType = The type of server, e.g. 'OHS' \n
nmInvocation_shortDescription=Invoke InvocationPlugin for a system component.
nmInvocation_description=\nInvoke InvocationPlugin for a system component of the specified type in the current domain using Node Manager. \nWLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n
nmInvocation_syntax=nmInvocation(invocationType, command, [writer], serverType) \n- invocationType = The invocation type, e.g. 'METRICS' or 'LOGGING' \n \n- command = An array of Strings constituting the command to be executed \n by the diagnostics plugin. \n \n- writer = Optional. java.io.Writer object to which the invocation output \n is written. This argument defaults to the WLST writer. \n \n- serverType = The type of server, e.g. 'OHS' \n
setFEHostURL_shortDescription=Sets the domain Frontend Host URLs.
setFEHostURL_description=\n Sets the plain and SSL URLs for the domain Frontend Host and specifies whether the plain or SSL URL \n is the default. \n values during configuration session. The user can specify a "plain" and "ssl" url in the same command and can set any of these(plain/url) \n as default. \n \n The parameters that needs to be passed are \n plain url - It is a String value \n ssl url - It is a String value \n default - It can be either true, if we need the plain url to be default, or false for ssl.
setFEHostURL_syntax=setFEHostURL(plain, SSL, isDefaultPlain) \n- plain - Sets the plain URL for the Frontend Host. \n \n- SSL - Sets the SSL URL for the Frontend Host. This argument is required even if you are not \n using SSL. \n \n- default - If set to true, the plain URL is used as the default. If set to false, the SSL URL \n is used as the default \n
getFEHostURL_shortDescription=Retrieves the URL for the domain Frontend Host.
getFEHostURL_description=\n Retrieves the plain, SSL, or default URL for the domain Frontend Host from the service table. \n The retrieved the URL depends on the value for type. \n
getFEHostURL_syntax=getFEHostURL(type) \n- type specifies the type of URL that is returned. It can have the following values: \n \n- plain = Retrieves the plain URL that is set for the Frontend Host. \n \n- ssl = Retrieves the SSL URL that is set for the Frontend Host. \n \n- default = Retrieves either the plain or SSL URL, depending on which is set as the default. \n
deleteFEHost_shortDescription=Deletes the domain Frontend Host from the service table.
deleteFEHost_description=\n Deletes all of the stored domain Frontend Host URLs from the service table. \n
deleteFEHost_syntax=\n deleteFEHost()
resync_shortDescription=Resync a system component configuration files.
resync_description=\nResync a system component configuration files from admin server \n to corresponding remote node. This command must be invoked \n outside edit session. \n \nNOTE: This command automatically starts an edit session to \n prevent from configuration changes during the resync. \n
resync_syntax=\nresync(compName) \n- compName = the name of system component that will be resync'ed. \n
resyncAll_shortDescription=Resync all system components' configuration files.
resyncAll_description=
resyncAll_syntax=\nresyncAll() \n
showComponentChanges_shortDescription=Show a system component configuration files changes on the remote node.
showComponentChanges_description=\nShow a system component configuration files changes on the remote \n node compare to admin server. \n
showComponentChanges_syntax=\nshowComponentChanges([compName]) \n- compName = Optional. The system component name for which to \n perform the configuration comparison. If not specified, then \n the comparison is done for all system components in the domain. \n
pullComponentChanges_shortDescription=Pull a system component configuration files changes from remote node.
pullComponentChanges_description=\nPull a system component configuration files changes from the remote \n node to current edit session. This command requires an active \n edit session. \n
pullComponentChanges_syntax=\npullComponentChanges(compName) \n- compName = The system component name for which to perform the \n configuration pulling. \n
enableOverwriteComponentChanges_shortDescription=Overwrite the changes to all system component during activation.
enableOverwriteComponentChanges_description=\n Overwrite the changes to all system components during activation. \n This command requires an active edit session. \n
enableOverwriteComponentChanges_syntax=\nenableOverwriteComponentChanges() \n
nmRestart_shortDescription=Restart the NodeManager instance.
nmRestart_description=\nRestarts the connected NodeManager instance. \nWLST must be connected to Node Manager to run this command. \n \nIf you do not specify a timeout using the timeout argument, the \nargument defaults to 0, which means the client will block until \nit successfully reconnects to the restarted NodeManager. \n \nIn the event of an error, the command returns a WLSTException. \n \nNote that this command will only work when the Node Manager is \nstarted with startNodeManager.sh (startNodeManager.cmd on Windows) \nscript. If the Node Manager was started some other way such as \nwith a custom script, nmRestart command may time-out without \nrestarting the Node Manager. \n
nmRestart_syntax=nmRestart([timeout]) \n- timeout = Optional. Number of milliseconds to wait for the \n client to reconnect to the NodeManager after restart. Once \n number of milliseconds has been exceeded, the command returns \n an error indicating timeout. By default the command will \n block until the client can successfully connect to the \n restarted NodeManager.
nmExecScript_shortDescription=NodeManager executes the named script
nmExecScript_description=\nExecutes the named script using the connected Node Manager. \nWLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n \nThe NodeManager will look for the named script in one of the \nwell known locations. If the script name matches a file in the \nwell known location, that file and directory will be used as an \nexecutable. The NodeManager will supply its environment to the \nscript along with any values supplied in the request. By default \nthe NodeManager will wait until the script finishes execution.
nmExecScript_syntax=nmExecScript(scriptName, [scriptDir], [scriptProps], [writer], [timeout]) \n- scriptName = Name of the script to be executed. This must be \n the name of the script without any path information and must \n exactly with the file on disk. \n \n- scriptDir = Optional. Directory under the Domain's bin \n directory where the NodeManager can find the script. This must \n be one of the well known script locations: service_migration or \n patching. By default the NodeManager will check the \n service_migration directory. \n \n- scriptProps = Optional. Properties to supply the script as \n environment variables. Defaults to None. \n \n- writer = Optional. java.io.Writer object to which the script \n output is written. This argument defaults to the WLST writer. \n \n- timeout = Optional. Number of milliseconds to wait for the \n script to finish execution. After waiting for the number of \n milliseconds the NodeManager will attempt to cancel the script \n process, collect any available output and cleanup. The \n NodeManager will report the timeout as an error. By default \n the NodeManager will wait for the script to complete its \n execution.
setShowLSResult_shortDescription=Set if ls() should surpress its stdout.
setShowLSResult_description=\n Set function to set if wlst ls() logs information to stdout or console. \nSet value to false can suppress the output of ls() \nand set the value to true allows the ls() prints information to stdout. \n
setShowLSResult_syntax=setShowLSResult(showResult) \n- showResult = boolean to set if ls() should stdout information. \n
startPartitionWait_shortDescription=Starts a domain partition and waits until the partition has started.
startPartitionWait_description=Starts the given partition and waits until the partition \nreaches the requested state (by default the RUNNING state). \n \nThe partition must already exist. Therefore startPartitionWait should \nnot be used in the edit session that creates the partition. \n \nBy default partitions are created in SHUTDOWN state, so they must be \nstarted to activate any resources or applications defined in the partition. \n \nstartPartitionWait is a convenience command. For full control of a \npartition''s lifecycle (including shutting down a partition) use the \nPartitionLifeCycleRuntimeMBean. \n
startPartitionWait_syntax=startPartitionWait(partition, [initialState], [timeout]) \n- partition = The partition to start. This must be a PartitionMBean, for \n example one returned by Domain.createPartition() or Domain.lookupPartition(). \n- initialState = Optional. Either ''RUNNING'' or ''ADMIN''. Defaults to ''RUNNING'' \n- timeout = Optional. A timeout in ms. Defaults to 60 seconds. If the \n partition does not start within the timeout then the command will \n generate a timeout exception. \n
forceShutdownPartitionWait_shortDescription=Shuts down a domain partition and waits until the partition has shut down.
forceShutdownPartitionWait_description=Shuts down the given partition and waits until the partition \nreaches the SHUTDOWN state. \n \nThe partition must already exist. Therefore forceShutdownPartitionWait \nshould not be used in the edit session that created the partition. \n \nforceShutdownPartitionWait is a convenience command. For full control of a \npartition''s lifecycle use the PartitionLifeCycleRuntimeMBean. \n
forceShutdownPartitionWait_syntax=forceShutdownPartitionWait(partition, [timeout]) \n- partition = The partition to shutdown. This must be a PartitionMBean, for \n example one returned by Domain.createPartition() or Domain.lookupPartition(). \n- timeout = Optional. A timeout in ms. Defaults to 60 seconds. If the \n partition does not stop within the timeout then the command will \n generate a timeout exception. \n
migrateResourceGroup_shortDescription=Migrates a domain partition resource group from one target to another target.
migrateResourceGroup_description=Migrates a partition resource group from one target (server or cluster) \nto another target. Partition resource groups are targeted to VirtualTargets. \nA VirtualTarget is in turn targeted to a cluster or a server. This command \nlets you migrate a resource group from one cluster (or server) to another. \n \nHTTP session state is preserved during this migration if you are migrating \nfrom one cluster to another cluster. Otherwise HTTP session state will \nbe loss. \n
migrateResourceGroup_syntax=migrateResourceGroup(partitionVirtualTarget, currentTarget, newTarget, [timeout]) \n- partitionVirtualTarget = The VirtualTarget the resource group is \n currently running on. \n- currentTarget = The physical target (server or cluster) within the \n partitionVirtualTarget. This is the physical target you want to \n migrate off of. \n- newTarget = The physical target (server or cluster) you want to \n migrate to. This will replace the currentTarget in the partitionVirtualTarget. \n- timeout = timeout in ms. -1 means to wait indefinitely. Default is -1. \n \nReturns: ResourceGroupMigrationTaskMBean \n
exportPartition_shortDescription=Exports a domain partition into a partition archive.
exportPartition_description=Exports a partition into a partition archive that can be used later with the \nimportPartition command. Copies a partition''s configuration into the archive \nfile as well as (optionally) the partition''s applications and libraries. \nAlso creates an attributes.json file that can be used to modify the partitions \nconfiguration on import. \n
exportPartition_syntax=exportPartition(partitionName, expArchPath, [includeAppsNLibs], [keyFile]) \n- partitionName = The name of the partition to export \n- expArchPath = Full path to a directory to save the partition archive to. \n The path must be reachable by the admin server. The archive file will be \n named PartitionName.zip. \n- includeAppsNLibs = Optional. True to include application and library binaries \n in the partition archive. False to not include them. Defaults to true. \n- keyFile = Optional. Full path to a file containing a string to use as the \n encryption key to encrypt attributes in the partition archive. The path \n must be reachable by the admin server. Defaults to using an internal key. \n \nReturns: ImportExportPartitionTaskMBean \n
importPartition_shortDescription=Imports a domain partition from a partition archive
importPartition_description=Imports a partition archive (generated by the exportPartition command)into \na domain. Supports an attributes.json file that can be used to modify the \npartitions configuration on import. \n
importPartition_syntax=importPartition(archiveFileName, [partitionName], [createNew], [keyFile]) \n- archiveFileName = full path to the partition archive to import. Path \n must be reachable by the admin server. importPartition will also look \n for a file, PartitionName-attributes.json, in the same directory as \n the partition archive. If it is found then the values in that file will \n override those in the partition archive. \n- partitionName = Optional. Name to use for partition when created in the \n new domain. Defaults to the original name of the partition. \n- createNew = Optional. Controls how resource group template conflicts are \n handled. All resource group templates used by the partition are \n contained in the partition archive and are imported along with the \n partition into the domain. If the resource group template already exists \n in the domain and this flag is false, then the existing resource group \n template is used. If this flag is true, then a new resource group template \n is created using a new name. If this flag is not specified, then the \n import will fail if the resource group template already exists in the \n domain. \n- keyFile = Optional. Full path to a file containing a string to use as the \n encryption key to decrypt attributes in the partition archive. The path \n must be reachable by the admin server. Defaults to using an internal key. \n \nReturns: ImportExportPartitionTaskMBean \n
uploadUserFileWait_shortDescription=Uploads user file to partition user file system
uploadUserFileWait_description=Uploads generic user file from the client file system to specified \ndirectory location under the partition user file system. \n
uploadUserFileWait_syntax=uploadUserFileWait(uploadDir, clientFileName, [partitionName], [overwrite]) \n- uploadDir = relative path to the directory where the file is to be \n uploaded. The root will be partition user file system directory \n for specified or implied partition. \n- clientFileName = absolute path, on the client file system, to the file \n to be uploaded. File must exist and be readable by the client. \n- partitionName = Optional. If client is running in partition context \n and name is not specified, current partition name will be used. If it \n is specified, it must match current partition. If client is running in \n domain context, partition name must be specified and it has to match an \n existing partition. \n- overwrite = Optional. Controls overwrite behavior if file already exists \n in target location. Defaults to false. \n \nReturns: String containing absolute path to the uploaded file. \n
rolloutUpdate_shortDescription=Rollout changes to targeted servers without interrupting service
rolloutUpdate_description=Rollout changes to targeted servers without interrupting service or causing session loss. \n The target is always required, and can be the Domain, a Cluster, or a (comma separated) list of servers. \n If the next three fields are specified, the OracleHome will be updated for the targeted servers. \n If the JavaHome field is specified, the JavaHome location will be updated for the targeted servers and their associated Node Managers. \n If the Application properties file is specified, the contents of the file will be read and used to update the included applications across the targeted servers. \n All operations will result in servers being restarted, but will be done in a way that doesn't interrupt service for the end user. \n Preventing service interruption requires a proper High Availability configuration. \n
rolloutUpdate_syntax=rolloutUpdate(target, [rolloutOracleHome, backupOracleHome, isRollback], [javaHome], [applicationProperties], [options]) \n target - The name of the Domain, Cluster, or list of servers on which the rollout will take effect \n rolloutOracleHome - The location of the OracleHome archive or directory that will replace the current OracleHome \n backupOracleHome - The location where the current OracleHome will be moved \n isRollback - 'true' if the rolloutOracleHome has a lower patch version than the current OracleHome \n javaHome - The location of the JavaHome to be used \n applicationProperties - The location of the text file containing the properties of each application that will be updated \n options - Can include \n \t isDryRun=<true|false>. TRUE if the operation is to be evaluated but not executed, default is FALSE \n \t isAutoRevertOnFailure=<true|false>. TRUE if the operation should automatically revert on failure, FALSE (default) if the operation should stop on failure and wait for the user to resume it \n \t isSessionCompatible=<true|false>. TRUE (default) if the sessions between the patched and unpatched versions are compatible, FALSE if special consideration should be taken into account to preserve \n \t unpatched sessions \n \t shutdownTimeout=shutdownTimeoutSeconds. Time limit (in seconds) for server to complete a graceful shutdown.The default value is 0 indicating no timeout \n \t delaybetweennodes=delayTimeSeconds. Time delay (in seconds) between the shutdown of servers on one node and the shutdown of servers on the next node in the workflow.The default value is 60 sec \n \t migrationProperties=path to a JSON text file that describes migration strategy for singleton services \n \t extensions=string argument containing the location of an extension jar file, optionally followed by a "," separated list of name/value pairs that will be passed as options to the extensions within that jar. \n \t Multiple extensions could be included by separating the extensions with a ":" marker. \n \t extensionProperties=path to a JSON text file that defines the extension properties \n MigrationProperties JSON File Format : \n \t '{'"migrations":'[' '{' \n \t \t "source":"< source server name >", \n \t \t "destination":"< destination server name >", \n \t \t "migrationType":"< jms | jta | server | all | none >", \n \t \t "failback":"< true | false >" \n \t '}' ']' '}' \n ApplicationProperties JSON File Format : \n \t '{'"applications":'[' '{' \n \t \t "applicationName":"< application name >", \n \t \t "patchedLocation":"< path to patched location >", \n \t \t "backupLocation":"< path to backup location >", \n \t '}' ']' '}' \n ExtensionProperties JSON File Format : \n \t '{'"extensionProperties":'[' '{' \n \t \t "extensionJar":"< path to extension jar file >", \n \t \t "extensionParameters":"scriptName=< name of the script >" \n \t '}' ']' '}' \n
rolloutOracleHome_shortDescription=Rollout changes to the OracleHome bits of targeted servers without interrupting service
rolloutOracleHome_description=Rollout changes to the OracleHome bits of targeted servers without interrupting service \n The target is always required, and can be the Domain, a Cluster, or a (comma separated) list of servers. \n The next three fields specify the parameters needed to update OracleHome on the targeted servers. \n This operation will result in servers being restarted, but will be done in a way that doesn't interrupt service for the end user. \n Preventing service interruption requires a proper High Availability configuration. \n
rolloutOracleHome_syntax=rolloutOracleHome(target, rolloutOracleHome, backupOracleHome, isRollback, [options]) \n target - The name of the Domain, Cluster, or list of servers on which the rollout will take effect \n rolloutOracleHome - The location of the OracleHome archive or directory that will replace the current OracleHome \n backupOracleHome - The location where the current OracleHome will be moved \n isRollback - 'true' if the rolloutOracleHome has a lower patch version than the current OracleHome \n options - Can include \n \t isDryRun=<true|false>. TRUE if the operation is to be evaluated but not executed, default is FALSE \n \t isAutoRevertOnFailure=<true|false>. TRUE if the operation should automatically revert on failure, FALSE (default) if the operation should stop on failure and wait for the user to resume it \n \t isSessionCompatible=<true|false>. TRUE (default) if the sessions between the patched and unpatched versions of OracleHome are compatible, FALSE if special consideration should be taken into \n \t account to preserve unpatched sessions \n \t shutdownTimeout=shutdownTimeoutSeconds. Time limit (in seconds) for server to complete a graceful shutdown.The default value is 0 indicating no timeout \n \t delaybetweennodes=delayTimeSeconds. Time delay (in seconds) between the shutdown of servers on one node and the shutdown of servers on the next node in the workflow.The default value is 60 sec \n \t migrationProperties=path to a JSON text file that describes migration strategy for singleton services \n \t extensions=string argument containing the location of an extension jar file, optionally followed by a "," separated list of name/value pairs that will be passed as options to the extensions within that jar. \n \t Multiple extensions could be included by separating the extensions with a ":" marker. \n \t extensionProperties=path to a JSON text file that defines the extension properties \n MigrationProperties JSON File Format : \n \t '{'"migrations":'[' '{' \n \t \t "source":"< source server name >", \n \t \t "destination":"< destination server name >", \n \t \t "migrationType":"< jms | jta | server | all | none >", \n \t \t "failback":"< true | false >" \n \t '}' ']' '}' \n ExtensionProperties JSON File Format : \n \t '{'"extensionProperties":'[' '{' \n \t \t "extensionJar":"< path to extension jar file >", \n \t \t "extensionParameters":"scriptName=< name of the script >" \n \t '}' ']' '}' \n
rolloutJavaHome_shortDescription=Rollout a new JavaHome location for targeted servers without interrupting service
rolloutJavaHome_description=Rollout a new JavaHome location for targeted servers without interrupting service \n The target is always required, and can be the Domain, a Cluster, or a (comma separated) list of servers. \n The JavaHome field specifies the location of the new JavaHome to be used by the targeted servers and their associated Node Managers. \n All operations will result in servers being restarted, but will be done in a way that doesn't interrupt service for the end user. \n Preventing service interruption requires a proper High Availability configuration. \n
rolloutJavaHome_syntax=rolloutJavaHome(target, javaHome, [options]) \n target - The name of the Domain, Cluster, or list of servers on which the rollout will take effect \n javaHome - The location of the JavaHome to be used \n options - Can include \n \t isDryRun=<true|false>. TRUE if the operation is to be evaluated but not executed, default is FALSE \n \t isAutoRevertOnFailure=<true|false>. TRUE if the operation should automatically revert on failure, FALSE (default) if the operation should stop on failure and wait for the user to resume it \n \t isSessionCompatible=<true|false>. TRUE (default) if the sessions between the patched and unpatched versions of JavaHome are compatible, FALSE if special consideration should be taken into \n \t account to preserve unpatched sessions \n \t shutdownTimeout=shutdownTimeoutSeconds. Time limit (in seconds) for server to complete a graceful shutdown.The default value is 0 indicating no timeout \n \t delaybetweennodes=delayTimeSeconds. Time delay (in seconds) between the shutdown of servers on one node and the shutdown of servers on the next node in the workflow.The default value is 60 sec \n \t migrationProperties=path to a JSON text file that describes migration strategy for singleton services \n \t extensions=string argument containing the location of an extension jar file, optionally followed by a "," separated list of name/value pairs that will be passed as options to the extensions within that jar. \n \t Multiple extensions could be included by separating the extensions with a ":" marker. \n \t extensionProperties=path to a JSON text file that defines the extension properties \n MigrationProperties JSON File Format : \n \t '{'"migrations":'[' '{' \n \t \t "source":"< source server name >", \n \t \t "destination":"< destination server name >", \n \t \t "migrationType":"< jms | jta | server | all | none >", \n \t \t "failback":"< true | false >" \n \t '}' ']' '}' \n ExtensionProperties JSON File Format : \n \t '{'"extensionProperties":'[' '{' \n \t \t "extensionJar":"< path to extension jar file >", \n \t \t "extensionParameters":"scriptName=< name of the script >" \n \t '}' ']' '}' \n
rolloutApplications_shortDescription=Rollout changes to deployed applications on the targeted servers without interrupting service
rolloutApplications_description=Rollout changes to deployed applications on the targeted servers without interrupting service \n The target is always required, and can be the Domain, a Cluster, or a (comma separated) list of servers. \n The Application properties file specified, will be read and used to update the included applications across the targeted servers. \n All operations will result in servers being restarted, but will be done in a way that doesn't interrupt service for the end user. \n Preventing service interruption requires a proper High Availability configuration. \n
rolloutApplications_syntax=rolloutApplications(target, applicationProperties, [options]) \n target - The name of the Domain, Cluster, or list of servers on which the rollout will take effect \n applicationProperties - The location of the text file containing the properties of each application that will be updated \n options - Can include \n \t isDryRun=<true|false>. TRUE if the operation is to be evaluated but not executed, default is FALSE \n \t isAutoRevertOnFailure=<true|false>. TRUE if the operation should automatically revert on failure, FALSE (default) if the operation should stop on failure and wait for the user to resume it \n \t shutdownTimeout=shutdownTimeoutSeconds. Time limit (in seconds) for server to complete a graceful shutdown.The default value is 0 indicating no timeout \n \t delaybetweennodes=delayTimeSeconds. Time delay (in seconds) between the shutdown of servers on one node and the shutdown of servers on the next node in the workflow.The default value is 60 sec \n \t migrationProperties=path to a JSON text file that describes migration strategy for singleton services \n \t extensions=string argument containing the location of an extension jar file, optionally followed by a "," separated list of name/value pairs that will be passed as options to the extensions within that jar. \n \t Multiple extensions could be included by separating the extensions with a ":" marker. \n \t extensionProperties=path to a JSON text file that defines the extension properties \n MigrationProperties JSON File Format : \n \t '{'"migrations":'[' '{' \n \t \t "source":"< source server name >", \n \t \t "destination":"< destination server name >", \n \t \t "migrationType":"< jms | jta | server | all | none >", \n \t \t "failback":"< true | false >" \n \t '}' ']' '}' \n ApplicationProperties JSON File Format : \n \t '{'"applications":'[' '{' \n \t \t "applicationName":"< application name >", \n \t \t "patchedLocation":"< path to patched location >", \n \t \t "backupLocation":"< path to backup location >", \n \t '}' ']' '}' \n ExtensionProperties JSON File Format : \n \t '{'"extensionProperties":'[' '{' \n \t \t "extensionJar":"< path to extension jar file >", \n \t \t "extensionParameters":"scriptName=< name of the script >" \n \t '}' ']' '}' \n
rollingRestart_shortDescription=Restarts the targeted servers one at a time without interrupting service
rollingRestart_description=Restarts the targeted servers one at a time without interrupting service \n The target is always required, and can be the Domain, a Cluster, or a (comma separated) list of servers. \n All operations will result in servers being restarted, but will be done in a way that doesn't interrupt service for the end user. \n Preventing service interruption requires a proper High Availability configuration. \n
rollingRestart_syntax=rollingRestart(target, [options]) \n target - The name of the Domain, Cluster, or list of servers on which the rollout will take effect \n options - Can include \n \t isDryRun=<true|false>. TRUE if the operation is to be evaluated but not executed, default is FALSE \n \t isAutoRevertOnFailure=<true|false>. TRUE if the operation should automatically revert on failure, FALSE (default) if the operation should stop on failure and wait for the user to resume it \n \t shutdownTimeout=shutdownTimeoutSeconds. Time limit (in seconds) for server to complete a graceful shutdown.The default value is 0 indicating no timeout \n \t delaybetweennodes=delayTimeSeconds. Time delay (in seconds) between the shutdown of servers on one node and the shutdown of servers on the next node in the workflow.The default value is 60 sec \n \t migrationProperties=path to a JSON text file that describes migration strategy for singleton services \n \t extensions=string argument containing the location of an extension jar file, optionally followed by a "," separated list of name/value pairs that will be passed as options to the extensions within that jar. \n \t Multiple extensions could be included by separating the extensions with a ":" marker. \n \t extensionProperties=path to a JSON text file that defines the extension properties \n MigrationProperties JSON File Format : \n \t '{'"migrations":'[' '{' \n \t \t "source":"< source server name >", \n \t \t "destination":"< destination server name >", \n \t \t "migrationType":"< jms | jta | server | all | none >", \n \t \t "failback":"< true | false >" \n \t '}' ']' '}' \n ExtensionProperties JSON File Format : \n \t '{'"extensionProperties":'[' '{' \n \t \t "extensionJar":"< path to extension jar file >", \n \t \t "extensionParameters":"scriptName=< name of the script >" \n \t '}' ']' '}' \n
nmPrintThreadDump_shortDescription=Print thread dump of a server using Node Manager.
nmPrintThreadDump_description=\nPrint thread dump of a server in the current domain using Node Manager. \nWLST must be connected to Node Manager to run this command. \nIn the event of an error, the command returns a WLSTException. \n
nmPrintThreadDump_syntax=nmPrintThreadDump([serverName]) \n- serverName = Name of the server to print thread dump. \n

