package org.apache.xmlbeans.impl.piccolo.xml;

import java.io.CharConversionException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.Stack;
import org.apache.xmlbeans.XmlError;
import org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;
import org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;
import org.apache.xmlbeans.impl.piccolo.util.IndexedObject;
import org.apache.xmlbeans.impl.piccolo.util.LongStack;
import org.apache.xmlbeans.impl.piccolo.util.RecursionException;
import org.apache.xmlbeans.impl.piccolo.util.StringStack;
import org.xml.sax.SAXException;

final class PiccoloLexer {
   private int totalEntityBytesPushed;
   private int maxTotalEntityBytes;
   public static final int YYEOF = -1;
   private static final int YY_BUFFERSIZE = 16384;
   public static final int DTD_TAG_START = 31;
   public static final int CLOSE_TAG_NS = 20;
   public static final int DTD_IGNORE = 28;
   public static final int PI = 4;
   public static final int DTD_TAG_SQSTRING_BUFFERED = 35;
   public static final int TAG_VALUE_ENTITY = 11;
   public static final int ENTITYREF = 3;
   public static final int DTD_ATT_NAME = 23;
   public static final int DTD_TAG = 30;
   public static final int DTD_TAG_VALUE_EXTERNAL_ENTITY = 33;
   public static final int TAG = 6;
   public static final int TAG_VALUE_ENTITYREF = 12;
   public static final int YYINITIAL = 0;
   public static final int DTD_TAG_VALUE_PARAM_ENTITYREF = 37;
   public static final int TAG_NS = 8;
   public static final int DTD_NMTOKENS = 26;
   public static final int TAG_SQSTRING_NORMALIZE = 16;
   public static final int DTD_PUBLIC_ID = 29;
   public static final int XML_TAG = 1;
   public static final int TAG_QSTRING_NORMALIZE = 15;
   public static final int TAG_START = 7;
   public static final int DTD_COMMENT = 27;
   public static final int DTD_TAG_VALUE_ENTITY = 32;
   public static final int TAG_QSTRING_CDATA_BUFFERED = 13;
   public static final int TAG_SQSTRING_CDATA_BUFFERED = 14;
   public static final int DTD_TAG_VALUE_STD_ENTITYREF = 36;
   public static final int PI_WS = 5;
   public static final int DTD_TAG_QSTRING_BUFFERED = 34;
   public static final int TAG_START_NS = 9;
   public static final int DTD_ATTLIST_ELEMENT = 22;
   public static final int DTD_ATT_TYPE = 24;
   public static final int DTD_ENTITY_DECL = 25;
   public static final int TAG_QSTRING_NORMALIZE_BUFFERED = 17;
   public static final int TAG_SQSTRING_NORMALIZE_BUFFERED = 18;
   public static final int TAG_VALUE = 10;
   public static final int CLOSE_TAG = 19;
   public static final int YYINITIAL_DIRECT = 2;
   public static final int DTD = 21;
   private static final String yycmap_packed = "\t\u0000\u0001\u0001\u0001:\u0002\u0000\u0001\u0006\u0012\u0000\u0001\u0010\u0001\u0018\u00014\u0001,\u0001\u0005\u0001\u0015\u0001\u000b\u00015\u0001(\u0001/\u00010\u00011\u00012\u0001!\u0001\u0002\u00016\n\t\u0001\u0003\u0001\u0016\u0001\n\u00019\u0001\u0014\u0001\f\u0001\u0005\u0001\u001e\u0001+\u0001#\u0001$\u0001\u0019\u0001&\u0001.\u0001\u0004\u0001\u001c\u0001\u0004\u0001'\u0001\u0013\u0001\u0012\u0001\u001a\u0001 \u0001)\u0001-\u0001%\u0001\u001f\u0001\u001b\u0001*\u0002\u0004\u0001\u0011\u0001\u001d\u0001\u0004\u0001\"\u0001\u0000\u0001\u0017\u0001\u0000\u0001\u0004\u0001\u0000\u0001;\u0005B\u0001A\u0004\u0004\u0001\u000f\u0001\u000e\u00017\u0001?\u0001<\u0001=\u0001\u0004\u00018\u0001@\u0001>\u0002\u0004\u0001\r\u0002\u0004\u0001\u0000\u00013:\u0000\u0001\b\b\u0000\u0017\u0007\u0001\u0000\u001f\u0007\u0001\u0000:\u0007\u0002\u0000\u000b\u0007\u0002\u0000\b\u0007\u0001\u00005\u0007\u0001\u0000D\u0007\t\u0000$\u0007\u0003\u0000\u0002\u0007\u0004\u0000\u001e\u00078\u0000Y\u0007\u0012\u0000\u0007\u0007\u000e\u0000\u0002\b.\u0000F\b\u001a\u0000\u0002\b$\u0000\u0001\u0007\u0001\b\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0014\u0007\u0001\u0000,\u0007\u0001\u0000\u0007\u0007\u0003\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0012\u0007\r\u0000\f\u0007\u0001\u0000B\u0007\u0001\u0000\f\u0007\u0001\u0000$\u0007\u0001\u0000\u0004\b\t\u00005\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0002\u0007\u0003\u0000\u001c\u0007\u0002\u0000\b\u0007\u0002\u0000\u0002\u00077\u0000&\u0007\u0002\u0000\u0001\u0007\u0007\u0000&\u0007\n\u0000\u0011\b\u0001\u0000\u0017\b\u0001\u0000\u0003\b\u0001\u0000\u0001\b\u0001\u0000\u0002\b\u0001\u0000\u0001\b\u000b\u0000\u001b\u0007\u0005\u0000\u0003\u0007.\u0000\u001a\u0007\u0005\u0000\u0001\b\n\u0007\b\b\r\u0000\n\b\u0006\u0000\u0001\bG\u0007\u0002\u0000\u0005\u0007\u0001\u0000\u000f\u0007\u0001\u0000\u0004\u0007\u0001\u0000\u0001\u0007\u000f\b\u0002\u0007\u0002\b\u0001\u0000\u0004\b\u0002\u0000\n\bȇ\u0000\u0003\b\u0001\u00005\u0007\u0002\u0000\u0001\b\u0001\u0007\u0010\b\u0003\u0000\u0004\b\u0003\u0000\n\u0007\u0002\b\u0002\u0000\n\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0004\u0007\u0002\u0000\u0001\b\u0001\u0000\u0007\b\u0002\u0000\u0002\b\u0002\u0000\u0003\b\t\u0000\u0001\b\u0004\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0002\b\u0002\u0000\n\b\u0002\u0007\u0010\u0000\u0001\b\u0002\u0000\u0006\u0007\u0004\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0002\u0000\u0001\b\u0001\u0000\u0005\b\u0004\u0000\u0002\b\u0002\u0000\u0003\b\u000b\u0000\u0004\u0007\u0001\u0000\u0001\u0007\u0007\u0000\n\b\u0002\b\u0003\u0007\f\u0000\u0003\b\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0005\u0007\u0002\u0000\u0001\b\u0001\u0007\b\b\u0001\u0000\u0003\b\u0001\u0000\u0003\b\u0012\u0000\u0001\u0007\u0005\u0000\n\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0002\u0000\u0004\u0007\u0002\u0000\u0001\b\u0001\u0007\u0006\b\u0003\u0000\u0002\b\u0002\u0000\u0003\b\b\u0000\u0002\b\u0004\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\u0006\u0007\u0003\u0000\u0003\u0007\u0001\u0000\u0004\u0007\u0003\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0003\u0007\u0003\u0000\b\u0007\u0001\u0000\u0003\u0007\u0004\u0000\u0005\b\u0003\u0000\u0003\b\u0001\u0000\u0004\b\t\u0000\u0001\b\u000f\u0000\t\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\n\u0007\u0001\u0000\u0005\u0007\u0004\u0000\u0007\b\u0001\u0000\u0003\b\u0001\u0000\u0004\b\u0007\u0000\u0002\b\t\u0000\u0002\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\n\u0007\u0001\u0000\u0005\u0007\u0004\u0000\u0007\b\u0001\u0000\u0003\b\u0001\u0000\u0004\b\u0007\u0000\u0002\b\u0007\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\u0010\u0007\u0004\u0000\u0006\b\u0002\u0000\u0003\b\u0001\u0000\u0004\b\t\u0000\u0001\b\b\u0000\u0002\u0007\u0004\u0000\n\b\u0091\u0000.\u0007\u0001\u0000\u0001\u0007\u0001\b\u0002\u0007\u0007\b\u0005\u0000\u0006\u0007\u0001\b\b\b\u0001\u0000\n\b'\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0001\u0007\u0006\u0000\u0004\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\b\u0002\u0007\u0006\b\u0001\u0000\u0002\b\u0001\u0007\u0002\u0000\u0005\u0007\u0001\u0000\u0001\b\u0001\u0000\u0006\b\u0002\u0000\n\b>\u0000\u0002\b\u0006\u0000\n\b\u000b\u0000\u0001\b\u0001\u0000\u0001\b\u0001\u0000\u0001\b\u0004\u0000\u0002\b\b\u0007\u0001\u0000!\u0007\u0007\u0000\u0014\b\u0001\u0000\u0006\b\u0004\u0000\u0006\b\u0001\u0000\u0001\b\u0001\u0000\u0015\b\u0003\u0000\u0007\b\u0001\u0000\u0001\bæ\u0000&\u0007\n\u0000'\u0007\t\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0005\u0007)\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u000b\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0001\u0007\u0005\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0002\u0007\u0001\u0000\u0001\u0007(\u0000\u0001\u0007\t\u0000\u0001\u0007\u0002\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0007\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0007\u0007(\u0000\u0001\u0007\u0004\u0000\u0001\u0007\b\u0000\u0001\u0007ఆ\u0000\u009c\u0007\u0004\u0000Z\u0007\u0006\u0000\u0016\u0007\u0002\u0000\u0006\u0007\u0002\u0000&\u0007\u0002\u0000\u0006\u0007\u0002\u0000\b\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u001f\u0007\u0002\u00005\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0003\u0007\u0001\u0000\u0007\u0007\u0003\u0000\u0004\u0007\u0002\u0000\u0006\u0007\u0004\u0000\r\u0007\u0005\u0000\u0003\u0007\u0001\u0000\u0007\u0007Ó\u0000\r\b\u0004\u0000\u0001\bD\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0002\u0000\u0001\u0007Q\u0000\u0003\u0007ຂ\u0000\u0001\b\u0001\u0000\u0001\u0007\u0019\u0000\t\u0007\u0006\b\u0001\u0000\u0005\b\u000b\u0000T\u0007\u0004\u0000\u0002\b\u0002\u0000\u0002\b\u0002\u0000Z\u0007\u0001\u0000\u0003\b\u0006\u0000(\u0007᳓\u0000冦\u0007ౚ\u0000⮤\u0007⡜\u0000";
   private static final char[] yycmap = yy_unpack_cmap("\t\u0000\u0001\u0001\u0001:\u0002\u0000\u0001\u0006\u0012\u0000\u0001\u0010\u0001\u0018\u00014\u0001,\u0001\u0005\u0001\u0015\u0001\u000b\u00015\u0001(\u0001/\u00010\u00011\u00012\u0001!\u0001\u0002\u00016\n\t\u0001\u0003\u0001\u0016\u0001\n\u00019\u0001\u0014\u0001\f\u0001\u0005\u0001\u001e\u0001+\u0001#\u0001$\u0001\u0019\u0001&\u0001.\u0001\u0004\u0001\u001c\u0001\u0004\u0001'\u0001\u0013\u0001\u0012\u0001\u001a\u0001 \u0001)\u0001-\u0001%\u0001\u001f\u0001\u001b\u0001*\u0002\u0004\u0001\u0011\u0001\u001d\u0001\u0004\u0001\"\u0001\u0000\u0001\u0017\u0001\u0000\u0001\u0004\u0001\u0000\u0001;\u0005B\u0001A\u0004\u0004\u0001\u000f\u0001\u000e\u00017\u0001?\u0001<\u0001=\u0001\u0004\u00018\u0001@\u0001>\u0002\u0004\u0001\r\u0002\u0004\u0001\u0000\u00013:\u0000\u0001\b\b\u0000\u0017\u0007\u0001\u0000\u001f\u0007\u0001\u0000:\u0007\u0002\u0000\u000b\u0007\u0002\u0000\b\u0007\u0001\u00005\u0007\u0001\u0000D\u0007\t\u0000$\u0007\u0003\u0000\u0002\u0007\u0004\u0000\u001e\u00078\u0000Y\u0007\u0012\u0000\u0007\u0007\u000e\u0000\u0002\b.\u0000F\b\u001a\u0000\u0002\b$\u0000\u0001\u0007\u0001\b\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0014\u0007\u0001\u0000,\u0007\u0001\u0000\u0007\u0007\u0003\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0012\u0007\r\u0000\f\u0007\u0001\u0000B\u0007\u0001\u0000\f\u0007\u0001\u0000$\u0007\u0001\u0000\u0004\b\t\u00005\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0002\u0007\u0003\u0000\u001c\u0007\u0002\u0000\b\u0007\u0002\u0000\u0002\u00077\u0000&\u0007\u0002\u0000\u0001\u0007\u0007\u0000&\u0007\n\u0000\u0011\b\u0001\u0000\u0017\b\u0001\u0000\u0003\b\u0001\u0000\u0001\b\u0001\u0000\u0002\b\u0001\u0000\u0001\b\u000b\u0000\u001b\u0007\u0005\u0000\u0003\u0007.\u0000\u001a\u0007\u0005\u0000\u0001\b\n\u0007\b\b\r\u0000\n\b\u0006\u0000\u0001\bG\u0007\u0002\u0000\u0005\u0007\u0001\u0000\u000f\u0007\u0001\u0000\u0004\u0007\u0001\u0000\u0001\u0007\u000f\b\u0002\u0007\u0002\b\u0001\u0000\u0004\b\u0002\u0000\n\bȇ\u0000\u0003\b\u0001\u00005\u0007\u0002\u0000\u0001\b\u0001\u0007\u0010\b\u0003\u0000\u0004\b\u0003\u0000\n\u0007\u0002\b\u0002\u0000\n\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0004\u0007\u0002\u0000\u0001\b\u0001\u0000\u0007\b\u0002\u0000\u0002\b\u0002\u0000\u0003\b\t\u0000\u0001\b\u0004\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0002\b\u0002\u0000\n\b\u0002\u0007\u0010\u0000\u0001\b\u0002\u0000\u0006\u0007\u0004\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0002\u0000\u0001\b\u0001\u0000\u0005\b\u0004\u0000\u0002\b\u0002\u0000\u0003\b\u000b\u0000\u0004\u0007\u0001\u0000\u0001\u0007\u0007\u0000\n\b\u0002\b\u0003\u0007\f\u0000\u0003\b\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0005\u0007\u0002\u0000\u0001\b\u0001\u0007\b\b\u0001\u0000\u0003\b\u0001\u0000\u0003\b\u0012\u0000\u0001\u0007\u0005\u0000\n\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0002\u0000\u0002\u0007\u0002\u0000\u0016\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0002\u0007\u0002\u0000\u0004\u0007\u0002\u0000\u0001\b\u0001\u0007\u0006\b\u0003\u0000\u0002\b\u0002\u0000\u0003\b\b\u0000\u0002\b\u0004\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\u0006\u0007\u0003\u0000\u0003\u0007\u0001\u0000\u0004\u0007\u0003\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0003\u0007\u0003\u0000\b\u0007\u0001\u0000\u0003\u0007\u0004\u0000\u0005\b\u0003\u0000\u0003\b\u0001\u0000\u0004\b\t\u0000\u0001\b\u000f\u0000\t\b\u0011\u0000\u0003\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\n\u0007\u0001\u0000\u0005\u0007\u0004\u0000\u0007\b\u0001\u0000\u0003\b\u0001\u0000\u0004\b\u0007\u0000\u0002\b\t\u0000\u0002\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\n\u0007\u0001\u0000\u0005\u0007\u0004\u0000\u0007\b\u0001\u0000\u0003\b\u0001\u0000\u0004\b\u0007\u0000\u0002\b\u0007\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0004\u0000\n\b\u0012\u0000\u0002\b\u0001\u0000\b\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0017\u0007\u0001\u0000\u0010\u0007\u0004\u0000\u0006\b\u0002\u0000\u0003\b\u0001\u0000\u0004\b\t\u0000\u0001\b\b\u0000\u0002\u0007\u0004\u0000\n\b\u0091\u0000.\u0007\u0001\u0000\u0001\u0007\u0001\b\u0002\u0007\u0007\b\u0005\u0000\u0006\u0007\u0001\b\b\b\u0001\u0000\n\b'\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0001\u0007\u0006\u0000\u0004\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\b\u0002\u0007\u0006\b\u0001\u0000\u0002\b\u0001\u0007\u0002\u0000\u0005\u0007\u0001\u0000\u0001\b\u0001\u0000\u0006\b\u0002\u0000\n\b>\u0000\u0002\b\u0006\u0000\n\b\u000b\u0000\u0001\b\u0001\u0000\u0001\b\u0001\u0000\u0001\b\u0004\u0000\u0002\b\b\u0007\u0001\u0000!\u0007\u0007\u0000\u0014\b\u0001\u0000\u0006\b\u0004\u0000\u0006\b\u0001\u0000\u0001\b\u0001\u0000\u0015\b\u0003\u0000\u0007\b\u0001\u0000\u0001\bæ\u0000&\u0007\n\u0000'\u0007\t\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0002\u0007\u0001\u0000\u0005\u0007)\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u000b\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0001\u0007\u0005\u0000\u0003\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0003\u0000\u0002\u0007\u0001\u0000\u0001\u0007(\u0000\u0001\u0007\t\u0000\u0001\u0007\u0002\u0000\u0001\u0007\u0002\u0000\u0002\u0007\u0007\u0000\u0002\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0007\u0007(\u0000\u0001\u0007\u0004\u0000\u0001\u0007\b\u0000\u0001\u0007ఆ\u0000\u009c\u0007\u0004\u0000Z\u0007\u0006\u0000\u0016\u0007\u0002\u0000\u0006\u0007\u0002\u0000&\u0007\u0002\u0000\u0006\u0007\u0002\u0000\b\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u0001\u0007\u0001\u0000\u001f\u0007\u0002\u00005\u0007\u0001\u0000\u0007\u0007\u0001\u0000\u0001\u0007\u0003\u0000\u0003\u0007\u0001\u0000\u0007\u0007\u0003\u0000\u0004\u0007\u0002\u0000\u0006\u0007\u0004\u0000\r\u0007\u0005\u0000\u0003\u0007\u0001\u0000\u0007\u0007Ó\u0000\r\b\u0004\u0000\u0001\bD\u0000\u0001\u0007\u0003\u0000\u0002\u0007\u0002\u0000\u0001\u0007Q\u0000\u0003\u0007ຂ\u0000\u0001\b\u0001\u0000\u0001\u0007\u0019\u0000\t\u0007\u0006\b\u0001\u0000\u0005\b\u000b\u0000T\u0007\u0004\u0000\u0002\b\u0002\u0000\u0002\b\u0002\u0000Z\u0007\u0001\u0000\u0003\b\u0006\u0000(\u0007᳓\u0000冦\u0007ౚ\u0000⮤\u0007⡜\u0000");
   private static final int[] yy_rowMap = new int[]{0, 67, 134, 201, 268, 335, 402, 469, 536, 603, 670, 737, 804, 871, 938, 1005, 1072, 1139, 1206, 1273, 1340, 1407, 1474, 1541, 1608, 1675, 1742, 1809, 1876, 1943, 2010, 2077, 2144, 2211, 2278, 2345, 2412, 2479, 2546, 2546, 2546, 2546, 2613, 2680, 2546, 2546, 2747, 2814, 2881, 2948, 3015, 3082, 3149, 3216, 3283, 3350, 3417, 3484, 2546, 3551, 3618, 3685, 3752, 3819, 3886, 3953, 4020, 2546, 4087, 4154, 4221, 4288, 4355, 4422, 4489, 2546, 2546, 4556, 4623, 4690, 4757, 4824, 4891, 4958, 5025, 2546, 5092, 5159, 5226, 5293, 2546, 5360, 5427, 5494, 2546, 5561, 5628, 2546, 5695, 5762, 5829, 5896, 2546, 5963, 2546, 6030, 2546, 6097, 6164, 6231, 6298, 6365, 6432, 2546, 6499, 6566, 6633, 6700, 2546, 6767, 6834, 6901, 2546, 2546, 6968, 7035, 7102, 7169, 7236, 7303, 7370, 7437, 2546, 7504, 7571, 7638, 7705, 7772, 7839, 2546, 7906, 7973, 2546, 2546, 2546, 2546, 8040, 8107, 8174, 8241, 8308, 2546, 2546, 8375, 8442, 8509, 8576, 2546, 2546, 2546, 8643, 8710, 8777, 2613, 2680, 2546, 2747, 2546, 8844, 8911, 8978, 9045, 9112, 9179, 9246, 3149, 3216, 2546, 2546, 2546, 9313, 9380, 9447, 9514, 9581, 9648, 9715, 9782, 9849, 2546, 9916, 9983, 10050, 4355, 4422, 2546, 2546, 4556, 2546, 10117, 10184, 10251, 10318, 10385, 10452, 10519, 2546, 5360, 2546, 5695, 2546, 5896, 5963, 10586, 10653, 2546, 10720, 10787, 10854, 10921, 10988, 11055, 11122, 11189, 11256, 6968, 7035, 11323, 11390, 7303, 2546, 7370, 11457, 11524, 11591, 11658, 11725, 11792, 11859, 11926, 11993, 12060, 12127, 12194, 2546, 12261, 12328, 12395, 12462, 12529, 12596, 12663, 2546, 8710, 2546, 8777, 2546, 2546, 2546, 12730, 12797, 12864, 12931, 2546, 12998, 13065, 13132, 13199, 13266, 13333, 13400, 13467, 13534, 2546, 2546, 13601, 13668, 13735, 13802, 2546, 2546, 2546, 2546, 13869, 13936, 14003, 14070, 14137, 14204, 2546, 2546, 14271, 14338, 14405, 14472, 14539, 6901, 14606, 14673, 14740, 14807, 14874, 14941, 15008, 15075, 15142, 15209, 15276, 15343, 2546, 2546, 2546, 15410, 15477, 15544, 15611, 15678, 15745, 15812, 15879, 15946, 2546, 2546, 16013, 16080, 16147, 16214, 16281, 16348, 16415, 16482, 16549, 16616, 16683, 16750, 16817, 16884, 16951, 17018, 17085, 17152, 17219, 17286, 17353, 17420, 17487, 17554, 2546, 2546, 2546, 2546, 17621, 17688, 17755, 17822, 2546, 2546, 17889, 17956, 18023, 18090, 2546, 6901, 18157, 6901, 18224, 18291, 18358, 18425, 18492, 18559, 18626, 18693, 2546, 18760, 18827, 18894, 18961, 2546, 19028, 19095, 19162, 19229, 19296, 19363, 2546, 19430, 19497, 2546, 19564, 19631, 6901, 6901, 6901, 19698, 19765, 2546, 19832, 19899, 19966, 20033, 20100, 20167, 20234, 20301, 2546, 2546, 20368, 20435, 20502, 20569, 6901, 20636, 20703, 2546, 20770, 2546, 20837, 20904, 2546, 20971, 2546, 2546, 2546, 6901, 2546, 21038, 2546, 21105, 2546, 20971, 2546, 2546};
   private static final String yy_packed0 = "\u0001'\u0001(\u0004'\u0001(\u0003'\u0001)\u0001*\u0004'\u0001()'\u0001(\b'\f+\u0001,6+\n-\u0001)\u0001*7-\u0003.\u0002/\u0002.\u0001/\u0005.\u0002/\u00010\u0001.\u0003/\u0005.\b/\u0002.\u0005/\u0001.\u0003/\u00011\u0002/\b.\u0002/\u0002.\u00012\u0001/\u00013\u0003/\u00014\u0001/\f5\u0001665\u0001.\u00017\u0004.\u00017\u0005.\u00018\u0003.\u00017).\u00017\t.\u00019\u0001.\u0002:\u0001.\u00019\u0001:\u0005.\u0003:\u00019\u0003:\u0001;\u0004.\b:\u0002.\u0005:\u0001.\u0003:\u0001.\u0002:\u0007.\u0001<\u0002:\u0001.\u00019\b:\u0003.\u0002=\u0002.\u0001=\u0004.\u0001>\u0003=\u0001.\u0003=\u0004.\u0001?\b=\u0002.\u0005=\u0001.\u0003=\u0001.\u0002=\u0007.\u0001@\u0002=\u0002.\b=\u0001.\u00019\u0001.\u0001A\u0001B\u0001.\u00019\u0001B\u0005.\u0001C\u0002B\u00019\u0003B\u0001D\u0004.\bB\u0002.\u0005B\u0001.\u0003B\u0001.\u0002B\u0007.\u0001E\u0002B\u0001.\u00019\bB\u0003.\u0001F\u0001G\u0002.\u0001G\u0004.\u0001>\u0003G\u0001.\u0003G\u0004.\u0001?\bG\u0002.\u0005G\u0001.\u0003G\u0001.\u0002G\u0007.\u0001H\u0002G\u0002.\bG\u0001.\u0001I\u0004.\u0001I\t.\u0001I(.\u0001J\u0001I\b.\u0001K\u0001L\u0004K\u0001L\u0003K\u0001.\u0001M.K\u0001L\bK\u0003.\u0002N\u0002.\u0001N\u0005.\u0002N\u0001O\u0001.\u0003N\u0005.\bN\u0002.\u0005N\u0001.\u0003N\u0001P\u0002N\b.\u0002N\u0002.\u0001Q\u0001N\u0001R\u0003N\u0001S\u0001N\u0001T\u0001U\u0004T\u0001U\u0003T\u0001.\u0001V(T\u0001W\u0005T\u0001U\bT\u0001X\u0001U\u0004X\u0001U\u0003X\u0001.\u0001V)X\u0001W\u0004X\u0001U\bX\u0001Y\u0001Z\u0004Y\u0001Z\u0003Y\u0001.\u0001[\u0004Y\u0001Z#Y\u0001\\\u0005Y\u0001Z\bY\u0001]\u0001^\u0004]\u0001^\u0003]\u0001.\u0001_\u0004]\u0001^$]\u0001\\\u0004]\u0001^\b]\u0001`\u0001a\u0004`\u0001a\u0003`\u0001.\u0001b\u0004`\u0001a#`\u0001c\u0005`\u0001a\b`\u0001d\u0001e\u0004d\u0001e\u0003d\u0001.\u0001b\u0004d\u0001e$d\u0001c\u0004d\u0001e\bd\u0001.\u0001f\u0004.\u0001f\t.\u0001f\u0003.\u0001g%.\u0001f\t.\u0001h\u0004.\u0001h\t.\u0001h\u0003.\u0001i%.\u0001h\t.\u0001j\u0004.\u0001j\u0003.\u0001k\u0005.\u0001j\u0004.\u0001l\u0001.\u0001m\".\u0001j\t.\u0001j\u0001.\u0002n\u0001.\u0001j\u0001n\u0005.\u0003n\u0001j\u0003n\u0001.\u0001o\u0003.\bn\u0002.\u0005n\u0001.\u0003n\u0001.\u0002n\b.\u0002n\u0001.\u0001j\bn\u0001.\u0001j\u0001.\u0001p\u0001q\u0001.\u0001j\u0001q\u0005.\u0003q\u0001j\u0003q\u0001r\u0001o\u0003.\bq\u0002.\u0005q\u0001.\u0003q\u0001.\u0002q\b.\u0002q\u0001.\u0001j\bq\u0001.\u0001j\u0004.\u0001j\t.\u0001j\u0004.\u0001o\u0003.\u0001s\u0001t\u0001.\u0001u\u0006.\u0001v\u0004.\u0001w\u0011.\u0001j\t.\u0001j\u0001.\u0002x\u0001.\u0001j\u0001x\u0005.\u0003x\u0001j\u0003x\u0001.\u0001y\u0003.\bx\u0002.\u0005x\u0001.\u0003x\u0001.\u0002x\b.\u0002x\u0001.\u0001j\bx\u0001.\u0001j\u0003z\u0001.\u0001j\u0003z\u0003.\u0003z\u0001j\u0003z\u0001.\u0001o\u0003.\tz\u0001.\u0005z\u0001.\u0003z\u0001.\u0002z\u0001{\u0003.\u0001|\u0003.\u0002z\u0001.\u0001j\bz!}\u0001~!}\n\u007f\u0001\u0080\f\u007f\u0001\u0081+\u007f\u0001.\u0001j\u0004.\u0001j\t.\u0001j#.\u0001\u0082\u0001\u0083\u0004.\u0001j\t.\u0001\u0084\u0001.\u0002z\u0001.\u0001\u0084\u0001z\u0004.\u0001\u0085\u0003z\u0001\u0084\u0003z\u0001r\u0001o\u0003.\u0001\u0086\u0001\u0087\u0001z\u0001\u0088\u0001z\u0001\u0089\u0001\u008a\u0001z\u0001.\u0001\u008b\u0005z\u0001\u008c\u0001\u008d\u0002z\u0001\u008e\u0002z\u0001\u008f\u0001\u0090\u0001\u0091\u0001\u0092\u0001|\u0001\u0093\u0001\u0094\u0001.\u0002z\u0001.\u0001\u0084\bz\f.\u0001\u0095\u000b.\u0001\u0096*.\u000b\u0097\u0001\u0098\t\u0097\u0001\u0099-\u0097\u0001\u009a\u0001\u009b\u0004\u009a\u0001\u009c\t\u009a\u0001\u009b)\u009a\u0001\u009b\b\u009a\u000b\u009d\u0001\u009e\t\u009d\u0001\u009f\u001e\u009d\u0001 \u000e\u009d\u000b¡\u0001\u009e\t¡\u0001\u009f\u001f¡\u0001 \r¡\u0003.\u0002¢\u0002.\u0001¢\u0005.\u0003¢\u0001.\u0003¢\u0005.\b¢\u0002.\u0005¢\u0001.\u0003¢\u0001P\u0002¢\b.\u0002¢\u0002.\b¢\u0003.\u0002£\u0002.\u0001£\u0005.\u0003£\u0001.\u0003£\u0005.\b£\u0002.\u0005£\u0001.\u0003£\u0001.\u0002£\b.\u0002£\u0002.\b£C\u0000\f¤\u0001¥B¤\u0001¥\u0007¤\u0001¦.¤\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001©\u0002§\t\u0000\u0001ª\u0003\u0000\u0001«7\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0001§\u0001¬\u0001§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0001§\u0001\u00ad\u0006§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0003§\u0001®\u0004§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001¯\u0002§\f°\u0001±B°\u0001±\u0007°\u0001².°\u0001\u0000\u00017\u0004\u0000\u00017\t\u0000\u00017)\u0000\u00017\u001c\u0000\u0001³/\u0000\u00019\u0004\u0000\u00019\t\u0000\u00019)\u0000\u00019\n\u0000\u0003:\u0002\u0000\u0003:\u0003\u0000\u0003:\u0001\u0000\u0003:\u0005\u0000\t:\u0001\u0000\u0005:\u0001\u0000\u0003:\u0001\u0000\u0002:\b\u0000\u0002:\u0002\u0000\b:\u0014\u0000\u0001´0\u0000\u0003=\u0002\u0000\u0003=\u0003\u0000\u0003=\u0001\u0000\u0003=\u0005\u0000\t=\u0001\u0000\u0005=\u0001\u0000\u0003=\u0001\u0000\u0002=\b\u0000\u0002=\u0002\u0000\b=\u0003\u0000\u0002µ\u0002\u0000\u0001µ\u0005\u0000\u0001¶\u0002µ\u0001\u0000\u0001·\u0002µ\u0005\u0000\bµ\u0002\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!\u0000\u0001¸\u0001¹\u0001\u0000\u0001º!\u0000\u0002»\u0002\u0000\u0001»\u0005\u0000\u0003»\u0001\u0000\u0003»\u0005\u0000\b»\u0002\u0000\u0005»\u0001\u0000\u0003»\u0001\u0000\u0002»\b\u0000\u0002»\u0002\u0000\b»\u0002\u0000\u0003A\u0002\u0000\u0003A\u0003\u0000\u0003A\u0001\u0000\u0003A\u0005\u0000\tA\u0001\u0000\u0005A\u0001\u0000\u0003A\u0001\u0000\u0002A\b\u0000\u0002A\u0002\u0000\bA\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0001B\u0001½\u0001B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0014\u0000\u0001¾0\u0000\u0003F\u0002\u0000\u0003F\u0003\u0000\u0003F\u0001\u0000\u0003F\u0005\u0000\tF\u0001\u0000\u0005F\u0001\u0000\u0003F\u0001\u0000\u0002F\b\u0000\u0002F\u0002\u0000\bF\u0002\u0000\u0001G\u0001¿\u0001G\u0002\u0000\u0003G\u0003\u0000\u0003G\u0001\u0000\u0003G\u0005\u0000\tG\u0001\u0000\u0005G\u0001\u0000\u0003G\u0001\u0000\u0002G\b\u0000\u0002G\u0002\u0000\bG\u0003\u0000\u0001À\u0001Á\u0002\u0000\u0001Á\u0005\u0000\u0003Á\u0001\u0000\u0003Á\u0005\u0000\bÁ\u0002\u0000\u0005Á\u0001\u0000\u0003Á\u0001\u0000\u0002Á\b\u0000\u0002Á\u0002\u0000\bÁ\u0001\u0000\u0001Â\u0004\u0000\u0001Â\t\u0000\u0001Â(\u0000\u0001Ã\u0001Â\t\u0000\u0001Ã\u0004\u0000\u0001Ã\t\u0000\u0001Ã#\u0000\u0001Ä\u0001Å\u0004\u0000\u0001Ã\b\u0000\u0001K\u0001\u0000\u0004K\u0001\u0000\u0003K\u0002\u0000.K\u0001\u0000\bK\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001È\u0002Æ\t\u0000\u0001É\u0003\u0000\u0001Ê7\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0001Æ\u0001Ë\u0001Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0001Æ\u0001Ì\u0006Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0003Æ\u0001Í\u0004Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001Î\u0002Æ\u0001T\u0001\u0000\u0004T\u0001\u0000\u0003T\u0002\u0000(T\u0001\u0000\u0005T\u0001\u0000\bT\u0001\u0000\u0001U\u0004\u0000\u0001U3\u0000\u0001U\t\u0000\u0001Ï\u0004\u0000\u0001Ï\t\u0000\u0001Ï\u0003\u0000\u0001Ï!\u0000\u0001Ï\u0003\u0000\u0001Ï\b\u0000\u0001X\u0001\u0000\u0004X\u0001\u0000\u0003X\u0002\u0000)X\u0001\u0000\u0004X\u0001\u0000\bX\u0001Y\u0001\u0000\u0004Y\u0001\u0000\u0003Y\u0002\u0000\u0004Y\u0001\u0000#Y\u0001\u0000\u0005Y\u0001\u0000\bY\u0001\u0000\u0001Z\u0004\u0000\u0001Z\t\u0000\u0001Z#\u0000\u0001Ð\u0005\u0000\u0001Z\t\u0000\u0001Ñ\u0004\u0000\u0001Ñ\t\u0000\u0001Ñ\u0003\u0000\u0001Ñ!\u0000\u0001Ñ\u0003\u0000\u0001Ñ\b\u0000\u0001]\u0001\u0000\u0004]\u0001\u0000\u0003]\u0002\u0000\u0004]\u0001\u0000$]\u0001\u0000\u0004]\u0001\u0000\b]\u0001\u0000\u0001^\u0004\u0000\u0001^\t\u0000\u0001^$\u0000\u0001Ð\u0004\u0000\u0001^\b\u0000\u0001`\u0001\u0000\u0004`\u0001\u0000\u0003`\u0002\u0000\u0004`\u0001\u0000#`\u0001\u0000\u0005`\u0001\u0000\b`\u0001\u0000\u0001a\u0004\u0000\u0001a\t\u0000\u0001a#\u0000\u0001Ò\u0005\u0000\u0001a\t\u0000\u0001Ó\u0004\u0000\u0001Ó\t\u0000\u0001Ó\u0003\u0000\u0001Ó!\u0000\u0001Ó\u0003\u0000\u0001Ó\b\u0000\u0001d\u0001\u0000\u0004d\u0001\u0000\u0003d\u0002\u0000\u0004d\u0001\u0000$d\u0001\u0000\u0004d\u0001\u0000\bd\u0001\u0000\u0001e\u0004\u0000\u0001e\t\u0000\u0001e$\u0000\u0001Ò\u0004\u0000\u0001e\t\u0000\u0001Ô\u0004\u0000\u0001Ô\t\u0000\u0001Ô\u0003\u0000\u0001g%\u0000\u0001Ô\t\u0000\u0001Õ\u0004\u0000\u0001Õ\t\u0000\u0001Õ\u0003\u0000\u0001i%\u0000\u0001Õ\t\u0000\u0001j\u0004\u0000\u0001j\t\u0000\u0001j)\u0000\u0001j\u000b\u0000\u0002Ö\u0002\u0000\u0001Ö\u0005\u0000\u0003Ö\u0001\u0000\u0003Ö\u0005\u0000\bÖ\u0002\u0000\u0005Ö\u0001\u0000\u0003Ö\u0001\u0000\u0002Ö\b\u0000\u0002Ö\u0002\u0000\bÖ\u0001\u0000\u0001×\u0004\u0000\u0001×\t\u0000\u0001×\u0003\u0000\u0001Ø\u0002\u0000\u0001Ù\"\u0000\u0001×\n\u0000\u0003n\u0002\u0000\u0003n\u0003\u0000\u0003n\u0001\u0000\u0003n\u0005\u0000\tn\u0001\u0000\u0005n\u0001\u0000\u0003n\u0001\u0000\u0002n\b\u0000\u0002n\u0002\u0000\bn\u0003\u0000\u0002Ú\u0002\u0000\u0001Ú\u0005\u0000\u0003Ú\u0001\u0000\u0003Ú\u0005\u0000\bÚ\u0002\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0002\u0000\bÚ\u0002\u0000\u0003p\u0002\u0000\u0003p\u0003\u0000\u0003p\u0001\u0000\u0003p\u0005\u0000\tp\u0001\u0000\u0005p\u0001\u0000\u0003p\u0001\u0000\u0002p\b\u0000\u0002p\u0002\u0000\bp\u0002\u0000\u0001q\u0001Û\u0001q\u0002\u0000\u0003q\u0003\u0000\u0003q\u0001\u0000\u0003q\u0005\u0000\tq\u0001\u0000\u0005q\u0001\u0000\u0003q\u0001\u0000\u0002q\b\u0000\u0002q\u0002\u0000\bq\u001a\u0000\u0001Ü:\u0000\u0001Ý\r\u0000\u0001ÞF\u0000\u0001ßB\u0000\u0001à \u0000\u0003x\u0002\u0000\u0003x\u0003\u0000\u0003x\u0001\u0000\u0003x\u0005\u0000\tx\u0001\u0000\u0005x\u0001\u0000\u0003x\u0001\u0000\u0002x\b\u0000\u0002x\u0002\u0000\bx\u0001\u0000\u0001á\u0001\u0000\u0002Ú\u0002\u0000\u0001Ú\u0005\u0000\u0003Ú\u0001á\u0003Ú\u0005\u0000\bÚ\u0002\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0001\u0000\u0001á\bÚ\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz!â\u0001ãBâ\u0001ä!â\n\u007f\u0001\u0000\f\u007f\u0001\u0000+\u007f\u0018\u0000\u0001åA\u0000\u0001Ù-\u0000\u0005æ\u0002\u0000\u0001æ\u0002\u0000\bæ\u0001\u0000\u0002æ\u0001\u0000\næ\u0001\u0000\u0010æ\u0001\u0000\u0001ç\u000eæ\u0002\u0000\u0005è\u0002\u0000\u0001è\u0002\u0000\bè\u0001\u0000\u0002è\u0001\u0000\nè\u0001\u0000\u0010è\u0002\u0000\u0001ç\rè\u0001\u0000\u0001\u0084\u0004\u0000\u0001\u0084\t\u0000\u0001\u0084\u0011\u0000\u0001\u008b\u0017\u0000\u0001\u0084\n\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0001z\u0001é\u0001z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ê\u0001z\u0001\u0000\u0001z\u0001ë\u0003z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001ì\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0001z\u0001í\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001î\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ï\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0001\u0000\u0001\u008b\u0004\u0000\u0001\u008b\t\u0000\u0001\u008b)\u0000\u0001\u008b\n\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001z\u0001ð\u0001z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u001c\u0000\u0001ñ\b\u0000\u0001ò\u0001ó\u0002\u0000\u0001ô\u0019\u0000\u000b\u0093\u0001\u0000\t\u0093\u0001\u0000\u001e\u0093\u0001õ\u000e\u0093\u000b\u0094\u0001\u0000\t\u0094\u0001\u0000\u001f\u0094\u0001õ\r\u0094\u0003\u0000\u0002ö\u0002\u0000\u0001ö\u0005\u0000\u0001÷\u0002ö\u0001\u0000\u0001ø\u0002ö\u0005\u0000\bö\u0002\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0019\u0000\u0001ù\u0001ú\u0003\u0000\u0001û\u0002\u0000\u0001ü\u0001ý \u0000\u000b\u0097\u0001\u0000\t\u0097\u0001\u0000-\u0097\u000b\u009a\u0001\u0000\t\u009a\u0001\u0000-\u009a\u0001\u0000\u0001\u009b\u0004\u0000\u0001\u009b\t\u0000\u0001\u009b)\u0000\u0001\u009b\b\u0000\u0001\u009a\u0001\u009c\u0004\u009a\u0001\u009c\u0004\u009a\u0001\u0000\u0004\u009a\u0001\u009c\u0004\u009a\u0001\u0000$\u009a\u0001\u009c\b\u009a\u000b\u009d\u0001\u0000\t\u009d\u0001\u0000\u001e\u009d\u0001\u0000\u000e\u009d\u000b¡\u0001\u0000\t¡\u0001\u0000\u001f¡\u0001\u0000\r¡\u0002\u0000\u0003þ\u0002\u0000\u0003þ\u0003\u0000\u0003þ\u0001\u0000\u0003þ\u0002\u0000\u0001ÿ\u0002\u0000\tþ\u0001\u0000\u0005þ\u0001\u0000\u0003þ\u0001\u0000\u0002þ\b\u0000\u0002þ\u0002\u0000\bþ\u0002\u0000\u0003Ā\u0002\u0000\u0003Ā\u0003\u0000\u0003Ā\u0001\u0000\u0003Ā\u0002\u0000\u0001ā\u0002\u0000\tĀ\u0001\u0000\u0005Ā\u0001\u0000\u0003Ā\u0001\u0000\u0002Ā\b\u0000\u0002Ā\u0002\u0000\bĀ\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ă\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\t\u0000\u0001ª\f\u0000\u0001ă5\u0000\u0001Ą\u000f\u0000\u0001Ą\u0004\u0000\u0001Ą\u0004\u0000\u0002Ą\u0001\u0000\u0001Ą\u0004\u0000\u0001Ą\u000f\u0000\u0001Ą\u0006\u0000\u0001Ą\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0001§\u0001ą\u0006§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0004§\u0001Ć\u0003§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0004§\u0001ć\u0003§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ĉ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0003µ\u0001\u0000\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0001µ\u0001ĉ\u0001µ\u0001\u0000\u0001µ\u0001Ċ\u0001µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0001µ\u0001Ċ\u0001µ\u0001\u0000\u0001µ\u0001Ċ\u0001µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!\u0000\u0001ċD\u0000\u0001Č?\u0000\u0001č$\u0000\u0003»\u0002\u0000\u0003»\u0003\u0000\u0003»\u0001\u0000\u0003»\u0005\u0000\t»\u0001\u0000\u0005»\u0001\u0000\u0003»\u0001\u0000\u0002»\b\u0000\u0002»\u0002\u0000\b»\u0002\u0000\u0002A\u0001Ď\u0002\u0000\u0001Ď\u0002A\u0003\u0000\u0003Ď\u0001\u0000\u0003Ď\u0005\u0000\bĎ\u0001A\u0001\u0000\u0005Ď\u0001\u0000\u0003Ď\u0001\u0000\u0002Ď\b\u0000\u0002Ď\u0002\u0000\bĎ\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0002B\u0001ď\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0002\u0000\u0002F\u0001Đ\u0002\u0000\u0001Đ\u0002F\u0003\u0000\u0003Đ\u0001\u0000\u0003Đ\u0005\u0000\bĐ\u0001F\u0001\u0000\u0005Đ\u0001\u0000\u0003Đ\u0001\u0000\u0002Đ\b\u0000\u0002Đ\u0002\u0000\bĐ\u0002\u0000\u0003À\u0002\u0000\u0003À\u0003\u0000\u0003À\u0001\u0000\u0003À\u0005\u0000\tÀ\u0001\u0000\u0005À\u0001\u0000\u0003À\u0001\u0000\u0002À\b\u0000\u0002À\u0002\u0000\bÀ\u0002\u0000\u0001Á\u0001đ\u0001Á\u0002\u0000\u0003Á\u0003\u0000\u0003Á\u0001\u0000\u0003Á\u0005\u0000\tÁ\u0001\u0000\u0005Á\u0001\u0000\u0003Á\u0001\u0000\u0002Á\b\u0000\u0002Á\u0002\u0000\bÁ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ē\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\t\u0000\u0001É\f\u0000\u0001ē5\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u0004\u0000\u0002Ĕ\u0001\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0006\u0000\u0001Ĕ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0001Æ\u0001ĕ\u0006Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0004Æ\u0001Ė\u0003Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0004Æ\u0001ė\u0003Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ę\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Ö\u0002\u0000\u0003Ö\u0003\u0000\u0003Ö\u0001\u0000\u0003Ö\u0002\u0000\u0001ę\u0002\u0000\tÖ\u0001\u0000\u0005Ö\u0001\u0000\u0003Ö\u0001\u0000\u0002Ö\b\u0000\u0002Ö\u0002\u0000\bÖ\u0001\u0000\u0001×\u0004\u0000\u0001×\t\u0000\u0001×\u0003\u0000\u0001Ø%\u0000\u0001×\u001c\u0000\u0001Ě0\u0000\u0003Ú\u0002\u0000\u0003Ú\u0003\u0000\u0003Ú\u0001\u0000\u0003Ú\u0002\u0000\u0001ě\u0002\u0000\tÚ\u0001\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0002\u0000\bÚ\u0002\u0000\u0002p\u0001Ĝ\u0002\u0000\u0001Ĝ\u0002p\u0003\u0000\u0003Ĝ\u0001\u0000\u0003Ĝ\u0005\u0000\bĜ\u0001p\u0001\u0000\u0005Ĝ\u0001\u0000\u0003Ĝ\u0001\u0000\u0002Ĝ\b\u0000\u0002Ĝ\u0002\u0000\bĜ\u001b\u0000\u0001ĝB\u0000\u0001ĞB\u0000\u0001ğL\u0000\u0001Ġ;\u0000\u0001ġ%\u0000\u0001á\u000e\u0000\u0001á)\u0000\u0001á\u001c\u0000\u0001ĢP\u0000\u0001ģ\"\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001Ĥ\u0002z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ĥ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001Ħ\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001ħ\u0004z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001Ĩ\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ĩ\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0006z\u0001Ī\u0002z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0002z\u0001ī\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0012\u0000\u0001ĬI\u0000\u0001ĭE\u0000\u0001ĮI\u0000\u0001į!\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0003ö\u0001\u0000\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0001ö\u0001İ\u0001ö\u0001\u0000\u0001ö\u0001ı\u0001ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0001ö\u0001ı\u0001ö\u0001\u0000\u0001ö\u0001ı\u0001ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0013\u0000\u0001Ĳ\u0006\u0000\u0001ĳH\u0000\u0001Ĵ=\u0000\u0001ĵH\u0000\u0001Ķ*\u0000\u0001Ą\f\u0000\u0001ķ\u0002\u0000\u0001Ą\u0004\u0000\u0001Ą\u0004\u0000\u0002Ą\u0001\u0000\u0001Ą\u0004\u0000\u0001Ą\u000f\u0000\u0001Ą\u0006\u0000\u0001Ą\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001ĸ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0001§\u0001Ĺ\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001ĺ\u0002§\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0002µ\u0001Ļ\u0001\u0000\u0002µ\u0001ļ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0002µ\u0001ļ\u0001\u0000\u0002µ\u0001ļ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!ċ\u0001Ľ!ċ$\u0000\u0001ľA\u0000\u0001Ŀ!\u0000\u0001Ď\u0001A\u0001Ď\u0002\u0000\u0003Ď\u0003\u0000\u0003Ď\u0001\u0000\u0003Ď\u0005\u0000\tĎ\u0001\u0000\u0005Ď\u0001\u0000\u0003Ď\u0001\u0000\u0002Ď\b\u0000\u0002Ď\u0002\u0000\bĎ\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0001ŀ\u0001B\u0002\u0000\bB\u0002\u0000\u0001Đ\u0001F\u0001Đ\u0002\u0000\u0003Đ\u0003\u0000\u0003Đ\u0001\u0000\u0003Đ\u0005\u0000\tĐ\u0001\u0000\u0005Đ\u0001\u0000\u0003Đ\u0001\u0000\u0002Đ\b\u0000\u0002Đ\u0002\u0000\bĐ\u0002\u0000\u0002À\u0001Ł\u0002\u0000\u0001Ł\u0002À\u0003\u0000\u0003Ł\u0001\u0000\u0003Ł\u0005\u0000\bŁ\u0001À\u0001\u0000\u0005Ł\u0001\u0000\u0003Ł\u0001\u0000\u0002Ł\b\u0000\u0002Ł\u0002\u0000\bŁ\t\u0000\u0001Ĕ\f\u0000\u0001ł\u0002\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u0004\u0000\u0002Ĕ\u0001\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0006\u0000\u0001Ĕ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ń\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0001Æ\u0001ń\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001Ņ\u0002Æ\u0002\u0000\u0001Ĝ\u0001p\u0001Ĝ\u0002\u0000\u0003Ĝ\u0003\u0000\u0003Ĝ\u0001\u0000\u0003Ĝ\u0005\u0000\tĜ\u0001\u0000\u0005Ĝ\u0001\u0000\u0003Ĝ\u0001\u0000\u0002Ĝ\b\u0000\u0002Ĝ\u0002\u0000\bĜ\u001c\u0000\u0001ņF\u0000\u0001Ň@\u0000\u0001ň=\u0000\u0001ŉD\u0000\u0001Ŋ)\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ŋ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001Ō\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ō\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0002z\u0001Ŏ\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ŏ\u0001z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001Ő\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0002z\u0001ő\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz)\u0000\u0001ŒF\u0000\u0001œ&\u0000\u0001ŔU\u0000\u0001ŕ \u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0002ö\u0001Ŗ\u0001\u0000\u0002ö\u0001ŗ\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0002ö\u0001ŗ\u0001\u0000\u0002ö\u0001ŗ\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0019\u0000\u0001ŘD\u0000\u0001řB\u0000\u0001ŚB\u0000\u0001ś)\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ŝ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001ŝ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0001\u0000\u0001Ş\u0003µ\u0001\u0000\u0001ş\u0003µ\u0002\u0000\u0001Ş\u0003µ\u0001Ş\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0001\u0000\u0001Ş\bµ\u0001\u0000\u0001ş\u0003µ\u0001\u0000\u0001ş\u0003µ\u0002\u0000\u0001ş\u0003µ\u0001ş\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0001\u0000\u0001ş\bµ!ċ\u0001Š!ċ\u001e\u0000\u0001š?\u0000\u0001Ţ)\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0001B\u0001ţ\u0002\u0000\bB\u0002\u0000\u0001Ł\u0001À\u0001Ł\u0002\u0000\u0003Ł\u0003\u0000\u0003Ł\u0001\u0000\u0003Ł\u0005\u0000\tŁ\u0001\u0000\u0005Ł\u0001\u0000\u0003Ł\u0001\u0000\u0002Ł\b\u0000\u0002Ł\u0002\u0000\bŁ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ť\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001ť\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u001b\u0000\u0001ŦN\u0000\u0001ŧ6\u0000\u0001ŨM\u0000\u0001ũ:\u0000\u0001Ū&\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ū\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001Ŭ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001ŭ\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001z\u0001Ů\u0001z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0002z\u0001ů\u0002z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001Ű\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0003z\u0001ű\u0005z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0013\u0000\u0001ŲY\u0000\u0001ų1\u0000\u0001ŴG\u0000\u0001ŵ%\u0000\u0001Ŷ\u0003ö\u0001\u0000\u0001ş\u0003ö\u0002\u0000\u0001Ŷ\u0003ö\u0001Ŷ\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0001\u0000\u0001Ŷ\bö\u0001\u0000\u0001ş\u0003ö\u0001\u0000\u0001ş\u0003ö\u0002\u0000\u0001ş\u0003ö\u0001ş\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0001\u0000\u0001ş\bö\u0012\u0000\u0001ŷL\u0000\u0001ŸD\u0000\u0001Ź7\u0000\u0001źC\u0000\u0001ŻI\u0000\u0001żD\u0000\u0001Ž&\u0000\u0001ž\u0001B\u0001ſ\u0001B\u0001\u0000\u0001ž\u0003B\u0003\u0000\u0003B\u0001ž\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0001ƀ\u0001ž\bB\u001c\u0000\u0001Ɓ\u0001Ƃ>\u0000\u0001ƃE\u0000\u0001ƄE\u0000\u0001ƅ%\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0003z\u0001Ɔ\u0005z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001z\u0001Ƈ\u0003z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001ƈ\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0001z\u0001Ɖ\u0001z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001Ɗ\u0004z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u001c\u0000\u0001ƋB\u0000\u0001ƌJ\u0000\u0001ƍ9\u0000\u0001Ǝ@\u0000\u0001ƏD\u0000\u0001ƐB\u0000\u0001ƑC\u0000\u0001ƒD\u0000\u0001ƓM\u0000\u0001Ɣ\u001a\u0000\u0001ž\u0004\u0000\u0001ž\t\u0000\u0001ž(\u0000\u0001ƀ\u0001ž\n\u0000\u0002A\u0001ƕ\u0002\u0000\u0001ƕ\u0002A\u0003\u0000\u0003ƕ\u0001\u0000\u0003ƕ\u0005\u0000\bƕ\u0001A\u0001\u0000\u0005ƕ\u0001\u0000\u0003ƕ\u0001\u0000\u0002ƕ\b\u0000\u0002ƕ\u0002\u0000\bƕ\u0001\u0000\u0001ƀ\u0004\u0000\u0001ƀ\t\u0000\u0001ƀ#\u0000\u0001Ɩ\u0001Ɨ\u0004\u0000\u0001ƀ!\u0000\u0001ƘC\u0000\u0001ƙH\u0000\u0001ƚ$\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ƛ\u0001z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001Ɯ\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0019\u0000\u0001ƝN\u0000\u0001ƞ;\u0000\u0001Ɵ>\u0000\u0001ƠE\u0000\u0001ơA\u0000\u0001ƢE\u0000\u0001ƣE\u0000\u0001Ƥ9\u0000\u0001ƥ+\u0000\u0001ƕ\u0001A\u0001ƕ\u0002\u0000\u0003ƕ\u0003\u0000\u0003ƕ\u0001\u0000\u0003ƕ\u0005\u0000\tƕ\u0001\u0000\u0005ƕ\u0001\u0000\u0003ƕ\u0001\u0000\u0002ƕ\b\u0000\u0002ƕ\u0002\u0000\bƕ\u001f\u0000\u0001ƦB\u0000\u0001Ƨ=\u0000\u0001ƨ*\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001Ʃ\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz$\u0000\u0001ƪ7\u0000\u0001ƫD\u0000\u0001ƬG\u0000\u0001ƭ=\u0000\u0001Ʈ(\u0000\u0001Ư\u000e\u0000\u0001Ư)\u0000\u0001Ư,\u0000\u0001ư8\u0000\u0001Ʊ(\u0000";
   private static final int[] yytrans = yy_unpack();
   private static final int YY_UNKNOWN_ERROR = 0;
   private static final int YY_ILLEGAL_STATE = 1;
   private static final int YY_NO_MATCH = 2;
   private static final int YY_PUSHBACK_2BIG = 3;
   private static final int YY_SKIP_2BIG = 4;
   private static final String[] YY_ERROR_MSG = new String[]{"Unkown internal scanner error", "Internal error: unknown state", "Error: could not match input", "Error: pushback value was too large", "Error: skip value was too large"};
   private static final byte[] YY_ATTRIBUTE = new byte[]{0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 9, 9, 9, 9, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 3, 1, 1, 1, 9, 3, 1, 1, 9, 1, 1, 9, 3, 1, 1, 1, 9, 1, 9, 1, 9, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 9, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 1, 1, 9, 9, 9, 9, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 9, 9, 9, 1, 1, 1, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 1, 1, 1, 0, 0, 0, 1, 1, 1, 9, 1, 1, 1, 0, 0, 9, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 13, 2, 13, 2, 13, 0, 0, 0, 0, 9, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 1, 1, 1, 0, 0, 0, 0, 9, 0, 9, 0, 9, 9, 9, 0, 0, 0, 0, 9, 1, 1, 0, 0, 0, 1, 1, 1, 1, 9, 9, 0, 0, 0, 0, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 9, 9, 9, 0, 0, 3, 3, 0, 0, 0, 1, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 9, 9, 13, 13, 0, 0, 0, 1, 9, 9, 0, 0, 0, 1, 9, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 9, 0, 0, 9, 1, 1, 1, 1, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 0, 1, 0, 1, 1, 0, 0, 9, 0, 9, 0, 0, 9, 0, 9, 9, 9, 1, 9, 0, 9, 0, 9, 1, 9, 9};
   private Reader yy_reader;
   private int yy_state;
   private int yy_lexical_state;
   private char[] yy_buffer;
   private char[] yy_saved_buffer;
   private int yy_markedPos;
   private int yy_savePos;
   private int yy_pushbackPos;
   private int yy_currentPos;
   private int yy_startRead;
   private int yy_endRead;
   private int yyline;
   private int yychar;
   private int yycolumn;
   private boolean yy_atBOL;
   private boolean yy_atEOF;
   private Stack yy_streams;
   private boolean yy_eof_done;
   Piccolo parser;
   Entity currentEntity;
   CharStringConverter stringConverter;
   EntityManager entityManager;
   Stack entityStack;
   AttributesHolder attribs;
   char[] cbuf;
   int cbuflen;
   String stringValue;
   char[] oneCharBuffer;
   char[] cdataBuffer;
   int cdataStart;
   int cdataLength;
   private LongStack entityStateStack;
   private StringStack entityNameStack;
   private String currentEntityName;
   private int prevEntityLexState;
   private boolean returnEntityEndToken;
   private boolean isParamEntity;
   private int entityBaseDepth;
   private boolean isEntityBeingParsed;
   private boolean inCdataSection;
   private int baseState;
   private int prevState;
   private int piPrevState;
   private boolean isNamespaceDeclaration;
   private boolean entityWasSkipped;
   private int tagState;
   private int tagStartState;
   private boolean tokenizeInput;
   private StringStack tagStack;
   private boolean bypassPERefs;
   private boolean bypassGERefs;
   private boolean needsNormalization;
   private int tagType;
   private boolean endOfTag;
   private HashMap elementMap;
   private ElementDefinition elementDefinition;
   private String elementURI;
   private String elementLocalName;
   private String elementQName;
   private String attributeURI;
   private String attributeLocalName;
   private String attributeQName;
   private String attributeValueType;
   int tokenStartLine;
   int tokenStartColumn;
   private boolean[] defaultAttributeSpecified;
   private int numAttributesDefined;
   private FastNamespaceSupport nsSupport;
   private static boolean[] asciiNameStartChars;
   private static boolean[] asciiNameStartCharsNS;
   private static boolean[] asciiNameChars;
   private static boolean[] asciiNameCharsNS;
   private static final char[] LETTER_RANGE_START;
   private static final char[] LETTER_RANGE_END;
   private static final char[] NON_LETTER_RANGE_START;
   private static final char[] NON_LETTER_RANGE_END;
   private int yy_currentPos_l;
   private int yy_startRead_l;
   private int yy_markedPos_l;
   private int yy_endRead_l;
   private char[] yy_buffer_l;
   private char[] yycmap_l;
   private boolean yy_sawCR;
   private boolean yy_prev_sawCR;
   private int yyline_next;
   private int yycolumn_next;

   public PiccoloLexer(Piccolo parser) {
      this.totalEntityBytesPushed = 0;
      this.maxTotalEntityBytes = 0;
      this.yy_lexical_state = 0;
      this.yy_buffer = new char[16384];
      this.yy_saved_buffer = this.yy_buffer;
      this.yy_savePos = -1;
      this.yy_atBOL = true;
      this.yy_streams = new Stack();
      this.parser = null;
      this.currentEntity = null;
      this.stringConverter = new CharStringConverter(200);
      this.entityManager = new EntityManager();
      this.entityStack = new Stack();
      this.attribs = new AttributesHolder();
      this.cbuf = new char[1024];
      this.oneCharBuffer = new char[1];
      this.entityStateStack = new LongStack(5);
      this.entityNameStack = new StringStack(2);
      this.tagStack = new StringStack(20);
      this.elementMap = new HashMap();
      this.elementDefinition = null;
      this.tokenStartColumn = -1;
      this.defaultAttributeSpecified = new boolean[4];
      this.nsSupport = new FastNamespaceSupport();
      this.yy_sawCR = false;
      this.yy_prev_sawCR = false;
      this.yyline_next = 0;
      this.yycolumn_next = 0;
      this.parser = parser;
      this.enableNamespaces(true);
   }

   public void reset(Entity entity) throws IOException, SAXException {
      try {
         this.setTokenize(true);
         this.tagStack.clear();
         this.attribs.clear();
         this.entityStack.clear();
         this.clearEntityState();
         this.elementMap.clear();
         this.currentEntity = entity;
         this.entityManager.clear();
         this.elementDefinition = null;
         if (!entity.isOpen()) {
            entity.open();
         }

         if (this.parser.fNamespaces) {
            this.nsSupport.reset();
         }

         this.isNamespaceDeclaration = false;
         this.bypassPERefs = this.bypassGERefs = false;
         this.needsNormalization = false;
         this.entityWasSkipped = false;
         this.inCdataSection = false;
         this.cbuflen = this.cdataStart = this.cdataLength = 0;
         this.tagType = 0;
         this.prevState = this.piPrevState = 0;
         this.endOfTag = false;
         this.tokenStartLine = 0;
         this.tokenStartColumn = 0;
         this.numAttributesDefined = 0;
         this.yy_reader = null;
         this.yyreset(entity.getReader());
      } catch (RecursionException var3) {
      }

   }

   void enableNamespaces(boolean value) {
      if (value) {
         this.tagState = 8;
         this.tagStartState = 9;
      } else {
         this.tagState = 6;
         this.tagStartState = 7;
         this.elementURI = this.elementLocalName = "";
         this.attributeURI = this.attributeLocalName = "";
      }

   }

   void defineElement(String name, ElementDefinition elem) {
      this.elementMap.put(name, elem);
   }

   ElementDefinition getElement(String name) {
      return (ElementDefinition)this.elementMap.get(name);
   }

   public int getLineNumber() {
      return this.yyline + 1;
   }

   public int getColumnNumber() {
      return this.yycolumn + 1;
   }

   String getPublicID() {
      return this.currentEntity != null ? this.currentEntity.getPublicID() : null;
   }

   String getSystemID() {
      return this.currentEntity != null ? this.currentEntity.getSystemID() : null;
   }

   String getVersion() {
      return this.currentEntity != null ? this.currentEntity.getXMLVersion() : null;
   }

   String getEncoding() {
      return this.currentEntity != null ? this.currentEntity.getDeclaredEncoding() : null;
   }

   void setTokenize(boolean tokenize) {
      this.tokenizeInput = tokenize;
      this.baseState = tokenize ? 0 : 2;
      int state = this.yystate();
      if (state == 0 || state == 2) {
         this.yybegin(this.baseState);
      }

   }

   String normalizeValue(String s) {
      if (s != null && s.length() != 0) {
         char[] inbuf = s.toCharArray();
         int in_len = inbuf.length;
         int inpos = 0;
         char[] outbuf = new char[in_len];
         int outpos = 0;

         label50:
         while(inpos < in_len) {
            switch (inbuf[inpos]) {
               case '\t':
               case '\n':
               case '\r':
               case ' ':
                  ++inpos;
                  break;
               default:
                  break label50;
            }
         }

         while(true) {
            label41:
            while(inpos < in_len) {
               char c;
               label29:
               while(true) {
                  c = inbuf[inpos++];
                  switch (c) {
                     case '\t':
                     case '\n':
                     case '\r':
                     case ' ':
                        break label29;
                     default:
                        outbuf[outpos++] = c;
                        if (inpos >= in_len) {
                           break label29;
                        }
                  }
               }

               while(inpos < in_len) {
                  c = inbuf[inpos++];
                  switch (c) {
                     case '\t':
                     case '\n':
                     case '\r':
                     case ' ':
                        break;
                     default:
                        outbuf[outpos++] = ' ';
                        outbuf[outpos++] = c;
                        continue label41;
                  }
               }
            }

            return new String(outbuf, 0, outpos);
         }
      } else {
         return s;
      }
   }

   void startCdata() throws SAXException {
      if (this.parser.lexHandler != null) {
         this.parser.lexHandler.startCDATA();
         this.inCdataSection = true;
      }

   }

   void endCdata() throws SAXException {
      if (this.parser.lexHandler != null) {
         this.parser.lexHandler.endCDATA();
         this.inCdataSection = false;
      }

   }

   private void reportTotalEntityBytesExceeded() throws SAXException {
      XmlError err = XmlError.forMessage("exceeded-total-entity-bytes", new Integer[]{new Integer(this.maxTotalEntityBytes)});
      this.resetEntityByteCounts();
      throw new SAXException(err.getMessage());
   }

   private void maybeExpandBuffer(int length) throws SAXException {
      if (this.cbuf.length - this.cbuflen < length) {
         char[] newcbuf = new char[2 * (this.cbuf.length + length)];
         System.arraycopy(this.cbuf, 0, newcbuf, 0, this.cbuflen);
         this.cbuf = newcbuf;
      }

   }

   private void appendToCbuf(char c) throws SAXException {
      this.maybeExpandBuffer(1);
      this.cbuf[this.cbuflen++] = c;
   }

   private void appendToCbuf(char[] ch, int start, int length) throws SAXException {
      if (length > 0) {
         this.maybeExpandBuffer(length);
         System.arraycopy(ch, start, this.cbuf, this.cbuflen, length);
         this.cbuflen += length;
      }
   }

   private void clearCbuf() {
      this.cbuflen = 0;
   }

   private int stringToken(int token, String value) {
      this.stringValue = value;
      return token;
   }

   private int cdataToken(char[] buf, int start, int length) {
      return this.cdataToken(257, buf, start, length);
   }

   private int cdataToken(int token, char[] buf, int start, int length) {
      this.cdataBuffer = buf;
      this.cdataStart = start;
      this.cdataLength = length;
      return token;
   }

   private int cdataToken(char c) {
      this.oneCharBuffer[0] = c;
      this.cdataBuffer = this.oneCharBuffer;
      this.cdataStart = 0;
      this.cdataLength = 1;
      return 257;
   }

   private int parseXML() throws SAXException, IOException {
      if (this.parser.fNamespaces) {
         return this.parseXMLNS();
      } else {
         while(true) {
            this.parseCdata();
            this.parser.reportCdata(this.cdataBuffer, this.cdataStart, this.cdataLength);
            this.yynextAction();
            if (this.yystate() != this.tagStartState) {
               return 0;
            }

            int token = this.parseTag();
            switch (token) {
               case -1:
                  return 0;
               case 0:
                  this.yynextAction();
                  break;
               default:
                  return token;
            }
         }
      }
   }

   private int parseXMLNS() throws SAXException, IOException {
      while(true) {
         this.parseCdata();
         this.parser.reportCdata(this.cdataBuffer, this.cdataStart, this.cdataLength);
         this.yynextAction();
         if (this.yystate() != this.tagStartState) {
            return 0;
         }

         int token = this.parseTagNS();
         switch (token) {
            case -1:
               return 0;
            case 0:
               this.yynextAction();
               break;
            default:
               return token;
         }
      }
   }

   private int parseTag() throws SAXException, IOException {
      if (this.yy_endRead - this.yy_markedPos > 0) {
         int c = this.yy_buffer[this.yy_markedPos];
         switch (c) {
            case '!':
            case '?':
               this.yybegin(this.tagStartState);
               return -1;
            case '/':
               return this.parseCloseTag();
            default:
               return this.parseOpenTag();
         }
      } else {
         return -1;
      }
   }

   private int parseTagNS() throws SAXException, IOException {
      if (this.yy_endRead - this.yy_markedPos > 0) {
         int c = this.yy_buffer[this.yy_markedPos];
         switch (c) {
            case '!':
            case '?':
               this.yybegin(this.tagStartState);
               return -1;
            case '/':
               return this.parseCloseTagNS();
            default:
               return this.parseOpenTagNS();
         }
      } else {
         return -1;
      }
   }

   private int parseOpenTag() throws SAXException, IOException {
      this.stringValue = this.parseElementName();
      if (this.stringValue == null) {
         this.yybegin(this.tagStartState);
         return -1;
      } else {
         int c = this.yy_buffer[this.yy_markedPos++];

         while(c != 62) {
            if (c == 47) {
               ++this.yycolumn_next;
               c = this.yynextChar();
               if (c != 62) {
                  throw this.fatalError("'/' should be followed by '>'");
               }

               ++this.yycolumn_next;
               this.yybegin(this.baseState);
               this.processSimpleElement(this.stringValue);
               this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.attribs.clear();
               this.tagType = 265;
               if (this.tokenizeInput) {
                  return 265;
               }

               return 0;
            }

            if (c != 32 && c != 9) {
               if (c != 10) {
                  --this.yy_markedPos;
                  this.prepareComplexElement(this.stringValue);
                  return this.parseAttributes();
               }

               ++this.yyline_next;
               this.yycolumn_next = 0;
            } else {
               ++this.yycolumn_next;
            }

            if (this.yy_endRead - this.yy_markedPos > 0) {
               c = this.yy_buffer[this.yy_markedPos++];
            } else {
               c = this.yynextChar();
            }
         }

         ++this.yycolumn_next;
         this.yybegin(this.baseState);
         this.processSimpleElement(this.stringValue);
         this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
         this.attribs.clear();
         this.tagStack.push(this.stringValue);
         this.tagType = 263;
         return this.tokenizeInput ? 263 : 0;
      }
   }

   private int parseOpenTagNS() throws SAXException, IOException {
      this.stringValue = this.parseElementNameNS();
      if (this.stringValue == null) {
         this.yybegin(this.tagStartState);
         return -1;
      } else {
         int c = this.yy_buffer[this.yy_markedPos++];

         while(c != 62) {
            if (c == 47) {
               ++this.yycolumn_next;
               c = this.yynextChar();
               if (c != 62) {
                  throw this.fatalError("'/' should be followed by '>'");
               }

               ++this.yycolumn_next;
               this.yybegin(this.baseState);
               this.elementURI = this.nsSupport.getURI(this.elementURI);
               this.processSimpleElement(this.stringValue);
               this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.attribs.clear();
               this.tagType = 265;
               if (this.tokenizeInput) {
                  return 265;
               }

               return 0;
            }

            if (c != 32 && c != 9) {
               if (c != 10) {
                  --this.yy_markedPos;
                  this.prepareComplexElement(this.stringValue);
                  this.nsSupport.pushContext();
                  return this.parseAttributesNS();
               }

               ++this.yyline_next;
               this.yycolumn_next = 0;
            } else {
               ++this.yycolumn_next;
            }

            if (this.yy_endRead - this.yy_markedPos > 0) {
               c = this.yy_buffer[this.yy_markedPos++];
            } else {
               c = this.yynextChar();
            }
         }

         ++this.yycolumn_next;
         this.nsSupport.pushContext();
         this.elementURI = this.nsSupport.getURI(this.elementURI);
         this.yybegin(this.baseState);
         this.processSimpleElement(this.stringValue);
         this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
         this.attribs.clear();
         this.tagStack.push(this.stringValue);
         this.tagType = 263;
         return this.tokenizeInput ? 263 : 0;
      }
   }

   private int parseAttributes() throws SAXException, IOException {
      this.yybegin(this.tagState);
      int c = 0;
      this.endOfTag = false;

      label89:
      while(true) {
         if (!this.endOfTag) {
            if (this.yy_endRead - this.yy_markedPos <= 0) {
               return -1;
            }

            this.parseAttributeName();
            if (this.attributeQName != null) {
               int bufferLeft = this.yy_endRead - this.yy_markedPos;

               while(true) {
                  if (bufferLeft-- > 0) {
                     switch (this.yy_buffer[this.yy_markedPos++]) {
                        case '\t':
                        case ' ':
                           ++this.yycolumn_next;
                           continue;
                        case '\n':
                           ++this.yyline_next;
                           this.yycolumn_next = 0;
                           continue;
                        case '=':
                           break;
                        default:
                           --this.yy_markedPos;
                           this.yybegin(10);
                           return -1;
                     }
                  }

                  if (bufferLeft < 0) {
                     this.yybegin(10);
                     return -1;
                  }

                  label73:
                  for(c = this.yynextChar(); c != -1; c = this.yynextChar()) {
                     switch (c) {
                        case 9:
                        case 32:
                           ++this.yycolumn_next;
                           break;
                        case 10:
                           ++this.yyline_next;
                           this.yycolumn_next = 0;
                           break;
                        case 34:
                           ++this.yycolumn_next;
                           this.parseQuotedTagValue();
                           if (this.yystate() != this.tagState) {
                              return -1;
                           }
                           break label73;
                        case 39:
                           ++this.yycolumn_next;
                           this.parseSingleQuotedTagValue();
                           if (this.yystate() != this.tagState) {
                              return -1;
                           }
                           break label73;
                        default:
                           throw this.fatalError("Unexpected character encountered: '" + (char)c + "'");
                     }
                  }

                  if (c == -1) {
                     throw this.fatalError("Unexpected end of file");
                  }
                  continue label89;
               }
            }
         }

         while(this.yy_endRead - this.yy_markedPos > 0) {
            switch (this.yy_buffer[this.yy_markedPos++]) {
               case '\t':
               case ' ':
                  ++this.yycolumn_next;
                  break;
               case '\n':
                  ++this.yyline_next;
                  this.yycolumn_next = 0;
                  break;
               case '/':
                  ++this.yycolumn_next;
                  if (this.yynextChar() != 62) {
                     throw this.fatalError("'/' should be followed by '>'");
                  }

                  ++this.yycolumn_next;
                  this.yybegin(this.baseState);
                  this.processComplexElement();
                  this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.attribs.clear();
                  this.tagType = 265;
                  if (this.tokenizeInput) {
                     return 265;
                  }

                  return 0;
               case '>':
                  ++this.yycolumn_next;
                  this.yybegin(this.baseState);
                  this.processComplexElement();
                  this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.tagStack.push(this.stringValue);
                  this.attribs.clear();
                  this.tagType = 263;
                  if (this.tokenizeInput) {
                     return 263;
                  }

                  return 0;
               default:
                  throw this.fatalError("Unexpected character: " + (char)c);
            }
         }

         return -1;
      }
   }

   private int parseAttributesNS() throws SAXException, IOException {
      this.yybegin(this.tagState);
      int c = 0;
      this.endOfTag = false;

      label88:
      while(true) {
         if (!this.endOfTag) {
            if (this.yy_endRead - this.yy_markedPos <= 0) {
               return -1;
            }

            this.parseAttributeNameNS();
            if (this.attributeQName != null) {
               int bufferLeft = this.yy_endRead - this.yy_markedPos;

               while(true) {
                  if (bufferLeft-- > 0) {
                     switch (this.yy_buffer[this.yy_markedPos++]) {
                        case '\t':
                        case ' ':
                           ++this.yycolumn_next;
                           continue;
                        case '\n':
                           ++this.yyline_next;
                           this.yycolumn_next = 0;
                           continue;
                        case '=':
                           break;
                        default:
                           --this.yy_markedPos;
                           this.yybegin(10);
                           return -1;
                     }
                  }

                  if (bufferLeft < 0) {
                     this.yybegin(10);
                     return -1;
                  }

                  c = this.yynextChar();

                  while(true) {
                     label71: {
                        if (c != -1) {
                           switch (c) {
                              case 9:
                              case 32:
                                 ++this.yycolumn_next;
                                 break label71;
                              case 10:
                                 ++this.yyline_next;
                                 this.yycolumn_next = 0;
                                 break label71;
                              case 34:
                                 ++this.yycolumn_next;
                                 this.parseQuotedTagValue();
                                 if (this.yystate() != this.tagState) {
                                    return -1;
                                 }
                                 break;
                              case 39:
                                 ++this.yycolumn_next;
                                 this.parseSingleQuotedTagValue();
                                 if (this.yystate() != this.tagState) {
                                    return -1;
                                 }
                                 break;
                              default:
                                 throw this.fatalError("Unexpected character encountered: '" + (char)c + "'");
                           }
                        }

                        if (c == -1) {
                           throw this.fatalError("Unexpected end of file");
                        }
                        continue label88;
                     }

                     c = this.yynextChar();
                  }
               }
            }
         }

         while(this.yy_endRead - this.yy_markedPos > 0) {
            switch (this.yy_buffer[this.yy_markedPos++]) {
               case '\t':
               case ' ':
                  ++this.yycolumn_next;
                  break;
               case '\n':
                  ++this.yyline_next;
                  this.yycolumn_next = 0;
                  break;
               case '/':
                  ++this.yycolumn_next;
                  if (this.yynextChar() != 62) {
                     throw this.fatalError("'/' should be followed by '>'");
                  }

                  ++this.yycolumn_next;
                  this.yybegin(this.baseState);
                  this.processComplexElement();
                  this.resolveNamespacePrefixes();
                  this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.processNSContextEnd();
                  this.attribs.clear();
                  this.tagType = 265;
                  if (this.tokenizeInput) {
                     return 265;
                  }

                  return 0;
               case '>':
                  ++this.yycolumn_next;
                  this.yybegin(this.baseState);
                  this.processComplexElement();
                  this.resolveNamespacePrefixes();
                  this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.tagStack.push(this.stringValue);
                  this.attribs.clear();
                  this.tagType = 263;
                  if (this.tokenizeInput) {
                     return 263;
                  }

                  return 0;
               default:
                  throw this.fatalError("Unexpected character: " + (char)c);
            }
         }

         return -1;
      }
   }

   private void parseAttributeName() throws SAXException, IOException {
      int c = this.yy_buffer[this.yy_markedPos++];

      while(true) {
         if (c != 32 && c != 9) {
            if (c != 10) {
               if (c == 47) {
                  --this.yy_markedPos;
                  this.attributeQName = null;
                  return;
               }

               if (c == 62) {
                  --this.yy_markedPos;
                  this.attributeQName = null;
                  return;
               }

               label63: {
                  if (c <= 255) {
                     if (!isASCIINameStartChar(c)) {
                        break label63;
                     }
                  } else if (!isNonASCIINameStartChar(c)) {
                     break label63;
                  }

                  ++this.yycolumn_next;
                  this.yy_startRead = this.yy_markedPos - 1;

                  while(true) {
                     if (c <= 255) {
                        if (!isASCIINameChar(c)) {
                           break;
                        }
                     } else if (!isNonASCIINameChar(c)) {
                        break;
                     }

                     ++this.yycolumn_next;
                     if (this.yy_endRead - this.yy_markedPos > 0) {
                        c = this.yy_buffer[this.yy_markedPos++];
                     } else {
                        c = this.yynextChar();
                     }
                  }

                  --this.yy_markedPos;
                  this.attributeQName = this.yytext2();
                  return;
               }

               --this.yy_markedPos;
               this.attributeQName = "";
               return;
            }

            ++this.yyline_next;
            this.yycolumn_next = 0;
         } else {
            ++this.yycolumn_next;
         }

         if (this.yy_endRead - this.yy_markedPos > 0) {
            c = this.yy_buffer[this.yy_markedPos++];
         } else {
            c = this.yynextChar();
         }
      }
   }

   private void parseAttributeNameNS() throws SAXException, IOException {
      this.attributeURI = null;
      this.isNamespaceDeclaration = false;
      int c = this.yy_buffer[this.yy_markedPos++];
      int localNameOffset = 0;
      int var10000 = this.yy_endRead - this.yy_markedPos;

      while(true) {
         if (c != 32 && c != 9) {
            if (c != 10) {
               if (c == 47) {
                  --this.yy_markedPos;
                  this.attributeQName = null;
                  return;
               }

               if (c == 62) {
                  --this.yy_markedPos;
                  this.attributeQName = null;
                  return;
               }

               label87: {
                  label71: {
                     if (c <= 255) {
                        if (!isASCIINameStartChar(c)) {
                           break label71;
                        }
                     } else if (!isNonASCIINameStartChar(c)) {
                        break label71;
                     }

                     ++this.yycolumn_next;
                     this.yy_startRead = this.yy_markedPos - 1;
                     break label87;
                  }

                  if (c != 58) {
                     --this.yy_markedPos;
                     this.attributeQName = "";
                     return;
                  }

                  localNameOffset = this.yy_markedPos - this.yy_startRead;
                  this.attributeURI = "";
               }

               while(true) {
                  label88: {
                     label62: {
                        if (c <= 255) {
                           if (!isASCIINameCharNS(c)) {
                              break label62;
                           }
                        } else if (!isNonASCIINameChar(c)) {
                           break label62;
                        }

                        ++this.yycolumn_next;
                        break label88;
                     }

                     if (c != 58) {
                        --this.yy_markedPos;
                        if (this.attributeURI == null) {
                           this.attributeURI = "";
                        }

                        this.attributeLocalName = this.yytext2(localNameOffset, this.yy_markedPos - (this.yy_startRead + localNameOffset));
                        if (this.attributeURI == "xmlns" || this.attributeLocalName == "xmlns") {
                           this.isNamespaceDeclaration = true;
                        }

                        this.attributeQName = this.yytext2();
                        return;
                     }

                     ++this.yycolumn_next;
                     if (this.attributeURI == null) {
                        this.attributeURI = this.stringConverter.convert(this.yy_buffer, this.yy_startRead, this.yy_markedPos - 1 - this.yy_startRead);
                        localNameOffset = this.yy_markedPos - this.yy_startRead;
                     }
                  }

                  if (this.yy_endRead - this.yy_markedPos > 0) {
                     c = this.yy_buffer[this.yy_markedPos++];
                  } else {
                     c = this.yynextChar();
                  }
               }
            }

            ++this.yyline_next;
            this.yycolumn_next = 0;
         } else {
            ++this.yycolumn_next;
         }

         if (this.yy_endRead - this.yy_markedPos > 0) {
            c = this.yy_buffer[this.yy_markedPos++];
         } else {
            c = this.yynextChar();
         }
      }
   }

   private int parseCloseTag() throws SAXException, IOException {
      ++this.yy_markedPos;
      ++this.yycolumn_next;
      this.stringValue = this.parseElementName();
      if (this.stringValue == null) {
         this.yybegin(this.tagStartState);
         --this.yy_markedPos;
         --this.yycolumn_next;
         return -1;
      } else {
         while(this.yy_endRead - this.yy_markedPos > 0) {
            char c = this.yy_buffer[this.yy_markedPos++];
            switch (c) {
               case '\t':
               case ' ':
                  ++this.yycolumn_next;
                  break;
               case '\n':
                  ++this.yyline_next;
                  this.yycolumn_next = 0;
                  break;
               case '>':
                  ++this.yycolumn_next;
                  this.checkEndTag(this.stringValue);
                  this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.yybegin(this.baseState);
                  this.tagType = 264;
                  if (this.tokenizeInput) {
                     return 264;
                  }

                  return 0;
               default:
                  throw this.fatalError("Unexpected character encountered while in a closing tag: '" + c + "'");
            }
         }

         this.yybegin(this.parser.fNamespaces ? 20 : 19);
         return -1;
      }
   }

   private int parseCloseTagNS() throws SAXException, IOException {
      ++this.yy_markedPos;
      ++this.yycolumn_next;
      this.stringValue = this.parseElementNameNS();
      if (this.stringValue == null) {
         this.yybegin(this.tagStartState);
         --this.yy_markedPos;
         --this.yycolumn_next;
         return -1;
      } else {
         while(this.yy_endRead - this.yy_markedPos > 0) {
            char c = this.yy_buffer[this.yy_markedPos++];
            switch (c) {
               case '\t':
               case ' ':
                  ++this.yycolumn_next;
                  break;
               case '\n':
                  ++this.yyline_next;
                  this.yycolumn_next = 0;
                  break;
               case '>':
                  ++this.yycolumn_next;
                  this.checkEndTag(this.stringValue);
                  this.elementURI = this.nsSupport.getURI(this.elementURI);
                  this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
                  this.processNSContextEnd();
                  this.yybegin(this.baseState);
                  this.tagType = 264;
                  if (this.tokenizeInput) {
                     return 264;
                  }

                  return 0;
               default:
                  throw this.fatalError("Unexpected character encountered while in a closing tag: '" + c + "'");
            }
         }

         this.yybegin(this.parser.fNamespaces ? 20 : 19);
         return -1;
      }
   }

   private String parseElementName() throws SAXException, IOException {
      int c;
      label53: {
         this.yy_startRead = this.yy_markedPos;
         c = this.yynextChar();
         if (c <= 255) {
            if (isASCIINameStartChar(c)) {
               break label53;
            }
         } else if (isNonASCIINameStartChar(c)) {
            break label53;
         }

         this.yybegin(this.tagStartState);
         --this.yy_markedPos;
         return null;
      }

      ++this.yycolumn_next;

      char c;
      while(true) {
         while(this.yy_endRead - this.yy_markedPos <= 0) {
            c = this.yynextChar();
            if (c < 0) {
               throw this.fatalError("Unexpected end of file");
            }

            --this.yy_markedPos;
         }

         c = this.yy_buffer[this.yy_markedPos++];
         if (c <= 255) {
            if (!isASCIINameChar(c)) {
               break;
            }
         } else if (!isNonASCIINameChar(c)) {
            break;
         }

         ++this.yycolumn_next;
      }

      if (c != '>' && c != ' ' && c != '/' && c != '\n' && c != '\t') {
         this.yy_markedPos = this.yy_startRead;
         return null;
      } else {
         --this.yy_markedPos;
         return this.yytext2();
      }
   }

   private String parseElementNameNS() throws SAXException, IOException {
      int localNameOffset;
      int c;
      label73: {
         label76: {
            this.yy_startRead = this.yy_markedPos;
            localNameOffset = 0;
            this.elementURI = null;
            c = this.yynextChar();
            if (c <= 255) {
               if (isASCIINameStartCharNS(c)) {
                  break label76;
               }
            } else if (isNonASCIINameStartChar(c)) {
               break label76;
            }

            if (c != 58) {
               this.yybegin(this.tagStartState);
               --this.yy_markedPos;
               return null;
            }

            ++this.yycolumn_next;
            localNameOffset = 1;
            this.elementURI = "";
            break label73;
         }

         ++this.yycolumn_next;
      }

      while(true) {
         char c;
         while(true) {
            while(this.yy_endRead - this.yy_markedPos <= 0) {
               c = this.yynextChar();
               if (c < 0) {
                  throw this.fatalError("Unexpected end of file");
               }

               --this.yy_markedPos;
            }

            c = this.yy_buffer[this.yy_markedPos++];
            if (c <= 255) {
               if (!isASCIINameCharNS(c)) {
                  break;
               }
            } else if (!isNonASCIINameChar(c)) {
               break;
            }

            ++this.yycolumn_next;
         }

         if (c == '>' || c == ' ' || c == '/') {
            break;
         }

         if (c != ':') {
            if (c != '\n' && c != '\t') {
               this.yy_markedPos = this.yy_startRead;
               return null;
            }
            break;
         }

         ++this.yycolumn_next;
         if (this.elementURI == null) {
            this.elementURI = this.stringConverter.convert(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead - 1);
            localNameOffset = this.yy_markedPos - this.yy_startRead;
         }
      }

      --this.yy_markedPos;
      this.elementLocalName = this.yytext2(localNameOffset, this.yy_markedPos - (this.yy_startRead + localNameOffset));
      return localNameOffset == 0 ? this.elementLocalName : this.yytext2();
   }

   private static void calcAsciiTables() {
      asciiNameStartChars = new boolean[256];
      asciiNameStartCharsNS = new boolean[256];
      asciiNameChars = new boolean[256];
      asciiNameCharsNS = new boolean[256];

      for(int c = 0; c < 256; ++c) {
         asciiNameStartChars[c] = c >= 97 && c <= 122 || c == 58 || c >= 65 && c <= 90 || c == 95 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 255;
         asciiNameStartCharsNS[c] = c != 58 && asciiNameStartChars[c];
         asciiNameChars[c] = c >= 97 && c <= 122 || c == 58 || c >= 65 && c <= 90 || c == 46 || c == 45 || c == 95 || c == 183 || c >= 48 && c <= 57 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 255;
         asciiNameCharsNS[c] = c != 58 && asciiNameChars[c];
      }

   }

   private static int findIndexFor(char[] array, int c) {
      int n = array.length;
      int start = 0;
      int end = n;

      while(start + 1 < end) {
         int mid = (end - start) / 2 + start;
         if (array[mid] > c) {
            end = mid;
         } else {
            start = mid;
         }
      }

      return start;
   }

   private static boolean isASCIINameStartChar(int c) {
      return asciiNameStartChars[c];
   }

   private static boolean isASCIINameStartCharNS(int c) {
      return asciiNameStartCharsNS[c];
   }

   private static boolean isNonASCIINameStartChar(int c) {
      int pos = findIndexFor(LETTER_RANGE_START, c);
      return c <= LETTER_RANGE_END[pos];
   }

   private static boolean isASCIINameChar(int c) {
      return asciiNameChars[c];
   }

   private static boolean isASCIINameCharNS(int c) {
      return asciiNameCharsNS[c];
   }

   private static boolean isNonASCIINameChar(int c) {
      return isNonASCIINameStartChar(c) || c <= NON_LETTER_RANGE_END[findIndexFor(NON_LETTER_RANGE_START, c)];
   }

   private int parseWhitespace() throws SAXException, IOException {
      this.cdataBuffer = this.yy_buffer;
      this.cdataStart = this.yy_startRead;

      while(this.yy_endRead - this.yy_markedPos > 0) {
         int c = this.yy_buffer[this.yy_markedPos++];
         switch (c) {
            case '\t':
            case ' ':
               ++this.yycolumn_next;
               break;
            case '\n':
               ++this.yyline_next;
               this.yycolumn_next = 0;
               break;
            case '&':
               ++this.yycolumn_next;
               this.yybegin(3);
               this.cdataLength = this.yy_markedPos - 1 - this.yy_startRead;
               return 257;
            case '<':
               this.tokenStartLine = this.yyline_next + 1;
               ++this.yycolumn_next;
               this.tokenStartColumn = this.yycolumn_next + 1;
               this.yybegin(this.tagStartState);
               this.cdataLength = this.yy_markedPos - 1 - this.yy_startRead;
               this.yybegin(this.tagStartState);
               return 266;
            default:
               ++this.yycolumn_next;
               this.parseCdata();
               return 257;
         }
      }

      this.cdataLength = this.yy_markedPos - this.yy_startRead;
      return 266;
   }

   private void parseCdata() throws SAXException, IOException {
      this.cdataBuffer = this.yy_buffer;
      this.cdataStart = this.yy_startRead;

      label39:
      while(this.yy_endRead > this.yy_markedPos) {
         int c = this.yy_buffer[this.yy_markedPos++];
         switch (c) {
            case 10:
               ++this.yyline_next;
               this.yycolumn_next = 0;
               break;
            case 38:
               ++this.yycolumn_next;
               this.yybegin(3);
               this.cdataLength = this.yy_markedPos - 1 - this.yy_startRead;
               return;
            case 60:
               ++this.yycolumn_next;
               this.yybegin(this.tagStartState);
               this.cdataLength = this.yy_markedPos - 1 - this.yy_startRead;
               this.tokenStartLine = this.yyline_next + 1;
               this.tokenStartColumn = this.yycolumn_next + 1;
               return;
            case 93:
               int numBrackets = 1;

               while(true) {
                  if (this.yy_endRead - this.yy_markedPos >= 1) {
                     c = this.yy_buffer[this.yy_markedPos++];
                  } else {
                     this.parser.reportCdata(this.cdataBuffer, this.cdataStart, this.yy_markedPos - this.yy_startRead);
                     this.yynextAction();
                     c = this.yynextChar();
                     this.cdataBuffer = this.yy_buffer;
                     this.cdataStart = this.yy_startRead;
                  }

                  if (c != 93) {
                     if (c == 62 && numBrackets >= 2) {
                        throw this.fatalError("Illegal ']]>' construct in character data");
                     }

                     if (c != -1) {
                        --this.yy_markedPos;
                     }
                     continue label39;
                  }

                  ++numBrackets;
               }
            default:
               ++this.yycolumn_next;
         }
      }

      this.cdataLength = this.yy_markedPos - this.yy_startRead;
   }

   private void parseCdataSection() throws SAXException, IOException {
      this.yynextAction();

      while(true) {
         label46:
         while(true) {
            while(this.yy_endRead <= this.yy_markedPos) {
               if (this.yynextChar() == -1) {
                  throw this.fatalError("Unexpected end of file in CDATA section");
               }

               --this.yy_markedPos;
            }

            int c = this.yy_buffer[this.yy_markedPos++];
            switch (c) {
               case 10:
                  ++this.yyline_next;
                  this.yycolumn_next = 0;
                  break;
               case 93:
                  int numBrackets = 1;

                  while(true) {
                     int len;
                     if (this.yy_endRead > this.yy_markedPos) {
                        c = this.yy_buffer[this.yy_markedPos++];
                     } else {
                        len = Math.min(2, numBrackets);
                        this.yy_markedPos -= len;
                        this.parser.reportCdata(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
                        this.yynextAction();
                        this.yy_markedPos += len;
                        c = this.yynextChar();
                     }

                     if (c != 93) {
                        if (c == 62 && numBrackets >= 2) {
                           len = this.yy_markedPos - 3 - this.yy_startRead;
                           if (len > 0) {
                              this.parser.reportCdata(this.yy_buffer, this.yy_startRead, len);
                           }

                           return;
                        }

                        if (c == -1) {
                           throw this.fatalError("Unexpected end of file in CDATA section");
                        }

                        --this.yy_markedPos;
                        continue label46;
                     }

                     ++numBrackets;
                  }
               default:
                  ++this.yycolumn_next;
            }
         }
      }
   }

   void pushEntity(String name, Entity entity, boolean isParamEntity, boolean returnEndToken) throws SAXException, IOException {
      this.pushEntity(name, entity, isParamEntity, returnEndToken, 0);
   }

   void pushEntity(String name, Entity entity, boolean isParamEntity, boolean returnEndToken, int resumeLexState) throws SAXException, IOException {
      try {
         if (name != null) {
            this.parser.reportStartEntity(name);
         }

         entity.open();
         if (entity.isInternal()) {
            if (entity.charArrayValue()[0] != '&' && this.maxTotalEntityBytes > 0 && (this.totalEntityBytesPushed += entity.charArrayValue().length) > this.maxTotalEntityBytes) {
               this.reportTotalEntityBytesExceeded();
            }

            this.yypushBuffer(entity.charArrayValue(), 0, entity.charArrayValue().length);
         } else {
            this.yypushStream(entity.getReader());
         }

         this.entityStack.push(this.currentEntity);
         this.currentEntity = entity;
         this.pushEntityState(name, isParamEntity, returnEndToken, resumeLexState);
      } catch (RecursionException var7) {
         throw this.fatalError("Recursive reference to entity '" + entity.getSystemID() + "'");
      }
   }

   void pushEntity(String name, String pubID, String sysID, boolean isParamEntity, boolean returnEndToken) throws SAXException, IOException {
      this.pushEntity(name, pubID, sysID, isParamEntity, returnEndToken, 0);
   }

   void pushEntity(String name, String pubID, String sysID, boolean isParamEntity, boolean returnEndToken, int resumeLexState) throws SAXException, IOException {
      Entity en = this.entityManager.getByID(this.currentEntity, pubID, sysID);
      this.pushEntity(name, en, isParamEntity, returnEndToken, resumeLexState);
   }

   boolean parseExternalEntities(int entityType) {
      if (this.currentEntity.isStandalone()) {
         return false;
      } else {
         switch (entityType) {
            case 0:
            default:
               return this.parser.fExternalGeneralEntities;
            case 1:
               return this.parser.fExternalParameterEntities;
         }
      }
   }

   private void pushEntityState(String entityName, boolean newIsParamEntity, boolean newReturnEndToken) throws SAXException {
      this.pushEntityState(entityName, newIsParamEntity, newReturnEndToken, 0);
   }

   private void pushEntityState(String entityName, boolean newIsParamEntity, boolean newReturnEndToken, int newReturnLexState) throws SAXException {
      long entityState = (long)(this.entityBaseDepth << 11 | (this.prevEntityLexState & 255) << 3 | (this.returnEntityEndToken ? 4 : 0) | (this.isParamEntity ? 2 : 0) | (this.isEntityBeingParsed ? 1 : 0));
      this.entityStateStack.push(entityState);
      this.entityBaseDepth = this.tagStack.size();
      this.entityNameStack.push(this.currentEntityName);
      this.currentEntityName = entityName;
      this.isParamEntity = newIsParamEntity;
      this.returnEntityEndToken = newReturnEndToken;
      this.isEntityBeingParsed = true;
      this.prevEntityLexState = newReturnLexState;
   }

   private void popEntityState() throws SAXException {
      if (this.prevEntityLexState != 0) {
         this.yybegin(this.prevEntityLexState);
      }

      long entityState = this.entityStateStack.pop();
      this.returnEntityEndToken = (entityState & 4L) == 4L;
      this.isParamEntity = (entityState & 2L) == 2L;
      this.isEntityBeingParsed = (entityState & 1L) == 1L;
      this.entityBaseDepth = (int)(entityState >> 11 & 65535L);
      this.prevEntityLexState = (int)(entityState >> 3 & 255L);
      if (this.currentEntityName != null) {
         this.parser.reportEndEntity(this.currentEntityName);
      }

      this.currentEntityName = this.entityNameStack.pop();
      if (this.tagStack.size() > this.entityBaseDepth) {
         this.setTokenize(false);
      }

   }

   private void clearEntityState() {
      this.entityStateStack.clear();
      this.entityNameStack.clear();
      this.returnEntityEndToken = true;
      this.isParamEntity = false;
      this.entityBaseDepth = 0;
      this.isEntityBeingParsed = true;
      this.prevEntityLexState = 0;
      this.currentEntityName = null;
   }

   private int handleEntityRef(String name, int entityType) throws IOException, SAXException {
      Entity entity = this.entityManager.getByName(name, entityType);
      if (entity == null) {
         this.handleUnknownEntityRef(name, entityType);
         return 0;
      } else {
         boolean isParam = entityType == 1;
         String entityReportedName;
         if (isParam) {
            if (this.yystate() == 21) {
               entityReportedName = "%" + name;
            } else {
               entityReportedName = null;
            }
         } else {
            entityReportedName = name;
         }

         if (entity.isInternal()) {
            this.pushEntity(entityReportedName, entity, isParam, true);
            this.setTokenize(true);
            return 295;
         } else if (name != "[dtd]" && !this.parseExternalEntities(entityType)) {
            this.entityWasSkipped = true;
            this.parser.reportSkippedEntity(entityReportedName);
            return 0;
         } else {
            this.pushEntity(entityReportedName, entity, isParam, true);
            this.setTokenize(true);
            return 296;
         }
      }
   }

   private boolean handleLiteralEntityRef(String name, int entityType) throws IOException, SAXException {
      Entity entity = this.entityManager.getByName(name, entityType);
      boolean isParam = false;
      if (entityType == 1) {
         isParam = true;
      }

      if (entity != null) {
         if (entity.isInternal()) {
            this.pushEntity(name, entity, isParam, false, this.prevState);
            this.yybegin(isParam ? 32 : 11);
            return true;
         } else if (!isParam) {
            throw this.fatalError("Referencing an external entity within an attribute value is illegal");
         } else if (this.parseExternalEntities(entityType)) {
            this.yybegin(33);
            this.pushEntity((String)null, entity, isParam, false, this.prevState);
            return true;
         } else {
            this.entityWasSkipped = true;
            return false;
         }
      } else if (isParam || !this.currentEntity.isStandalone() && this.entityWasSkipped) {
         return false;
      } else {
         throw this.fatalError("Reference to undefined entity: " + name);
      }
   }

   private void handleUnknownEntityRef(String name, int type) throws SAXException {
      boolean isParam = type == 1;
      String reportedName = (isParam ? "%" : "") + name;
      if (!this.currentEntity.isStandalone() && this.entityWasSkipped) {
         this.parser.reportSkippedEntity(reportedName);
      } else {
         throw this.fatalError("Reference to undefined entity: " + reportedName);
      }
   }

   private boolean isTopEntity() {
      return !this.yymoreStreams();
   }

   private void parseQuotedTagValue() throws SAXException, IOException {
      if (this.elementDefinition == null) {
         this.parseCdataLiteral('"', 13);
      } else {
         IndexedObject o = this.elementDefinition.getIndexedAttribute(this.attributeQName);
         if (o == null) {
            this.attributeValueType = "CDATA";
            this.parseCdataLiteral('"', 13);
         } else {
            this.defaultAttributeSpecified[o.getIndex()] = true;
            int type = ((AttributeDefinition)o.getObject()).getValueType();
            if (type == 3) {
               this.attributeValueType = "CDATA";
               this.parseCdataLiteral('"', 13);
            } else {
               this.attributeValueType = AttributeDefinition.getValueTypeString(type);
               this.yybegin(15);
            }
         }
      }

   }

   private void parseSingleQuotedTagValue() throws SAXException, IOException {
      if (this.elementDefinition == null) {
         this.parseCdataLiteral('\'', 14);
      } else {
         IndexedObject o = this.elementDefinition.getIndexedAttribute(this.attributeQName);
         if (o == null) {
            this.attributeValueType = "CDATA";
            this.parseCdataLiteral('\'', 14);
         } else {
            this.defaultAttributeSpecified[o.getIndex()] = true;
            int type = ((AttributeDefinition)o.getObject()).getValueType();
            if (type == 3) {
               this.attributeValueType = "CDATA";
               this.parseCdataLiteral('\'', 14);
            } else {
               this.attributeValueType = AttributeDefinition.getValueTypeString(type);
               this.yybegin(16);
            }
         }
      }

   }

   private void parseCdataLiteral(char closingQuote, int bufferedState) throws SAXException, IOException {
      int startPos = this.yy_markedPos;

      while(this.yy_endRead - this.yy_markedPos > 0) {
         char c = this.yy_buffer[this.yy_markedPos++];
         if (c == '&') {
            ++this.yycolumn_next;
            this.clearCbuf();
            this.appendToCbuf(this.yy_buffer, startPos, this.yy_markedPos - 1 - startPos);
            this.prevState = bufferedState;
            this.yybegin(12);
            return;
         }

         if (c == '<') {
            throw this.fatalError("Illegal '<' found in attribute value. Use '&lt;' instead.");
         }

         if (c > '\'') {
            ++this.yycolumn_next;
         } else {
            if (c == closingQuote) {
               ++this.yycolumn_next;
               int valueLen = this.yy_markedPos - 1 - startPos;
               String value;
               if (valueLen >= 4 && !this.isNamespaceDeclaration) {
                  value = new String(this.yy_buffer, startPos, valueLen);
               } else {
                  value = this.stringConverter.convert(this.yy_buffer, startPos, valueLen);
               }

               this.addAttribute(this.attributeURI, this.attributeLocalName, this.attributeQName, this.attributeValueType, value);
               int n;
               if (this.yy_endRead - this.yy_markedPos <= 0) {
                  n = this.yynextChar();
               } else {
                  n = this.yy_buffer[this.yy_markedPos++];
               }

               switch (n) {
                  case 9:
                  case 32:
                     ++this.yycolumn_next;
                     break;
                  case 10:
                     ++this.yyline_next;
                     this.yycolumn_next = 0;
                     break;
                  case 47:
                  case 62:
                     --this.yy_markedPos;
                     this.endOfTag = true;
                     return;
                  default:
                     throw this.fatalError("Whitespace missing after attribute value");
               }

               while(this.yy_endRead - this.yy_markedPos > 0) {
                  switch (this.yy_buffer[this.yy_markedPos]) {
                     case '\t':
                     case ' ':
                        ++this.yy_markedPos;
                        ++this.yycolumn_next;
                        break;
                     case '\n':
                        ++this.yy_markedPos;
                        ++this.yyline_next;
                        this.yycolumn_next = 0;
                        break;
                     default:
                        return;
                  }
               }

               return;
            }

            if (c == '\t') {
               ++this.yycolumn_next;
               this.yy_buffer[this.yy_markedPos - 1] = ' ';
            } else if (c == '\n') {
               ++this.yyline_next;
               this.yycolumn_next = 0;
               this.yy_buffer[this.yy_markedPos - 1] = ' ';
            } else {
               ++this.yycolumn_next;
            }
         }
      }

      this.clearCbuf();
      this.appendToCbuf(this.yy_buffer, startPos, this.yy_markedPos - startPos);
      this.prevState = bufferedState;
      this.yybegin(bufferedState);
   }

   private void parseEncodedChar(char[] buf, int off, int len, int radix) throws CharConversionException, SAXException {
      try {
         int result = 0;

         for(int i = 0; i < len; ++i) {
            result = result * radix + Character.digit(buf[off + i], radix);
         }

         if (result >= 1114112) {
            throw new IllegalCharException("Character reference to illegal XML character");
         } else {
            if (result >= 65536) {
               result -= 65536;
               this.appendToCbuf((char)((result >> 10) + '\ud800'));
               this.appendToCbuf((char)((result & 1023) + '\udc00'));
            } else {
               if (result < 32 && result != 9 && result != 13 && result != 10 || result >= 55296 && result < 57344 || result >= 65534) {
                  throw new IllegalCharException("Character reference to illegal XML character");
               }

               this.appendToCbuf((char)result);
            }

         }
      } catch (ClassCastException var7) {
         throw new CharConversionException();
      }
   }

   private void prepareComplexElement(String elementQName) {
      this.isNamespaceDeclaration = false;
      this.elementDefinition = this.getElement(elementQName);
      if (this.elementDefinition != null) {
         this.numAttributesDefined = this.elementDefinition.getAttributeCount();
         int currentSize = this.defaultAttributeSpecified.length;
         if (currentSize < this.numAttributesDefined) {
            this.defaultAttributeSpecified = new boolean[Math.max(2 * currentSize, this.numAttributesDefined)];
         }

         for(int i = 0; i < this.numAttributesDefined; ++i) {
            this.defaultAttributeSpecified[i] = false;
         }
      } else {
         this.attributeValueType = "CDATA";
      }

   }

   private void processComplexElement() throws SAXException, IOException {
      if (this.elementDefinition != null) {
         AttributeDefinition[] attributes = this.elementDefinition.getAttributes();

         for(int i = 0; i < this.numAttributesDefined; ++i) {
            if (!this.defaultAttributeSpecified[i]) {
               AttributeDefinition ad = attributes[i];
               String defaultValue = ad.getDefaultValue();
               if (defaultValue != null) {
                  this.attribs.addAttribute(ad.getPrefix(), ad.getLocalName(), ad.getQName(), ad.getValueTypeString(), defaultValue);
               }
            }
         }
      }

   }

   private void processNSContextEnd() throws SAXException {
      int mappings = this.nsSupport.getContextSize();

      for(int i = 0; i < mappings; ++i) {
         this.parser.reportEndPrefixMapping(this.nsSupport.getContextPrefix(i));
      }

      this.nsSupport.popContext();
   }

   private void addAttribute(String prefix, String localName, String qName, String type, String value) throws SAXException {
      if (this.needsNormalization) {
         value = this.normalizeValue(value);
         this.needsNormalization = false;
      }

      if (this.isNamespaceDeclaration && this.parser.fNamespaces) {
         if (this.parser.fNamespacePrefixes) {
            this.attribs.addAndCheckAttribute(prefix, localName, qName, type, value);
         }

         if (prefix == "") {
            if (localName == "xmlns") {
               localName = "";
            }

            this.nsSupport.declarePrefix(localName, value);
            this.parser.reportStartPrefixMapping(localName, value);
         } else if (prefix != "xml") {
            this.nsSupport.declarePrefix(localName, value);
            this.parser.reportStartPrefixMapping(localName, value);
         }
      } else {
         this.attribs.addAndCheckAttribute(prefix, localName, qName, type, value);
      }

   }

   private void processSimpleElement(String elementQName) throws SAXException, IOException {
      this.elementDefinition = this.getElement(elementQName);
      if (this.elementDefinition != null) {
         AttributeDefinition[] defaults = this.elementDefinition.getAttributes();
         int numDefaults = this.elementDefinition.getAttributeCount();

         for(int i = 0; i < numDefaults; ++i) {
            AttributeDefinition ad = defaults[i];
            String defaultValue = ad.getDefaultValue();
            if (defaultValue != null) {
               this.attribs.addAttribute(ad.getPrefix(), ad.getLocalName(), ad.getQName(), ad.getValueTypeString(), defaultValue);
            }
         }
      }

   }

   String rescanAttributeValue(String defaultValue) throws SAXException, IOException {
      this.clearCbuf();
      char[] valbuf = defaultValue.toCharArray();
      this.yypushBuffer(valbuf, 0, valbuf.length);
      this.pushEntityState((String)null, false, true, this.yystate());
      this.yybegin(11);
      this.isEntityBeingParsed = false;
      if (this.yylex() != 294) {
         throw this.fatalError("Unexpected element while parsing attribute default value");
      } else {
         this.isEntityBeingParsed = true;
         return this.stringConverter.convert(this.cbuf, 0, this.cbuflen);
      }
   }

   private void resolveNamespacePrefixes() {
      this.elementURI = this.nsSupport.getURI(this.elementURI);
      int numAttributes = this.attribs.getLength();

      for(int i = 0; i < numAttributes; ++i) {
         String prefix = this.attribs.getURI(i);
         if (prefix != "") {
            String uri = this.nsSupport.getURI(prefix);
            if (uri != "") {
               this.attribs.setURI(i, uri);
            }
         }
      }

   }

   private void checkEndTag(String endQName) throws SAXException {
      String properEnd = this.tagStack.pop();
      if (this.tagStack.size() == this.entityBaseDepth) {
         this.setTokenize(true);
      }

      if (properEnd != endQName) {
         throw this.fatalError("</" + endQName + "> does not close tag <" + properEnd + ">.");
      }
   }

   private String yytext2() {
      return this.stringConverter.convert(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
   }

   private String yytext2(int start, int length) {
      return this.stringConverter.convert(this.yy_buffer, this.yy_startRead + start, length);
   }

   private FatalParsingException fatalError(String msg) {
      return new FatalParsingException(msg);
   }

   private FatalParsingException fatalError(String msg, Exception e) {
      return new FatalParsingException(msg, e);
   }

   private void safeBacktrack() {
      if (this.yy_buffer[--this.yy_markedPos] == '\n') {
         --this.yyline_next;
      }

   }

   PiccoloLexer(Reader in) {
      this.totalEntityBytesPushed = 0;
      this.maxTotalEntityBytes = 0;
      this.yy_lexical_state = 0;
      this.yy_buffer = new char[16384];
      this.yy_saved_buffer = this.yy_buffer;
      this.yy_savePos = -1;
      this.yy_atBOL = true;
      this.yy_streams = new Stack();
      this.parser = null;
      this.currentEntity = null;
      this.stringConverter = new CharStringConverter(200);
      this.entityManager = new EntityManager();
      this.entityStack = new Stack();
      this.attribs = new AttributesHolder();
      this.cbuf = new char[1024];
      this.oneCharBuffer = new char[1];
      this.entityStateStack = new LongStack(5);
      this.entityNameStack = new StringStack(2);
      this.tagStack = new StringStack(20);
      this.elementMap = new HashMap();
      this.elementDefinition = null;
      this.tokenStartColumn = -1;
      this.defaultAttributeSpecified = new boolean[4];
      this.nsSupport = new FastNamespaceSupport();
      this.yy_sawCR = false;
      this.yy_prev_sawCR = false;
      this.yyline_next = 0;
      this.yycolumn_next = 0;
      this.yy_reader = in;
   }

   PiccoloLexer(InputStream in) {
      this((Reader)(new InputStreamReader(in)));
   }

   private static int[] yy_unpack() {
      int[] trans = new int[21172];
      int offset = 0;
      yy_unpack("\u0001'\u0001(\u0004'\u0001(\u0003'\u0001)\u0001*\u0004'\u0001()'\u0001(\b'\f+\u0001,6+\n-\u0001)\u0001*7-\u0003.\u0002/\u0002.\u0001/\u0005.\u0002/\u00010\u0001.\u0003/\u0005.\b/\u0002.\u0005/\u0001.\u0003/\u00011\u0002/\b.\u0002/\u0002.\u00012\u0001/\u00013\u0003/\u00014\u0001/\f5\u0001665\u0001.\u00017\u0004.\u00017\u0005.\u00018\u0003.\u00017).\u00017\t.\u00019\u0001.\u0002:\u0001.\u00019\u0001:\u0005.\u0003:\u00019\u0003:\u0001;\u0004.\b:\u0002.\u0005:\u0001.\u0003:\u0001.\u0002:\u0007.\u0001<\u0002:\u0001.\u00019\b:\u0003.\u0002=\u0002.\u0001=\u0004.\u0001>\u0003=\u0001.\u0003=\u0004.\u0001?\b=\u0002.\u0005=\u0001.\u0003=\u0001.\u0002=\u0007.\u0001@\u0002=\u0002.\b=\u0001.\u00019\u0001.\u0001A\u0001B\u0001.\u00019\u0001B\u0005.\u0001C\u0002B\u00019\u0003B\u0001D\u0004.\bB\u0002.\u0005B\u0001.\u0003B\u0001.\u0002B\u0007.\u0001E\u0002B\u0001.\u00019\bB\u0003.\u0001F\u0001G\u0002.\u0001G\u0004.\u0001>\u0003G\u0001.\u0003G\u0004.\u0001?\bG\u0002.\u0005G\u0001.\u0003G\u0001.\u0002G\u0007.\u0001H\u0002G\u0002.\bG\u0001.\u0001I\u0004.\u0001I\t.\u0001I(.\u0001J\u0001I\b.\u0001K\u0001L\u0004K\u0001L\u0003K\u0001.\u0001M.K\u0001L\bK\u0003.\u0002N\u0002.\u0001N\u0005.\u0002N\u0001O\u0001.\u0003N\u0005.\bN\u0002.\u0005N\u0001.\u0003N\u0001P\u0002N\b.\u0002N\u0002.\u0001Q\u0001N\u0001R\u0003N\u0001S\u0001N\u0001T\u0001U\u0004T\u0001U\u0003T\u0001.\u0001V(T\u0001W\u0005T\u0001U\bT\u0001X\u0001U\u0004X\u0001U\u0003X\u0001.\u0001V)X\u0001W\u0004X\u0001U\bX\u0001Y\u0001Z\u0004Y\u0001Z\u0003Y\u0001.\u0001[\u0004Y\u0001Z#Y\u0001\\\u0005Y\u0001Z\bY\u0001]\u0001^\u0004]\u0001^\u0003]\u0001.\u0001_\u0004]\u0001^$]\u0001\\\u0004]\u0001^\b]\u0001`\u0001a\u0004`\u0001a\u0003`\u0001.\u0001b\u0004`\u0001a#`\u0001c\u0005`\u0001a\b`\u0001d\u0001e\u0004d\u0001e\u0003d\u0001.\u0001b\u0004d\u0001e$d\u0001c\u0004d\u0001e\bd\u0001.\u0001f\u0004.\u0001f\t.\u0001f\u0003.\u0001g%.\u0001f\t.\u0001h\u0004.\u0001h\t.\u0001h\u0003.\u0001i%.\u0001h\t.\u0001j\u0004.\u0001j\u0003.\u0001k\u0005.\u0001j\u0004.\u0001l\u0001.\u0001m\".\u0001j\t.\u0001j\u0001.\u0002n\u0001.\u0001j\u0001n\u0005.\u0003n\u0001j\u0003n\u0001.\u0001o\u0003.\bn\u0002.\u0005n\u0001.\u0003n\u0001.\u0002n\b.\u0002n\u0001.\u0001j\bn\u0001.\u0001j\u0001.\u0001p\u0001q\u0001.\u0001j\u0001q\u0005.\u0003q\u0001j\u0003q\u0001r\u0001o\u0003.\bq\u0002.\u0005q\u0001.\u0003q\u0001.\u0002q\b.\u0002q\u0001.\u0001j\bq\u0001.\u0001j\u0004.\u0001j\t.\u0001j\u0004.\u0001o\u0003.\u0001s\u0001t\u0001.\u0001u\u0006.\u0001v\u0004.\u0001w\u0011.\u0001j\t.\u0001j\u0001.\u0002x\u0001.\u0001j\u0001x\u0005.\u0003x\u0001j\u0003x\u0001.\u0001y\u0003.\bx\u0002.\u0005x\u0001.\u0003x\u0001.\u0002x\b.\u0002x\u0001.\u0001j\bx\u0001.\u0001j\u0003z\u0001.\u0001j\u0003z\u0003.\u0003z\u0001j\u0003z\u0001.\u0001o\u0003.\tz\u0001.\u0005z\u0001.\u0003z\u0001.\u0002z\u0001{\u0003.\u0001|\u0003.\u0002z\u0001.\u0001j\bz!}\u0001~!}\n\u007f\u0001\u0080\f\u007f\u0001\u0081+\u007f\u0001.\u0001j\u0004.\u0001j\t.\u0001j#.\u0001\u0082\u0001\u0083\u0004.\u0001j\t.\u0001\u0084\u0001.\u0002z\u0001.\u0001\u0084\u0001z\u0004.\u0001\u0085\u0003z\u0001\u0084\u0003z\u0001r\u0001o\u0003.\u0001\u0086\u0001\u0087\u0001z\u0001\u0088\u0001z\u0001\u0089\u0001\u008a\u0001z\u0001.\u0001\u008b\u0005z\u0001\u008c\u0001\u008d\u0002z\u0001\u008e\u0002z\u0001\u008f\u0001\u0090\u0001\u0091\u0001\u0092\u0001|\u0001\u0093\u0001\u0094\u0001.\u0002z\u0001.\u0001\u0084\bz\f.\u0001\u0095\u000b.\u0001\u0096*.\u000b\u0097\u0001\u0098\t\u0097\u0001\u0099-\u0097\u0001\u009a\u0001\u009b\u0004\u009a\u0001\u009c\t\u009a\u0001\u009b)\u009a\u0001\u009b\b\u009a\u000b\u009d\u0001\u009e\t\u009d\u0001\u009f\u001e\u009d\u0001 \u000e\u009d\u000b¡\u0001\u009e\t¡\u0001\u009f\u001f¡\u0001 \r¡\u0003.\u0002¢\u0002.\u0001¢\u0005.\u0003¢\u0001.\u0003¢\u0005.\b¢\u0002.\u0005¢\u0001.\u0003¢\u0001P\u0002¢\b.\u0002¢\u0002.\b¢\u0003.\u0002£\u0002.\u0001£\u0005.\u0003£\u0001.\u0003£\u0005.\b£\u0002.\u0005£\u0001.\u0003£\u0001.\u0002£\b.\u0002£\u0002.\b£C\u0000\f¤\u0001¥B¤\u0001¥\u0007¤\u0001¦.¤\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001©\u0002§\t\u0000\u0001ª\u0003\u0000\u0001«7\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0001§\u0001¬\u0001§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0001§\u0001\u00ad\u0006§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0003§\u0001®\u0004§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001¯\u0002§\f°\u0001±B°\u0001±\u0007°\u0001².°\u0001\u0000\u00017\u0004\u0000\u00017\t\u0000\u00017)\u0000\u00017\u001c\u0000\u0001³/\u0000\u00019\u0004\u0000\u00019\t\u0000\u00019)\u0000\u00019\n\u0000\u0003:\u0002\u0000\u0003:\u0003\u0000\u0003:\u0001\u0000\u0003:\u0005\u0000\t:\u0001\u0000\u0005:\u0001\u0000\u0003:\u0001\u0000\u0002:\b\u0000\u0002:\u0002\u0000\b:\u0014\u0000\u0001´0\u0000\u0003=\u0002\u0000\u0003=\u0003\u0000\u0003=\u0001\u0000\u0003=\u0005\u0000\t=\u0001\u0000\u0005=\u0001\u0000\u0003=\u0001\u0000\u0002=\b\u0000\u0002=\u0002\u0000\b=\u0003\u0000\u0002µ\u0002\u0000\u0001µ\u0005\u0000\u0001¶\u0002µ\u0001\u0000\u0001·\u0002µ\u0005\u0000\bµ\u0002\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!\u0000\u0001¸\u0001¹\u0001\u0000\u0001º!\u0000\u0002»\u0002\u0000\u0001»\u0005\u0000\u0003»\u0001\u0000\u0003»\u0005\u0000\b»\u0002\u0000\u0005»\u0001\u0000\u0003»\u0001\u0000\u0002»\b\u0000\u0002»\u0002\u0000\b»\u0002\u0000\u0003A\u0002\u0000\u0003A\u0003\u0000\u0003A\u0001\u0000\u0003A\u0005\u0000\tA\u0001\u0000\u0005A\u0001\u0000\u0003A\u0001\u0000\u0002A\b\u0000\u0002A\u0002\u0000\bA\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0001B\u0001½\u0001B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0014\u0000\u0001¾0\u0000\u0003F\u0002\u0000\u0003F\u0003\u0000\u0003F\u0001\u0000\u0003F\u0005\u0000\tF\u0001\u0000\u0005F\u0001\u0000\u0003F\u0001\u0000\u0002F\b\u0000\u0002F\u0002\u0000\bF\u0002\u0000\u0001G\u0001¿\u0001G\u0002\u0000\u0003G\u0003\u0000\u0003G\u0001\u0000\u0003G\u0005\u0000\tG\u0001\u0000\u0005G\u0001\u0000\u0003G\u0001\u0000\u0002G\b\u0000\u0002G\u0002\u0000\bG\u0003\u0000\u0001À\u0001Á\u0002\u0000\u0001Á\u0005\u0000\u0003Á\u0001\u0000\u0003Á\u0005\u0000\bÁ\u0002\u0000\u0005Á\u0001\u0000\u0003Á\u0001\u0000\u0002Á\b\u0000\u0002Á\u0002\u0000\bÁ\u0001\u0000\u0001Â\u0004\u0000\u0001Â\t\u0000\u0001Â(\u0000\u0001Ã\u0001Â\t\u0000\u0001Ã\u0004\u0000\u0001Ã\t\u0000\u0001Ã#\u0000\u0001Ä\u0001Å\u0004\u0000\u0001Ã\b\u0000\u0001K\u0001\u0000\u0004K\u0001\u0000\u0003K\u0002\u0000.K\u0001\u0000\bK\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001È\u0002Æ\t\u0000\u0001É\u0003\u0000\u0001Ê7\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0001Æ\u0001Ë\u0001Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0001Æ\u0001Ì\u0006Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0003Æ\u0001Í\u0004Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001Î\u0002Æ\u0001T\u0001\u0000\u0004T\u0001\u0000\u0003T\u0002\u0000(T\u0001\u0000\u0005T\u0001\u0000\bT\u0001\u0000\u0001U\u0004\u0000\u0001U3\u0000\u0001U\t\u0000\u0001Ï\u0004\u0000\u0001Ï\t\u0000\u0001Ï\u0003\u0000\u0001Ï!\u0000\u0001Ï\u0003\u0000\u0001Ï\b\u0000\u0001X\u0001\u0000\u0004X\u0001\u0000\u0003X\u0002\u0000)X\u0001\u0000\u0004X\u0001\u0000\bX\u0001Y\u0001\u0000\u0004Y\u0001\u0000\u0003Y\u0002\u0000\u0004Y\u0001\u0000#Y\u0001\u0000\u0005Y\u0001\u0000\bY\u0001\u0000\u0001Z\u0004\u0000\u0001Z\t\u0000\u0001Z#\u0000\u0001Ð\u0005\u0000\u0001Z\t\u0000\u0001Ñ\u0004\u0000\u0001Ñ\t\u0000\u0001Ñ\u0003\u0000\u0001Ñ!\u0000\u0001Ñ\u0003\u0000\u0001Ñ\b\u0000\u0001]\u0001\u0000\u0004]\u0001\u0000\u0003]\u0002\u0000\u0004]\u0001\u0000$]\u0001\u0000\u0004]\u0001\u0000\b]\u0001\u0000\u0001^\u0004\u0000\u0001^\t\u0000\u0001^$\u0000\u0001Ð\u0004\u0000\u0001^\b\u0000\u0001`\u0001\u0000\u0004`\u0001\u0000\u0003`\u0002\u0000\u0004`\u0001\u0000#`\u0001\u0000\u0005`\u0001\u0000\b`\u0001\u0000\u0001a\u0004\u0000\u0001a\t\u0000\u0001a#\u0000\u0001Ò\u0005\u0000\u0001a\t\u0000\u0001Ó\u0004\u0000\u0001Ó\t\u0000\u0001Ó\u0003\u0000\u0001Ó!\u0000\u0001Ó\u0003\u0000\u0001Ó\b\u0000\u0001d\u0001\u0000\u0004d\u0001\u0000\u0003d\u0002\u0000\u0004d\u0001\u0000$d\u0001\u0000\u0004d\u0001\u0000\bd\u0001\u0000\u0001e\u0004\u0000\u0001e\t\u0000\u0001e$\u0000\u0001Ò\u0004\u0000\u0001e\t\u0000\u0001Ô\u0004\u0000\u0001Ô\t\u0000\u0001Ô\u0003\u0000\u0001g%\u0000\u0001Ô\t\u0000\u0001Õ\u0004\u0000\u0001Õ\t\u0000\u0001Õ\u0003\u0000\u0001i%\u0000\u0001Õ\t\u0000\u0001j\u0004\u0000\u0001j\t\u0000\u0001j)\u0000\u0001j\u000b\u0000\u0002Ö\u0002\u0000\u0001Ö\u0005\u0000\u0003Ö\u0001\u0000\u0003Ö\u0005\u0000\bÖ\u0002\u0000\u0005Ö\u0001\u0000\u0003Ö\u0001\u0000\u0002Ö\b\u0000\u0002Ö\u0002\u0000\bÖ\u0001\u0000\u0001×\u0004\u0000\u0001×\t\u0000\u0001×\u0003\u0000\u0001Ø\u0002\u0000\u0001Ù\"\u0000\u0001×\n\u0000\u0003n\u0002\u0000\u0003n\u0003\u0000\u0003n\u0001\u0000\u0003n\u0005\u0000\tn\u0001\u0000\u0005n\u0001\u0000\u0003n\u0001\u0000\u0002n\b\u0000\u0002n\u0002\u0000\bn\u0003\u0000\u0002Ú\u0002\u0000\u0001Ú\u0005\u0000\u0003Ú\u0001\u0000\u0003Ú\u0005\u0000\bÚ\u0002\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0002\u0000\bÚ\u0002\u0000\u0003p\u0002\u0000\u0003p\u0003\u0000\u0003p\u0001\u0000\u0003p\u0005\u0000\tp\u0001\u0000\u0005p\u0001\u0000\u0003p\u0001\u0000\u0002p\b\u0000\u0002p\u0002\u0000\bp\u0002\u0000\u0001q\u0001Û\u0001q\u0002\u0000\u0003q\u0003\u0000\u0003q\u0001\u0000\u0003q\u0005\u0000\tq\u0001\u0000\u0005q\u0001\u0000\u0003q\u0001\u0000\u0002q\b\u0000\u0002q\u0002\u0000\bq\u001a\u0000\u0001Ü:\u0000\u0001Ý\r\u0000\u0001ÞF\u0000\u0001ßB\u0000\u0001à \u0000\u0003x\u0002\u0000\u0003x\u0003\u0000\u0003x\u0001\u0000\u0003x\u0005\u0000\tx\u0001\u0000\u0005x\u0001\u0000\u0003x\u0001\u0000\u0002x\b\u0000\u0002x\u0002\u0000\bx\u0001\u0000\u0001á\u0001\u0000\u0002Ú\u0002\u0000\u0001Ú\u0005\u0000\u0003Ú\u0001á\u0003Ú\u0005\u0000\bÚ\u0002\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0001\u0000\u0001á\bÚ\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz!â\u0001ãBâ\u0001ä!â\n\u007f\u0001\u0000\f\u007f\u0001\u0000+\u007f\u0018\u0000\u0001åA\u0000\u0001Ù-\u0000\u0005æ\u0002\u0000\u0001æ\u0002\u0000\bæ\u0001\u0000\u0002æ\u0001\u0000\næ\u0001\u0000\u0010æ\u0001\u0000\u0001ç\u000eæ\u0002\u0000\u0005è\u0002\u0000\u0001è\u0002\u0000\bè\u0001\u0000\u0002è\u0001\u0000\nè\u0001\u0000\u0010è\u0002\u0000\u0001ç\rè\u0001\u0000\u0001\u0084\u0004\u0000\u0001\u0084\t\u0000\u0001\u0084\u0011\u0000\u0001\u008b\u0017\u0000\u0001\u0084\n\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0001z\u0001é\u0001z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ê\u0001z\u0001\u0000\u0001z\u0001ë\u0003z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001ì\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0001z\u0001í\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001î\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ï\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0001\u0000\u0001\u008b\u0004\u0000\u0001\u008b\t\u0000\u0001\u008b)\u0000\u0001\u008b\n\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001z\u0001ð\u0001z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u001c\u0000\u0001ñ\b\u0000\u0001ò\u0001ó\u0002\u0000\u0001ô\u0019\u0000\u000b\u0093\u0001\u0000\t\u0093\u0001\u0000\u001e\u0093\u0001õ\u000e\u0093\u000b\u0094\u0001\u0000\t\u0094\u0001\u0000\u001f\u0094\u0001õ\r\u0094\u0003\u0000\u0002ö\u0002\u0000\u0001ö\u0005\u0000\u0001÷\u0002ö\u0001\u0000\u0001ø\u0002ö\u0005\u0000\bö\u0002\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0019\u0000\u0001ù\u0001ú\u0003\u0000\u0001û\u0002\u0000\u0001ü\u0001ý \u0000\u000b\u0097\u0001\u0000\t\u0097\u0001\u0000-\u0097\u000b\u009a\u0001\u0000\t\u009a\u0001\u0000-\u009a\u0001\u0000\u0001\u009b\u0004\u0000\u0001\u009b\t\u0000\u0001\u009b)\u0000\u0001\u009b\b\u0000\u0001\u009a\u0001\u009c\u0004\u009a\u0001\u009c\u0004\u009a\u0001\u0000\u0004\u009a\u0001\u009c\u0004\u009a\u0001\u0000$\u009a\u0001\u009c\b\u009a\u000b\u009d\u0001\u0000\t\u009d\u0001\u0000\u001e\u009d\u0001\u0000\u000e\u009d\u000b¡\u0001\u0000\t¡\u0001\u0000\u001f¡\u0001\u0000\r¡\u0002\u0000\u0003þ\u0002\u0000\u0003þ\u0003\u0000\u0003þ\u0001\u0000\u0003þ\u0002\u0000\u0001ÿ\u0002\u0000\tþ\u0001\u0000\u0005þ\u0001\u0000\u0003þ\u0001\u0000\u0002þ\b\u0000\u0002þ\u0002\u0000\bþ\u0002\u0000\u0003Ā\u0002\u0000\u0003Ā\u0003\u0000\u0003Ā\u0001\u0000\u0003Ā\u0002\u0000\u0001ā\u0002\u0000\tĀ\u0001\u0000\u0005Ā\u0001\u0000\u0003Ā\u0001\u0000\u0002Ā\b\u0000\u0002Ā\u0002\u0000\bĀ\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ă\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\t\u0000\u0001ª\f\u0000\u0001ă5\u0000\u0001Ą\u000f\u0000\u0001Ą\u0004\u0000\u0001Ą\u0004\u0000\u0002Ą\u0001\u0000\u0001Ą\u0004\u0000\u0001Ą\u000f\u0000\u0001Ą\u0006\u0000\u0001Ą\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0001§\u0001ą\u0006§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0004§\u0001Ć\u0003§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0004§\u0001ć\u0003§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ĉ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0003µ\u0001\u0000\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0001µ\u0001ĉ\u0001µ\u0001\u0000\u0001µ\u0001Ċ\u0001µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0001µ\u0001Ċ\u0001µ\u0001\u0000\u0001µ\u0001Ċ\u0001µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!\u0000\u0001ċD\u0000\u0001Č?\u0000\u0001č$\u0000\u0003»\u0002\u0000\u0003»\u0003\u0000\u0003»\u0001\u0000\u0003»\u0005\u0000\t»\u0001\u0000\u0005»\u0001\u0000\u0003»\u0001\u0000\u0002»\b\u0000\u0002»\u0002\u0000\b»\u0002\u0000\u0002A\u0001Ď\u0002\u0000\u0001Ď\u0002A\u0003\u0000\u0003Ď\u0001\u0000\u0003Ď\u0005\u0000\bĎ\u0001A\u0001\u0000\u0005Ď\u0001\u0000\u0003Ď\u0001\u0000\u0002Ď\b\u0000\u0002Ď\u0002\u0000\bĎ\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0002B\u0001ď\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0002\u0000\bB\u0002\u0000\u0002F\u0001Đ\u0002\u0000\u0001Đ\u0002F\u0003\u0000\u0003Đ\u0001\u0000\u0003Đ\u0005\u0000\bĐ\u0001F\u0001\u0000\u0005Đ\u0001\u0000\u0003Đ\u0001\u0000\u0002Đ\b\u0000\u0002Đ\u0002\u0000\bĐ\u0002\u0000\u0003À\u0002\u0000\u0003À\u0003\u0000\u0003À\u0001\u0000\u0003À\u0005\u0000\tÀ\u0001\u0000\u0005À\u0001\u0000\u0003À\u0001\u0000\u0002À\b\u0000\u0002À\u0002\u0000\bÀ\u0002\u0000\u0001Á\u0001đ\u0001Á\u0002\u0000\u0003Á\u0003\u0000\u0003Á\u0001\u0000\u0003Á\u0005\u0000\tÁ\u0001\u0000\u0005Á\u0001\u0000\u0003Á\u0001\u0000\u0002Á\b\u0000\u0002Á\u0002\u0000\bÁ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ē\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\t\u0000\u0001É\f\u0000\u0001ē5\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u0004\u0000\u0002Ĕ\u0001\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0006\u0000\u0001Ĕ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0001Æ\u0001ĕ\u0006Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0004Æ\u0001Ė\u0003Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0004Æ\u0001ė\u0003Æ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ę\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Ö\u0002\u0000\u0003Ö\u0003\u0000\u0003Ö\u0001\u0000\u0003Ö\u0002\u0000\u0001ę\u0002\u0000\tÖ\u0001\u0000\u0005Ö\u0001\u0000\u0003Ö\u0001\u0000\u0002Ö\b\u0000\u0002Ö\u0002\u0000\bÖ\u0001\u0000\u0001×\u0004\u0000\u0001×\t\u0000\u0001×\u0003\u0000\u0001Ø%\u0000\u0001×\u001c\u0000\u0001Ě0\u0000\u0003Ú\u0002\u0000\u0003Ú\u0003\u0000\u0003Ú\u0001\u0000\u0003Ú\u0002\u0000\u0001ě\u0002\u0000\tÚ\u0001\u0000\u0005Ú\u0001\u0000\u0003Ú\u0001\u0000\u0002Ú\b\u0000\u0002Ú\u0002\u0000\bÚ\u0002\u0000\u0002p\u0001Ĝ\u0002\u0000\u0001Ĝ\u0002p\u0003\u0000\u0003Ĝ\u0001\u0000\u0003Ĝ\u0005\u0000\bĜ\u0001p\u0001\u0000\u0005Ĝ\u0001\u0000\u0003Ĝ\u0001\u0000\u0002Ĝ\b\u0000\u0002Ĝ\u0002\u0000\bĜ\u001b\u0000\u0001ĝB\u0000\u0001ĞB\u0000\u0001ğL\u0000\u0001Ġ;\u0000\u0001ġ%\u0000\u0001á\u000e\u0000\u0001á)\u0000\u0001á\u001c\u0000\u0001ĢP\u0000\u0001ģ\"\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001Ĥ\u0002z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ĥ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001Ħ\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001ħ\u0004z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001Ĩ\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ĩ\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0006z\u0001Ī\u0002z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0002z\u0001ī\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0012\u0000\u0001ĬI\u0000\u0001ĭE\u0000\u0001ĮI\u0000\u0001į!\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0003ö\u0001\u0000\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0001ö\u0001İ\u0001ö\u0001\u0000\u0001ö\u0001ı\u0001ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0001ö\u0001ı\u0001ö\u0001\u0000\u0001ö\u0001ı\u0001ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0013\u0000\u0001Ĳ\u0006\u0000\u0001ĳH\u0000\u0001Ĵ=\u0000\u0001ĵH\u0000\u0001Ķ*\u0000\u0001Ą\f\u0000\u0001ķ\u0002\u0000\u0001Ą\u0004\u0000\u0001Ą\u0004\u0000\u0002Ą\u0001\u0000\u0001Ą\u0004\u0000\u0001Ą\u000f\u0000\u0001Ą\u0006\u0000\u0001Ą\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001ĸ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0001§\u0001Ĺ\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001¨\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\u0005§\u0001ĺ\u0002§\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0002µ\u0001Ļ\u0001\u0000\u0002µ\u0001ļ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ\u0002\u0000\u0003µ\u0002\u0000\u0003µ\u0003\u0000\u0002µ\u0001ļ\u0001\u0000\u0002µ\u0001ļ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0002\u0000\bµ!ċ\u0001Ľ!ċ$\u0000\u0001ľA\u0000\u0001Ŀ!\u0000\u0001Ď\u0001A\u0001Ď\u0002\u0000\u0003Ď\u0003\u0000\u0003Ď\u0001\u0000\u0003Ď\u0005\u0000\tĎ\u0001\u0000\u0005Ď\u0001\u0000\u0003Ď\u0001\u0000\u0002Ď\b\u0000\u0002Ď\u0002\u0000\bĎ\u0002\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0001ŀ\u0001B\u0002\u0000\bB\u0002\u0000\u0001Đ\u0001F\u0001Đ\u0002\u0000\u0003Đ\u0003\u0000\u0003Đ\u0001\u0000\u0003Đ\u0005\u0000\tĐ\u0001\u0000\u0005Đ\u0001\u0000\u0003Đ\u0001\u0000\u0002Đ\b\u0000\u0002Đ\u0002\u0000\bĐ\u0002\u0000\u0002À\u0001Ł\u0002\u0000\u0001Ł\u0002À\u0003\u0000\u0003Ł\u0001\u0000\u0003Ł\u0005\u0000\bŁ\u0001À\u0001\u0000\u0005Ł\u0001\u0000\u0003Ł\u0001\u0000\u0002Ł\b\u0000\u0002Ł\u0002\u0000\bŁ\t\u0000\u0001Ĕ\f\u0000\u0001ł\u0002\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u0004\u0000\u0002Ĕ\u0001\u0000\u0001Ĕ\u0004\u0000\u0001Ĕ\u000f\u0000\u0001Ĕ\u0006\u0000\u0001Ĕ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ń\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0001Æ\u0001ń\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ç\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\u0005Æ\u0001Ņ\u0002Æ\u0002\u0000\u0001Ĝ\u0001p\u0001Ĝ\u0002\u0000\u0003Ĝ\u0003\u0000\u0003Ĝ\u0001\u0000\u0003Ĝ\u0005\u0000\tĜ\u0001\u0000\u0005Ĝ\u0001\u0000\u0003Ĝ\u0001\u0000\u0002Ĝ\b\u0000\u0002Ĝ\u0002\u0000\bĜ\u001c\u0000\u0001ņF\u0000\u0001Ň@\u0000\u0001ň=\u0000\u0001ŉD\u0000\u0001Ŋ)\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ŋ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001Ō\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001ō\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0002z\u0001Ŏ\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ŏ\u0001z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001Ő\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0002z\u0001ő\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz)\u0000\u0001ŒF\u0000\u0001œ&\u0000\u0001ŔU\u0000\u0001ŕ \u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0002ö\u0001Ŗ\u0001\u0000\u0002ö\u0001ŗ\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0002\u0000\u0003ö\u0002\u0000\u0003ö\u0003\u0000\u0002ö\u0001ŗ\u0001\u0000\u0002ö\u0001ŗ\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0002\u0000\bö\u0019\u0000\u0001ŘD\u0000\u0001řB\u0000\u0001ŚB\u0000\u0001ś)\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001Ŝ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0002\u0000\u0003§\u0002\u0000\u0003§\u0003\u0000\u0003§\u0001\u0000\u0003§\u0002\u0000\u0001ŝ\u0002\u0000\t§\u0001\u0000\u0005§\u0001\u0000\u0003§\u0001\u0000\u0002§\b\u0000\u0002§\u0002\u0000\b§\u0001\u0000\u0001Ş\u0003µ\u0001\u0000\u0001ş\u0003µ\u0002\u0000\u0001Ş\u0003µ\u0001Ş\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0001\u0000\u0001Ş\bµ\u0001\u0000\u0001ş\u0003µ\u0001\u0000\u0001ş\u0003µ\u0002\u0000\u0001ş\u0003µ\u0001ş\u0003µ\u0005\u0000\tµ\u0001\u0000\u0005µ\u0001\u0000\u0003µ\u0001\u0000\u0002µ\b\u0000\u0002µ\u0001\u0000\u0001ş\bµ!ċ\u0001Š!ċ\u001e\u0000\u0001š?\u0000\u0001Ţ)\u0000\u0001B\u0001¼\u0001B\u0002\u0000\u0003B\u0003\u0000\u0003B\u0001\u0000\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0001B\u0001ţ\u0002\u0000\bB\u0002\u0000\u0001Ł\u0001À\u0001Ł\u0002\u0000\u0003Ł\u0003\u0000\u0003Ł\u0001\u0000\u0003Ł\u0005\u0000\tŁ\u0001\u0000\u0005Ł\u0001\u0000\u0003Ł\u0001\u0000\u0002Ł\b\u0000\u0002Ł\u0002\u0000\bŁ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001Ť\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u0002\u0000\u0003Æ\u0002\u0000\u0003Æ\u0003\u0000\u0003Æ\u0001\u0000\u0003Æ\u0002\u0000\u0001ť\u0002\u0000\tÆ\u0001\u0000\u0005Æ\u0001\u0000\u0003Æ\u0001\u0000\u0002Æ\b\u0000\u0002Æ\u0002\u0000\bÆ\u001b\u0000\u0001ŦN\u0000\u0001ŧ6\u0000\u0001ŨM\u0000\u0001ũ:\u0000\u0001Ū&\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0004z\u0001ū\u0004z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0002z\u0001Ŭ\u0006z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0005z\u0001ŭ\u0003z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0001z\u0001Ů\u0001z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0002z\u0001ů\u0002z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001Ű\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0003z\u0001ű\u0005z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0013\u0000\u0001ŲY\u0000\u0001ų1\u0000\u0001ŴG\u0000\u0001ŵ%\u0000\u0001Ŷ\u0003ö\u0001\u0000\u0001ş\u0003ö\u0002\u0000\u0001Ŷ\u0003ö\u0001Ŷ\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0001\u0000\u0001Ŷ\bö\u0001\u0000\u0001ş\u0003ö\u0001\u0000\u0001ş\u0003ö\u0002\u0000\u0001ş\u0003ö\u0001ş\u0003ö\u0005\u0000\tö\u0001\u0000\u0005ö\u0001\u0000\u0003ö\u0001\u0000\u0002ö\b\u0000\u0002ö\u0001\u0000\u0001ş\bö\u0012\u0000\u0001ŷL\u0000\u0001ŸD\u0000\u0001Ź7\u0000\u0001źC\u0000\u0001ŻI\u0000\u0001żD\u0000\u0001Ž&\u0000\u0001ž\u0001B\u0001ſ\u0001B\u0001\u0000\u0001ž\u0003B\u0003\u0000\u0003B\u0001ž\u0003B\u0005\u0000\tB\u0001\u0000\u0005B\u0001\u0000\u0003B\u0001\u0000\u0002B\b\u0000\u0002B\u0001ƀ\u0001ž\bB\u001c\u0000\u0001Ɓ\u0001Ƃ>\u0000\u0001ƃE\u0000\u0001ƄE\u0000\u0001ƅ%\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0003z\u0001Ɔ\u0005z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001z\u0001Ƈ\u0003z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001ƈ\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0001z\u0001Ɖ\u0001z\u0005\u0000\tz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\tz\u0001\u0000\u0001Ɗ\u0004z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u001c\u0000\u0001ƋB\u0000\u0001ƌJ\u0000\u0001ƍ9\u0000\u0001Ǝ@\u0000\u0001ƏD\u0000\u0001ƐB\u0000\u0001ƑC\u0000\u0001ƒD\u0000\u0001ƓM\u0000\u0001Ɣ\u001a\u0000\u0001ž\u0004\u0000\u0001ž\t\u0000\u0001ž(\u0000\u0001ƀ\u0001ž\n\u0000\u0002A\u0001ƕ\u0002\u0000\u0001ƕ\u0002A\u0003\u0000\u0003ƕ\u0001\u0000\u0003ƕ\u0005\u0000\bƕ\u0001A\u0001\u0000\u0005ƕ\u0001\u0000\u0003ƕ\u0001\u0000\u0002ƕ\b\u0000\u0002ƕ\u0002\u0000\bƕ\u0001\u0000\u0001ƀ\u0004\u0000\u0001ƀ\t\u0000\u0001ƀ#\u0000\u0001Ɩ\u0001Ɨ\u0004\u0000\u0001ƀ!\u0000\u0001ƘC\u0000\u0001ƙH\u0000\u0001ƚ$\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0007z\u0001ƛ\u0001z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0002\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001Ɯ\bz\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz\u0019\u0000\u0001ƝN\u0000\u0001ƞ;\u0000\u0001Ɵ>\u0000\u0001ƠE\u0000\u0001ơA\u0000\u0001ƢE\u0000\u0001ƣE\u0000\u0001Ƥ9\u0000\u0001ƥ+\u0000\u0001ƕ\u0001A\u0001ƕ\u0002\u0000\u0003ƕ\u0003\u0000\u0003ƕ\u0001\u0000\u0003ƕ\u0005\u0000\tƕ\u0001\u0000\u0005ƕ\u0001\u0000\u0003ƕ\u0001\u0000\u0002ƕ\b\u0000\u0002ƕ\u0002\u0000\bƕ\u001f\u0000\u0001ƦB\u0000\u0001Ƨ=\u0000\u0001ƨ*\u0000\u0003z\u0002\u0000\u0003z\u0003\u0000\u0003z\u0001\u0000\u0003z\u0005\u0000\u0001z\u0001Ʃ\u0007z\u0001\u0000\u0005z\u0001\u0000\u0003z\u0001\u0000\u0002z\b\u0000\u0002z\u0002\u0000\bz$\u0000\u0001ƪ7\u0000\u0001ƫD\u0000\u0001ƬG\u0000\u0001ƭ=\u0000\u0001Ʈ(\u0000\u0001Ư\u000e\u0000\u0001Ư)\u0000\u0001Ư,\u0000\u0001ư8\u0000\u0001Ʊ(\u0000", offset, trans);
      return trans;
   }

   private static int yy_unpack(String packed, int offset, int[] trans) {
      int i = 0;
      int j = offset;
      int l = packed.length();

      while(i < l) {
         int count = packed.charAt(i++);
         int value = packed.charAt(i++);
         --value;

         while(true) {
            trans[j++] = value;
            --count;
            if (count <= 0) {
               break;
            }
         }
      }

      return j;
   }

   private static char[] yy_unpack_cmap(String packed) {
      char[] map = new char[65536];
      int i = 0;
      int j = 0;

      while(i < 1350) {
         int count = packed.charAt(i++);
         char value = packed.charAt(i++);

         while(true) {
            map[j++] = value;
            --count;
            if (count <= 0) {
               break;
            }
         }
      }

      return map;
   }

   private boolean yy_refill() throws IOException {
      int save_at = this.yy_savePos < 0 ? (this.yy_startRead > 0 ? this.yy_startRead - 1 : this.yy_startRead) : this.yy_savePos;
      if (save_at > 0) {
         System.arraycopy(this.yy_buffer, save_at, this.yy_buffer, 0, this.yy_endRead - save_at);
         this.yy_endRead -= save_at;
         this.yy_currentPos -= save_at;
         this.yy_markedPos -= save_at;
         this.yy_pushbackPos -= save_at;
         this.yy_startRead -= save_at;
         if (this.yy_savePos >= 0) {
            this.yy_savePos = 0;
         }
      }

      if (this.yy_markedPos >= this.yy_buffer.length || this.yy_currentPos >= this.yy_buffer.length) {
         char[] newBuffer = new char[this.yy_buffer.length * 2];
         System.arraycopy(this.yy_buffer, 0, newBuffer, 0, this.yy_buffer.length);
         this.yy_buffer = newBuffer;
         if (this.yy_buffer.length > this.yy_saved_buffer.length) {
            this.yy_saved_buffer = this.yy_buffer;
         }
      }

      int numRead;
      for(numRead = 0; numRead == 0; numRead = this.yy_reader.read(this.yy_buffer, this.yy_endRead, this.yy_buffer.length - this.yy_endRead)) {
      }

      if (numRead < 0) {
         return true;
      } else {
         this.yy_endRead += numRead;
         return false;
      }
   }

   public final void yyclose() throws IOException {
      this.yy_atEOF = true;
      this.yy_endRead = this.yy_startRead;
      if (this.yy_reader != null) {
         this.yy_reader.close();
      }

   }

   public final void yypushStream(Reader reader) {
      this.yy_streams.push(new YY_StreamInfo(this.yy_reader, this.yy_endRead, this.yy_startRead, this.yy_savePos, this.yy_currentPos, this.yy_markedPos, this.yy_pushbackPos, this.yy_buffer, this.yy_atEOF, this.yyline_next, this.yycolumn_next));
      this.yy_atEOF = false;
      this.yy_buffer = new char[16384];
      this.yy_reader = reader;
      this.yy_endRead = this.yy_startRead = 0;
      this.yy_savePos = -1;
      this.yy_currentPos = this.yy_markedPos = this.yy_pushbackPos = 0;
      this.yyline = this.yycolumn = this.yyline_next = this.yycolumn_next = 0;
      this.yy_endRead_l = this.yy_endRead;
      this.yy_buffer_l = this.yy_buffer;
   }

   public final void yypushBuffer(char[] buffer, int off, int len) {
      this.yy_streams.push(new YY_StreamInfo(this.yy_reader, this.yy_endRead, this.yy_startRead, this.yy_savePos, this.yy_currentPos, this.yy_markedPos, this.yy_pushbackPos, this.yy_buffer, this.yy_atEOF, this.yyline, this.yycolumn));
      this.yy_atEOF = true;
      this.yy_buffer = buffer;
      this.yy_reader = null;
      this.yy_startRead = this.yy_markedPos = this.yy_currentPos = this.yy_pushbackPos = off;
      this.yy_savePos = -1;
      this.yy_endRead = this.yy_startRead + len;
      this.yyline = this.yycolumn = this.yyline_next = this.yycolumn_next = 0;
      this.yy_endRead_l = this.yy_endRead;
      this.yy_buffer_l = this.yy_buffer;
   }

   public final void yypopStream() throws IOException {
      if (this.yy_reader != null) {
         this.yy_reader.close();
      }

      YY_StreamInfo s = (YY_StreamInfo)this.yy_streams.pop();
      this.yy_buffer = s.yy_buffer;
      this.yy_reader = s.yy_reader;
      this.yy_endRead = s.yy_endRead;
      this.yy_startRead = s.yy_startRead;
      this.yy_savePos = s.yy_savePos;
      this.yy_currentPos = s.yy_currentPos;
      this.yy_markedPos = s.yy_markedPos;
      this.yy_pushbackPos = s.yy_pushbackPos;
      this.yy_atEOF = s.yy_atEOF;
      this.yyline = s.yyline;
      this.yycolumn = s.yycolumn;
      this.yyline_next = this.yyline;
      this.yycolumn_next = this.yycolumn;
      this.yy_endRead_l = this.yy_endRead;
      this.yy_buffer_l = this.yy_buffer;
      this.yycmap_l = yycmap;
   }

   public final boolean yymoreStreams() {
      return !this.yy_streams.isEmpty();
   }

   public final void yyreset(Reader reader) throws IOException {
      this.yyclose();
      this.yy_buffer = this.yy_saved_buffer;
      this.yy_reader = reader;
      this.yy_atBOL = true;
      this.yy_atEOF = false;
      this.yy_endRead = this.yy_startRead = 0;
      this.yy_savePos = -1;
      this.yy_currentPos = this.yy_markedPos = this.yy_pushbackPos = 0;
      this.yyline = this.yychar = this.yycolumn = 0;
      this.yy_state = this.yy_lexical_state = 0;
      this.yy_sawCR = false;
      this.yyline_next = this.yycolumn_next = 0;
      this.yy_streams.clear();
   }

   public final void yyreset(char[] buffer, int off, int len) throws IOException {
      this.yyclose();
      this.yy_buffer = buffer;
      this.yy_reader = null;
      this.yy_atBOL = true;
      this.yy_atEOF = true;
      this.yy_currentPos = this.yy_markedPos = this.yy_pushbackPos = this.yy_startRead = off;
      this.yy_savePos = -1;
      this.yy_endRead = off + len;
      this.yyline = this.yychar = this.yycolumn = 0;
      this.yy_state = this.yy_lexical_state = 0;
      this.yy_sawCR = false;
      this.yyline_next = this.yycolumn_next = 0;
      this.yy_endRead_l = this.yy_endRead;
      this.yy_buffer_l = this.yy_buffer;
      this.yy_streams.clear();
   }

   public final int yystate() {
      return this.yy_lexical_state;
   }

   public final void yybegin(int newState) {
      this.yy_lexical_state = newState;
   }

   public final String yytext() {
      return new String(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
   }

   public final String yytext(int offset, int length) {
      return new String(this.yy_buffer, this.yy_startRead + offset, length);
   }

   public final void yynextAction() {
      this.yyline = this.yyline_next;
      this.yycolumn = this.yycolumn_next;
      this.yy_currentPos = this.yy_startRead = this.yy_markedPos;
   }

   public final int yynextChar() throws IOException {
      if (this.yy_markedPos < this.yy_endRead) {
         return this.yy_buffer[this.yy_markedPos++];
      } else if (this.yy_atEOF) {
         return -1;
      } else {
         boolean eof = this.yy_refill();
         this.yy_buffer_l = this.yy_buffer;
         this.yy_endRead_l = this.yy_endRead;
         return eof ? -1 : this.yy_buffer[this.yy_markedPos++];
      }
   }

   public final int yynextBufferChar() {
      return this.yy_buffer[this.yy_markedPos++];
   }

   public final void yycountChar(int yy_input) {
      switch (yy_input) {
         case 10:
            ++this.yyline_next;
            this.yycolumn_next = 0;
            break;
         default:
            ++this.yycolumn_next;
      }

   }

   public final char yycharat(int pos) {
      return this.yy_buffer[this.yy_startRead + pos];
   }

   public final int yybufferLeft() {
      return this.yy_endRead - this.yy_markedPos;
   }

   public final void yyskip(int n) {
      this.yy_markedPos += n;
      this.yy_markedPos_l = this.yy_markedPos;
      if (this.yy_markedPos > this.yy_endRead) {
         this.yy_ScanError(4);
      }

   }

   public final int yylength() {
      return this.yy_markedPos - this.yy_startRead;
   }

   private void yy_ScanError(int errorCode) {
      String message;
      try {
         message = YY_ERROR_MSG[errorCode];
      } catch (ArrayIndexOutOfBoundsException var4) {
         message = YY_ERROR_MSG[0];
      }

      throw new Error(message);
   }

   private void yypushback(int number) {
      if (number > this.yylength()) {
         this.yy_ScanError(3);
      }

      this.yy_markedPos -= number;
      this.yyline_next = this.yyline;
      this.yycolumn_next = this.yycolumn;
      this.yy_sawCR = this.yy_prev_sawCR;

      for(int pos = this.yy_startRead; pos < this.yy_markedPos; ++pos) {
         this.yycountChar(this.yy_buffer[pos]);
      }

   }

   private void yy_do_eof() throws IOException {
      if (!this.yy_eof_done) {
         this.yy_eof_done = true;
         this.yyclose();
      }

   }

   public int yylex() throws IOException, SAXException, FatalParsingException {
      this.yy_endRead_l = this.yy_endRead;
      this.yy_buffer_l = this.yy_buffer;
      this.yycmap_l = yycmap;
      int[] yytrans_l = yytrans;
      int[] yy_rowMap_l = yy_rowMap;
      byte[] yy_attr_l = YY_ATTRIBUTE;
      int yy_pushbackPos_l = this.yy_pushbackPos = -1;

      label530:
      while(true) {
         this.yy_markedPos_l = this.yy_markedPos;
         int yyline_next_l;
         this.yyline = yyline_next_l = this.yyline_next;
         int yycolumn_next_l;
         this.yycolumn = yycolumn_next_l = this.yycolumn_next;
         int yy_action = -1;
         this.yy_startRead_l = this.yy_currentPos_l = this.yy_currentPos = this.yy_startRead = this.yy_markedPos_l;
         this.yy_state = this.yy_lexical_state;
         boolean yy_was_pushback = false;

         int yy_input;
         boolean prevReturnEndToken;
         int result;
         while(true) {
            if (this.yy_currentPos_l < this.yy_endRead_l) {
               yy_input = this.yy_buffer_l[this.yy_currentPos_l++];
            } else {
               if (this.yy_atEOF) {
                  yy_input = -1;
                  break;
               }

               this.yy_currentPos = this.yy_currentPos_l;
               this.yy_markedPos = this.yy_markedPos_l;
               this.yy_pushbackPos = yy_pushbackPos_l;
               prevReturnEndToken = this.yy_refill();
               this.yy_currentPos_l = this.yy_currentPos;
               this.yy_markedPos_l = this.yy_markedPos;
               this.yy_buffer_l = this.yy_buffer;
               this.yy_endRead_l = this.yy_endRead;
               yy_pushbackPos_l = this.yy_pushbackPos;
               if (prevReturnEndToken) {
                  yy_input = -1;
                  break;
               }

               yy_input = this.yy_buffer_l[this.yy_currentPos_l++];
            }

            switch (yy_input) {
               case 10:
                  ++yyline_next_l;
                  yycolumn_next_l = 0;
                  break;
               default:
                  ++yycolumn_next_l;
            }

            result = yytrans_l[yy_rowMap_l[this.yy_state] + this.yycmap_l[yy_input]];
            if (result == -1) {
               break;
            }

            this.yy_state = result;
            int yy_attributes = yy_attr_l[this.yy_state];
            if ((yy_attributes & 2) == 2) {
               yy_pushbackPos_l = this.yy_currentPos_l;
            }

            if ((yy_attributes & 1) == 1) {
               yy_was_pushback = (yy_attributes & 4) == 4;
               yy_action = this.yy_state;
               this.yy_markedPos_l = this.yy_currentPos_l;
               this.yyline_next = yyline_next_l;
               this.yycolumn_next = yycolumn_next_l;
               if ((yy_attributes & 8) == 8) {
                  break;
               }
            }
         }

         this.yy_markedPos = this.yy_markedPos_l;
         if (yy_was_pushback) {
            this.yy_markedPos = yy_pushbackPos_l;
         }

         switch (yy_action) {
            case 5:
            case 54:
               this.yybegin(4);
            case 6:
            case 8:
            case 28:
            case 56:
            case 126:
            case 127:
            case 128:
            case 434:
            case 435:
            case 436:
            case 437:
            case 438:
            case 439:
            case 440:
            case 441:
            case 442:
            case 443:
            case 444:
            case 445:
            case 446:
            case 447:
            case 448:
            case 449:
            case 450:
            case 451:
            case 452:
            case 453:
            case 454:
            case 455:
            case 456:
            case 457:
            case 458:
            case 459:
            case 460:
            case 461:
            case 462:
            case 463:
            case 464:
            case 465:
            case 466:
            case 467:
            case 468:
            case 469:
            case 470:
            case 471:
            case 472:
            case 473:
            case 474:
            case 475:
            case 476:
            case 477:
            case 478:
            case 479:
            case 480:
            case 481:
            case 482:
            case 483:
            case 484:
            case 485:
            case 486:
            case 487:
            case 488:
            case 489:
            case 490:
            case 491:
            case 492:
            case 493:
            case 494:
            case 495:
            case 496:
            case 497:
            case 498:
            case 499:
            case 500:
            case 501:
            case 502:
            case 503:
            case 504:
            case 505:
            case 506:
            case 507:
            case 508:
            case 509:
            case 510:
            case 511:
            case 512:
            case 513:
            case 514:
            case 515:
            case 516:
            case 517:
            case 518:
            case 519:
            case 520:
            case 521:
            case 522:
            case 523:
            case 524:
            case 525:
            case 526:
            case 527:
            case 528:
            case 529:
            case 530:
            case 531:
            case 532:
            case 533:
            case 534:
            case 535:
            case 536:
            case 537:
            case 538:
            case 539:
            case 540:
            case 541:
            case 542:
            case 543:
            case 544:
            case 545:
            case 546:
            case 547:
            case 548:
            case 549:
            case 550:
            case 551:
            case 552:
            case 553:
            case 554:
            case 555:
            case 556:
            case 557:
            case 558:
            case 559:
            case 560:
            case 561:
            case 562:
            case 563:
            case 564:
            case 565:
            case 566:
            case 567:
            case 568:
            case 569:
            case 570:
            case 571:
            case 572:
            case 573:
            case 574:
            case 575:
               break;
            case 7:
            case 9:
            case 10:
            case 12:
            case 19:
            case 20:
            case 27:
            case 31:
            case 36:
            case 37:
            case 163:
            case 164:
            case 166:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 183:
            case 184:
            case 185:
            case 193:
            case 194:
            case 197:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 207:
            case 209:
            case 211:
            case 212:
            case 213:
            case 214:
            case 216:
            case 217:
            case 219:
            case 220:
            case 221:
            case 223:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 231:
            case 240:
            case 241:
            case 242:
            case 243:
            case 248:
            case 249:
            case 250:
            case 251:
            case 253:
            case 255:
            case 259:
            case 260:
            case 261:
            case 262:
            case 266:
            case 267:
            case 268:
            case 275:
            case 276:
            case 277:
            case 278:
            case 284:
            case 285:
            case 286:
            case 287:
            case 288:
            case 299:
            case 300:
            case 301:
            case 302:
            case 305:
            case 306:
            case 307:
            case 308:
            case 312:
            case 313:
            case 316:
            case 317:
            case 318:
            case 323:
            case 324:
            case 325:
            case 326:
            case 327:
            case 328:
            case 329:
            case 337:
            case 338:
            case 339:
            case 340:
            case 343:
            case 344:
            case 345:
            case 346:
            case 351:
            case 352:
            case 353:
            case 357:
            case 358:
            case 359:
            case 369:
            case 370:
            case 371:
            case 372:
            case 374:
            case 375:
            case 376:
            case 377:
            case 379:
            case 380:
            case 381:
            case 383:
            case 384:
            case 386:
            case 387:
            case 394:
            case 395:
            case 397:
            case 398:
            case 399:
            case 400:
            case 401:
            case 402:
            case 403:
            case 407:
            case 409:
            case 412:
            case 413:
            case 415:
            case 417:
            case 418:
            case 420:
            case 426:
            case 428:
            case 433:
            default:
               if (yy_input == -1 && this.yy_startRead == this.yy_currentPos) {
                  this.yy_atEOF = true;
                  this.yy_do_eof();
                  switch (this.yy_lexical_state) {
                     case 3:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 4:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 5:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 8:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 9:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 10:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 12:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 19:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 20:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 27:
                        throw this.fatalError("Entity is not well-formed (ending lex state: " + this.yystate() + ")");
                     case 434:
                     case 435:
                     case 436:
                     case 437:
                     case 438:
                     case 439:
                     case 440:
                     case 441:
                     case 442:
                     case 443:
                        continue;
                     default:
                        if (!this.yymoreStreams()) {
                           return 0;
                        }

                        this.yypopStream();
                        if (this.isEntityBeingParsed) {
                           if (this.currentEntity != null) {
                              this.currentEntity.close();
                           }

                           this.currentEntity = (Entity)this.entityStack.pop();
                        }

                        prevReturnEndToken = this.returnEntityEndToken;
                        boolean prevIsParamEntity = this.isParamEntity;
                        this.popEntityState();
                        if (prevReturnEndToken) {
                           return 294;
                        }

                        if (prevIsParamEntity) {
                           return 266;
                        }
                        continue;
                  }
               }

               this.yy_ScanError(2);
               break;
            case 11:
            case 74:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               break;
            case 13:
            case 14:
            case 17:
            case 18:
            case 83:
            case 87:
            case 95:
            case 99:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               break;
            case 15:
            case 89:
               this.clearCbuf();
               this.prevState = 17;
               this.yybegin(this.prevState);
               break;
            case 16:
            case 93:
               this.clearCbuf();
               this.prevState = 18;
               this.yybegin(this.prevState);
               break;
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 29:
            case 30:
            case 105:
            case 131:
               return 266;
            case 32:
            case 150:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               break;
            case 33:
            case 154:
            case 155:
               this.yybegin(32);
               break;
            case 34:
            case 156:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yylength());
               break;
            case 35:
            case 160:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yylength());
               break;
            case 38:
               this.safeBacktrack();
               this.parseCdata();
               this.parser.reportCdata();
               return 257;
            case 39:
               result = this.parseWhitespace();
               if (result == 257) {
                  this.parser.reportCdata();
               }

               return result;
            case 40:
               this.tokenStartLine = this.yyline_next + 1;
               this.tokenStartColumn = this.yycolumn_next + 1;
               this.yybegin(this.tagStartState);
               if (this.parser.fNamespaces) {
                  result = this.parseTagNS();
               } else {
                  result = this.parseTag();
               }

               if (result != -1 && this.tokenizeInput) {
                  if (this.tagType == 263) {
                     this.setTokenize(false);
                  }

                  return this.tagType;
               }
               break;
            case 41:
               this.yybegin(3);
               break;
            case 42:
            case 43:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 55:
            case 59:
            case 61:
            case 62:
            case 63:
            case 68:
            case 71:
            case 72:
            case 73:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 86:
            case 91:
            case 98:
            case 101:
            case 103:
            case 107:
            case 108:
            case 110:
            case 114:
            case 115:
            case 116:
            case 117:
            case 120:
            case 124:
            case 125:
            case 129:
            case 130:
            case 141:
            case 148:
            case 149:
            case 161:
            case 162:
               throw this.fatalError("Unexpected character encountered (lex state " + this.yystate() + "): '" + this.yytext() + "'");
            case 44:
               this.safeBacktrack();
               result = this.parseXML();
               if (result != 0) {
                  return result;
               }
               break;
            case 57:
               this.attributeQName = this.yytext2();
               this.yybegin(10);
               break;
            case 58:
               this.yybegin(this.baseState);
               this.tagStack.push(this.stringValue);
               this.processComplexElement();
               this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.attribs.clear();
               if (this.tokenizeInput) {
                  this.setTokenize(false);
                  return 263;
               }
               break;
            case 60:
               this.yybegin(6);
               this.stringValue = this.yytext2();
               this.prepareComplexElement(this.stringValue);
               break;
            case 64:
            case 65:
            case 66:
            case 187:
            case 188:
            case 270:
            case 319:
            case 354:
            case 382:
               this.isNamespaceDeclaration = false;
               this.attributeLocalName = this.attributeQName = this.yytext2();
               this.attributeURI = "";
               this.yybegin(10);
               break;
            case 67:
               this.yybegin(this.baseState);
               this.processComplexElement();
               this.resolveNamespacePrefixes();
               this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.attribs.clear();
               this.tagStack.push(this.stringValue);
               if (this.tokenizeInput) {
                  this.setTokenize(false);
                  return 263;
               }
               break;
            case 69:
            case 70:
            case 190:
               this.nsSupport.pushContext();
               this.yybegin(8);
               this.elementURI = "";
               this.elementLocalName = this.stringValue = this.yytext2();
               this.prepareComplexElement(this.stringValue);
               break;
            case 75:
               this.appendToCbuf(' ');
               break;
            case 76:
               this.yybegin(12);
               break;
            case 84:
               result = 0;

               while(true) {
                  if (result >= this.yylength()) {
                     continue label530;
                  }

                  this.appendToCbuf(' ');
                  ++result;
               }
            case 85:
               this.yybegin(12);
               break;
            case 88:
               this.clearCbuf();
               this.prevState = 17;
               this.yybegin(this.prevState);
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               break;
            case 90:
               this.clearCbuf();
               this.prevState = 17;
               this.needsNormalization = true;
               this.yybegin(12);
               break;
            case 92:
               this.clearCbuf();
               this.prevState = 18;
               this.yybegin(this.prevState);
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               break;
            case 94:
               this.clearCbuf();
               this.prevState = 18;
               this.needsNormalization = true;
               this.yybegin(12);
               break;
            case 96:
            case 100:
               this.appendToCbuf(' ');
               break;
            case 97:
               this.needsNormalization = true;
               this.yybegin(12);
               break;
            case 102:
               this.yybegin(this.baseState);
               this.checkEndTag(this.stringValue);
               this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
               if (this.tokenizeInput) {
                  return 264;
               }
               break;
            case 104:
               this.yybegin(this.baseState);
               this.checkEndTag(this.stringValue);
               this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.processNSContextEnd();
               if (this.tokenizeInput) {
                  return 264;
               }
               break;
            case 106:
               this.yybegin(31);
               this.bypassPERefs = this.bypassGERefs = false;
               break;
            case 109:
               this.yybegin(23);
               this.bypassPERefs = true;
               return this.stringToken(260, this.yytext2());
            case 111:
            case 112:
            case 218:
               this.yybegin(24);
               return this.stringToken(299, this.yytext2());
            case 113:
               this.yybegin(21);
               return 258;
            case 118:
               this.yybegin(26);
               return 274;
            case 119:
               this.yybegin(30);
               return this.stringToken(260, this.yytext2());
            case 121:
               return this.stringToken(260, this.yytext2());
            case 122:
               this.yybegin(30);
               return 275;
            case 123:
               return 277;
            case 132:
               return 313;
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 140:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 291:
            case 292:
            case 293:
            case 294:
            case 295:
            case 297:
            case 298:
            case 330:
            case 331:
            case 332:
            case 333:
            case 334:
            case 335:
            case 336:
            case 363:
            case 365:
            case 366:
            case 367:
            case 368:
            case 389:
            case 390:
            case 410:
               return this.stringToken(260, this.yytext2());
            case 138:
               this.yybegin(21);
               return 276;
            case 139:
               return 274;
            case 142:
               return 275;
            case 143:
               return 311;
            case 144:
               return 314;
            case 145:
               return 312;
            case 146:
               this.prevState = 34;
               this.clearCbuf();
               this.appendToCbuf(this.yy_buffer, this.yy_startRead + 1, this.yylength() - 1);
               this.yybegin(this.prevState);
               break;
            case 147:
               this.prevState = 35;
               this.clearCbuf();
               this.appendToCbuf(this.yy_buffer, this.yy_startRead + 1, this.yylength() - 1);
               this.yybegin(this.prevState);
               break;
            case 151:
               this.yybegin(36);
               break;
            case 152:
               this.yybegin(37);
               break;
            case 153:
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
               this.yybegin(32);
               break;
            case 157:
               if (this.bypassGERefs) {
                  this.appendToCbuf('&');
               } else {
                  this.yybegin(36);
               }
               break;
            case 158:
               if (this.bypassPERefs) {
                  this.appendToCbuf('%');
               } else {
                  this.yybegin(37);
               }
               break;
            case 159:
               this.yybegin(30);
               return this.stringToken(261, new String(this.cbuf, 0, this.cbuflen));
            case 165:
               if (this.currentEntity.isInternal()) {
                  throw this.fatalError("XML declarations are not allowed in internal entities");
               }

               this.yybegin(this.prevState);
               if (this.currentEntity.getXMLVersion() != null) {
                  if (this.currentEntity.getDeclaredEncoding() == null) {
                     return 315;
                  }

                  if (this.currentEntity.isStandaloneDeclared()) {
                     return 315;
                  }

                  return 317;
               }

               if (this.currentEntity.getDeclaredEncoding() != null && !this.currentEntity.isStandaloneDeclared()) {
                  return 316;
               }

               throw this.fatalError("XML declaration is not well-formed");
            case 167:
               this.yybegin(this.baseState);
               result = this.handleEntityRef(this.yytext2(0, this.yylength() - 1), 0);
               if (result != 0) {
                  return result;
               }
               break;
            case 177:
               this.yybegin(this.piPrevState);
               this.parser.reportPI(this.elementQName, this.yytext(0, this.yylength() - 2));
               if (this.tokenizeInput) {
                  return 259;
               }
               break;
            case 178:
               this.yybegin(this.piPrevState);
               this.parser.reportPI(this.elementQName, "");
               if (this.piPrevState != 33 && this.tokenizeInput) {
                  return 259;
               }
               break;
            case 179:
               this.yybegin(this.baseState);
               this.processComplexElement();
               this.parser.reportStartTag("", "", this.stringValue);
               this.parser.reportEndTag("", "", this.stringValue);
               this.attribs.clear();
               if (this.tokenizeInput) {
                  return 265;
               }
               break;
            case 180:
            case 181:
            case 182:
            case 264:
            case 265:
            case 314:
            case 315:
               this.piPrevState = this.baseState;
               this.elementQName = this.yytext2(1, this.yylength() - 1);
               this.yybegin(5);
               break;
            case 186:
               this.yybegin(19);
               this.stringValue = this.yytext2(1, this.yylength() - 1);
               break;
            case 189:
               this.yybegin(this.baseState);
               this.processComplexElement();
               this.resolveNamespacePrefixes();
               this.parser.reportStartTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.parser.reportEndTag(this.elementURI, this.elementLocalName, this.stringValue);
               this.processNSContextEnd();
               this.attribs.clear();
               if (this.tokenizeInput) {
                  return 265;
               }
               break;
            case 191:
            case 192:
            case 272:
               this.yybegin(20);
               this.elementURI = this.nsSupport.getDefaultURI();
               this.stringValue = this.elementLocalName = this.yytext2(1, this.yylength() - 1);
               break;
            case 195:
               this.yybegin(this.tagState);
               this.parseQuotedTagValue();
               break;
            case 196:
               this.yybegin(this.tagState);
               this.parseSingleQuotedTagValue();
               break;
            case 198:
               if (!this.handleLiteralEntityRef(this.yytext2(0, this.yylength() - 1), 0)) {
                  this.appendToCbuf('&');
                  this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
                  this.yybegin(this.prevState);
               }
               break;
            case 206:
               this.yybegin(this.tagState);
               String value;
               if (this.cbuflen >= 4 && this.attributeQName != "xmlns") {
                  value = new String(this.cbuf, 0, this.cbuflen);
               } else {
                  value = this.stringConverter.convert(this.cbuf, 0, this.cbuflen);
               }

               this.addAttribute(this.attributeURI, this.attributeLocalName, this.attributeQName, this.attributeValueType, value);
               break;
            case 208:
               this.yybegin(this.tagState);
               this.addAttribute(this.attributeURI, this.attributeLocalName, this.attributeQName, this.attributeValueType, "");
               break;
            case 210:
               this.yybegin(this.tagState);
               this.addAttribute(this.attributeURI, this.attributeLocalName, this.attributeQName, this.attributeValueType, new String(this.cbuf, 0, this.cbuflen));
               break;
            case 215:
               return 281;
            case 222:
               this.yybegin(30);
               return 286;
            case 224:
               return 283;
            case 230:
               this.yybegin(30);
               return this.stringToken(261, this.yytext(1, this.yylength() - 2));
            case 244:
               return this.stringToken(261, this.yytext(1, this.yylength() - 2));
            case 245:
            case 246:
            case 247:
            case 303:
            case 304:
            case 341:
            case 342:
               this.piPrevState = 21;
               this.yybegin(5);
               this.elementQName = this.yytext2(1, this.yylength() - 1);
               break;
            case 252:
               this.yybegin(30);
               if (this.isTopEntity()) {
                  throw this.fatalError("'<![' constructs are not allowed in the internal DTD subset");
               }

               return 302;
            case 254:
               this.appendToCbuf('&');
               this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yylength());
               this.yybegin(this.prevState);
               break;
            case 256:
               if (this.isTopEntity()) {
                  throw this.fatalError("Parameter entities may not appear in the internal subset");
               }

               if (!this.handleLiteralEntityRef(this.yytext2(0, this.yylength() - 1), 1)) {
                  this.appendToCbuf('%');
                  this.appendToCbuf(this.yy_buffer, this.yy_startRead, this.yy_markedPos - this.yy_startRead);
                  this.yybegin(this.prevState);
               }
               break;
            case 257:
               this.yybegin(this.baseState);
               this.parser.reportCdata('<');
               break;
            case 258:
               this.yybegin(this.baseState);

               try {
                  this.clearCbuf();
                  this.parseEncodedChar(this.yy_buffer, this.yy_startRead + 1, this.yylength() - 2, 10);
                  this.parser.reportCdata(this.cbuf, 0, this.cbuflen);
                  break;
               } catch (IllegalCharException var14) {
                  throw this.fatalError("Invalid character entity reference: &" + this.yytext());
               }
            case 263:
               this.yybegin(this.baseState);
               this.parser.reportCdata('>');
               break;
            case 269:
               this.isNamespaceDeclaration = false;
               this.attributeQName = this.yytext2();
               result = this.attributeQName.indexOf(58);
               this.attributeURI = this.yytext2(0, result);
               this.attributeLocalName = this.yytext2(result + 1, this.yylength() - result - 1);
               this.yybegin(10);
               break;
            case 271:
               this.nsSupport.pushContext();
               this.yybegin(8);
               this.stringValue = this.yytext2();
               result = this.stringValue.indexOf(58);
               this.elementURI = this.yytext2(0, result);
               this.elementLocalName = this.yytext2(result + 1, this.yylength() - (result + 1));
               this.prepareComplexElement(this.stringValue);
               break;
            case 273:
               this.appendToCbuf('<');
               this.yybegin(this.prevState);
               break;
            case 274:
               this.yybegin(this.prevState);

               try {
                  this.parseEncodedChar(this.yy_buffer, this.yy_startRead + 1, this.yylength() - 2, 10);
                  break;
               } catch (ClassCastException var12) {
                  throw this.fatalError("Invalid character entity reference: &" + this.yytext());
               }
            case 279:
               this.appendToCbuf('>');
               this.yybegin(this.prevState);
               break;
            case 280:
               result = this.handleEntityRef(this.yytext2(1, this.yylength() - 2), 1);
               if (result != 0) {
                  this.returnEntityEndToken = false;
                  return result;
               }
               break;
            case 281:
               return 282;
            case 282:
               if (this.isTopEntity()) {
                  throw this.fatalError("Parameter entities may not appear in the internal subset");
               }

               if (this.handleEntityRef(this.yytext2(1, this.yylength() - 2), 1) != 0) {
                  this.returnEntityEndToken = false;
               }

               return 266;
            case 283:
               this.yybegin(24);
               return this.stringToken(298, this.yytext2());
            case 289:
               this.yybegin(21);
               this.parser.reportComment(this.yy_buffer, this.yy_startRead, this.yy_markedPos - 3 - this.yy_startRead);
               break;
            case 290:
               return 303;
            case 296:
               return 310;
            case 309:
               this.yybegin(27);
               break;
            case 310:
               this.yybegin(this.baseState);

               try {
                  this.clearCbuf();
                  this.parseEncodedChar(this.yy_buffer, this.yy_startRead + 2, this.yylength() - 3, 16);
                  this.parser.reportCdata(this.cbuf, 0, this.cbuflen);
                  break;
               } catch (IllegalCharException var15) {
                  throw this.fatalError("Invalid character entity reference: &" + this.yytext());
               }
            case 311:
               this.yybegin(this.baseState);
               this.parser.reportCdata('&');
               break;
            case 320:
               this.yybegin(20);
               this.stringValue = this.yytext2(1, this.yylength() - 1);
               result = this.stringValue.indexOf(58) + 1;
               this.elementURI = this.nsSupport.getURI(this.yytext2(1, result - 1));
               this.elementLocalName = this.yytext2(result + 1, this.yylength() - 1 - result);
               break;
            case 321:
               this.yybegin(this.prevState);

               try {
                  this.parseEncodedChar(this.yy_buffer, this.yy_startRead + 2, this.yylength() - 3, 16);
                  break;
               } catch (ClassCastException var13) {
                  throw this.fatalError("Invalid character entity reference: &" + this.yytext());
               }
            case 322:
               this.appendToCbuf('&');
               this.yybegin(this.prevState);
               break;
            case 347:
               this.yybegin(this.baseState);
               this.parser.reportCdata('\'');
               break;
            case 348:
               this.yybegin(this.baseState);
               this.parser.reportCdata('"');
               break;
            case 349:
               this.prevState = this.baseState;
               this.yybegin(1);
               break;
            case 350:
               throw this.fatalError("'?xml' is a reserved processing instruction target and must be in lower case.");
            case 355:
               this.appendToCbuf('\'');
               this.yybegin(this.prevState);
               break;
            case 356:
               this.appendToCbuf('"');
               this.yybegin(this.prevState);
               break;
            case 360:
               this.yybegin(30);
               return 287;
            case 361:
               this.yybegin(30);
               return 257;
            case 362:
               return 309;
            case 364:
               return 300;
            case 373:
               this.prevState = 21;
               this.yybegin(1);
               break;
            case 378:
               this.yybegin(this.baseState);
               this.parser.reportComment(this.yy_buffer, this.yy_startRead + 3, this.yy_markedPos - this.yy_startRead - 6);
               if (this.tokenizeInput) {
                  return 301;
               }
               break;
            case 385:
               this.yybegin(30);
               return 289;
            case 388:
               this.yybegin(30);
               return 288;
            case 391:
               return 305;
            case 392:
               this.bypassPERefs = this.bypassGERefs = true;
               return 269;
            case 393:
               this.bypassPERefs = this.bypassGERefs = true;
               this.yybegin(29);
               return 270;
            case 396:
               return 273;
            case 404:
               this.attributeURI = "xmlns";
               this.attributeLocalName = this.yytext2(6, this.yylength() - 6);
               this.attributeQName = this.yytext2();
               this.isNamespaceDeclaration = true;
               this.yybegin(10);
               break;
            case 405:
               this.attributeURI = "xmlns";
               this.attributeLocalName = "";
               this.attributeQName = "xmlns";
               this.isNamespaceDeclaration = true;
               this.parseCdataLiteral('"', 13);
               break;
            case 406:
               this.attributeURI = "xmlns";
               this.attributeLocalName = "";
               this.attributeQName = "xmlns";
               this.isNamespaceDeclaration = true;
               this.parseCdataLiteral('\'', 14);
               break;
            case 408:
               this.yybegin(30);
               return 291;
            case 411:
               return 304;
            case 414:
               return 307;
            case 416:
               this.yybegin(25);
               return 278;
            case 419:
               this.yybegin(this.baseState);
               this.startCdata();
               this.parseCdataSection();
               if (this.tokenizeInput) {
                  return 257;
               }

               this.endCdata();
               break;
            case 421:
               this.yybegin(30);
               return 290;
            case 422:
               this.yybegin(30);
               return 292;
            case 423:
               return 285;
            case 424:
               return 285;
            case 425:
               return 272;
            case 427:
               this.yybegin(30);
               return 308;
            case 429:
               this.yybegin(22);
               return 279;
            case 430:
               this.yybegin(30);
               if (this.parseExternalEntities(0)) {
                  return 267;
               }

               return 268;
            case 431:
               return 271;
            case 432:
               this.yybegin(30);
               return 280;
         }
      }
   }

   public void setMaxTotalEntityBytes(int size) {
      this.maxTotalEntityBytes = size;
   }

   public void resetEntityByteCounts() {
      this.totalEntityBytesPushed = 0;
   }

   static {
      calcAsciiTables();
      LETTER_RANGE_START = new char[]{'Ā', 'Ĵ', 'Ł', 'Ŋ', 'ƀ', 'Ǎ', 'Ǵ', 'Ǻ', 'ɐ', 'ʻ', 'Ά', 'Έ', 'Ό', 'Ύ', 'Σ', 'ϐ', 'Ϛ', 'Ϝ', 'Ϟ', 'Ϡ', 'Ϣ', 'Ё', 'Ў', 'ё', 'ў', 'Ґ', 'Ӈ', 'Ӌ', 'Ӑ', 'Ӯ', 'Ӹ', 'Ա', 'ՙ', 'ա', 'א', 'װ', 'ء', 'ف', 'ٱ', 'ں', 'ۀ', 'ې', 'ە', 'ۥ', 'अ', 'ऽ', 'क़', 'অ', 'এ', 'ও', 'প', 'ল', 'শ', 'ড়', 'য়', 'ৰ', 'ਅ', 'ਏ', 'ਓ', 'ਪ', 'ਲ', 'ਵ', 'ਸ', 'ਖ਼', 'ਫ਼', 'ੲ', 'અ', 'ઍ', 'એ', 'ઓ', 'પ', 'લ', 'વ', 'ઽ', 'ૠ', 'ଅ', 'ଏ', 'ଓ', 'ପ', 'ଲ', 'ଶ', 'ଽ', 'ଡ଼', 'ୟ', 'அ', 'எ', 'ஒ', 'ங', 'ஜ', 'ஞ', 'ண', 'ந', 'ம', 'ஷ', 'అ', 'ఎ', 'ఒ', 'ప', 'వ', 'ౠ', 'ಅ', 'ಎ', 'ಒ', 'ಪ', 'ವ', 'ೞ', 'ೠ', 'അ', 'എ', 'ഒ', 'പ', 'ൠ', 'ก', 'ะ', 'า', 'เ', 'ກ', 'ຄ', 'ງ', 'ຊ', 'ຍ', 'ດ', 'ນ', 'ມ', 'ລ', 'ວ', 'ສ', 'ອ', 'ະ', 'າ', 'ຽ', 'ເ', 'ཀ', 'ཉ', 'Ⴀ', 'ა', 'ᄀ', 'ᄂ', 'ᄅ', 'ᄉ', 'ᄋ', 'ᄎ', 'ᄼ', 'ᄾ', 'ᅀ', 'ᅌ', 'ᅎ', 'ᅐ', 'ᅔ', 'ᅙ', 'ᅟ', 'ᅣ', 'ᅥ', 'ᅧ', 'ᅩ', 'ᅭ', 'ᅲ', 'ᅵ', 'ᆞ', 'ᆨ', 'ᆫ', 'ᆮ', 'ᆷ', 'ᆺ', 'ᆼ', 'ᇫ', 'ᇰ', 'ᇹ', 'Ḁ', 'Ạ', 'ἀ', 'Ἐ', 'ἠ', 'Ὀ', 'ὐ', 'Ὑ', 'Ὓ', 'Ὕ', 'Ὗ', 'ᾀ', 'ᾶ', 'ι', 'ῂ', 'ῆ', 'ῐ', 'ῖ', 'ῠ', 'ῲ', 'ῶ', 'Ω', 'K', '℮', 'ↀ', '〇', '〡', 'ぁ', 'ァ', 'ㄅ', '一', '가'};
      LETTER_RANGE_END = new char[]{'ı', 'ľ', 'ň', 'ž', 'ǃ', 'ǰ', 'ǵ', 'ȗ', 'ʨ', 'ˁ', 'Ά', 'Ί', 'Ό', 'Ρ', 'ώ', 'ϖ', 'Ϛ', 'Ϝ', 'Ϟ', 'Ϡ', 'ϳ', 'Ќ', 'я', 'ќ', 'ҁ', 'ӄ', 'ӈ', 'ӌ', 'ӫ', 'ӵ', 'ӹ', 'Ֆ', 'ՙ', 'ֆ', 'ת', 'ײ', 'غ', 'ي', 'ڷ', 'ھ', 'ێ', 'ۓ', 'ە', 'ۦ', 'ह', 'ऽ', 'ॡ', 'ঌ', 'ঐ', 'ন', 'র', 'ল', 'হ', 'ঢ়', 'ৡ', 'ৱ', 'ਊ', 'ਐ', 'ਨ', 'ਰ', 'ਲ਼', 'ਸ਼', 'ਹ', 'ੜ', 'ਫ਼', 'ੴ', 'ઋ', 'ઍ', 'ઑ', 'ન', 'ર', 'ળ', 'હ', 'ઽ', 'ૠ', 'ଌ', 'ଐ', 'ନ', 'ର', 'ଳ', 'ହ', 'ଽ', 'ଢ଼', 'ୡ', 'ஊ', 'ஐ', 'க', 'ச', 'ஜ', 'ட', 'த', 'ப', 'வ', 'ஹ', 'ఌ', 'ఐ', 'న', 'ళ', 'హ', 'ౡ', 'ಌ', 'ಐ', 'ನ', 'ಳ', 'ಹ', 'ೞ', 'ೡ', 'ഌ', 'ഐ', 'ന', 'ഹ', 'ൡ', 'ฮ', 'ะ', 'ำ', 'ๅ', 'ຂ', 'ຄ', 'ຈ', 'ຊ', 'ຍ', 'ທ', 'ຟ', 'ຣ', 'ລ', 'ວ', 'ຫ', 'ຮ', 'ະ', 'ຳ', 'ຽ', 'ໄ', 'ཇ', 'ཀྵ', 'Ⴥ', 'ჶ', 'ᄀ', 'ᄃ', 'ᄇ', 'ᄉ', 'ᄌ', 'ᄒ', 'ᄼ', 'ᄾ', 'ᅀ', 'ᅌ', 'ᅎ', 'ᅐ', 'ᅕ', 'ᅙ', 'ᅡ', 'ᅣ', 'ᅥ', 'ᅧ', 'ᅩ', 'ᅮ', 'ᅳ', 'ᅵ', 'ᆞ', 'ᆨ', 'ᆫ', 'ᆯ', 'ᆸ', 'ᆺ', 'ᇂ', 'ᇫ', 'ᇰ', 'ᇹ', 'ẛ', 'ỹ', 'ἕ', 'Ἕ', 'ὅ', 'Ὅ', 'ὗ', 'Ὑ', 'Ὓ', 'Ὕ', 'ώ', 'ᾴ', 'ᾼ', 'ι', 'ῄ', 'ῌ', 'ΐ', 'Ί', 'Ῥ', 'ῴ', 'ῼ', 'Ω', 'Å', '℮', 'ↂ', '〇', '〩', 'ゔ', 'ヺ', 'ㄬ', '龥', '힣'};
      NON_LETTER_RANGE_START = new char[]{'ː', '̀', '͠', '·', '҃', '֑', '֣', 'ֻ', 'ֿ', 'ׁ', 'ׄ', 'ـ', 'ً', '٠', 'ٰ', 'ۖ', '\u06dd', '۠', 'ۧ', '۪', '۰', 'ँ', '़', 'ा', '्', '॑', 'ॢ', '०', 'ঁ', '়', 'া', 'ি', 'ী', 'ে', 'ো', 'ৗ', 'ৢ', '০', 'ਂ', '਼', 'ਾ', 'ਿ', 'ੀ', 'ੇ', 'ੋ', '੦', 'ੰ', 'ઁ', '઼', 'ા', 'ે', 'ો', '૦', 'ଁ', '଼', 'ା', 'େ', 'ୋ', 'ୖ', '୦', 'ஂ', 'ா', 'ெ', 'ொ', 'ௗ', '௧', 'ఁ', 'ా', 'ె', 'ొ', 'ౕ', '౦', 'ಂ', 'ಾ', 'ೆ', 'ೊ', 'ೕ', '೦', 'ം', 'ാ', 'െ', 'ൊ', 'ൗ', '൦', 'ั', 'ิ', 'ๆ', '๐', 'ັ', 'ິ', 'ົ', 'ໆ', '່', '໐', '༘', '༠', '༵', '༷', '༹', '༾', '༿', 'ཱ', '྆', 'ྐ', 'ྗ', 'ྙ', 'ྱ', 'ྐྵ', '⃐', '⃡', '々', '〪', '〱', '゙', '゚', 'ゝ', 'ー'};
      NON_LETTER_RANGE_END = new char[]{'ˑ', 'ͅ', '͡', '·', '҆', '֡', 'ֹ', 'ֽ', 'ֿ', 'ׂ', 'ׄ', 'ـ', 'ْ', '٩', 'ٰ', 'ۜ', '۟', 'ۤ', 'ۨ', 'ۭ', '۹', 'ः', '़', 'ौ', '्', '॔', 'ॣ', '९', 'ঃ', '়', 'া', 'ি', 'ৄ', 'ৈ', '্', 'ৗ', 'ৣ', '৯', 'ਂ', '਼', 'ਾ', 'ਿ', 'ੂ', 'ੈ', '੍', '੯', 'ੱ', 'ઃ', '઼', 'ૅ', 'ૉ', '્', '૯', 'ଃ', '଼', 'ୃ', 'ୈ', '୍', 'ୗ', '୯', 'ஃ', 'ூ', 'ை', '்', 'ௗ', '௯', 'ః', 'ౄ', 'ై', '్', 'ౖ', '౯', 'ಃ', 'ೄ', 'ೈ', '್', 'ೖ', '೯', 'ഃ', 'ൃ', 'ൈ', '്', 'ൗ', '൯', 'ั', 'ฺ', '๎', '๙', 'ັ', 'ູ', 'ຼ', 'ໆ', 'ໍ', '໙', '༙', '༩', '༵', '༷', '༹', '༾', '༿', '྄', 'ྋ', 'ྕ', 'ྗ', 'ྭ', 'ྷ', 'ྐྵ', '⃜', '⃡', '々', '〯', '〵', '゙', '゚', 'ゞ', 'ヾ'};
   }

   private static final class YY_StreamInfo {
      Reader yy_reader;
      int yy_endRead;
      int yy_startRead;
      int yy_savePos;
      int yy_currentPos;
      int yy_markedPos;
      int yy_pushbackPos;
      int yyline;
      int yycolumn;
      char[] yy_buffer;
      boolean yy_atEOF;

      YY_StreamInfo(Reader yy_reader, int yy_endRead, int yy_startRead, int yy_savePos, int yy_currentPos, int yy_markedPos, int yy_pushbackPos, char[] yy_buffer, boolean yy_atEOF, int yyline, int yycolumn) {
         this.yy_reader = yy_reader;
         this.yy_endRead = yy_endRead;
         this.yy_startRead = yy_startRead;
         this.yy_savePos = yy_savePos;
         this.yy_currentPos = yy_currentPos;
         this.yy_markedPos = yy_markedPos;
         this.yy_pushbackPos = yy_pushbackPos;
         this.yy_buffer = yy_buffer;
         this.yy_atEOF = yy_atEOF;
         this.yyline = yyline;
         this.yycolumn = yycolumn;
      }
   }
}
