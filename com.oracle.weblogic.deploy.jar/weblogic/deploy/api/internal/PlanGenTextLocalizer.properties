version=1.0
L10nPackage=weblogic.deploy.api.internal
I18nPackage=weblogic.deploy.api.internal
subsystem=J2EE Deployment SPI

260300=Missing {0} argument.
260301={0} does not exist.
260302=Debug mode
260303=Name of plan to create. If not specified a default will be used. If -useplan is specified then that will be the default location for the new plan. Otherwise the default will be derived based on the application root directory (-root option), if available. If all else fails "./plan.xml" is used.
260304=Type of application: ear, war, jar, rar, car
260305=[Path to application]
260306=No -plan argument
260307=No application to process
260308=Unable to determine type from application name, {0}.
260309=Invalid type, {0}, specified. Use one of ear, war, jar, rar or car
260310=Type of export: all,dependencies,declarations,configurables,dynamics
260311=Invalid export option, {0}. Must be one of any,all,dependencies,declarations,configurables or dynamics
260312=Processing {0}...
260313=Processing module {0}...
260314=Saving plan to {0}...
260315=Enter {0} for element, {1}[{2}={3}] [current={4}]
260316=Enter {0} for element, {1} [current={2}]
260317=Exporting properties...
260318=Type of variables to create: global or unique
260319=Invalid value, {0}. Use global or unique
260320=Skipping DTD based module
260321=(default) create plan that exports all dependency properties
260322=create plan that exports all declaration properties
260323=create plan that exports all configurable properties except for dependencies and declarations
260324=create plan that exports all dynamic properties
260325=create plan that exports no properties
260326=create plan that exports all changeable properties
260327=Name of plan to initialize from. If not specified then it will default to the plan residing in the application root (-root option) plan directory, if it exists. Otherwise the utility will continue without a plan document and create one from scratch.
260328=\n\nPlanGenerator is a utility for creating a deployment plan template based on standard \ndescriptors included in an application. The resulting plan (-plan option) \nwill describe the app structure, identify all deployment descriptors and will \nexport a subset of the application's configurable properties. \n\nBy default the plan will only export application dependencies. This can be overridden with one of: \n -declarations: export resources defined by the application \n -configurables: export non-resource oriented configurable properties \n -dynamics: export properties that may be changed in a running application \n -all: export all changeable properties \n -any: export all properties \n -standard: export properties from standard descriptors \n -module: export properties only for a module in an application \n -none: export no properties \n\nIf a plan is used as an input (-useplan option) then any exported \nproperties already in it will remain in place. \n\nThe application path is required unless the -root option is specified and the \napplication source can be derived from it.
260329=Generating plan for application {0}
260330=Generating plan for application {0} using input plan, {1}
260331=throw exceptions instead of exiting
260332=Comma separated specifications of libraries to merge
260333=Location of directory of libraries to merge
260334=Export option is: {0}
260335=Merging with libraries:
260336=name: {0}
260337=spec: {0}
260338=impl: {0}
260339=location: {0}
260340=create plan that exports all properties
260341=create plan that includes standard descriptors
260342=create plan only for a module
260343=option {0} is only valid for an application that is an ear file

