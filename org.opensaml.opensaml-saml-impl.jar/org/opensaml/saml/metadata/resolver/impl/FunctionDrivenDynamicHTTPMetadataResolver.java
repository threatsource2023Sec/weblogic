package org.opensaml.saml.metadata.resolver.impl;

import com.google.common.base.Function;
import java.util.Timer;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import net.shibboleth.utilities.java.support.component.ComponentSupport;
import net.shibboleth.utilities.java.support.logic.Constraint;
import net.shibboleth.utilities.java.support.primitive.StringSupport;
import net.shibboleth.utilities.java.support.resolver.CriteriaSet;
import org.apache.http.client.HttpClient;
import org.opensaml.core.criterion.EntityIdCriterion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FunctionDrivenDynamicHTTPMetadataResolver extends AbstractDynamicHTTPMetadataResolver {
   private final Logger log;
   private Function requestURLBuilder;

   public FunctionDrivenDynamicHTTPMetadataResolver(HttpClient client) {
      this((Timer)null, client);
   }

   public FunctionDrivenDynamicHTTPMetadataResolver(@Nullable Timer backgroundTaskTimer, @Nonnull HttpClient client) {
      super(backgroundTaskTimer, client);
      this.log = LoggerFactory.getLogger(FunctionDrivenDynamicHTTPMetadataResolver.class);
      this.setRequestURLBuilder(new HTTPEntityIDRequestURLBuilder());
   }

   @Nonnull
   public Function getRequestURLBuilder() {
      return this.requestURLBuilder;
   }

   public void setRequestURLBuilder(@Nonnull Function builder) {
      ComponentSupport.ifInitializedThrowUnmodifiabledComponentException(this);
      ComponentSupport.ifDestroyedThrowDestroyedComponentException(this);
      this.requestURLBuilder = (Function)Constraint.isNotNull(builder, "Request URL builder function was null");
   }

   @Nullable
   protected String buildRequestURL(@Nonnull CriteriaSet criteria) {
      String entityID = StringSupport.trimOrNull(((EntityIdCriterion)criteria.get(EntityIdCriterion.class)).getEntityId());
      if (entityID == null) {
         return null;
      } else {
         String url = (String)this.getRequestURLBuilder().apply(entityID);
         this.log.debug("{} URL generated by request builder was: {}", this.getLogPrefix(), url);
         return url;
      }
   }
}
