package weblogic.jdbc.wrapper;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Date;
import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import weblogic.diagnostics.instrumentation.DelegatingMonitor;
import weblogic.diagnostics.instrumentation.DiagnosticMonitor;
import weblogic.diagnostics.instrumentation.InstrumentationSupport;
import weblogic.diagnostics.instrumentation.JoinPoint;
import weblogic.diagnostics.instrumentation.LocalHolder;
import weblogic.diagnostics.instrumentation.PointcutHandlingInfo;
import weblogic.diagnostics.instrumentation.ValueHandlingInfo;
import weblogic.jdbc.common.internal.ConnectionEnv;
import weblogic.jdbc.common.internal.JdbcDebug;
import weblogic.jdbc.common.internal.StatementHolder;

public class PreparedStatement extends Statement {
   static final long serialVersionUID = 3853406354495619262L;
   static final String _WLDF$INST_VERSION = "9.0.0";
   // $FF: synthetic field
   static Class _WLDF$INST_FLD_class = Class.forName("weblogic.jdbc.wrapper.PreparedStatement");
   static final DelegatingMonitor _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low;
   static final DelegatingMonitor _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium;
   static final JoinPoint _WLDF$INST_JPFLD_0;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_0;
   static final JoinPoint _WLDF$INST_JPFLD_1;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_1;
   static final JoinPoint _WLDF$INST_JPFLD_2;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_2;
   static final JoinPoint _WLDF$INST_JPFLD_3;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_3;
   static final JoinPoint _WLDF$INST_JPFLD_4;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_4;

   public static java.sql.PreparedStatement makePreparedStatement(Object val, Connection conn, String sql, int resultSetType, int resultSetConcurrency) {
      return makePreparedStatement(val, conn, sql, resultSetType, resultSetConcurrency, -1, -1, (int[])null, (String[])null);
   }

   public static java.sql.PreparedStatement makePreparedStatement(Object val, Connection conn, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames) {
      LocalHolder var11;
      if ((var11 = LocalHolder.getInstance(_WLDF$INST_JPFLD_0, _WLDF$INST_JPFLD_JPMONS_0)) != null) {
         if (var11.argsCapture) {
            var11.args = new Object[9];
            Object[] var10000 = var11.args;
            var10000[0] = val;
            var10000[1] = conn;
            var10000[2] = sql;
            var10000[3] = InstrumentationSupport.convertToObject(resultSetType);
            var10000[4] = InstrumentationSupport.convertToObject(resultSetConcurrency);
            var10000[5] = InstrumentationSupport.convertToObject(resultSetHoldability);
            var10000[6] = InstrumentationSupport.convertToObject(autoGeneratedKeys);
            var10000[7] = columnIndexes;
            var10000[8] = columnNames;
         }

         InstrumentationSupport.createDynamicJoinPoint(var11);
         InstrumentationSupport.preProcess(var11);
         var11.resetPostBegin();
      }

      java.sql.PreparedStatement var15;
      label120: {
         try {
            java.sql.Statement currStmt;
            if (val instanceof StatementHolder) {
               currStmt = ((StatementHolder)val).getStatement();
            } else {
               currStmt = (java.sql.Statement)val;
            }

            if (conn != null && conn instanceof Connection) {
               ConnectionEnv cc = conn.getConnectionEnv();
               if (cc != null && !cc.isWrapJdbc()) {
                  var15 = (java.sql.PreparedStatement)currStmt;
                  break label120;
               }
            }

            PreparedStatement wrapperStatement = (PreparedStatement)JDBCWrapperFactory.getWrapper(4, currStmt, false);
            wrapperStatement.init(currStmt, conn, sql, resultSetType, resultSetConcurrency, false, resultSetHoldability, autoGeneratedKeys, columnIndexes, columnNames);
            if (conn != null) {
               conn.addStatement(wrapperStatement, val);
            }

            var15 = (java.sql.PreparedStatement)wrapperStatement;
         } catch (Throwable var13) {
            if (var11 != null) {
               var11.th = var13;
               var11.ret = null;
               InstrumentationSupport.postProcess(var11);
            }

            throw var13;
         }

         if (var11 != null) {
            var11.ret = var15;
            InstrumentationSupport.postProcess(var11);
         }

         return var15;
      }

      if (var11 != null) {
         var11.ret = var15;
         InstrumentationSupport.postProcess(var11);
      }

      return var15;
   }

   protected java.sql.Statement reCreateStatement() throws SQLException {
      ConnectionEnv cc = this.conn.getConnectionEnv();
      if (cc == null) {
         throw new SQLException("connection closed");
      } else {
         Object val = cc.getCachedStatement(false, this.sql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
         this.conn.addStatement(this, val);
         return val instanceof StatementHolder ? ((StatementHolder)val).getStatement() : (java.sql.Statement)val;
      }
   }

   public Object invocationExceptionHandler(String methodName, Object[] params, Throwable t) throws SQLException {
      try {
         this.clearCachedStatement();
      } catch (SQLException var5) {
         if (JdbcDebug.JDBCSQL.isDebugEnabled()) {
            JdbcDebug.JDBCSQL.debug("clearCachedStatement failed.", var5);
         }
      }

      return super.invocationExceptionHandler(methodName, params, t);
   }

   public boolean execute() throws SQLException {
      LocalHolder var5;
      if ((var5 = LocalHolder.getInstance(_WLDF$INST_JPFLD_1, _WLDF$INST_JPFLD_JPMONS_1)) != null) {
         if (var5.argsCapture) {
            var5.args = new Object[1];
            var5.args[0] = this;
         }

         InstrumentationSupport.createDynamicJoinPoint(var5);
         InstrumentationSupport.preProcess(var5);
         var5.resetPostBegin();
      }

      boolean var10000;
      try {
         boolean result = false;
         String methodName = "execute";
         Object[] params = new Object[0];

         try {
            this.preInvocationHandler(methodName, params);
            if (this.current_rs != null) {
               this.current_rs.close();
               this.current_rs = null;
            }

            this.beginStatementProfiling();
            result = ((java.sql.PreparedStatement)this.stmt).execute();
            if (this.conn.getConnectionEnv() != null) {
               this.conn.getConnectionEnv().setLastSuccessfulConnectionUse();
            }

            this.finishStatementProfiling();
            this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
         } catch (Exception var8) {
            this.invocationExceptionHandler(methodName, params, var8);
         }

         var10000 = result;
      } catch (Throwable var9) {
         if (var5 != null) {
            var5.th = var9;
            var5.ret = InstrumentationSupport.convertToObject(false);
            InstrumentationSupport.postProcess(var5);
         }

         throw var9;
      }

      if (var5 != null) {
         var5.ret = InstrumentationSupport.convertToObject(var10000);
         InstrumentationSupport.postProcess(var5);
      }

      return var10000;
   }

   public java.sql.ResultSet executeQuery() throws SQLException {
      LocalHolder var4;
      if ((var4 = LocalHolder.getInstance(_WLDF$INST_JPFLD_2, _WLDF$INST_JPFLD_JPMONS_2)) != null) {
         if (var4.argsCapture) {
            var4.args = new Object[1];
            var4.args[0] = this;
         }

         InstrumentationSupport.createDynamicJoinPoint(var4);
         InstrumentationSupport.preProcess(var4);
         var4.resetPostBegin();
      }

      java.sql.ResultSet var10000;
      try {
         String methodName = "executeQuery";
         Object[] params = new Object[0];

         try {
            this.preInvocationHandler(methodName, params);
            java.sql.ResultSet rs = null;
            if (this.current_rs != null) {
               this.current_rs.close();
               this.current_rs = null;
            }

            this.beginStatementProfiling();
            rs = ((java.sql.PreparedStatement)this.stmt).executeQuery();
            if (this.conn.getConnectionEnv() != null) {
               this.conn.getConnectionEnv().setLastSuccessfulConnectionUse();
            }

            this.finishStatementProfiling();
            this.current_rs = ResultSet.makeResultSet(rs, this.conn, this);
            this.postInvocationHandlerNoWrap(methodName, params, this.current_rs);
         } catch (Exception var7) {
            this.invocationExceptionHandler(methodName, params, var7);
         }

         var10000 = this.current_rs;
      } catch (Throwable var8) {
         if (var4 != null) {
            var4.th = var8;
            var4.ret = null;
            InstrumentationSupport.postProcess(var4);
         }

         throw var8;
      }

      if (var4 != null) {
         var4.ret = var10000;
         InstrumentationSupport.postProcess(var4);
      }

      return var10000;
   }

   public int executeUpdate() throws SQLException {
      LocalHolder var5;
      if ((var5 = LocalHolder.getInstance(_WLDF$INST_JPFLD_3, _WLDF$INST_JPFLD_JPMONS_3)) != null) {
         if (var5.argsCapture) {
            var5.args = new Object[1];
            var5.args[0] = this;
         }

         InstrumentationSupport.createDynamicJoinPoint(var5);
         InstrumentationSupport.preProcess(var5);
         var5.resetPostBegin();
      }

      int var10000;
      try {
         int result = 0;
         String methodName = "executeUpdate";
         Object[] params = new Object[0];

         try {
            this.preInvocationHandler(methodName, params);
            if (this.current_rs != null) {
               this.current_rs.close();
               this.current_rs = null;
            }

            this.beginStatementProfiling();
            result = ((java.sql.PreparedStatement)this.stmt).executeUpdate();
            if (this.conn.getConnectionEnv() != null) {
               this.conn.getConnectionEnv().setLastSuccessfulConnectionUse();
            }

            this.finishStatementProfiling();
            this.postInvocationHandlerNoWrap(methodName, params, result);
         } catch (Exception var8) {
            this.invocationExceptionHandler(methodName, params, var8);
         }

         var10000 = result;
      } catch (Throwable var9) {
         if (var5 != null) {
            var5.th = var9;
            var5.ret = InstrumentationSupport.convertToObject(0);
            InstrumentationSupport.postProcess(var5);
         }

         throw var9;
      }

      if (var5 != null) {
         var5.ret = InstrumentationSupport.convertToObject(var10000);
         InstrumentationSupport.postProcess(var5);
      }

      return var10000;
   }

   public int[] executeBatch() throws SQLException {
      LocalHolder var5;
      if ((var5 = LocalHolder.getInstance(_WLDF$INST_JPFLD_4, _WLDF$INST_JPFLD_JPMONS_4)) != null) {
         if (var5.argsCapture) {
            var5.args = new Object[1];
            var5.args[0] = this;
         }

         InstrumentationSupport.createDynamicJoinPoint(var5);
         InstrumentationSupport.preProcess(var5);
         var5.resetPostBegin();
      }

      int[] var10000;
      try {
         int[] result = null;
         String methodName = "executeBatch";
         Object[] params = new Object[0];

         try {
            this.preInvocationHandler(methodName, params);
            this.checkStatement();
            if (this.current_rs != null) {
               this.current_rs.close();
               this.current_rs = null;
            }

            this.beginStatementProfiling();
            result = ((java.sql.PreparedStatement)this.stmt).executeBatch();
            if (this.conn.getConnectionEnv() != null) {
               this.conn.getConnectionEnv().setLastSuccessfulConnectionUse();
            }

            this.finishStatementProfiling();
            this.postInvocationHandlerNoWrap(methodName, params, result);
         } catch (Exception var8) {
            this.invocationExceptionHandler(methodName, params, var8);
         }

         var10000 = result;
      } catch (Throwable var9) {
         if (var5 != null) {
            var5.th = var9;
            var5.ret = null;
            InstrumentationSupport.postProcess(var5);
         }

         throw var9;
      }

      if (var5 != null) {
         var5.ret = var10000;
         InstrumentationSupport.postProcess(var5);
      }

      return var10000;
   }

   public java.sql.ResultSetMetaData getMetaData() throws SQLException {
      java.sql.ResultSetMetaData rsmd = null;
      String methodName = "getMetaData()";
      Object[] params = new Object[0];

      try {
         this.preInvocationHandler(methodName, params);
         rsmd = ((java.sql.PreparedStatement)this.stmt).getMetaData();
         if (rsmd != null) {
            rsmd = ResultSetMetaData.makeResultSetMetaData(rsmd, this.conn);
         }

         this.postInvocationHandlerNoWrap(methodName, params, rsmd);
      } catch (Exception var5) {
         this.invocationExceptionHandler(methodName, params, var5);
      }

      return rsmd;
   }

   public void clearParameters() throws SQLException {
      String methodName = "clearParameters";
      Object[] params = new Object[0];

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).clearParameters();
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var4) {
         this.invocationExceptionHandler(methodName, params, var4);
      }

   }

   public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterIndex, x, targetSqlType, scale};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, ((JDBCWrapperImpl)x).getVendorObj(), targetSqlType, scale);
         } else {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, x, targetSqlType, scale);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterIndex, x, targetSqlType};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, ((JDBCWrapperImpl)x).getVendorObj(), targetSqlType);
         } else {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, x, targetSqlType);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setObject(int parameterIndex, Object x) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, ((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setObject(parameterIndex, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setRef(int i, java.sql.Ref x) throws SQLException {
      String methodName = "setRef";
      Object[] params = new Object[]{i, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setRef(i, (java.sql.Ref)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setRef(i, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setArray(int i, java.sql.Array x) throws SQLException {
      String methodName = "setArray";
      Object[] params = new Object[]{i, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setArray(i, (java.sql.Array)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setArray(i, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBlob(int i, java.sql.Blob x) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{i, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setBlob(i, (java.sql.Blob)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setBlob(i, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setClob(int i, java.sql.Clob x) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{i, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setClob(i, (java.sql.Clob)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setClob(i, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterIndex, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setCharacterStream(parameterIndex, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterIndex, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setAsciiStream(parameterIndex, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
      String methodName = "setUnicodeStream";
      Object[] params = new Object[]{parameterIndex, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setUnicodeStream(parameterIndex, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterIndex, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBinaryStream(parameterIndex, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setNull(int parameterIndex, int sqlType) throws SQLException {
      String methodName = "setNull";
      Object[] params = new Object[]{parameterIndex, sqlType};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNull(parameterIndex, sqlType);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNull(int i, int sqlType, String typeName) throws SQLException {
      String methodName = "setNull";
      Object[] params = new Object[]{i, sqlType, typeName};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNull(i, sqlType, typeName);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setBoolean(int parameterIndex, boolean x) throws SQLException {
      String methodName = "setBoolean";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBoolean(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setByte(int parameterIndex, byte x) throws SQLException {
      String methodName = "setByte";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setByte(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setShort(int parameterIndex, short x) throws SQLException {
      String methodName = "setShort";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setShort(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setInt(int parameterIndex, int x) throws SQLException {
      String methodName = "setInt";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setInt(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setLong(int parameterIndex, long x) throws SQLException {
      String methodName = "setLong";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setLong(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setFloat(int parameterIndex, float x) throws SQLException {
      String methodName = "setFloat";
      Object[] params = new Object[]{parameterIndex, new Float(x)};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setFloat(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setDouble(int parameterIndex, double x) throws SQLException {
      String methodName = "setDouble";
      Object[] params = new Object[]{parameterIndex, new Double(x)};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setDouble(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setBytes(int parameterIndex, byte[] x) throws SQLException {
      String methodName = "setBytes";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBytes(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
      String methodName = "setBigDecimal";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBigDecimal(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setString(int parameterIndex, String x) throws SQLException {
      String methodName = "setString";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setString(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setDate(int parameterIndex, Date x) throws SQLException {
      String methodName = "setDate";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setDate(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
      String methodName = "setDate";
      Object[] params = new Object[]{parameterIndex, x, cal};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setDate(parameterIndex, x, cal);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setTime(int parameterIndex, Time x) throws SQLException {
      String methodName = "setInt";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setTime(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
      String methodName = "setTime";
      Object[] params = new Object[]{parameterIndex, x, cal};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setTime(parameterIndex, x, cal);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
      String methodName = "setTimeStamp";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setTimestamp(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
      String methodName = "setTimestamp";
      Object[] params = new Object[]{parameterIndex, x, cal};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setTimestamp(parameterIndex, x, cal);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public boolean isPoolable() throws SQLException {
      String methodName = "isPoolable";
      Object[] params = new Object[0];

      try {
         this.preInvocationHandler(methodName, params);
         this.postInvocationHandler(methodName, params, this.poolable);
      } catch (Exception var4) {
         this.invocationExceptionHandler(methodName, params, var4);
      }

      return this.poolable;
   }

   public void setPoolable(boolean poolable) throws SQLException {
      String methodName = "setPoolable";
      Object[] params = new Object[]{poolable};

      try {
         this.preInvocationHandler(methodName, params);
         this.poolable = poolable;
         ((java.sql.PreparedStatement)this.stmt).setPoolable(poolable);
         this.postInvocationHandler(methodName, params, (Object)null);
      } catch (Exception var5) {
         this.invocationExceptionHandler(methodName, params, var5);
      }

   }

   public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setAsciiStream(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterIndex, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setAsciiStream(parameterIndex, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBinaryStream(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterIndex, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBinaryStream(parameterIndex, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{parameterIndex, inputStream};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBlob(parameterIndex, inputStream);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{parameterIndex, inputStream, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setBlob(parameterIndex, inputStream, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterIndex, reader};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setCharacterStream(parameterIndex, reader);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterIndex, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setCharacterStream(parameterIndex, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setClob(int parameterIndex, Reader reader) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{parameterIndex, reader};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setClob(parameterIndex, reader);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{parameterIndex, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setClob(parameterIndex, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
      String methodName = "setNCharacterStream";
      Object[] params = new Object[]{parameterIndex, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNCharacterStream(parameterIndex, value);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
      String methodName = "setNCharacterStream";
      Object[] params = new Object[]{parameterIndex, value, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNCharacterStream(parameterIndex, value, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setNClob(int parameterIndex, NClob value) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterIndex, value};

      try {
         this.preInvocationHandler(methodName, params);
         if (value instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setNClob(parameterIndex, (NClob)((JDBCWrapperImpl)value).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setNClob(parameterIndex, value);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNClob(int parameterIndex, Reader value) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterIndex, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNClob(parameterIndex, value);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNClob(int parameterIndex, Reader value, long length) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterIndex, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNClob(parameterIndex, value, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setNString(int parameterIndex, String value) throws SQLException {
      String methodName = "setNString";
      Object[] params = new Object[]{parameterIndex, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setNString(parameterIndex, value);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setRowId(int parameterIndex, RowId x) throws SQLException {
      String methodName = "setRowId";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setRowId(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
      String methodName = "setSQLXML";
      Object[] params = new Object[]{parameterIndex, xmlObject};

      try {
         this.preInvocationHandler(methodName, params);
         if (xmlObject instanceof JDBCWrapperImpl) {
            ((java.sql.PreparedStatement)this.stmt).setSQLXML(parameterIndex, (SQLXML)((JDBCWrapperImpl)xmlObject).getVendorObj());
         } else {
            ((java.sql.PreparedStatement)this.stmt).setSQLXML(parameterIndex, xmlObject);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setURL(int parameterIndex, URL x) throws SQLException {
      String methodName = "setURL";
      Object[] params = new Object[]{parameterIndex, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.PreparedStatement)this.stmt).setURL(parameterIndex, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public java.sql.ParameterMetaData getParameterMetaData() throws SQLException {
      java.sql.ParameterMetaData pmd = null;
      String methodName = "getParameterMetaData()";
      Object[] params = new Object[0];

      try {
         this.preInvocationHandler(methodName, params);
         pmd = ((java.sql.PreparedStatement)this.stmt).getParameterMetaData();
         if (pmd != null) {
            pmd = ParameterMetaData.makeParameterMetaData(pmd, this.conn);
         }

         this.postInvocationHandlerNoWrap(methodName, params, pmd);
      } catch (Exception var5) {
         this.invocationExceptionHandler(methodName, params, var5);
      }

      return pmd;
   }

   protected void clearCachedStatement() throws SQLException {
      Object val = this.conn.getStatement(this);
      if (val instanceof StatementHolder) {
         ((StatementHolder)val).setToBeClosed();
      }

      this.conn.clearCachedStatementInternal(this);
   }

   static {
      _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low = (DelegatingMonitor)InstrumentationSupport.getMonitor(_WLDF$INST_FLD_class, "JDBC_Diagnostic_Statement_Execute_Around_Low");
      _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium = (DelegatingMonitor)InstrumentationSupport.getMonitor(_WLDF$INST_FLD_class, "JDBC_Diagnostic_Statement_Creation_Around_Medium");
      _WLDF$INST_JPFLD_0 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "PreparedStatement.java", "weblogic.jdbc.wrapper.PreparedStatement", "makePreparedStatement", "(Ljava/lang/Object;Lweblogic/jdbc/wrapper/Connection;Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;", 50, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Creation_Around_Medium"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo((ValueHandlingInfo)null, (ValueHandlingInfo)null, new ValueHandlingInfo[]{null, InstrumentationSupport.createValueHandlingInfo("pool", "weblogic.diagnostics.instrumentation.gathering.JDBCConnectionRenderer", false, true), InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCSqlStringRenderer", false, true), null, null, null, null, null, null})}), (boolean)1);
      _WLDF$INST_JPFLD_JPMONS_0 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium};
      _WLDF$INST_JPFLD_1 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "PreparedStatement.java", "weblogic.jdbc.wrapper.PreparedStatement", "execute", "()Z", 108, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Execute_Around_Low"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo(InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCStatementRenderer", false, true), (ValueHandlingInfo)null, (ValueHandlingInfo[])null)}), (boolean)0);
      _WLDF$INST_JPFLD_JPMONS_1 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low};
      _WLDF$INST_JPFLD_2 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "PreparedStatement.java", "weblogic.jdbc.wrapper.PreparedStatement", "executeQuery", "()Ljava/sql/ResultSet;", 133, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Execute_Around_Low"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo(InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCStatementRenderer", false, true), (ValueHandlingInfo)null, (ValueHandlingInfo[])null)}), (boolean)0);
      _WLDF$INST_JPFLD_JPMONS_2 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low};
      _WLDF$INST_JPFLD_3 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "PreparedStatement.java", "weblogic.jdbc.wrapper.PreparedStatement", "executeUpdate", "()I", 159, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Execute_Around_Low"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo(InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCStatementRenderer", false, true), (ValueHandlingInfo)null, (ValueHandlingInfo[])null)}), (boolean)0);
      _WLDF$INST_JPFLD_JPMONS_3 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low};
      _WLDF$INST_JPFLD_4 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "PreparedStatement.java", "weblogic.jdbc.wrapper.PreparedStatement", "executeBatch", "()[I", 184, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Execute_Around_Low"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo(InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCStatementRenderer", false, true), (ValueHandlingInfo)null, (ValueHandlingInfo[])null)}), (boolean)0);
      _WLDF$INST_JPFLD_JPMONS_4 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Execute_Around_Low};
   }
}
