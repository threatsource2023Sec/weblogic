package weblogic.jdbc.wrapper;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Date;
import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import weblogic.diagnostics.instrumentation.DelegatingMonitor;
import weblogic.diagnostics.instrumentation.DiagnosticMonitor;
import weblogic.diagnostics.instrumentation.InstrumentationSupport;
import weblogic.diagnostics.instrumentation.JoinPoint;
import weblogic.diagnostics.instrumentation.LocalHolder;
import weblogic.diagnostics.instrumentation.PointcutHandlingInfo;
import weblogic.diagnostics.instrumentation.ValueHandlingInfo;
import weblogic.jdbc.common.internal.ConnectionEnv;
import weblogic.jdbc.common.internal.StatementHolder;

public class CallableStatement extends PreparedStatement {
   static final long serialVersionUID = 2860268246822444517L;
   static final String _WLDF$INST_VERSION = "9.0.0";
   // $FF: synthetic field
   static Class _WLDF$INST_FLD_class = Class.forName("weblogic.jdbc.wrapper.CallableStatement");
   static final DelegatingMonitor _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium;
   static final JoinPoint _WLDF$INST_JPFLD_0;
   static final DiagnosticMonitor[] _WLDF$INST_JPFLD_JPMONS_0;

   public static java.sql.CallableStatement makeCallableStatement(Object val, Connection conn, String sql, int resultSetType, int resultSetConcurrency) {
      return makeCallableStatement(val, conn, sql, resultSetType, resultSetConcurrency, -1, -1, (int[])null, (String[])null);
   }

   public static java.sql.CallableStatement makeCallableStatement(Object val, Connection conn, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames) {
      LocalHolder var11;
      if ((var11 = LocalHolder.getInstance(_WLDF$INST_JPFLD_0, _WLDF$INST_JPFLD_JPMONS_0)) != null) {
         if (var11.argsCapture) {
            var11.args = new Object[9];
            Object[] var10000 = var11.args;
            var10000[0] = val;
            var10000[1] = conn;
            var10000[2] = sql;
            var10000[3] = InstrumentationSupport.convertToObject(resultSetType);
            var10000[4] = InstrumentationSupport.convertToObject(resultSetConcurrency);
            var10000[5] = InstrumentationSupport.convertToObject(resultSetHoldability);
            var10000[6] = InstrumentationSupport.convertToObject(autoGeneratedKeys);
            var10000[7] = columnIndexes;
            var10000[8] = columnNames;
         }

         InstrumentationSupport.createDynamicJoinPoint(var11);
         InstrumentationSupport.preProcess(var11);
         var11.resetPostBegin();
      }

      java.sql.CallableStatement var15;
      label120: {
         try {
            java.sql.Statement currStmt;
            if (val instanceof StatementHolder) {
               currStmt = ((StatementHolder)val).getStatement();
            } else {
               currStmt = (java.sql.Statement)val;
            }

            if (conn != null && conn instanceof Connection) {
               ConnectionEnv cc = conn.getConnectionEnv();
               if (cc != null && !cc.isWrapJdbc()) {
                  var15 = (java.sql.CallableStatement)currStmt;
                  break label120;
               }
            }

            CallableStatement wrapperStatement = (CallableStatement)JDBCWrapperFactory.getWrapper(5, currStmt, false);
            wrapperStatement.init(currStmt, conn, sql, resultSetType, resultSetConcurrency, true, resultSetHoldability, autoGeneratedKeys, columnIndexes, columnNames);
            if (conn != null) {
               conn.addStatement(wrapperStatement, val);
            }

            var15 = (java.sql.CallableStatement)wrapperStatement;
         } catch (Throwable var13) {
            if (var11 != null) {
               var11.th = var13;
               var11.ret = null;
               InstrumentationSupport.postProcess(var11);
            }

            throw var13;
         }

         if (var11 != null) {
            var11.ret = var15;
            InstrumentationSupport.postProcess(var11);
         }

         return var15;
      }

      if (var11 != null) {
         var11.ret = var15;
         InstrumentationSupport.postProcess(var11);
      }

      return var15;
   }

   protected java.sql.Statement reCreateStatement() throws SQLException {
      Object val = this.conn.getConnectionEnv().getCachedStatement(true, this.sql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
      this.conn.addStatement(this, val);
      return val instanceof StatementHolder ? ((StatementHolder)val).getStatement() : (java.sql.Statement)val;
   }

   public java.sql.Array getArray(int parameterIndex) throws SQLException {
      java.sql.Array ret = null;
      String methodName = "getArray";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getArray(parameterIndex);
         ret = Array.makeArray(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Array getArray(String parameterName) throws SQLException {
      java.sql.Array ret = null;
      String methodName = "getArray";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getArray(parameterName);
         ret = Array.makeArray(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Blob getBlob(int parameterIndex) throws SQLException {
      java.sql.Blob ret = null;
      String methodName = "getBlob";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getBlob(parameterIndex);
         ret = Blob.makeBlob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Blob getBlob(String parameterName) throws SQLException {
      java.sql.Blob ret = null;
      String methodName = "getBlob";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getBlob(parameterName);
         ret = Blob.makeBlob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Clob getClob(int parameterIndex) throws SQLException {
      java.sql.Clob ret = null;
      String methodName = "getClob";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getClob(parameterIndex);
         ret = Clob.makeClob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Clob getClob(String parameterName) throws SQLException {
      java.sql.Clob ret = null;
      String methodName = "getClob";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getClob(parameterName);
         ret = Clob.makeClob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public NClob getNClob(int parameterIndex) throws SQLException {
      NClob ret = null;
      String methodName = "getNClob";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getNClob(parameterIndex);
         ret = WrapperNClob.makeNClob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public NClob getNClob(String parameterName) throws SQLException {
      NClob ret = null;
      String methodName = "getNClob";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getNClob(parameterName);
         ret = WrapperNClob.makeNClob(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Ref getRef(int parameterIndex) throws SQLException {
      java.sql.Ref ret = null;
      String methodName = "getRef";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getRef(parameterIndex);
         ret = Ref.makeRef(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public java.sql.Ref getRef(String parameterName) throws SQLException {
      java.sql.Ref ret = null;
      String methodName = "getRef";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getRef(parameterName);
         ret = Ref.makeRef(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public SQLXML getSQLXML(int parameterIndex) throws SQLException {
      SQLXML ret = null;
      String methodName = "getSQLXML";
      Object[] params = new Object[]{parameterIndex};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getSQLXML(parameterIndex);
         ret = WrapperSQLXML.makeSQLXML(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public SQLXML getSQLXML(String parameterName) throws SQLException {
      SQLXML ret = null;
      String methodName = "getSQLXML";
      Object[] params = new Object[]{parameterName};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getSQLXML(parameterName);
         ret = WrapperSQLXML.makeSQLXML(ret, (java.sql.Connection)this.conn);
         this.postInvocationHandlerNoWrap(methodName, params, ret);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

      return ret;
   }

   public void setAsciiStream(String parameterName, InputStream x) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setAsciiStream(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterName, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setAsciiStream(parameterName, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {
      String methodName = "setAsciiStream";
      Object[] params = new Object[]{parameterName, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setAsciiStream(parameterName, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
      String methodName = "setBigDecimal";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBigDecimal(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBinaryStream(String parameterName, InputStream x) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBinaryStream(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterName, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBinaryStream(parameterName, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {
      String methodName = "setBinaryStream";
      Object[] params = new Object[]{parameterName, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBinaryStream(parameterName, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setBlob(String parameterName, java.sql.Blob x) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.CallableStatement)this.stmt).setBlob(parameterName, (java.sql.Blob)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.CallableStatement)this.stmt).setBlob(parameterName, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBlob(String parameterName, InputStream x) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBlob(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBlob(String parameterName, InputStream x, long length) throws SQLException {
      String methodName = "setBlob";
      Object[] params = new Object[]{parameterName, x, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBlob(parameterName, x, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setBoolean(String parameterName, boolean x) throws SQLException {
      String methodName = "setBoolean";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBoolean(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setByte(String parameterName, byte x) throws SQLException {
      String methodName = "setByte";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setByte(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setBytes(String parameterName, byte[] x) throws SQLException {
      String methodName = "setBytes";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setBytes(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterName, reader};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setCharacterStream(parameterName, reader);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterName, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setCharacterStream(parameterName, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
      String methodName = "setCharacterStream";
      Object[] params = new Object[]{parameterName, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setCharacterStream(parameterName, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setClob(String parameterName, java.sql.Clob x) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         if (x instanceof JDBCWrapperImpl) {
            ((java.sql.CallableStatement)this.stmt).setClob(parameterName, (java.sql.Clob)((JDBCWrapperImpl)x).getVendorObj());
         } else {
            ((java.sql.CallableStatement)this.stmt).setClob(parameterName, x);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setClob(String parameterName, Reader reader) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{parameterName, reader};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setClob(parameterName, reader);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setClob(String parameterName, Reader reader, long length) throws SQLException {
      String methodName = "setClob";
      Object[] params = new Object[]{parameterName, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setClob(parameterName, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setDate(String parameterName, Date x) throws SQLException {
      String methodName = "setDate";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setDate(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setDouble(String parameterName, double x) throws SQLException {
      String methodName = "setDouble";
      Object[] params = new Object[]{parameterName, new Double(x)};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setDouble(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setFloat(String parameterName, float x) throws SQLException {
      String methodName = "setFloat";
      Object[] params = new Object[]{parameterName, new Float(x)};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setFloat(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setInt(String parameterName, int x) throws SQLException {
      String methodName = "setInt";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setInt(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setLong(String parameterName, long x) throws SQLException {
      String methodName = "setLong";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setLong(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setNCharacterStream(String parameterName, Reader value) throws SQLException {
      String methodName = "setNCharacterStream";
      Object[] params = new Object[]{parameterName, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNCharacterStream(parameterName, value);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {
      String methodName = "setNCharacterStream";
      Object[] params = new Object[]{parameterName, value, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNCharacterStream(parameterName, value, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setNClob(String parameterName, NClob value) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterName, value};

      try {
         this.preInvocationHandler(methodName, params);
         if (value instanceof JDBCWrapperImpl) {
            ((java.sql.CallableStatement)this.stmt).setNClob(parameterName, (NClob)((JDBCWrapperImpl)value).getVendorObj());
         } else {
            ((java.sql.CallableStatement)this.stmt).setNClob(parameterName, value);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNClob(String parameterName, Reader reader) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterName, reader};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNClob(parameterName, reader);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
      String methodName = "setNClob";
      Object[] params = new Object[]{parameterName, reader, length};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNClob(parameterName, reader, length);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setNString(String parameterName, String value) throws SQLException {
      String methodName = "setNString";
      Object[] params = new Object[]{parameterName, value};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNString(parameterName, value);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNull(String parameterName, int sqlType) throws SQLException {
      String methodName = "setNull";
      Object[] params = new Object[]{parameterName, sqlType};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNull(parameterName, sqlType);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
      String methodName = "setNull";
      Object[] params = new Object[]{parameterName, sqlType, typeName};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setNull(parameterName, sqlType, typeName);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setObject(String parameterName, Object x) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setObject(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterName, x, targetSqlType};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setObject(parameterName, x, targetSqlType);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
      String methodName = "setObject";
      Object[] params = new Object[]{parameterName, x, targetSqlType, scale};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setObject(parameterName, x, targetSqlType, scale);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var8) {
         this.invocationExceptionHandler(methodName, params, var8);
      }

   }

   public void setRowId(String parameterName, RowId x) throws SQLException {
      String methodName = "setRowId";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setRowId(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setShort(String parameterName, short x) throws SQLException {
      String methodName = "setShort";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setShort(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {
      String methodName = "setSQLXML";
      Object[] params = new Object[]{parameterName, xmlObject};

      try {
         this.preInvocationHandler(methodName, params);
         if (xmlObject instanceof JDBCWrapperImpl) {
            ((java.sql.CallableStatement)this.stmt).setSQLXML(parameterName, (SQLXML)((JDBCWrapperImpl)xmlObject).getVendorObj());
         } else {
            ((java.sql.CallableStatement)this.stmt).setSQLXML(parameterName, xmlObject);
         }

         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setString(String parameterName, String x) throws SQLException {
      String methodName = "setString";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setString(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setTime(String parameterName, Time x) throws SQLException {
      String methodName = "setTime";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setTime(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
      String methodName = "setTime";
      Object[] params = new Object[]{parameterName, x, cal};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setTime(parameterName, x, cal);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
      String methodName = "setTimestamp";
      Object[] params = new Object[]{parameterName, x};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setTimestamp(parameterName, x);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
      String methodName = "setTimestamp";
      Object[] params = new Object[]{parameterName, x, cal};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setTimestamp(parameterName, x, cal);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

   }

   public void setURL(String parameterName, URL val) throws SQLException {
      String methodName = "setURL";
      Object[] params = new Object[]{parameterName, val};

      try {
         this.preInvocationHandler(methodName, params);
         ((java.sql.CallableStatement)this.stmt).setURL(parameterName, val);
         this.postInvocationHandlerNoWrap(methodName, params, (Object)null);
      } catch (Exception var6) {
         this.invocationExceptionHandler(methodName, params, var6);
      }

   }

   public Object getObject(int parameterIndex, Class type) throws SQLException {
      Object ret = null;
      String methodName = "getObject";
      Object[] params = new Object[]{parameterIndex, type};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getObject(parameterIndex, type);
         this.postInvocationHandler(methodName, params, ret);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

      return ret;
   }

   public Object getObject(String parameterName, Class type) throws SQLException {
      Object ret = null;
      String methodName = "getObject";
      Object[] params = new Object[]{parameterName, type};

      try {
         this.preInvocationHandler(methodName, params);
         ret = ((java.sql.CallableStatement)this.stmt).getObject(parameterName, type);
         this.postInvocationHandler(methodName, params, ret);
      } catch (Exception var7) {
         this.invocationExceptionHandler(methodName, params, var7);
      }

      return ret;
   }

   static {
      _WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium = (DelegatingMonitor)InstrumentationSupport.getMonitor(_WLDF$INST_FLD_class, "JDBC_Diagnostic_Statement_Creation_Around_Medium");
      _WLDF$INST_JPFLD_0 = InstrumentationSupport.createJoinPoint(_WLDF$INST_FLD_class, "CallableStatement.java", "weblogic.jdbc.wrapper.CallableStatement", "makeCallableStatement", "(Ljava/lang/Object;Lweblogic/jdbc/wrapper/Connection;Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/CallableStatement;", 43, "", "", "", InstrumentationSupport.makeMap(new String[]{"JDBC_Diagnostic_Statement_Creation_Around_Medium"}, new PointcutHandlingInfo[]{InstrumentationSupport.createPointcutHandlingInfo((ValueHandlingInfo)null, (ValueHandlingInfo)null, new ValueHandlingInfo[]{null, InstrumentationSupport.createValueHandlingInfo("pool", "weblogic.diagnostics.instrumentation.gathering.JDBCConnectionRenderer", false, true), InstrumentationSupport.createValueHandlingInfo("sql", "weblogic.diagnostics.instrumentation.gathering.JDBCSqlStringRenderer", false, true), null, null, null, null, null, null})}), (boolean)1);
      _WLDF$INST_JPFLD_JPMONS_0 = new DiagnosticMonitor[]{_WLDF$INST_FLD_JDBC_Diagnostic_Statement_Creation_Around_Medium};
   }
}
