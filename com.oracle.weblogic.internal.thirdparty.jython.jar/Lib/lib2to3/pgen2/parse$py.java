package lib2to3.pgen2;

import java.util.Arrays;
import org.python.compiler.APIVersion;
import org.python.compiler.Filename;
import org.python.compiler.MTime;
import org.python.core.CodeBootstrap;
import org.python.core.CodeLoader;
import org.python.core.Py;
import org.python.core.PyCode;
import org.python.core.PyFrame;
import org.python.core.PyFunction;
import org.python.core.PyFunctionTable;
import org.python.core.PyList;
import org.python.core.PyObject;
import org.python.core.PyRunnable;
import org.python.core.PyRunnableBootstrap;
import org.python.core.PyString;
import org.python.core.PyTuple;
import org.python.core.ThreadState;
import org.python.core.imp;

@APIVersion(37)
@MTime(1498849383000L)
@Filename("lib2to3/pgen2/parse.py")
public class parse$py extends PyFunctionTable implements PyRunnable {
   static parse$py self;
   static final PyCode f$0;
   static final PyCode ParseError$1;
   static final PyCode __init__$2;
   static final PyCode Parser$3;
   static final PyCode __init__$4;
   static final PyCode f$5;
   static final PyCode setup$6;
   static final PyCode addtoken$7;
   static final PyCode classify$8;
   static final PyCode shift$9;
   static final PyCode push$10;
   static final PyCode pop$11;

   public PyObject f$0(PyFrame var1, ThreadState var2) {
      var1.setglobal("__doc__", PyString.fromInterned("Parser engine for the grammar tables generated by pgen.\n\nThe grammar table must be loaded first.\n\nSee Parser/parser.c in the Python distribution for additional info on\nhow this parsing engine works.\n\n"));
      var1.setline(11);
      PyString.fromInterned("Parser engine for the grammar tables generated by pgen.\n\nThe grammar table must be loaded first.\n\nSee Parser/parser.c in the Python distribution for additional info on\nhow this parsing engine works.\n\n");
      var1.setline(14);
      String[] var3 = new String[]{"token"};
      PyObject[] var5 = imp.importFrom("", var3, var1, 1);
      PyObject var4 = var5[0];
      var1.setlocal("token", var4);
      var4 = null;
      var1.setline(16);
      var5 = new PyObject[]{var1.getname("Exception")};
      var4 = Py.makeClass("ParseError", var5, ParseError$1);
      var1.setlocal("ParseError", var4);
      var4 = null;
      Arrays.fill(var5, (Object)null);
      var1.setline(27);
      var5 = new PyObject[]{var1.getname("object")};
      var4 = Py.makeClass("Parser", var5, Parser$3);
      var1.setlocal("Parser", var4);
      var4 = null;
      Arrays.fill(var5, (Object)null);
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject ParseError$1(PyFrame var1, ThreadState var2) {
      var1.setlocal("__module__", var1.getname("__name__"));
      var1.setlocal("__doc__", PyString.fromInterned("Exception to signal the parser is stuck."));
      var1.setline(17);
      PyString.fromInterned("Exception to signal the parser is stuck.");
      var1.setline(19);
      PyObject[] var3 = Py.EmptyObjects;
      PyFunction var4 = new PyFunction(var1.f_globals, var3, __init__$2, (PyObject)null);
      var1.setlocal("__init__", var4);
      var3 = null;
      return var1.getf_locals();
   }

   public PyObject __init__$2(PyFrame var1, ThreadState var2) {
      var1.setline(20);
      var1.getglobal("Exception").__getattr__("__init__").__call__(var2, var1.getlocal(0), PyString.fromInterned("%s: type=%r, value=%r, context=%r")._mod(new PyTuple(new PyObject[]{var1.getlocal(1), var1.getlocal(2), var1.getlocal(3), var1.getlocal(4)})));
      var1.setline(22);
      PyObject var3 = var1.getlocal(1);
      var1.getlocal(0).__setattr__("msg", var3);
      var3 = null;
      var1.setline(23);
      var3 = var1.getlocal(2);
      var1.getlocal(0).__setattr__("type", var3);
      var3 = null;
      var1.setline(24);
      var3 = var1.getlocal(3);
      var1.getlocal(0).__setattr__("value", var3);
      var3 = null;
      var1.setline(25);
      var3 = var1.getlocal(4);
      var1.getlocal(0).__setattr__("context", var3);
      var3 = null;
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject Parser$3(PyFrame var1, ThreadState var2) {
      var1.setlocal("__module__", var1.getname("__name__"));
      var1.setlocal("__doc__", PyString.fromInterned("Parser engine.\n\n    The proper usage sequence is:\n\n    p = Parser(grammar, [converter])  # create instance\n    p.setup([start])                  # prepare for parsing\n    <for each input token>:\n        if p.addtoken(...):           # parse a token; may raise ParseError\n            break\n    root = p.rootnode                 # root of abstract syntax tree\n\n    A Parser instance may be reused by calling setup() repeatedly.\n\n    A Parser instance contains state pertaining to the current token\n    sequence, and should not be used concurrently by different threads\n    to parse separate token sequences.\n\n    See driver.py for how to get input tokens by tokenizing a file or\n    string.\n\n    Parsing is complete when addtoken() returns True; the root of the\n    abstract syntax tree can then be retrieved from the rootnode\n    instance variable.  When a syntax error occurs, addtoken() raises\n    the ParseError exception.  There is no error recovery; the parser\n    cannot be used after a syntax error was reported (but it can be\n    reinitialized by calling setup()).\n\n    "));
      var1.setline(55);
      PyString.fromInterned("Parser engine.\n\n    The proper usage sequence is:\n\n    p = Parser(grammar, [converter])  # create instance\n    p.setup([start])                  # prepare for parsing\n    <for each input token>:\n        if p.addtoken(...):           # parse a token; may raise ParseError\n            break\n    root = p.rootnode                 # root of abstract syntax tree\n\n    A Parser instance may be reused by calling setup() repeatedly.\n\n    A Parser instance contains state pertaining to the current token\n    sequence, and should not be used concurrently by different threads\n    to parse separate token sequences.\n\n    See driver.py for how to get input tokens by tokenizing a file or\n    string.\n\n    Parsing is complete when addtoken() returns True; the root of the\n    abstract syntax tree can then be retrieved from the rootnode\n    instance variable.  When a syntax error occurs, addtoken() raises\n    the ParseError exception.  There is no error recovery; the parser\n    cannot be used after a syntax error was reported (but it can be\n    reinitialized by calling setup()).\n\n    ");
      var1.setline(57);
      PyObject[] var3 = new PyObject[]{var1.getname("None")};
      PyFunction var4 = new PyFunction(var1.f_globals, var3, __init__$4, PyString.fromInterned("Constructor.\n\n        The grammar argument is a grammar.Grammar instance; see the\n        grammar module for more information.\n\n        The parser is not ready yet for parsing; you must call the\n        setup() method to get it started.\n\n        The optional convert argument is a function mapping concrete\n        syntax tree nodes to abstract syntax tree nodes.  If not\n        given, no conversion is done and the syntax tree produced is\n        the concrete syntax tree.  If given, it must be a function of\n        two arguments, the first being the grammar (a grammar.Grammar\n        instance), and the second being the concrete syntax tree node\n        to be converted.  The syntax tree is converted from the bottom\n        up.\n\n        A concrete syntax tree node is a (type, value, context, nodes)\n        tuple, where type is the node type (a token or symbol number),\n        value is None for symbols and a string for tokens, context is\n        None or an opaque value used for error reporting (typically a\n        (lineno, offset) pair), and nodes is a list of children for\n        symbols, and None for tokens.\n\n        An abstract syntax tree node may be anything; this is entirely\n        up to the converter function.\n\n        "));
      var1.setlocal("__init__", var4);
      var3 = null;
      var1.setline(89);
      var3 = new PyObject[]{var1.getname("None")};
      var4 = new PyFunction(var1.f_globals, var3, setup$6, PyString.fromInterned("Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        "));
      var1.setlocal("setup", var4);
      var3 = null;
      var1.setline(113);
      var3 = Py.EmptyObjects;
      var4 = new PyFunction(var1.f_globals, var3, addtoken$7, PyString.fromInterned("Add a token; return True iff this is the end of the program."));
      var1.setlocal("addtoken", var4);
      var3 = null;
      var1.setline(161);
      var3 = Py.EmptyObjects;
      var4 = new PyFunction(var1.f_globals, var3, classify$8, PyString.fromInterned("Turn a token into a label.  (Internal)"));
      var1.setlocal("classify", var4);
      var3 = null;
      var1.setline(175);
      var3 = Py.EmptyObjects;
      var4 = new PyFunction(var1.f_globals, var3, shift$9, PyString.fromInterned("Shift a token.  (Internal)"));
      var1.setlocal("shift", var4);
      var3 = null;
      var1.setline(184);
      var3 = Py.EmptyObjects;
      var4 = new PyFunction(var1.f_globals, var3, push$10, PyString.fromInterned("Push a nonterminal.  (Internal)"));
      var1.setlocal("push", var4);
      var3 = null;
      var1.setline(191);
      var3 = Py.EmptyObjects;
      var4 = new PyFunction(var1.f_globals, var3, pop$11, PyString.fromInterned("Pop a nonterminal.  (Internal)"));
      var1.setlocal("pop", var4);
      var3 = null;
      return var1.getf_locals();
   }

   public PyObject __init__$4(PyFrame var1, ThreadState var2) {
      var1.setline(85);
      PyString.fromInterned("Constructor.\n\n        The grammar argument is a grammar.Grammar instance; see the\n        grammar module for more information.\n\n        The parser is not ready yet for parsing; you must call the\n        setup() method to get it started.\n\n        The optional convert argument is a function mapping concrete\n        syntax tree nodes to abstract syntax tree nodes.  If not\n        given, no conversion is done and the syntax tree produced is\n        the concrete syntax tree.  If given, it must be a function of\n        two arguments, the first being the grammar (a grammar.Grammar\n        instance), and the second being the concrete syntax tree node\n        to be converted.  The syntax tree is converted from the bottom\n        up.\n\n        A concrete syntax tree node is a (type, value, context, nodes)\n        tuple, where type is the node type (a token or symbol number),\n        value is None for symbols and a string for tokens, context is\n        None or an opaque value used for error reporting (typically a\n        (lineno, offset) pair), and nodes is a list of children for\n        symbols, and None for tokens.\n\n        An abstract syntax tree node may be anything; this is entirely\n        up to the converter function.\n\n        ");
      var1.setline(86);
      PyObject var3 = var1.getlocal(1);
      var1.getlocal(0).__setattr__("grammar", var3);
      var3 = null;
      var1.setline(87);
      Object var10000 = var1.getlocal(2);
      if (!((PyObject)var10000).__nonzero__()) {
         var1.setline(87);
         PyObject[] var4 = Py.EmptyObjects;
         var10000 = new PyFunction(var1.f_globals, var4, f$5);
      }

      Object var5 = var10000;
      var1.getlocal(0).__setattr__((String)"convert", (PyObject)var5);
      var3 = null;
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject f$5(PyFrame var1, ThreadState var2) {
      var1.setline(87);
      PyObject var3 = var1.getlocal(1);
      var1.f_lasti = -1;
      return var3;
   }

   public PyObject setup$6(PyFrame var1, ThreadState var2) {
      var1.setline(101);
      PyString.fromInterned("Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        ");
      var1.setline(102);
      PyObject var3 = var1.getlocal(1);
      PyObject var10000 = var3._is(var1.getglobal("None"));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(103);
         var3 = var1.getlocal(0).__getattr__("grammar").__getattr__("start");
         var1.setlocal(1, var3);
         var3 = null;
      }

      var1.setline(107);
      PyTuple var4 = new PyTuple(new PyObject[]{var1.getlocal(1), var1.getglobal("None"), var1.getglobal("None"), new PyList(Py.EmptyObjects)});
      var1.setlocal(2, var4);
      var3 = null;
      var1.setline(108);
      var4 = new PyTuple(new PyObject[]{var1.getlocal(0).__getattr__("grammar").__getattr__("dfas").__getitem__(var1.getlocal(1)), Py.newInteger(0), var1.getlocal(2)});
      var1.setlocal(3, var4);
      var3 = null;
      var1.setline(109);
      PyList var5 = new PyList(new PyObject[]{var1.getlocal(3)});
      var1.getlocal(0).__setattr__((String)"stack", var5);
      var3 = null;
      var1.setline(110);
      var3 = var1.getglobal("None");
      var1.getlocal(0).__setattr__("rootnode", var3);
      var3 = null;
      var1.setline(111);
      var3 = var1.getglobal("set").__call__(var2);
      var1.getlocal(0).__setattr__("used_names", var3);
      var3 = null;
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject addtoken$7(PyFrame var1, ThreadState var2) {
      var1.setline(114);
      PyString.fromInterned("Add a token; return True iff this is the end of the program.");
      var1.setline(116);
      PyObject var3 = var1.getlocal(0).__getattr__("classify").__call__(var2, var1.getlocal(1), var1.getlocal(2), var1.getlocal(3));
      var1.setlocal(4, var3);
      var3 = null;

      label56:
      do {
         while(true) {
            var1.setline(118);
            if (!var1.getglobal("True").__nonzero__()) {
               var1.f_lasti = -1;
               return Py.None;
            }

            var1.setline(119);
            var3 = var1.getlocal(0).__getattr__("stack").__getitem__(Py.newInteger(-1));
            PyObject[] var4 = Py.unpackSequence(var3, 3);
            PyObject var5 = var4[0];
            var1.setlocal(5, var5);
            var5 = null;
            var5 = var4[1];
            var1.setlocal(6, var5);
            var5 = null;
            var5 = var4[2];
            var1.setlocal(7, var5);
            var5 = null;
            var3 = null;
            var1.setline(120);
            var3 = var1.getlocal(5);
            var4 = Py.unpackSequence(var3, 2);
            var5 = var4[0];
            var1.setlocal(8, var5);
            var5 = null;
            var5 = var4[1];
            var1.setlocal(9, var5);
            var5 = null;
            var3 = null;
            var1.setline(121);
            var3 = var1.getlocal(8).__getitem__(var1.getlocal(6));
            var1.setlocal(10, var3);
            var3 = null;
            var1.setline(123);
            var3 = var1.getlocal(10).__iter__();

            while(true) {
               var1.setline(123);
               PyObject var9 = var3.__iternext__();
               PyObject var6;
               PyObject var10000;
               if (var9 == null) {
                  var1.setline(150);
                  PyTuple var13 = new PyTuple(new PyObject[]{Py.newInteger(0), var1.getlocal(6)});
                  var10000 = var13._in(var1.getlocal(10));
                  var6 = null;
                  if (!var10000.__nonzero__()) {
                     var1.setline(159);
                     throw Py.makeException(var1.getglobal("ParseError").__call__(var2, PyString.fromInterned("bad input"), var1.getlocal(1), var1.getlocal(2), var1.getlocal(3)));
                  }

                  var1.setline(152);
                  var1.getlocal(0).__getattr__("pop").__call__(var2);
                  var1.setline(153);
                  continue label56;
               }

               PyObject[] var11 = Py.unpackSequence(var9, 2);
               var6 = var11[0];
               var1.setlocal(11, var6);
               var6 = null;
               var6 = var11[1];
               var1.setlocal(12, var6);
               var6 = null;
               var1.setline(124);
               var5 = var1.getlocal(0).__getattr__("grammar").__getattr__("labels").__getitem__(var1.getlocal(11));
               PyObject[] var10 = Py.unpackSequence(var5, 2);
               PyObject var7 = var10[0];
               var1.setlocal(13, var7);
               var7 = null;
               var7 = var10[1];
               var1.setlocal(14, var7);
               var7 = null;
               var5 = null;
               var1.setline(125);
               var5 = var1.getlocal(4);
               var10000 = var5._eq(var1.getlocal(11));
               var5 = null;
               PyObject var8;
               PyObject[] var12;
               if (var10000.__nonzero__()) {
                  var1.setline(127);
                  if (var1.getglobal("__debug__").__nonzero__()) {
                     var5 = var1.getlocal(13);
                     var10000 = var5._lt(Py.newInteger(256));
                     var5 = null;
                     if (!var10000.__nonzero__()) {
                        var10000 = Py.None;
                        throw Py.makeException(var1.getglobal("AssertionError"), var10000);
                     }
                  }

                  var1.setline(129);
                  var1.getlocal(0).__getattr__("shift").__call__(var2, var1.getlocal(1), var1.getlocal(2), var1.getlocal(12), var1.getlocal(3));
                  var1.setline(131);
                  var5 = var1.getlocal(12);
                  var1.setlocal(6, var5);
                  var5 = null;

                  while(true) {
                     var1.setline(132);
                     var6 = var1.getlocal(8).__getitem__(var1.getlocal(6));
                     var10000 = var6._eq(new PyList(new PyObject[]{new PyTuple(new PyObject[]{Py.newInteger(0), var1.getlocal(6)})}));
                     var6 = null;
                     if (!var10000.__nonzero__()) {
                        var1.setline(140);
                        var5 = var1.getglobal("False");
                        var1.f_lasti = -1;
                        return var5;
                     }

                     var1.setline(133);
                     var1.getlocal(0).__getattr__("pop").__call__(var2);
                     var1.setline(134);
                     if (var1.getlocal(0).__getattr__("stack").__not__().__nonzero__()) {
                        var1.setline(136);
                        var5 = var1.getglobal("True");
                        var1.f_lasti = -1;
                        return var5;
                     }

                     var1.setline(137);
                     var6 = var1.getlocal(0).__getattr__("stack").__getitem__(Py.newInteger(-1));
                     var12 = Py.unpackSequence(var6, 3);
                     var8 = var12[0];
                     var1.setlocal(5, var8);
                     var8 = null;
                     var8 = var12[1];
                     var1.setlocal(6, var8);
                     var8 = null;
                     var8 = var12[2];
                     var1.setlocal(7, var8);
                     var8 = null;
                     var6 = null;
                     var1.setline(138);
                     var6 = var1.getlocal(5);
                     var12 = Py.unpackSequence(var6, 2);
                     var8 = var12[0];
                     var1.setlocal(8, var8);
                     var8 = null;
                     var8 = var12[1];
                     var1.setlocal(9, var8);
                     var8 = null;
                     var6 = null;
                  }
               }

               var1.setline(141);
               var6 = var1.getlocal(13);
               var10000 = var6._ge(Py.newInteger(256));
               var6 = null;
               if (var10000.__nonzero__()) {
                  var1.setline(143);
                  var6 = var1.getlocal(0).__getattr__("grammar").__getattr__("dfas").__getitem__(var1.getlocal(13));
                  var1.setlocal(15, var6);
                  var6 = null;
                  var1.setline(144);
                  var6 = var1.getlocal(15);
                  var12 = Py.unpackSequence(var6, 2);
                  var8 = var12[0];
                  var1.setlocal(16, var8);
                  var8 = null;
                  var8 = var12[1];
                  var1.setlocal(17, var8);
                  var8 = null;
                  var6 = null;
                  var1.setline(145);
                  var6 = var1.getlocal(4);
                  var10000 = var6._in(var1.getlocal(17));
                  var6 = null;
                  if (var10000.__nonzero__()) {
                     var1.setline(147);
                     var1.getlocal(0).__getattr__("push").__call__(var2, var1.getlocal(13), var1.getlocal(0).__getattr__("grammar").__getattr__("dfas").__getitem__(var1.getlocal(13)), var1.getlocal(12), var1.getlocal(3));
                     break;
                  }
               }
            }
         }
      } while(!var1.getlocal(0).__getattr__("stack").__not__().__nonzero__());

      var1.setline(155);
      throw Py.makeException(var1.getglobal("ParseError").__call__(var2, PyString.fromInterned("too much input"), var1.getlocal(1), var1.getlocal(2), var1.getlocal(3)));
   }

   public PyObject classify$8(PyFrame var1, ThreadState var2) {
      var1.setline(162);
      PyString.fromInterned("Turn a token into a label.  (Internal)");
      var1.setline(163);
      PyObject var3 = var1.getlocal(1);
      PyObject var10000 = var3._eq(var1.getglobal("token").__getattr__("NAME"));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(165);
         var1.getlocal(0).__getattr__("used_names").__getattr__("add").__call__(var2, var1.getlocal(2));
         var1.setline(167);
         var3 = var1.getlocal(0).__getattr__("grammar").__getattr__("keywords").__getattr__("get").__call__(var2, var1.getlocal(2));
         var1.setlocal(4, var3);
         var3 = null;
         var1.setline(168);
         var3 = var1.getlocal(4);
         var10000 = var3._isnot(var1.getglobal("None"));
         var3 = null;
         if (var10000.__nonzero__()) {
            var1.setline(169);
            var3 = var1.getlocal(4);
            var1.f_lasti = -1;
            return var3;
         }
      }

      var1.setline(170);
      PyObject var4 = var1.getlocal(0).__getattr__("grammar").__getattr__("tokens").__getattr__("get").__call__(var2, var1.getlocal(1));
      var1.setlocal(4, var4);
      var4 = null;
      var1.setline(171);
      var4 = var1.getlocal(4);
      var10000 = var4._is(var1.getglobal("None"));
      var4 = null;
      if (var10000.__nonzero__()) {
         var1.setline(172);
         throw Py.makeException(var1.getglobal("ParseError").__call__(var2, PyString.fromInterned("bad token"), var1.getlocal(1), var1.getlocal(2), var1.getlocal(3)));
      } else {
         var1.setline(173);
         var3 = var1.getlocal(4);
         var1.f_lasti = -1;
         return var3;
      }
   }

   public PyObject shift$9(PyFrame var1, ThreadState var2) {
      var1.setline(176);
      PyString.fromInterned("Shift a token.  (Internal)");
      var1.setline(177);
      PyObject var3 = var1.getlocal(0).__getattr__("stack").__getitem__(Py.newInteger(-1));
      PyObject[] var4 = Py.unpackSequence(var3, 3);
      PyObject var5 = var4[0];
      var1.setlocal(5, var5);
      var5 = null;
      var5 = var4[1];
      var1.setlocal(6, var5);
      var5 = null;
      var5 = var4[2];
      var1.setlocal(7, var5);
      var5 = null;
      var3 = null;
      var1.setline(178);
      PyTuple var6 = new PyTuple(new PyObject[]{var1.getlocal(1), var1.getlocal(2), var1.getlocal(4), var1.getglobal("None")});
      var1.setlocal(8, var6);
      var3 = null;
      var1.setline(179);
      var3 = var1.getlocal(0).__getattr__("convert").__call__(var2, var1.getlocal(0).__getattr__("grammar"), var1.getlocal(8));
      var1.setlocal(8, var3);
      var3 = null;
      var1.setline(180);
      var3 = var1.getlocal(8);
      PyObject var10000 = var3._isnot(var1.getglobal("None"));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(181);
         var1.getlocal(7).__getitem__(Py.newInteger(-1)).__getattr__("append").__call__(var2, var1.getlocal(8));
      }

      var1.setline(182);
      var6 = new PyTuple(new PyObject[]{var1.getlocal(5), var1.getlocal(3), var1.getlocal(7)});
      var1.getlocal(0).__getattr__("stack").__setitem__((PyObject)Py.newInteger(-1), var6);
      var3 = null;
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject push$10(PyFrame var1, ThreadState var2) {
      var1.setline(185);
      PyString.fromInterned("Push a nonterminal.  (Internal)");
      var1.setline(186);
      PyObject var3 = var1.getlocal(0).__getattr__("stack").__getitem__(Py.newInteger(-1));
      PyObject[] var4 = Py.unpackSequence(var3, 3);
      PyObject var5 = var4[0];
      var1.setlocal(5, var5);
      var5 = null;
      var5 = var4[1];
      var1.setlocal(6, var5);
      var5 = null;
      var5 = var4[2];
      var1.setlocal(7, var5);
      var5 = null;
      var3 = null;
      var1.setline(187);
      PyTuple var6 = new PyTuple(new PyObject[]{var1.getlocal(1), var1.getglobal("None"), var1.getlocal(4), new PyList(Py.EmptyObjects)});
      var1.setlocal(8, var6);
      var3 = null;
      var1.setline(188);
      var6 = new PyTuple(new PyObject[]{var1.getlocal(5), var1.getlocal(3), var1.getlocal(7)});
      var1.getlocal(0).__getattr__("stack").__setitem__((PyObject)Py.newInteger(-1), var6);
      var3 = null;
      var1.setline(189);
      var1.getlocal(0).__getattr__("stack").__getattr__("append").__call__((ThreadState)var2, (PyObject)(new PyTuple(new PyObject[]{var1.getlocal(2), Py.newInteger(0), var1.getlocal(8)})));
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject pop$11(PyFrame var1, ThreadState var2) {
      var1.setline(192);
      PyString.fromInterned("Pop a nonterminal.  (Internal)");
      var1.setline(193);
      PyObject var3 = var1.getlocal(0).__getattr__("stack").__getattr__("pop").__call__(var2);
      PyObject[] var4 = Py.unpackSequence(var3, 3);
      PyObject var5 = var4[0];
      var1.setlocal(1, var5);
      var5 = null;
      var5 = var4[1];
      var1.setlocal(2, var5);
      var5 = null;
      var5 = var4[2];
      var1.setlocal(3, var5);
      var5 = null;
      var3 = null;
      var1.setline(194);
      var3 = var1.getlocal(0).__getattr__("convert").__call__(var2, var1.getlocal(0).__getattr__("grammar"), var1.getlocal(3));
      var1.setlocal(4, var3);
      var3 = null;
      var1.setline(195);
      var3 = var1.getlocal(4);
      PyObject var10000 = var3._isnot(var1.getglobal("None"));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(196);
         if (var1.getlocal(0).__getattr__("stack").__nonzero__()) {
            var1.setline(197);
            var3 = var1.getlocal(0).__getattr__("stack").__getitem__(Py.newInteger(-1));
            var4 = Py.unpackSequence(var3, 3);
            var5 = var4[0];
            var1.setlocal(5, var5);
            var5 = null;
            var5 = var4[1];
            var1.setlocal(6, var5);
            var5 = null;
            var5 = var4[2];
            var1.setlocal(7, var5);
            var5 = null;
            var3 = null;
            var1.setline(198);
            var1.getlocal(7).__getitem__(Py.newInteger(-1)).__getattr__("append").__call__(var2, var1.getlocal(4));
         } else {
            var1.setline(200);
            var3 = var1.getlocal(4);
            var1.getlocal(0).__setattr__("rootnode", var3);
            var3 = null;
            var1.setline(201);
            var3 = var1.getlocal(0).__getattr__("used_names");
            var1.getlocal(0).__getattr__("rootnode").__setattr__("used_names", var3);
            var3 = null;
         }
      }

      var1.f_lasti = -1;
      return Py.None;
   }

   public parse$py(String var1) {
      self = this;
      String[] var2 = new String[0];
      f$0 = Py.newCode(0, var2, var1, "<module>", 0, false, false, self, 0, (String[])null, (String[])null, 0, 4096);
      var2 = new String[0];
      ParseError$1 = Py.newCode(0, var2, var1, "ParseError", 16, false, false, self, 1, (String[])null, (String[])null, 0, 4096);
      var2 = new String[]{"self", "msg", "type", "value", "context"};
      __init__$2 = Py.newCode(5, var2, var1, "__init__", 19, false, false, self, 2, (String[])null, (String[])null, 0, 4097);
      var2 = new String[0];
      Parser$3 = Py.newCode(0, var2, var1, "Parser", 27, false, false, self, 3, (String[])null, (String[])null, 0, 4096);
      var2 = new String[]{"self", "grammar", "convert"};
      __init__$4 = Py.newCode(3, var2, var1, "__init__", 57, false, false, self, 4, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"grammar", "node"};
      f$5 = Py.newCode(2, var2, var1, "<lambda>", 87, false, false, self, 5, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "start", "newnode", "stackentry"};
      setup$6 = Py.newCode(2, var2, var1, "setup", 89, false, false, self, 6, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "type", "value", "context", "ilabel", "dfa", "state", "node", "states", "first", "arcs", "i", "newstate", "t", "v", "itsdfa", "itsstates", "itsfirst"};
      addtoken$7 = Py.newCode(4, var2, var1, "addtoken", 113, false, false, self, 7, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "type", "value", "context", "ilabel"};
      classify$8 = Py.newCode(4, var2, var1, "classify", 161, false, false, self, 8, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "type", "value", "newstate", "context", "dfa", "state", "node", "newnode"};
      shift$9 = Py.newCode(5, var2, var1, "shift", 175, false, false, self, 9, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "type", "newdfa", "newstate", "context", "dfa", "state", "node", "newnode"};
      push$10 = Py.newCode(5, var2, var1, "push", 184, false, false, self, 10, (String[])null, (String[])null, 0, 4097);
      var2 = new String[]{"self", "popdfa", "popstate", "popnode", "newnode", "dfa", "state", "node"};
      pop$11 = Py.newCode(1, var2, var1, "pop", 191, false, false, self, 11, (String[])null, (String[])null, 0, 4097);
   }

   public PyCode getMain() {
      return f$0;
   }

   public static void main(String[] var0) {
      Py.runMain(CodeLoader.createSimpleBootstrap((new parse$py("lib2to3/pgen2/parse$py")).getMain()), var0);
   }

   public static CodeBootstrap getCodeBootstrap() {
      return PyRunnableBootstrap.getFilenameConstructorReflectionBootstrap(parse$py.class);
   }

   public PyObject call_function(int var1, PyFrame var2, ThreadState var3) {
      switch (var1) {
         case 0:
            return this.f$0(var2, var3);
         case 1:
            return this.ParseError$1(var2, var3);
         case 2:
            return this.__init__$2(var2, var3);
         case 3:
            return this.Parser$3(var2, var3);
         case 4:
            return this.__init__$4(var2, var3);
         case 5:
            return this.f$5(var2, var3);
         case 6:
            return this.setup$6(var2, var3);
         case 7:
            return this.addtoken$7(var2, var3);
         case 8:
            return this.classify$8(var2, var3);
         case 9:
            return this.shift$9(var2, var3);
         case 10:
            return this.push$10(var2, var3);
         case 11:
            return this.pop$11(var2, var3);
         default:
            return null;
      }
   }
}
