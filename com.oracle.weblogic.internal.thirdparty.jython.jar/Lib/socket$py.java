import org.python.compiler.APIVersion;
import org.python.compiler.Filename;
import org.python.compiler.MTime;
import org.python.core.CodeBootstrap;
import org.python.core.CodeLoader;
import org.python.core.Py;
import org.python.core.PyCode;
import org.python.core.PyFrame;
import org.python.core.PyFunction;
import org.python.core.PyFunctionTable;
import org.python.core.PyObject;
import org.python.core.PyRunnable;
import org.python.core.PyRunnableBootstrap;
import org.python.core.PyString;
import org.python.core.ThreadState;
import org.python.core.imp;

@APIVersion(37)
@MTime(1498849384000L)
@Filename("socket.py")
public class socket$py extends PyFunctionTable implements PyRunnable {
   static socket$py self;
   static final PyCode f$0;
   static final PyCode supports$1;

   public PyObject f$0(PyFrame var1, ThreadState var2) {
      var1.setline(3);
      String[] var3 = new String[]{"socket", "SocketType", "error", "herror", "gaierror", "timeout", "has_ipv6", "create_connection", "getdefaulttimeout", "setdefaulttimeout", "getfqdn", "gethostbyaddr", "gethostbyname", "gethostbyname_ex", "gethostname", "getprotobyname", "getservbyname", "getservbyport", "AF_UNSPEC", "AF_INET", "AF_INET6", "AI_PASSIVE", "AI_CANONNAME", "AI_NUMERICHOST", "AI_V4MAPPED", "AI_ALL", "AI_ADDRCONFIG", "AI_NUMERICSERV", "EAI_NONAME", "EAI_SERVICE", "EAI_ADDRFAMILY", "NI_NUMERICHOST", "NI_NUMERICSERV", "NI_NOFQDN", "NI_NAMEREQD", "NI_DGRAM", "NI_MAXSERV", "NI_IDN", "NI_IDN_ALLOW_UNASSIGNED", "NI_IDN_USE_STD3_ASCII_RULES", "NI_MAXHOST", "SHUT_RD", "SHUT_WR", "SHUT_RDWR", "SOCK_DGRAM", "SOCK_STREAM", "SOCK_RAW", "SOCK_RDM", "SOCK_SEQPACKET", "SOL_SOCKET", "SOL_TCP", "IPPROTO_AH", "IPPROTO_DSTOPTS", "IPPROTO_ESP", "IPPROTO_FRAGMENT", "IPPROTO_GGP", "IPPROTO_HOPOPTS", "IPPROTO_ICMP", "IPPROTO_ICMPV6", "IPPROTO_IDP", "IPPROTO_IGMP", "IPPROTO_IP", "IPPROTO_IPV4", "IPPROTO_IPV6", "IPPROTO_MAX", "IPPROTO_ND", "IPPROTO_NONE", "IPPROTO_PUP", "IPPROTO_RAW", "IPPROTO_ROUTING", "IPPROTO_TCP", "IPPROTO_UDP", "SO_BROADCAST", "SO_KEEPALIVE", "SO_LINGER", "SO_RCVBUF", "SO_REUSEADDR", "SO_SNDBUF", "SO_TIMEOUT", "TCP_NODELAY", "SO_ACCEPTCONN", "SO_ERROR", "SO_TYPE", "SO_OOBINLINE", "SO_DEBUG", "SO_DONTROUTE", "SO_RCVLOWAT", "SO_RCVTIMEO", "SO_REUSEPORT", "SO_SNDLOWAT", "SO_SNDTIMEO", "SO_USELOOPBACK", "INADDR_ANY", "INADDR_BROADCAST", "IN6ADDR_ANY_INIT", "_GLOBAL_DEFAULT_TIMEOUT", "is_ipv4_address", "is_ipv6_address", "is_ip_address", "getaddrinfo", "getnameinfo", "htons", "htonl", "ntohs", "ntohl", "inet_aton", "inet_ntoa", "inet_pton", "inet_ntop", "_fileobject", "_get_jsockaddr"};
      PyObject[] var5 = imp.importFrom("_socket", var3, var1, -1);
      PyObject var4 = var5[0];
      var1.setlocal("socket", var4);
      var4 = null;
      var4 = var5[1];
      var1.setlocal("SocketType", var4);
      var4 = null;
      var4 = var5[2];
      var1.setlocal("error", var4);
      var4 = null;
      var4 = var5[3];
      var1.setlocal("herror", var4);
      var4 = null;
      var4 = var5[4];
      var1.setlocal("gaierror", var4);
      var4 = null;
      var4 = var5[5];
      var1.setlocal("timeout", var4);
      var4 = null;
      var4 = var5[6];
      var1.setlocal("has_ipv6", var4);
      var4 = null;
      var4 = var5[7];
      var1.setlocal("create_connection", var4);
      var4 = null;
      var4 = var5[8];
      var1.setlocal("getdefaulttimeout", var4);
      var4 = null;
      var4 = var5[9];
      var1.setlocal("setdefaulttimeout", var4);
      var4 = null;
      var4 = var5[10];
      var1.setlocal("getfqdn", var4);
      var4 = null;
      var4 = var5[11];
      var1.setlocal("gethostbyaddr", var4);
      var4 = null;
      var4 = var5[12];
      var1.setlocal("gethostbyname", var4);
      var4 = null;
      var4 = var5[13];
      var1.setlocal("gethostbyname_ex", var4);
      var4 = null;
      var4 = var5[14];
      var1.setlocal("gethostname", var4);
      var4 = null;
      var4 = var5[15];
      var1.setlocal("getprotobyname", var4);
      var4 = null;
      var4 = var5[16];
      var1.setlocal("getservbyname", var4);
      var4 = null;
      var4 = var5[17];
      var1.setlocal("getservbyport", var4);
      var4 = null;
      var4 = var5[18];
      var1.setlocal("AF_UNSPEC", var4);
      var4 = null;
      var4 = var5[19];
      var1.setlocal("AF_INET", var4);
      var4 = null;
      var4 = var5[20];
      var1.setlocal("AF_INET6", var4);
      var4 = null;
      var4 = var5[21];
      var1.setlocal("AI_PASSIVE", var4);
      var4 = null;
      var4 = var5[22];
      var1.setlocal("AI_CANONNAME", var4);
      var4 = null;
      var4 = var5[23];
      var1.setlocal("AI_NUMERICHOST", var4);
      var4 = null;
      var4 = var5[24];
      var1.setlocal("AI_V4MAPPED", var4);
      var4 = null;
      var4 = var5[25];
      var1.setlocal("AI_ALL", var4);
      var4 = null;
      var4 = var5[26];
      var1.setlocal("AI_ADDRCONFIG", var4);
      var4 = null;
      var4 = var5[27];
      var1.setlocal("AI_NUMERICSERV", var4);
      var4 = null;
      var4 = var5[28];
      var1.setlocal("EAI_NONAME", var4);
      var4 = null;
      var4 = var5[29];
      var1.setlocal("EAI_SERVICE", var4);
      var4 = null;
      var4 = var5[30];
      var1.setlocal("EAI_ADDRFAMILY", var4);
      var4 = null;
      var4 = var5[31];
      var1.setlocal("NI_NUMERICHOST", var4);
      var4 = null;
      var4 = var5[32];
      var1.setlocal("NI_NUMERICSERV", var4);
      var4 = null;
      var4 = var5[33];
      var1.setlocal("NI_NOFQDN", var4);
      var4 = null;
      var4 = var5[34];
      var1.setlocal("NI_NAMEREQD", var4);
      var4 = null;
      var4 = var5[35];
      var1.setlocal("NI_DGRAM", var4);
      var4 = null;
      var4 = var5[36];
      var1.setlocal("NI_MAXSERV", var4);
      var4 = null;
      var4 = var5[37];
      var1.setlocal("NI_IDN", var4);
      var4 = null;
      var4 = var5[38];
      var1.setlocal("NI_IDN_ALLOW_UNASSIGNED", var4);
      var4 = null;
      var4 = var5[39];
      var1.setlocal("NI_IDN_USE_STD3_ASCII_RULES", var4);
      var4 = null;
      var4 = var5[40];
      var1.setlocal("NI_MAXHOST", var4);
      var4 = null;
      var4 = var5[41];
      var1.setlocal("SHUT_RD", var4);
      var4 = null;
      var4 = var5[42];
      var1.setlocal("SHUT_WR", var4);
      var4 = null;
      var4 = var5[43];
      var1.setlocal("SHUT_RDWR", var4);
      var4 = null;
      var4 = var5[44];
      var1.setlocal("SOCK_DGRAM", var4);
      var4 = null;
      var4 = var5[45];
      var1.setlocal("SOCK_STREAM", var4);
      var4 = null;
      var4 = var5[46];
      var1.setlocal("SOCK_RAW", var4);
      var4 = null;
      var4 = var5[47];
      var1.setlocal("SOCK_RDM", var4);
      var4 = null;
      var4 = var5[48];
      var1.setlocal("SOCK_SEQPACKET", var4);
      var4 = null;
      var4 = var5[49];
      var1.setlocal("SOL_SOCKET", var4);
      var4 = null;
      var4 = var5[50];
      var1.setlocal("SOL_TCP", var4);
      var4 = null;
      var4 = var5[51];
      var1.setlocal("IPPROTO_AH", var4);
      var4 = null;
      var4 = var5[52];
      var1.setlocal("IPPROTO_DSTOPTS", var4);
      var4 = null;
      var4 = var5[53];
      var1.setlocal("IPPROTO_ESP", var4);
      var4 = null;
      var4 = var5[54];
      var1.setlocal("IPPROTO_FRAGMENT", var4);
      var4 = null;
      var4 = var5[55];
      var1.setlocal("IPPROTO_GGP", var4);
      var4 = null;
      var4 = var5[56];
      var1.setlocal("IPPROTO_HOPOPTS", var4);
      var4 = null;
      var4 = var5[57];
      var1.setlocal("IPPROTO_ICMP", var4);
      var4 = null;
      var4 = var5[58];
      var1.setlocal("IPPROTO_ICMPV6", var4);
      var4 = null;
      var4 = var5[59];
      var1.setlocal("IPPROTO_IDP", var4);
      var4 = null;
      var4 = var5[60];
      var1.setlocal("IPPROTO_IGMP", var4);
      var4 = null;
      var4 = var5[61];
      var1.setlocal("IPPROTO_IP", var4);
      var4 = null;
      var4 = var5[62];
      var1.setlocal("IPPROTO_IPV4", var4);
      var4 = null;
      var4 = var5[63];
      var1.setlocal("IPPROTO_IPV6", var4);
      var4 = null;
      var4 = var5[64];
      var1.setlocal("IPPROTO_MAX", var4);
      var4 = null;
      var4 = var5[65];
      var1.setlocal("IPPROTO_ND", var4);
      var4 = null;
      var4 = var5[66];
      var1.setlocal("IPPROTO_NONE", var4);
      var4 = null;
      var4 = var5[67];
      var1.setlocal("IPPROTO_PUP", var4);
      var4 = null;
      var4 = var5[68];
      var1.setlocal("IPPROTO_RAW", var4);
      var4 = null;
      var4 = var5[69];
      var1.setlocal("IPPROTO_ROUTING", var4);
      var4 = null;
      var4 = var5[70];
      var1.setlocal("IPPROTO_TCP", var4);
      var4 = null;
      var4 = var5[71];
      var1.setlocal("IPPROTO_UDP", var4);
      var4 = null;
      var4 = var5[72];
      var1.setlocal("SO_BROADCAST", var4);
      var4 = null;
      var4 = var5[73];
      var1.setlocal("SO_KEEPALIVE", var4);
      var4 = null;
      var4 = var5[74];
      var1.setlocal("SO_LINGER", var4);
      var4 = null;
      var4 = var5[75];
      var1.setlocal("SO_RCVBUF", var4);
      var4 = null;
      var4 = var5[76];
      var1.setlocal("SO_REUSEADDR", var4);
      var4 = null;
      var4 = var5[77];
      var1.setlocal("SO_SNDBUF", var4);
      var4 = null;
      var4 = var5[78];
      var1.setlocal("SO_TIMEOUT", var4);
      var4 = null;
      var4 = var5[79];
      var1.setlocal("TCP_NODELAY", var4);
      var4 = null;
      var4 = var5[80];
      var1.setlocal("SO_ACCEPTCONN", var4);
      var4 = null;
      var4 = var5[81];
      var1.setlocal("SO_ERROR", var4);
      var4 = null;
      var4 = var5[82];
      var1.setlocal("SO_TYPE", var4);
      var4 = null;
      var4 = var5[83];
      var1.setlocal("SO_OOBINLINE", var4);
      var4 = null;
      var4 = var5[84];
      var1.setlocal("SO_DEBUG", var4);
      var4 = null;
      var4 = var5[85];
      var1.setlocal("SO_DONTROUTE", var4);
      var4 = null;
      var4 = var5[86];
      var1.setlocal("SO_RCVLOWAT", var4);
      var4 = null;
      var4 = var5[87];
      var1.setlocal("SO_RCVTIMEO", var4);
      var4 = null;
      var4 = var5[88];
      var1.setlocal("SO_REUSEPORT", var4);
      var4 = null;
      var4 = var5[89];
      var1.setlocal("SO_SNDLOWAT", var4);
      var4 = null;
      var4 = var5[90];
      var1.setlocal("SO_SNDTIMEO", var4);
      var4 = null;
      var4 = var5[91];
      var1.setlocal("SO_USELOOPBACK", var4);
      var4 = null;
      var4 = var5[92];
      var1.setlocal("INADDR_ANY", var4);
      var4 = null;
      var4 = var5[93];
      var1.setlocal("INADDR_BROADCAST", var4);
      var4 = null;
      var4 = var5[94];
      var1.setlocal("IN6ADDR_ANY_INIT", var4);
      var4 = null;
      var4 = var5[95];
      var1.setlocal("_GLOBAL_DEFAULT_TIMEOUT", var4);
      var4 = null;
      var4 = var5[96];
      var1.setlocal("is_ipv4_address", var4);
      var4 = null;
      var4 = var5[97];
      var1.setlocal("is_ipv6_address", var4);
      var4 = null;
      var4 = var5[98];
      var1.setlocal("is_ip_address", var4);
      var4 = null;
      var4 = var5[99];
      var1.setlocal("getaddrinfo", var4);
      var4 = null;
      var4 = var5[100];
      var1.setlocal("getnameinfo", var4);
      var4 = null;
      var4 = var5[101];
      var1.setlocal("htons", var4);
      var4 = null;
      var4 = var5[102];
      var1.setlocal("htonl", var4);
      var4 = null;
      var4 = var5[103];
      var1.setlocal("ntohs", var4);
      var4 = null;
      var4 = var5[104];
      var1.setlocal("ntohl", var4);
      var4 = null;
      var4 = var5[105];
      var1.setlocal("inet_aton", var4);
      var4 = null;
      var4 = var5[106];
      var1.setlocal("inet_ntoa", var4);
      var4 = null;
      var4 = var5[107];
      var1.setlocal("inet_pton", var4);
      var4 = null;
      var4 = var5[108];
      var1.setlocal("inet_ntop", var4);
      var4 = null;
      var4 = var5[109];
      var1.setlocal("_fileobject", var4);
      var4 = null;
      var4 = var5[110];
      var1.setlocal("_get_jsockaddr", var4);
      var4 = null;
      var1.setline(132);
      var5 = Py.EmptyObjects;
      PyFunction var6 = new PyFunction(var1.f_globals, var5, supports$1, (PyObject)null);
      var1.setlocal("supports", var6);
      var3 = null;
      var1.f_lasti = -1;
      return Py.None;
   }

   public PyObject supports$1(PyFrame var1, ThreadState var2) {
      var1.setline(137);
      PyObject var3 = var1.getlocal(0);
      PyObject var10000 = var3._eq(PyString.fromInterned("idna"));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(138);
         var3 = var1.getglobal("True");
         var1.f_lasti = -1;
         return var3;
      } else {
         var1.setline(139);
         throw Py.makeException(var1.getglobal("KeyError").__call__((ThreadState)var2, (PyObject)PyString.fromInterned("Unknown feature"), (PyObject)var1.getlocal(0)));
      }
   }

   public socket$py(String var1) {
      self = this;
      String[] var2 = new String[0];
      f$0 = Py.newCode(0, var2, var1, "<module>", 0, false, false, self, 0, (String[])null, (String[])null, 0, 4096);
      var2 = new String[]{"feature"};
      supports$1 = Py.newCode(1, var2, var1, "supports", 132, false, false, self, 1, (String[])null, (String[])null, 0, 4097);
   }

   public PyCode getMain() {
      return f$0;
   }

   public static void main(String[] var0) {
      Py.runMain(CodeLoader.createSimpleBootstrap((new socket$py("socket$py")).getMain()), var0);
   }

   public static CodeBootstrap getCodeBootstrap() {
      return PyRunnableBootstrap.getFilenameConstructorReflectionBootstrap(socket$py.class);
   }

   public PyObject call_function(int var1, PyFrame var2, ThreadState var3) {
      switch (var1) {
         case 0:
            return this.f$0(var2, var3);
         case 1:
            return this.supports$1(var2, var3);
         default:
            return null;
      }
   }
}
