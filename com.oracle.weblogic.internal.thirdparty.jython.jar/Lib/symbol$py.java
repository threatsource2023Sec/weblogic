import org.python.compiler.APIVersion;
import org.python.compiler.Filename;
import org.python.compiler.MTime;
import org.python.core.CodeBootstrap;
import org.python.core.CodeLoader;
import org.python.core.Py;
import org.python.core.PyCode;
import org.python.core.PyDictionary;
import org.python.core.PyFrame;
import org.python.core.PyFunction;
import org.python.core.PyFunctionTable;
import org.python.core.PyInteger;
import org.python.core.PyList;
import org.python.core.PyObject;
import org.python.core.PyRunnable;
import org.python.core.PyRunnableBootstrap;
import org.python.core.PyString;
import org.python.core.ThreadState;
import org.python.core.imp;

@APIVersion(37)
@MTime(1498849383000L)
@Filename("symbol.py")
public class symbol$py extends PyFunctionTable implements PyRunnable {
   static symbol$py self;
   static final PyCode f$0;
   static final PyCode main$1;

   public PyObject f$0(PyFrame var1, ThreadState var2) {
      var1.setglobal("__doc__", PyString.fromInterned("Non-terminal symbols of Python grammar (from \"graminit.h\")."));
      var1.setline(3);
      PyString.fromInterned("Non-terminal symbols of Python grammar (from \"graminit.h\").");
      var1.setline(13);
      PyInteger var3 = Py.newInteger(256);
      var1.setlocal("single_input", var3);
      var3 = null;
      var1.setline(14);
      var3 = Py.newInteger(257);
      var1.setlocal("file_input", var3);
      var3 = null;
      var1.setline(15);
      var3 = Py.newInteger(258);
      var1.setlocal("eval_input", var3);
      var3 = null;
      var1.setline(16);
      var3 = Py.newInteger(259);
      var1.setlocal("decorator", var3);
      var3 = null;
      var1.setline(17);
      var3 = Py.newInteger(260);
      var1.setlocal("decorators", var3);
      var3 = null;
      var1.setline(18);
      var3 = Py.newInteger(261);
      var1.setlocal("decorated", var3);
      var3 = null;
      var1.setline(19);
      var3 = Py.newInteger(262);
      var1.setlocal("funcdef", var3);
      var3 = null;
      var1.setline(20);
      var3 = Py.newInteger(263);
      var1.setlocal("parameters", var3);
      var3 = null;
      var1.setline(21);
      var3 = Py.newInteger(264);
      var1.setlocal("varargslist", var3);
      var3 = null;
      var1.setline(22);
      var3 = Py.newInteger(265);
      var1.setlocal("fpdef", var3);
      var3 = null;
      var1.setline(23);
      var3 = Py.newInteger(266);
      var1.setlocal("fplist", var3);
      var3 = null;
      var1.setline(24);
      var3 = Py.newInteger(267);
      var1.setlocal("stmt", var3);
      var3 = null;
      var1.setline(25);
      var3 = Py.newInteger(268);
      var1.setlocal("simple_stmt", var3);
      var3 = null;
      var1.setline(26);
      var3 = Py.newInteger(269);
      var1.setlocal("small_stmt", var3);
      var3 = null;
      var1.setline(27);
      var3 = Py.newInteger(270);
      var1.setlocal("expr_stmt", var3);
      var3 = null;
      var1.setline(28);
      var3 = Py.newInteger(271);
      var1.setlocal("augassign", var3);
      var3 = null;
      var1.setline(29);
      var3 = Py.newInteger(272);
      var1.setlocal("print_stmt", var3);
      var3 = null;
      var1.setline(30);
      var3 = Py.newInteger(273);
      var1.setlocal("del_stmt", var3);
      var3 = null;
      var1.setline(31);
      var3 = Py.newInteger(274);
      var1.setlocal("pass_stmt", var3);
      var3 = null;
      var1.setline(32);
      var3 = Py.newInteger(275);
      var1.setlocal("flow_stmt", var3);
      var3 = null;
      var1.setline(33);
      var3 = Py.newInteger(276);
      var1.setlocal("break_stmt", var3);
      var3 = null;
      var1.setline(34);
      var3 = Py.newInteger(277);
      var1.setlocal("continue_stmt", var3);
      var3 = null;
      var1.setline(35);
      var3 = Py.newInteger(278);
      var1.setlocal("return_stmt", var3);
      var3 = null;
      var1.setline(36);
      var3 = Py.newInteger(279);
      var1.setlocal("yield_stmt", var3);
      var3 = null;
      var1.setline(37);
      var3 = Py.newInteger(280);
      var1.setlocal("raise_stmt", var3);
      var3 = null;
      var1.setline(38);
      var3 = Py.newInteger(281);
      var1.setlocal("import_stmt", var3);
      var3 = null;
      var1.setline(39);
      var3 = Py.newInteger(282);
      var1.setlocal("import_name", var3);
      var3 = null;
      var1.setline(40);
      var3 = Py.newInteger(283);
      var1.setlocal("import_from", var3);
      var3 = null;
      var1.setline(41);
      var3 = Py.newInteger(284);
      var1.setlocal("import_as_name", var3);
      var3 = null;
      var1.setline(42);
      var3 = Py.newInteger(285);
      var1.setlocal("dotted_as_name", var3);
      var3 = null;
      var1.setline(43);
      var3 = Py.newInteger(286);
      var1.setlocal("import_as_names", var3);
      var3 = null;
      var1.setline(44);
      var3 = Py.newInteger(287);
      var1.setlocal("dotted_as_names", var3);
      var3 = null;
      var1.setline(45);
      var3 = Py.newInteger(288);
      var1.setlocal("dotted_name", var3);
      var3 = null;
      var1.setline(46);
      var3 = Py.newInteger(289);
      var1.setlocal("global_stmt", var3);
      var3 = null;
      var1.setline(47);
      var3 = Py.newInteger(290);
      var1.setlocal("exec_stmt", var3);
      var3 = null;
      var1.setline(48);
      var3 = Py.newInteger(291);
      var1.setlocal("assert_stmt", var3);
      var3 = null;
      var1.setline(49);
      var3 = Py.newInteger(292);
      var1.setlocal("compound_stmt", var3);
      var3 = null;
      var1.setline(50);
      var3 = Py.newInteger(293);
      var1.setlocal("if_stmt", var3);
      var3 = null;
      var1.setline(51);
      var3 = Py.newInteger(294);
      var1.setlocal("while_stmt", var3);
      var3 = null;
      var1.setline(52);
      var3 = Py.newInteger(295);
      var1.setlocal("for_stmt", var3);
      var3 = null;
      var1.setline(53);
      var3 = Py.newInteger(296);
      var1.setlocal("try_stmt", var3);
      var3 = null;
      var1.setline(54);
      var3 = Py.newInteger(297);
      var1.setlocal("with_stmt", var3);
      var3 = null;
      var1.setline(55);
      var3 = Py.newInteger(298);
      var1.setlocal("with_item", var3);
      var3 = null;
      var1.setline(56);
      var3 = Py.newInteger(299);
      var1.setlocal("except_clause", var3);
      var3 = null;
      var1.setline(57);
      var3 = Py.newInteger(300);
      var1.setlocal("suite", var3);
      var3 = null;
      var1.setline(58);
      var3 = Py.newInteger(301);
      var1.setlocal("testlist_safe", var3);
      var3 = null;
      var1.setline(59);
      var3 = Py.newInteger(302);
      var1.setlocal("old_test", var3);
      var3 = null;
      var1.setline(60);
      var3 = Py.newInteger(303);
      var1.setlocal("old_lambdef", var3);
      var3 = null;
      var1.setline(61);
      var3 = Py.newInteger(304);
      var1.setlocal("test", var3);
      var3 = null;
      var1.setline(62);
      var3 = Py.newInteger(305);
      var1.setlocal("or_test", var3);
      var3 = null;
      var1.setline(63);
      var3 = Py.newInteger(306);
      var1.setlocal("and_test", var3);
      var3 = null;
      var1.setline(64);
      var3 = Py.newInteger(307);
      var1.setlocal("not_test", var3);
      var3 = null;
      var1.setline(65);
      var3 = Py.newInteger(308);
      var1.setlocal("comparison", var3);
      var3 = null;
      var1.setline(66);
      var3 = Py.newInteger(309);
      var1.setlocal("comp_op", var3);
      var3 = null;
      var1.setline(67);
      var3 = Py.newInteger(310);
      var1.setlocal("expr", var3);
      var3 = null;
      var1.setline(68);
      var3 = Py.newInteger(311);
      var1.setlocal("xor_expr", var3);
      var3 = null;
      var1.setline(69);
      var3 = Py.newInteger(312);
      var1.setlocal("and_expr", var3);
      var3 = null;
      var1.setline(70);
      var3 = Py.newInteger(313);
      var1.setlocal("shift_expr", var3);
      var3 = null;
      var1.setline(71);
      var3 = Py.newInteger(314);
      var1.setlocal("arith_expr", var3);
      var3 = null;
      var1.setline(72);
      var3 = Py.newInteger(315);
      var1.setlocal("term", var3);
      var3 = null;
      var1.setline(73);
      var3 = Py.newInteger(316);
      var1.setlocal("factor", var3);
      var3 = null;
      var1.setline(74);
      var3 = Py.newInteger(317);
      var1.setlocal("power", var3);
      var3 = null;
      var1.setline(75);
      var3 = Py.newInteger(318);
      var1.setlocal("atom", var3);
      var3 = null;
      var1.setline(76);
      var3 = Py.newInteger(319);
      var1.setlocal("listmaker", var3);
      var3 = null;
      var1.setline(77);
      var3 = Py.newInteger(320);
      var1.setlocal("testlist_comp", var3);
      var3 = null;
      var1.setline(78);
      var3 = Py.newInteger(321);
      var1.setlocal("lambdef", var3);
      var3 = null;
      var1.setline(79);
      var3 = Py.newInteger(322);
      var1.setlocal("trailer", var3);
      var3 = null;
      var1.setline(80);
      var3 = Py.newInteger(323);
      var1.setlocal("subscriptlist", var3);
      var3 = null;
      var1.setline(81);
      var3 = Py.newInteger(324);
      var1.setlocal("subscript", var3);
      var3 = null;
      var1.setline(82);
      var3 = Py.newInteger(325);
      var1.setlocal("sliceop", var3);
      var3 = null;
      var1.setline(83);
      var3 = Py.newInteger(326);
      var1.setlocal("exprlist", var3);
      var3 = null;
      var1.setline(84);
      var3 = Py.newInteger(327);
      var1.setlocal("testlist", var3);
      var3 = null;
      var1.setline(85);
      var3 = Py.newInteger(328);
      var1.setlocal("dictorsetmaker", var3);
      var3 = null;
      var1.setline(86);
      var3 = Py.newInteger(329);
      var1.setlocal("classdef", var3);
      var3 = null;
      var1.setline(87);
      var3 = Py.newInteger(330);
      var1.setlocal("arglist", var3);
      var3 = null;
      var1.setline(88);
      var3 = Py.newInteger(331);
      var1.setlocal("argument", var3);
      var3 = null;
      var1.setline(89);
      var3 = Py.newInteger(332);
      var1.setlocal("list_iter", var3);
      var3 = null;
      var1.setline(90);
      var3 = Py.newInteger(333);
      var1.setlocal("list_for", var3);
      var3 = null;
      var1.setline(91);
      var3 = Py.newInteger(334);
      var1.setlocal("list_if", var3);
      var3 = null;
      var1.setline(92);
      var3 = Py.newInteger(335);
      var1.setlocal("comp_iter", var3);
      var3 = null;
      var1.setline(93);
      var3 = Py.newInteger(336);
      var1.setlocal("comp_for", var3);
      var3 = null;
      var1.setline(94);
      var3 = Py.newInteger(337);
      var1.setlocal("comp_if", var3);
      var3 = null;
      var1.setline(95);
      var3 = Py.newInteger(338);
      var1.setlocal("testlist1", var3);
      var3 = null;
      var1.setline(96);
      var3 = Py.newInteger(339);
      var1.setlocal("encoding_decl", var3);
      var3 = null;
      var1.setline(97);
      var3 = Py.newInteger(340);
      var1.setlocal("yield_expr", var3);
      var3 = null;
      var1.setline(100);
      PyDictionary var8 = new PyDictionary(Py.EmptyObjects);
      var1.setlocal("sym_name", var8);
      var3 = null;
      var1.setline(101);
      PyObject var9 = var1.getname("globals").__call__(var2).__getattr__("items").__call__(var2).__iter__();

      while(true) {
         var1.setline(101);
         PyObject var4 = var9.__iternext__();
         PyObject var10000;
         if (var4 == null) {
            var1.setline(106);
            PyObject[] var10 = Py.EmptyObjects;
            PyFunction var11 = new PyFunction(var1.f_globals, var10, main$1, (PyObject)null);
            var1.setlocal("main", var11);
            var3 = null;
            var1.setline(113);
            var9 = var1.getname("__name__");
            var10000 = var9._eq(PyString.fromInterned("__main__"));
            var3 = null;
            if (var10000.__nonzero__()) {
               var1.setline(114);
               var1.getname("main").__call__(var2);
            }

            var1.f_lasti = -1;
            return Py.None;
         }

         PyObject[] var5 = Py.unpackSequence(var4, 2);
         PyObject var6 = var5[0];
         var1.setlocal("_name", var6);
         var6 = null;
         var6 = var5[1];
         var1.setlocal("_value", var6);
         var6 = null;
         var1.setline(102);
         PyObject var7 = var1.getname("type").__call__(var2, var1.getname("_value"));
         var10000 = var7._is(var1.getname("type").__call__((ThreadState)var2, (PyObject)Py.newInteger(0)));
         var5 = null;
         if (var10000.__nonzero__()) {
            var1.setline(103);
            var7 = var1.getname("_name");
            var1.getname("sym_name").__setitem__(var1.getname("_value"), var7);
            var5 = null;
         }
      }
   }

   public PyObject main$1(PyFrame var1, ThreadState var2) {
      var1.setline(107);
      PyObject var3 = imp.importOne("sys", var1, -1);
      var1.setlocal(0, var3);
      var3 = null;
      var1.setline(108);
      var3 = imp.importOne("token", var1, -1);
      var1.setlocal(1, var3);
      var3 = null;
      var1.setline(109);
      var3 = var1.getglobal("len").__call__(var2, var1.getlocal(0).__getattr__("argv"));
      PyObject var10000 = var3._eq(Py.newInteger(1));
      var3 = null;
      if (var10000.__nonzero__()) {
         var1.setline(110);
         var3 = var1.getlocal(0).__getattr__("argv")._add(new PyList(new PyObject[]{PyString.fromInterned("Include/graminit.h"), PyString.fromInterned("Lib/symbol.py")}));
         var1.getlocal(0).__setattr__("argv", var3);
         var3 = null;
      }

      var1.setline(111);
      var1.getlocal(1).__getattr__("main").__call__(var2);
      var1.f_lasti = -1;
      return Py.None;
   }

   public symbol$py(String var1) {
      self = this;
      String[] var2 = new String[0];
      f$0 = Py.newCode(0, var2, var1, "<module>", 0, false, false, self, 0, (String[])null, (String[])null, 0, 4096);
      var2 = new String[]{"sys", "token"};
      main$1 = Py.newCode(0, var2, var1, "main", 106, false, false, self, 1, (String[])null, (String[])null, 0, 4097);
   }

   public PyCode getMain() {
      return f$0;
   }

   public static void main(String[] var0) {
      Py.runMain(CodeLoader.createSimpleBootstrap((new symbol$py("symbol$py")).getMain()), var0);
   }

   public static CodeBootstrap getCodeBootstrap() {
      return PyRunnableBootstrap.getFilenameConstructorReflectionBootstrap(symbol$py.class);
   }

   public PyObject call_function(int var1, PyFrame var2, ThreadState var3) {
      switch (var1) {
         case 0:
            return this.f$0(var2, var3);
         case 1:
            return this.main$1(var2, var3);
         default:
            return null;
      }
   }
}
