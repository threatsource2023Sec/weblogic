package kodo.jdbc.conf.descriptor;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class PersistenceUnitConfigurationBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(PersistenceUnitConfigurationBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("Name", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getName", "setName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", true);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AggregateListeners", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getAggregateListeners", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AutoClear", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getAutoClear", "setAutoClear");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AutoDetaches", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getAutoDetaches", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultBrokerFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultBrokerFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AbstractStoreBrokerFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getAbstractStoreBrokerFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClientBrokerFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getClientBrokerFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDBCBrokerFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJDBCBrokerFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomBrokerFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomBrokerFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultBrokerImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultBrokerImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoBroker", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoBroker", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomBrokerImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomBrokerImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultClassResolver", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultClassResolver", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomClassResolver", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomClassResolver", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultCompatibility", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultCompatibility", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Compatibility", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCompatibility", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomCompatibility", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomCompatibility", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2DriverName", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2DriverName", "setConnection2DriverName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2Password", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2Password", "setConnection2Password");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2PasswordEncrypted", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2PasswordEncrypted", "setConnection2PasswordEncrypted");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2Properties", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2Properties", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2URL", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2URL", "setConnection2URL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Connection2UserName", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnection2UserName", "setConnection2UserName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionDecorators", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionDecorators", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionDriverName", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionDriverName", "setConnectionDriverName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionFactory2Name", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionFactory2Name", "setConnectionFactory2Name");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionFactory2Properties", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionFactory2Properties", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionFactoryMode", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionFactoryMode", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionFactoryName", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionFactoryName", "setConnectionFactoryName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionFactoryProperties", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionFactoryProperties", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionPassword", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionPassword", "setConnectionPassword");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionPasswordEncrypted", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionPasswordEncrypted", "setConnectionPasswordEncrypted");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionProperties", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionProperties", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionRetainMode", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionRetainMode", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionURL", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionURL", "setConnectionURL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConnectionUserName", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConnectionUserName", "setConnectionUserName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DataCaches", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDataCaches", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultDataCacheManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultDataCacheManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoDataCacheManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoDataCacheManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DataCacheManagerImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDataCacheManagerImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomDataCacheManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomDataCacheManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DataCacheTimeout", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDataCacheTimeout", "setDataCacheTimeout");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("AccessDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getAccessDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DB2Dictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDB2Dictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DerbyDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDerbyDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EmpressDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getEmpressDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FoxProDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFoxProDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("HSQLDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getHSQLDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InformixDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getInformixDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDataStoreDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJDataStoreDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MySQLDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMySQLDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OracleDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getOracleDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PointbaseDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getPointbaseDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PostgresDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getPostgresDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SQLServerDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSQLServerDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SybaseDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSybaseDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DBDictionaryTypes", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDBDictionaryTypes", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DBDictionary", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDBDictionary", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultDetachState", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultDetachState", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DetachOptionsLoaded", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDetachOptionsLoaded", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DetachOptionsFetchGroups", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDetachOptionsFetchGroups", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DetachOptionsAll", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDetachOptionsAll", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomDetachState", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomDetachState", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultDriverDataSource", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultDriverDataSource", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoPoolingDataSource", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoPoolingDataSource", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SimpleDriverDataSource", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSimpleDriverDataSource", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomDriverDataSource", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomDriverDataSource", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DynamicDataStructs", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDynamicDataStructs", "setDynamicDataStructs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EagerFetchMode", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getEagerFetchMode", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FetchBatchSize", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFetchBatchSize", "setFetchBatchSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("FetchDirection", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFetchDirection", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FetchGroups", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFetchGroups", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FilterListeners", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFilterListeners", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FlushBeforeQueries", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFlushBeforeQueries", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IgnoreChanges", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getIgnoreChanges", "setIgnoreChanges");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InverseManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getInverseManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDBCListeners", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJDBCListeners", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PessimisticLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getPessimisticLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NoneLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNoneLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SingleJVMExclusiveLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSingleJVMExclusiveLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("VersionLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getVersionLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomLockManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomLockManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LockTimeout", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLockTimeout", "setLockTimeout");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("CommonsLogFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCommonsLogFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Log4JLogFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLog4JLogFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LogFactoryImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLogFactoryImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NoneLogFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNoneLogFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomLog", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomLog", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LRSSize", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLRSSize", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Mapping", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMapping", "setMapping");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultMappingDefaults", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultMappingDefaults", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DeprecatedJDOMappingDefaults", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDeprecatedJDOMappingDefaults", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MappingDefaultsImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMappingDefaultsImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistenceMappingDefaults", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getPersistenceMappingDefaults", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomMappingDefaults", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomMappingDefaults", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ExtensionDeprecatedJDOMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getExtensionDeprecatedJDOMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoPersistenceMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoPersistenceMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MappingFileDeprecatedJDOMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMappingFileDeprecatedJDOMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ORMFileJDORMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getORMFileJDORMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableDeprecatedJDOMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTableDeprecatedJDOMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableJDORMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTableJDORMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomMappingFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomMappingFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultMetaDataFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultMetaDataFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDOMetaDataFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJDOMetaDataFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DeprecatedJDOMetaDataFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDeprecatedJDOMetaDataFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoPersistenceMetaDataFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoPersistenceMetaDataFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomMetaDataFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomMetaDataFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultMetaDataRepository", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultMetaDataRepository", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoMappingRepository", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoMappingRepository", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomMetaDataRepository", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomMetaDataRepository", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Multithreaded", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMultithreaded", "setMultithreaded");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NontransactionalRead", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNontransactionalRead", "setNontransactionalRead");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NontransactionalWrite", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNontransactionalWrite", "setNontransactionalWrite");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Optimistic", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getOptimistic", "setOptimistic");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultOrphanedKeyAction", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultOrphanedKeyAction", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LogOrphanedKeyAction", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLogOrphanedKeyAction", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ExceptionOrphanedKeyAction", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getExceptionOrphanedKeyAction", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NoneOrphanedKeyAction", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNoneOrphanedKeyAction", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomOrphanedKeyAction", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomOrphanedKeyAction", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("HTTPTransport", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getHTTPTransport", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TCPTransport", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTCPTransport", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomPersistenceServer", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomPersistenceServer", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultProxyManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultProxyManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ProfilingProxyManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getProfilingProxyManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ProxyManagerImpl", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getProxyManagerImpl", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomProxyManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomProxyManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("QueryCaches", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getQueryCaches", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultQueryCompilationCache", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultQueryCompilationCache", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CacheMap", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCacheMap", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConcurrentHashMap", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConcurrentHashMap", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomQueryCompilationCache", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomQueryCompilationCache", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ReadLockLevel", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getReadLockLevel", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JMSRemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJMSRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SingleJVMRemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSingleJVMRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TCPRemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTCPRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClusterRemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getClusterRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomRemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RemoteCommitProviderTypes", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getRemoteCommitProviderTypes", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RemoteCommitProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getRemoteCommitProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RestoreState", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getRestoreState", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResultSetType", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getResultSetType", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RetainState", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getRetainState", "setRetainState");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RetryClassRegistration", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getRetryClassRegistration", "setRetryClassRegistration");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultSavepointManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultSavepointManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InMemorySavepointManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getInMemorySavepointManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDBC3SavepointManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJDBC3SavepointManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OracleSavepointManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getOracleSavepointManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomSavepointManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomSavepointManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Schema", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSchema", "setSchema");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultSchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultSchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DynamicSchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDynamicSchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FileSchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getFileSchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LazySchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLazySchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableSchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTableSchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomSchemaFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomSchemaFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Schemata", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSchemata", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClassTableJDBCSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getClassTableJDBCSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NativeJDBCSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNativeJDBCSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableJDBCSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTableJDBCSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TimeSeededSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTimeSeededSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ValueTableJDBCSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getValueTableJDBCSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomSeq", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomSeq", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultSQLFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultSQLFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("KodoSQLFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getKodoSQLFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomSQLFactory", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomSQLFactory", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SubclassFetchMode", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSubclassFetchMode", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SynchronizeMappings", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getSynchronizeMappings", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TransactionIsolation", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTransactionIsolation", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TransactionMode", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTransactionMode", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getDefaultUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConstraintUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getConstraintUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BatchingOperationOrderUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getBatchingOperationOrderUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OperationOrderUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getOperationOrderUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableLockUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTableLockUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CustomUpdateManager", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getCustomUpdateManager", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WriteLockLevel", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getWriteLockLevel", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StackExecutionContextNameProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getStackExecutionContextNameProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TransactionNameExecutionContextNameProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getTransactionNameExecutionContextNameProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UserObjectExecutionContextNameProvider", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getUserObjectExecutionContextNameProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NoneJMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNoneJMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LocalJMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLocalJMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("GUIJMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getGUIJMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JMX2JMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getJMX2JMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MX4J1JMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getMX4J1JMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WLS81JMX", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getWLS81JMX", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NoneProfiling", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getNoneProfiling", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LocalProfiling", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getLocalProfiling", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ExportProfiling", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getExportProfiling", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("GUIProfiling", Class.forName("kodo.jdbc.conf.descriptor.PersistenceUnitConfigurationBeanDConfig"), "getGUIProfiling", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for PersistenceUnitConfigurationBeanDConfigBeanInfo");
         }
      }
   }
}
