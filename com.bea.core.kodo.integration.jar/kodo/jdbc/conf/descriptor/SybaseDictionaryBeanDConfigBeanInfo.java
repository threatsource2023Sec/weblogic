package kodo.jdbc.conf.descriptor;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class SybaseDictionaryBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(SybaseDictionaryBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("BinaryTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getBinaryTypeName", "setBinaryTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClobTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getClobTypeName", "setClobTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConcatenateFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getConcatenateFunction", "setConcatenateFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseSetBytesForBlobs", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getUseSetBytesForBlobs", "setUseSetBytesForBlobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LongVarbinaryTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getLongVarbinaryTypeName", "setLongVarbinaryTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimLeadingFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getTrimLeadingFunction", "setTrimLeadingFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LongVarcharTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getLongVarcharTypeName", "setLongVarcharTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CrossJoinClause", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getCrossJoinClause", "setCrossJoinClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresConditionForCrossJoin", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getRequiresConditionForCrossJoin", "setRequiresConditionForCrossJoin");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsModOperator", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsModOperator", "setSupportsModOperator");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SchemaCase", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSchemaCase", "setSchemaCase");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxColumnNameLength", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getMaxColumnNameLength", "setMaxColumnNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxConstraintNameLength", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getMaxConstraintNameLength", "setMaxConstraintNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DoubleTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getDoubleTypeName", "setDoubleTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetStringForClobs", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getUseGetStringForClobs", "setUseGetStringForClobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullTableForGetColumns", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsNullTableForGetColumns", "setSupportsNullTableForGetColumns");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsAutoAssign", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsAutoAssign", "setSupportsAutoAssign");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AllowsAliasInBulkClause", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getAllowsAliasInBulkClause", "setAllowsAliasInBulkClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TimeTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getTimeTypeName", "setTimeTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ValidationSQL", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getValidationSQL", "setValidationSQL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RangePosition", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getRangePosition", "setRangePosition");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AutoAssignClause", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getAutoAssignClause", "setAutoAssignClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FloatTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getFloatTypeName", "setFloatTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetBytesForBlobs", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getUseGetBytesForBlobs", "setUseGetBytesForBlobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IntegerTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getIntegerTypeName", "setIntegerTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BlobTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getBlobTypeName", "setBlobTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ForUpdateClause", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getForUpdateClause", "setForUpdateClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseSetStringForClobs", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getUseSetStringForClobs", "setUseSetStringForClobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Platform", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getPlatform", "setPlatform");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IdentityColumnName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getIdentityColumnName", "setIdentityColumnName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BigintTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getBigintTypeName", "setBigintTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LastGeneratedKeyQuery", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getLastGeneratedKeyQuery", "setLastGeneratedKeyQuery");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsDeferredConstraints", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsDeferredConstraints", "setSupportsDeferredConstraints");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimTrailingFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getTrimTrailingFunction", "setTrimTrailingFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentTimestampFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getCurrentTimestampFunction", "setCurrentTimestampFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentTimeFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getCurrentTimeFunction", "setCurrentTimeFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CreateIdentityColumn", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getCreateIdentityColumn", "setCreateIdentityColumn");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxIndexNameLength", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getMaxIndexNameLength", "setMaxIndexNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxTableNameLength", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getMaxTableNameLength", "setMaxTableNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentDateFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getCurrentDateFunction", "setCurrentDateFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimBothFunction", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getTrimBothFunction", "setTrimBothFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TimestampTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getTimestampTypeName", "setTimestampTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DateTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getDateTypeName", "setDateTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BitTypeName", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getBitTypeName", "setBitTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSelectEndIndex", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsSelectEndIndex", "setSupportsSelectEndIndex");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithDistinctClause", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getSupportsLockingWithDistinctClause", "setSupportsLockingWithDistinctClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresAutoCommitForMetaData", Class.forName("kodo.jdbc.conf.descriptor.SybaseDictionaryBeanDConfig"), "getRequiresAutoCommitForMetaData", "setRequiresAutoCommitForMetaData");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for SybaseDictionaryBeanDConfigBeanInfo");
         }
      }
   }
}
