package kodo.jdbc.conf.descriptor;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class BuiltInDBDictionaryBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(BuiltInDBDictionaryBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("CharTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCharTypeName", "setCharTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OuterJoinClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getOuterJoinClause", "setOuterJoinClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BinaryTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBinaryTypeName", "setBinaryTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClobTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getClobTypeName", "setClobTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithDistinctClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithDistinctClause", "setSupportsLockingWithDistinctClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SimulateLocking", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSimulateLocking", "setSimulateLocking");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SystemTables", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSystemTables", "setSystemTables");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConcatenateFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getConcatenateFunction", "setConcatenateFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SubstringFunctionName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSubstringFunctionName", "setSubstringFunctionName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsQueryTimeout", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsQueryTimeout", "setSupportsQueryTimeout");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseSetBytesForBlobs", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseSetBytesForBlobs", "setUseSetBytesForBlobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxConstraintNameLength", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxConstraintNameLength", "setMaxConstraintNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SearchStringEscape", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSearchStringEscape", "setSearchStringEscape");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsCascadeUpdateAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsCascadeUpdateAction", "setSupportsCascadeUpdateAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StringLengthFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getStringLengthFunction", "setStringLengthFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LongVarbinaryTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getLongVarbinaryTypeName", "setLongVarbinaryTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsUniqueConstraints", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsUniqueConstraints", "setSupportsUniqueConstraints");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsRestrictDeleteAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsRestrictDeleteAction", "setSupportsRestrictDeleteAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimLeadingFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTrimLeadingFunction", "setTrimLeadingFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsDefaultDeleteAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsDefaultDeleteAction", "setSupportsDefaultDeleteAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NextSequenceQuery", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getNextSequenceQuery", "setNextSequenceQuery");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LongVarcharTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getLongVarcharTypeName", "setLongVarcharTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CrossJoinClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCrossJoinClause", "setCrossJoinClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxEmbeddedClobSize", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxEmbeddedClobSize", "setMaxEmbeddedClobSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DateTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDateTypeName", "setDateTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSchemaForGetTables", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSchemaForGetTables", "setSupportsSchemaForGetTables");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsAlterTableWithDropColumn", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsAlterTableWithDropColumn", "setSupportsAlterTableWithDropColumn");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentTimeFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCurrentTimeFunction", "setCurrentTimeFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresConditionForCrossJoin", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRequiresConditionForCrossJoin", "setRequiresConditionForCrossJoin");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RefTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRefTypeName", "setRefTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConcatenateDelimiter", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getConcatenateDelimiter", "setConcatenateDelimiter");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CatalogSeparator", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCatalogSeparator", "setCatalogSeparator");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsModOperator", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsModOperator", "setSupportsModOperator");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SchemaCase", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSchemaCase", "setSchemaCase");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JavaObjectTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getJavaObjectTypeName", "setJavaObjectTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DriverVendor", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDriverVendor", "setDriverVendor");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithMultipleTables", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithMultipleTables", "setSupportsLockingWithMultipleTables");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxColumnNameLength", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxColumnNameLength", "setMaxColumnNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DoubleTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDoubleTypeName", "setDoubleTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetStringForClobs", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseGetStringForClobs", "setUseGetStringForClobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DecimalTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDecimalTypeName", "setDecimalTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SmallintTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSmallintTypeName", "setSmallintTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DatePrecision", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDatePrecision", "setDatePrecision");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsAlterTableWithAddColumn", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsAlterTableWithAddColumn", "setSupportsAlterTableWithAddColumn");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BitTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBitTypeName", "setBitTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullTableForGetColumns", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullTableForGetColumns", "setSupportsNullTableForGetColumns");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ToUpperCaseFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getToUpperCaseFunction", "setToUpperCaseFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSelectEndIndex", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSelectEndIndex", "setSupportsSelectEndIndex");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsAutoAssign", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsAutoAssign", "setSupportsAutoAssign");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StoreLargeNumbersAsStrings", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getStoreLargeNumbersAsStrings", "setStoreLargeNumbersAsStrings");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ConstraintNameMode", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getConstraintNameMode", "setConstraintNameMode");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AllowsAliasInBulkClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getAllowsAliasInBulkClause", "setAllowsAliasInBulkClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSelectForUpdate", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSelectForUpdate", "setSupportsSelectForUpdate");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DistinctCountColumnSeparator", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDistinctCountColumnSeparator", "setDistinctCountColumnSeparator");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSubselect", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSubselect", "setSupportsSubselect");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TimeTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTimeTypeName", "setTimeTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AutoAssignTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getAutoAssignTypeName", "setAutoAssignTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetObjectForBlobs", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseGetObjectForBlobs", "setUseGetObjectForBlobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxAutoAssignNameLength", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxAutoAssignNameLength", "setMaxAutoAssignNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ValidationSQL", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getValidationSQL", "setValidationSQL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StructTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getStructTypeName", "setStructTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("VarcharTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getVarcharTypeName", "setVarcharTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RangePosition", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRangePosition", "setRangePosition");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsRestrictUpdateAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsRestrictUpdateAction", "setSupportsRestrictUpdateAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AutoAssignClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getAutoAssignClause", "setAutoAssignClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsMultipleNontransactionalResultSets", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsMultipleNontransactionalResultSets", "setSupportsMultipleNontransactionalResultSets");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BitLengthFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBitLengthFunction", "setBitLengthFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CreatePrimaryKeys", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCreatePrimaryKeys", "setCreatePrimaryKeys");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NullTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getNullTypeName", "setNullTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FloatTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getFloatTypeName", "setFloatTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetBytesForBlobs", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseGetBytesForBlobs", "setUseGetBytesForBlobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableTypes", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTableTypes", "setTableTypes");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NumericTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getNumericTypeName", "setNumericTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TableForUpdateClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTableForUpdateClause", "setTableForUpdateClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IntegerTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getIntegerTypeName", "setIntegerTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BlobTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBlobTypeName", "setBlobTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ForUpdateClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getForUpdateClause", "setForUpdateClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BooleanTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBooleanTypeName", "setBooleanTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseGetBestRowIdentifierForPrimaryKeys", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseGetBestRowIdentifierForPrimaryKeys", "setUseGetBestRowIdentifierForPrimaryKeys");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsForeignKeys", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsForeignKeys", "setSupportsForeignKeys");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DropTableSQL", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDropTableSQL", "setDropTableSQL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseSetStringForClobs", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseSetStringForClobs", "setUseSetStringForClobs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithOrderClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithOrderClause", "setSupportsLockingWithOrderClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Platform", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getPlatform", "setPlatform");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FixedSizeTypeNames", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getFixedSizeTypeNames", "setFixedSizeTypeNames");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StoreCharsAsNumbers", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getStoreCharsAsNumbers", "setStoreCharsAsNumbers");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxIndexesPerTable", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxIndexesPerTable", "setMaxIndexesPerTable");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresCastForComparisons", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRequiresCastForComparisons", "setRequiresCastForComparisons");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsHaving", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsHaving", "setSupportsHaving");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithOuterJoin", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithOuterJoin", "setSupportsLockingWithOuterJoin");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsCorrelatedSubselect", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsCorrelatedSubselect", "setSupportsCorrelatedSubselect");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullTableForGetImportedKeys", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullTableForGetImportedKeys", "setSupportsNullTableForGetImportedKeys");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("BigintTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getBigintTypeName", "setBigintTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LastGeneratedKeyQuery", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getLastGeneratedKeyQuery", "setLastGeneratedKeyQuery");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ReservedWords", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getReservedWords", "setReservedWords");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullUpdateAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullUpdateAction", "setSupportsNullUpdateAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UseSchemaName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getUseSchemaName", "setUseSchemaName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsDeferredConstraints", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsDeferredConstraints", "setSupportsDeferredConstraints");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RealTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRealTypeName", "setRealTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresAliasForSubselect", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRequiresAliasForSubselect", "setRequiresAliasForSubselect");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullTableForGetIndexInfo", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullTableForGetIndexInfo", "setSupportsNullTableForGetIndexInfo");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimTrailingFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTrimTrailingFunction", "setTrimTrailingFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithSelectRange", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithSelectRange", "setSupportsLockingWithSelectRange");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("StorageLimitationsFatal", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getStorageLimitationsFatal", "setStorageLimitationsFatal");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsLockingWithInnerJoin", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsLockingWithInnerJoin", "setSupportsLockingWithInnerJoin");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentTimestampFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCurrentTimestampFunction", "setCurrentTimestampFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CastFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCastFunction", "setCastFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OtherTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getOtherTypeName", "setOtherTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxIndexNameLength", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxIndexNameLength", "setMaxIndexNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DistinctTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getDistinctTypeName", "setDistinctTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CharacterColumnSize", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCharacterColumnSize", "setCharacterColumnSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("VarbinaryTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getVarbinaryTypeName", "setVarbinaryTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxTableNameLength", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxTableNameLength", "setMaxTableNameLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClosePoolSQL", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getClosePoolSQL", "setClosePoolSQL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CurrentDateFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getCurrentDateFunction", "setCurrentDateFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JoinSyntax", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getJoinSyntax", "setJoinSyntax");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxEmbeddedBlobSize", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getMaxEmbeddedBlobSize", "setMaxEmbeddedBlobSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrimBothFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTrimBothFunction", "setTrimBothFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSelectStartIndex", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSelectStartIndex", "setSupportsSelectStartIndex");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ToLowerCaseFunction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getToLowerCaseFunction", "setToLowerCaseFunction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ArrayTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getArrayTypeName", "setArrayTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InnerJoinClause", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getInnerJoinClause", "setInnerJoinClause");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsDefaultUpdateAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsDefaultUpdateAction", "setSupportsDefaultUpdateAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsSchemaForGetColumns", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsSchemaForGetColumns", "setSupportsSchemaForGetColumns");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TinyintTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTinyintTypeName", "setTinyintTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullTableForGetPrimaryKeys", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullTableForGetPrimaryKeys", "setSupportsNullTableForGetPrimaryKeys");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SystemSchemas", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSystemSchemas", "setSystemSchemas");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresCastForMathFunctions", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRequiresCastForMathFunctions", "setRequiresCastForMathFunctions");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsNullDeleteAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsNullDeleteAction", "setSupportsNullDeleteAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequiresAutoCommitForMetaData", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getRequiresAutoCommitForMetaData", "setRequiresAutoCommitForMetaData");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TimestampTypeName", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getTimestampTypeName", "setTimestampTypeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InitializationSQL", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getInitializationSQL", "setInitializationSQL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsCascadeDeleteAction", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsCascadeDeleteAction", "setSupportsCascadeDeleteAction");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SupportsTimestampNanos", Class.forName("kodo.jdbc.conf.descriptor.BuiltInDBDictionaryBeanDConfig"), "getSupportsTimestampNanos", "setSupportsTimestampNanos");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for BuiltInDBDictionaryBeanDConfigBeanInfo");
         }
      }
   }
}
