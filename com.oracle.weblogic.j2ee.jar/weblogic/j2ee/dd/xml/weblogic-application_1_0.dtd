

<!--
The root element of the WebLogic application deployment descriptor.
The WebLogic application deployment descriptor is named
weblogic-application.xml and must be located inside the META-INF
directory of an ear file.
-->
<!ELEMENT weblogic-application (
    ejb?, 
    xml?, 
    jdbc-connection-pool*, 
    security?, 
    application-param*)
>


<!--
The ejb element contains information that is specific to the EJB
modules that are part of a WebLogic application.  Currently, one can
use the ejb element to specify one or more application level caches
that can be used by the application's entity beans.

Used in: weblogic-application
-->
<!ELEMENT ejb (entity-cache*, start-mdbs-with-application?)>

<!--
The bytes element is used to specify the maximum size of an 
application level entity cache in bytes.  

Used in: max-cache-size 

Example:
   <bytes>15000000</bytes>
-->
<!ELEMENT bytes (#PCDATA)>


<!-- 
The caching-strategy element specifies the general strategy that the
EJB container uses to manage entity bean instances in a particular
application level cache.  A cache buffers entity bean instances in
memory and associates them with their primary key value.

The caching-strategy element can have one of the following values:

  - Exclusive: An 'Exclusive' cache caches a single bean instance in
               memory for each primary key value.  This unique
               instance is typically locked using the EJB container's
               exclusive locking when it is in use, so that only one
               transaction can use the instance at a time.

  - MultiVersion: A 'MultiVersion' cache caches multiple bean
                  instances in memory for a given primary key value.
                  Each instance can be used by a different transaction
                  concurrently.

Used in: entity-cache

Default value: MultiVersion

Example:
    <caching-strategy>Exclusive</caching-strategy>
-->
<!ELEMENT caching-strategy (#PCDATA)>


<!--
The entity-cache element is used to define a named application level
cache that will be used to cache entity EJB instances at runtime.
Individual entity beans refer to the application level cache that they
want to use using the cache's name.  There is no restriction on the
number of different entity beans that may reference an individual
cache.

Application level caching is used by default whenever an entity bean
doesn't specify its own cache in the weblogic-ejb-jar.xml descriptor.
Two default caches with names, 'ExclusiveCache' and 'MultiVersionCache'
are used for this purpose.  An application may explicitly define these
default caches if it wants to specify non-default values for
their settings.  Note, however, that the caching-strategy cannot be 
changed for the default caches.

By default, a cache uses max-beans-in-cache with a value of 1000 to 
specify its maximum size.

Used in: ejb

Example:
    <entity-cache>
      <entity-cache-name>ExclusiveCache</entity-cache-name>
      <max-cache-size>
        <megabytes>50</megabytes>
      </max-cache-size>
    </entity-cache>
-->
<!ELEMENT entity-cache (    
    entity-cache-name,
    (max-beans-in-cache | max-cache-size)?,
    caching-strategy?)
>


<!--
The entity-cache-name element specifies a unique name for an entity
bean cache.  The name must be unique within an ear file and may not
be the empty string.

Used in: entity-cache

Example:
    <entity-cache-name>ExclusiveCache</entity-cache-name>
-->
<!ELEMENT entity-cache-name (#PCDATA)>


<!--
Maximum number of entity beans that are allowed in the cache.  If the
limit is reached, beans may be passivated. This mechanism does not take 
into account the actual ammount of memory that different entity beans require.

Used in: entity-cache

Default value: 1000
-->
<!ELEMENT max-beans-in-cache (#PCDATA)>


<!--
The max-cache-size element is used to specify a limit on the size of
an entity cache in terms of memory size, expressed either in terms of
bytes or megabytes.  A bean provider should provide an estimate of the
average size of a bean in the weblogic-ejb-jar.xml descriptor if the
bean uses a cache that specifies its maximum size using the
max-cache-size element.  By default, a bean is assumed to have an 
average size of 100 bytes.

Used in: entity-cache
-->
<!ELEMENT max-cache-size (bytes|megabytes)>


<!--
The megabytes element is used to specify the maximum size of an entity
bean cache in megabytes.

Used in: max-cache-size
-->
<!ELEMENT megabytes (#PCDATA)>


<!-- 
xml element contains information about parsers, and entity mappings
for xml processing that is specific to this application.
-->
<!ELEMENT xml (
    parser-factory?,
    entity-mapping*)
>


<!ELEMENT parser-factory (
    saxparser-factory?,
    document-builder-factory?, 
    transformer-factory?)
>

<!--
This allows user to configure ejb container to start mdbs with
application.  If set to "true", container starts mdbs as part of
application.  If set to "false" container keeps mdbs in a queue and
server will start them as soon as it started listening on ports.
-->
<!ELEMENT start-mdbs-with-application (#PCDATA)>


<!--
This element allows the user to set the SAXParser Factory for the xml
parsing required in this application only.  This element determines
what factory to be used for SAX style parsing.  If this element is not
specified then, the one configured in the Server XMLRegistry will take
into effect.

Default value: Server XML Registry setting.
-->
<!ELEMENT saxparser-factory (#PCDATA)>


<!--
This element allows the user to set the Document Builder Factory for
the xml parsing required in this application only.  This element
determines what factory to be used for DOM style parsing.  If this
element is not specified then, the one configured in the Server
XMLRegistry will take into effect.

Default value: Server XML Registry setting.
-->
<!ELEMENT document-builder-factory (#PCDATA)>


<!--
This element allows the user to set the Transformer Engine for the
style sheet processing required in this application only.  If this
element is not specified then, the one configured in the Server
XMLRegistry will take into effect.

Default value: Server XML Registry setting.
-->
<!ELEMENT transformer-factory (#PCDATA)>


<!--
This element is used to specify entity mapping.  This mapping
determines alternative entityuri for given public / system id.
Default place to look for these entityuri is "lib/xml/registry"
directory.
-->
<!ELEMENT entity-mapping (
    entity-mapping-name,
    public-id?,
    system-id?,
    entity-uri?,
    when-to-cache?,
    cache-timeout-interval?)
>


<!--
This element specifies the name for this entity mapping.
-->
<!ELEMENT entity-mapping-name (#PCDATA)>


<!--
This element specifies the public id of the mapped entity.
-->
<!ELEMENT public-id (#PCDATA)>
	

<!--
This element specifies the system id of the mapped entity.
-->
<!ELEMENT system-id (#PCDATA)>
	

<!--
This element specifies the entityuri for the mapped entity.
-->
<!ELEMENT entity-uri (#PCDATA)>


<!--
This element specifies the  when-to-cache for the mapped entity.
-->
<!ELEMENT when-to-cache (#PCDATA)>


<!--
This element specifies cache time out interval  for the mapped entity.
-->
<!ELEMENT cache-timeout-interval (#PCDATA)>
	

<!--
This element specifies security information for the application
-->
<!ELEMENT security (realm-name?)>


<!-- 
This element names a security realm that will be used by the
application. If no specified, then the system default realm will be
used
-->
<!ELEMENT realm-name (#PCDATA)>


<!-- Declare a JDBC Connection Pool -->


<!-- 
Declaration of an application scoped JDBC Connection pool 
-->
<!ELEMENT jdbc-connection-pool (
    data-source-name, 
    connection-factory, 
    pool-params?, 
    driver-params?, 
    acl-name?)
>

<!-- 
Defines initialization parameters for a connection factory which is
used to construct connection pools.
-->
<!ELEMENT connection-factory (factory-name?, connection-properties?)>


<!-- 
The name of a JDBCDataSourceFactoryMBean in config.xml 
-->
<!ELEMENT factory-name (#PCDATA)>


<!-- 
The connection params define overrides for default connection factory
settings
-->
<!ELEMENT connection-properties (
    user-name?, 
    url?, 
    driver-class-name?, 
    connection-params*)
>


<!ELEMENT connection-params (parameter*)>
<!ELEMENT parameter (description?, param-name, param-value)>
<!ELEMENT param-name (#PCDATA)>
<!ELEMENT param-value (#PCDATA)>
<!ELEMENT description (#PCDATA)>


<!-- 
user-name is an optional element which is used to override UserName in
the JDBCDataSourceFactoryMBean.
-->
<!ELEMENT user-name (#PCDATA)>


<!-- 
url is an optional element which is used to override URL in the
JDBCDataSourceFactoryMBean.
-->
<!ELEMENT url (#PCDATA)>


<!-- 
driver-class-name is an optional element which is used to override
DriverName in the JDBCDataSourceFactoryMBean
-->
<!ELEMENT driver-class-name (#PCDATA)>


<!-- 
The pool-params element defines parameters that affect the behavior of
the pool
-->
<!ELEMENT pool-params (
    size-params?, 
    xa-params?, 
    login-delay-seconds?,
    secs-to-trust-an-idle-pool-con?,
    leak-profiling-enabled?, connection-check-params?)>


<!-- 
the driver params are used to set behavior on weblogic drivers 
-->
<!ELEMENT driver-params (
    statement?, 
    prepared-statement?, 
    row-prefetch-enabled?, 
    row-prefetch-size?, 
    stream-chunk-size?)
>


<!--
The size-params element defines parameters that affect the number of
connections in the pool
-->
<!ELEMENT size-params (
    initial-capacity?, 
    max-capacity?, 
    capacity-increment?, 
    shrinking-enabled?, 
    shrink-period-minutes?)
>


<!-- A JNDI name in the application specific JNDI tree -->
<!ELEMENT data-source-name (#PCDATA)>


<!-- params for XA data sources -->
<!ELEMENT xa-params (
    debug-level?, 
    keep-conn-until-tx-complete-enabled?, 
    end-only-once-enabled?, 
    recover-only-once-enabled?, 
    tx-context-on-close-needed?,
    new-conn-for-commit-enabled?, 
    prepared-statement-cache-size?, 
    keep-logical-conn-open-on-release?,
    local-transaction-supported?, 
    resource-health-monitoring-enabled?)
>


<!-- These are all translated from JDBCConnectionPoolMBean -->


<!--

  Sets the Debug Level for XA Drivers

  Default value: 0

  Used in: xa-params

  Example: 
     <debug-level>3</debug-level>

  Since: WLS 7.0

-->
<!ELEMENT debug-level (#PCDATA)>

<!--

  Determines whether the XA connection pool associates the same XA
  connection with the distributed transaction until the transaction
  completes.  This property applies to XA connection pools only, and
  is ignored for non-XA driver.  Its intention is to workaround
  specific problems with third party vendor's XA driver.

  Default value: false
  Used in: xa-params
  Example:
    <keep-conn-until-tx-complete-enabled>
     true
    </keep-conn-until-tx-complete-enabled>
  Since: WLS 7.0
-->
<!ELEMENT keep-conn-until-tx-complete-enabled (#PCDATA)>

<!--

  Determines whether XAResource.end() will be called only once for
  each pending XAResource.start().  e.g. the XA driver will not be
  called XAResource.end(TMSUSPEND), XAResource.end(TMSUCCESS)
  successively.

  This property applies to XA connection pools only, and is ignored
  for non-XA driver.  Its intention is to workaround specific
  problems with third party vendor's XA driver.

  Default value: false
  Used in: xa-params
  Example:
    <end-only-once-enabled>
      true
    </end-only-once-enabled>

  Since: WLS 7.0

-->
<!ELEMENT end-only-once-enabled (#PCDATA)>

<!--

  Declares whether JTA TM should call recover on the resource once
  only.
 
  This property applies to XA connection pools only, and is ignored
  for non-XA driver.  Its intention is to workaround specific problems
  with third party vendor's XA driver.

  Default value: false
  Used in: xa-params
  Example:
    <recover-only-once-enabled>
      true
    </recover-only-once-enabled>

  Since: WLS 7.0

-->
<!ELEMENT recover-only-once-enabled (#PCDATA)>

<!--

  Defines whether the XA driver requires a distributed transaction
  context when closing various JDBC objects, e.g. result sets,
  statements, connections etc.  If it is specified to true, SQL
  exceptions that are thrown while closing the JDBC objects in no
  transaction context will be swallowed.  This property applies to XA
  connection pools only, and is ignored for non-XA driver.  Its
  intention is to workaround specific problems with third party
  vendor's XA driver.

  Default value: false
  Used in: xa-params
  Example:
    <tx-context-on-close-needed>
      true
    </tx-context-on-close-needed> 
  Since: WLS 7.0

-->
<!ELEMENT tx-context-on-close-needed (#PCDATA)>

<!--

  Defines whether a dedicated XA connection is used for
  commit/rollback processing of a particular distributed transaction.
   
  This property applies to XA connection pools only, and is ignored
  for non-XA driver.  Its intention is to workaround specific
  problems with third party vendor's XA driver.
  

  Default value: false
  Used in: xa-params
  Example:
    <tx-context-on-close-needed>
      true
    </tx-context-on-close-needed>
  Since: WLS 7.0

-->
<!ELEMENT new-conn-for-commit-enabled (#PCDATA)>

<!--

  The maximum number of prepared statements cached by this particular
  XA connection pool.  If the value is 0, caching is turned off.

  This property applies to XA connection pools only, and is ignored
  for non-XA driver.  

  Default value: 0
  Used in: xa-params
  Example:
    <prepared-statement-cache-size>
      3
    </prepared-statement-cache-size>

  Since: WLS 7.0

-->
<!ELEMENT prepared-statement-cache-size (#PCDATA)>

<!--
  Default value: 
  Used in: xa-params
  Example:
    <keep-logical-conn-open-on-release>
      true
    </keep-logical-conn-open-on-release>
  Since: WLS 7.0

-->
<!ELEMENT keep-logical-conn-open-on-release (#PCDATA)>

<!--
  Default value: 
  Used in: xa-params
  Example: 
     <local-transaction-supported>
       true
     </local-transaction-supported>
  Since: WLS 7.0

-->
<!ELEMENT local-transaction-supported (#PCDATA)>

<!--
  Default value: 
  Used in: xa-params
  Example:
     <resource-health-monitoring-enabled>
       true
     </resource-health-monitoring-enabled>
  Since: WLS 7.0

-->
<!ELEMENT resource-health-monitoring-enabled (#PCDATA)>

<!--
  Default value: 
  Used in: driver-params
  Example:
     <statement>
       <profiling-enabled>true</profiling-enabled>
     </statement>
  Since: WLS 7.0

-->
<!ELEMENT statement (profiling-enabled?)>

<!--
  Default value: 
  Used in: driver-params
  Example:
     <prepared-statement>
       <profiling-enabled>true</profiling-enabled>
       <cache-size>3</cache-size>
       <parameter-logging-enabled>true</parameter-logging-enabled>
       <max-parameter-length>10</max-parameter-length>
     </prepared-statement>
  Since: WLS 7.0

-->
<!ELEMENT prepared-statement (
    profiling-enabled?, 
    cache-profiling-threshold?, 
    cache-size?, 
    parameter-logging-enabled?, 
    max-parameter-length?)
>


<!-- These are all translated from JDBCConnectionPoolMBean -->
<!ELEMENT row-prefetch-enabled (#PCDATA)>
<!ELEMENT row-prefetch-size (#PCDATA)>
<!ELEMENT stream-chunk-size (#PCDATA)>
<!ELEMENT login-delay-seconds (#PCDATA)>
<!ELEMENT secs-to-trust-an-idle-pool-con (#PCDATA)>
<!ELEMENT leak-profiling-enabled (#PCDATA)>


<!-- 
The connection-check-params define whether, when and how connections
in a pool will be checked to make sure they are still alive.
-->
<!ELEMENT connection-check-params (
    table-name?, 
    check-on-reserve-enabled?, 
    check-on-release-enabled?, 
    refresh-minutes?)
>


<!-- table-name defines a table in the schema that can be queried -->
<!ELEMENT table-name (#PCDATA)>


<!-- 
If on-reserve is "true", then the connection will be tested each time
before its handed out to a user.
-->
<!ELEMENT check-on-reserve-enabled (#PCDATA)>


<!-- 
If on-release is "true", then the connection will be tested each time
a user returns a connection to the pool.
-->
<!ELEMENT check-on-release-enabled (#PCDATA)>


<!-- 
If refresh-minutes is defined then a trigger will be fired
periodically (based on the number of minutes specified). This trigger
will check each connection in the pool to make sure it is still valid.
-->
<!ELEMENT refresh-minutes (#PCDATA)>
<!ELEMENT initial-capacity (#PCDATA)>
<!ELEMENT max-capacity (#PCDATA)>
<!ELEMENT capacity-increment (#PCDATA)>
<!ELEMENT shrinking-enabled (#PCDATA)>
<!ELEMENT shrink-period-minutes (#PCDATA)>
<!ELEMENT profiling-enabled (#PCDATA)>
<!ELEMENT cache-profiling-threshold (#PCDATA)>
<!ELEMENT cache-size (#PCDATA)>
<!ELEMENT parameter-logging-enabled (#PCDATA)>
<!ELEMENT max-parameter-length (#PCDATA)>

<!--
  DEPRECATED: The acl-name is deprecated
 -->
<!ELEMENT acl-name (#PCDATA)>

<!ELEMENT application-param (description?, param-name, param-value)>


