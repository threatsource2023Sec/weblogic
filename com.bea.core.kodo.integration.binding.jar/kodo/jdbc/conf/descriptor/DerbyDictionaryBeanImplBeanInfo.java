package kodo.jdbc.conf.descriptor;

import java.beans.BeanDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.util.Map;

public class DerbyDictionaryBeanImplBeanInfo extends BuiltInDBDictionaryBeanImplBeanInfo {
   public static final Class INTERFACE_CLASS = DerbyDictionaryBean.class;

   public DerbyDictionaryBeanImplBeanInfo(boolean readOnly, String targetVersion) throws IntrospectionException {
      super(readOnly, targetVersion);
   }

   public DerbyDictionaryBeanImplBeanInfo() throws IntrospectionException {
   }

   protected BeanDescriptor buildBeanDescriptor() {
      Class beanClass = null;

      try {
         beanClass = Class.forName("kodo.jdbc.conf.descriptor.DerbyDictionaryBeanImpl");
      } catch (Throwable var4) {
         beanClass = INTERFACE_CLASS;
      }

      BeanDescriptor beanDescriptor = new BeanDescriptor(beanClass, (Class)null);
      beanDescriptor.setValue("configurable", Boolean.TRUE);
      beanDescriptor.setValue("package", "kodo.jdbc.conf.descriptor");
      String description = (new String(" ")).intern();
      beanDescriptor.setShortDescription(description);
      beanDescriptor.setValue("description", description);
      beanDescriptor.setValue("interfaceclassname", "kodo.jdbc.conf.descriptor.DerbyDictionaryBean");
      beanDescriptor.setValue("generatedByWLSInfoBinder", Boolean.TRUE);
      return beanDescriptor;
   }

   protected void buildPropertyDescriptors(Map descriptors) throws IntrospectionException {
      PropertyDescriptor currentResult = null;
      String getterName;
      String setterName;
      if (!descriptors.containsKey("AllowsAliasInBulkClause")) {
         getterName = "getAllowsAliasInBulkClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setAllowsAliasInBulkClause";
         }

         currentResult = new PropertyDescriptor("AllowsAliasInBulkClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("AllowsAliasInBulkClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("AutoAssignClause")) {
         getterName = "getAutoAssignClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setAutoAssignClause";
         }

         currentResult = new PropertyDescriptor("AutoAssignClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("AutoAssignClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "GENERATED BY DEFAULT AS IDENTITY");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("BitTypeName")) {
         getterName = "getBitTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setBitTypeName";
         }

         currentResult = new PropertyDescriptor("BitTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("BitTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "SMALLINT");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("CrossJoinClause")) {
         getterName = "getCrossJoinClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setCrossJoinClause";
         }

         currentResult = new PropertyDescriptor("CrossJoinClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("CrossJoinClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "JOIN");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("ForUpdateClause")) {
         getterName = "getForUpdateClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setForUpdateClause";
         }

         currentResult = new PropertyDescriptor("ForUpdateClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("ForUpdateClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "FOR UPDATE WITH RR");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("LastGeneratedKeyQuery")) {
         getterName = "getLastGeneratedKeyQuery";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setLastGeneratedKeyQuery";
         }

         currentResult = new PropertyDescriptor("LastGeneratedKeyQuery", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("LastGeneratedKeyQuery", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "VALUES(IDENTITY_VAL_LOCAL())");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("LongVarbinaryTypeName")) {
         getterName = "getLongVarbinaryTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setLongVarbinaryTypeName";
         }

         currentResult = new PropertyDescriptor("LongVarbinaryTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("LongVarbinaryTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "BLOB");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("MaxColumnNameLength")) {
         getterName = "getMaxColumnNameLength";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setMaxColumnNameLength";
         }

         currentResult = new PropertyDescriptor("MaxColumnNameLength", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("MaxColumnNameLength", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Integer(30));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("MaxConstraintNameLength")) {
         getterName = "getMaxConstraintNameLength";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setMaxConstraintNameLength";
         }

         currentResult = new PropertyDescriptor("MaxConstraintNameLength", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("MaxConstraintNameLength", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Integer(18));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("MaxIndexNameLength")) {
         getterName = "getMaxIndexNameLength";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setMaxIndexNameLength";
         }

         currentResult = new PropertyDescriptor("MaxIndexNameLength", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("MaxIndexNameLength", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Integer(18));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("MaxTableNameLength")) {
         getterName = "getMaxTableNameLength";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setMaxTableNameLength";
         }

         currentResult = new PropertyDescriptor("MaxTableNameLength", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("MaxTableNameLength", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Integer(18));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("NumericTypeName")) {
         getterName = "getNumericTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setNumericTypeName";
         }

         currentResult = new PropertyDescriptor("NumericTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("NumericTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "DOUBLE");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("Platform")) {
         getterName = "getPlatform";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setPlatform";
         }

         currentResult = new PropertyDescriptor("Platform", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("Platform", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "Apache Derby");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("RequiresAliasForSubselect")) {
         getterName = "getRequiresAliasForSubselect";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setRequiresAliasForSubselect";
         }

         currentResult = new PropertyDescriptor("RequiresAliasForSubselect", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("RequiresAliasForSubselect", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("RequiresAutoCommitForMetaData")) {
         getterName = "getRequiresAutoCommitForMetaData";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setRequiresAutoCommitForMetaData";
         }

         currentResult = new PropertyDescriptor("RequiresAutoCommitForMetaData", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("RequiresAutoCommitForMetaData", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("RequiresCastForComparisons")) {
         getterName = "getRequiresCastForComparisons";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setRequiresCastForComparisons";
         }

         currentResult = new PropertyDescriptor("RequiresCastForComparisons", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("RequiresCastForComparisons", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("RequiresCastForMathFunctions")) {
         getterName = "getRequiresCastForMathFunctions";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setRequiresCastForMathFunctions";
         }

         currentResult = new PropertyDescriptor("RequiresCastForMathFunctions", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("RequiresCastForMathFunctions", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("RequiresConditionForCrossJoin")) {
         getterName = "getRequiresConditionForCrossJoin";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setRequiresConditionForCrossJoin";
         }

         currentResult = new PropertyDescriptor("RequiresConditionForCrossJoin", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("RequiresConditionForCrossJoin", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("ShutdownOnClose")) {
         getterName = "getShutdownOnClose";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setShutdownOnClose";
         }

         currentResult = new PropertyDescriptor("ShutdownOnClose", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("ShutdownOnClose", currentResult);
         currentResult.setValue("description", "When true and the database instance is embedded, the instance will be shutdown when the connection pool is closed. ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SmallintTypeName")) {
         getterName = "getSmallintTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSmallintTypeName";
         }

         currentResult = new PropertyDescriptor("SmallintTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SmallintTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "SMALLINT");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("StringLengthFunction")) {
         getterName = "getStringLengthFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setStringLengthFunction";
         }

         currentResult = new PropertyDescriptor("StringLengthFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("StringLengthFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "LENGTH({0})");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SubstringFunctionName")) {
         getterName = "getSubstringFunctionName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSubstringFunctionName";
         }

         currentResult = new PropertyDescriptor("SubstringFunctionName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SubstringFunctionName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "SUBSTR");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsAutoAssign")) {
         getterName = "getSupportsAutoAssign";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsAutoAssign";
         }

         currentResult = new PropertyDescriptor("SupportsAutoAssign", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsAutoAssign", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsDefaultDeleteAction")) {
         getterName = "getSupportsDefaultDeleteAction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsDefaultDeleteAction";
         }

         currentResult = new PropertyDescriptor("SupportsDefaultDeleteAction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsDefaultDeleteAction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsDeferredConstraints")) {
         getterName = "getSupportsDeferredConstraints";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsDeferredConstraints";
         }

         currentResult = new PropertyDescriptor("SupportsDeferredConstraints", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsDeferredConstraints", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithDistinctClause")) {
         getterName = "getSupportsLockingWithDistinctClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithDistinctClause";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithDistinctClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithDistinctClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithInnerJoin")) {
         getterName = "getSupportsLockingWithInnerJoin";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithInnerJoin";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithInnerJoin", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithInnerJoin", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithMultipleTables")) {
         getterName = "getSupportsLockingWithMultipleTables";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithMultipleTables";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithMultipleTables", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithMultipleTables", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithOrderClause")) {
         getterName = "getSupportsLockingWithOrderClause";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithOrderClause";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithOrderClause", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithOrderClause", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithOuterJoin")) {
         getterName = "getSupportsLockingWithOuterJoin";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithOuterJoin";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithOuterJoin", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithOuterJoin", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsLockingWithSelectRange")) {
         getterName = "getSupportsLockingWithSelectRange";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsLockingWithSelectRange";
         }

         currentResult = new PropertyDescriptor("SupportsLockingWithSelectRange", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsLockingWithSelectRange", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(false));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("SupportsSelectForUpdate")) {
         getterName = "getSupportsSelectForUpdate";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setSupportsSelectForUpdate";
         }

         currentResult = new PropertyDescriptor("SupportsSelectForUpdate", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("SupportsSelectForUpdate", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("TinyintTypeName")) {
         getterName = "getTinyintTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setTinyintTypeName";
         }

         currentResult = new PropertyDescriptor("TinyintTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("TinyintTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "SMALLINT");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("ToLowerCaseFunction")) {
         getterName = "getToLowerCaseFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setToLowerCaseFunction";
         }

         currentResult = new PropertyDescriptor("ToLowerCaseFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("ToLowerCaseFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "LOWER(CAST({0} AS VARCHAR(1000)))");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("ToUpperCaseFunction")) {
         getterName = "getToUpperCaseFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setToUpperCaseFunction";
         }

         currentResult = new PropertyDescriptor("ToUpperCaseFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("ToUpperCaseFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "UPPER(CAST({0} AS VARCHAR(1000)))");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("TrimBothFunction")) {
         getterName = "getTrimBothFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setTrimBothFunction";
         }

         currentResult = new PropertyDescriptor("TrimBothFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("TrimBothFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "LTRIM(RTRIM({0}))");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("TrimLeadingFunction")) {
         getterName = "getTrimLeadingFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setTrimLeadingFunction";
         }

         currentResult = new PropertyDescriptor("TrimLeadingFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("TrimLeadingFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "LTRIM({0})");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("TrimTrailingFunction")) {
         getterName = "getTrimTrailingFunction";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setTrimTrailingFunction";
         }

         currentResult = new PropertyDescriptor("TrimTrailingFunction", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("TrimTrailingFunction", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "RTRIM({0})");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("UseGetBytesForBlobs")) {
         getterName = "getUseGetBytesForBlobs";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setUseGetBytesForBlobs";
         }

         currentResult = new PropertyDescriptor("UseGetBytesForBlobs", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("UseGetBytesForBlobs", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("UseSetBytesForBlobs")) {
         getterName = "getUseSetBytesForBlobs";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setUseSetBytesForBlobs";
         }

         currentResult = new PropertyDescriptor("UseSetBytesForBlobs", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("UseSetBytesForBlobs", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, new Boolean(true));
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("ValidationSQL")) {
         getterName = "getValidationSQL";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setValidationSQL";
         }

         currentResult = new PropertyDescriptor("ValidationSQL", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("ValidationSQL", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "VALUES(1)");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      if (!descriptors.containsKey("VarbinaryTypeName")) {
         getterName = "getVarbinaryTypeName";
         setterName = null;
         if (!this.readOnly) {
            setterName = "setVarbinaryTypeName";
         }

         currentResult = new PropertyDescriptor("VarbinaryTypeName", DerbyDictionaryBean.class, getterName, setterName);
         descriptors.put("VarbinaryTypeName", currentResult);
         currentResult.setValue("description", " ");
         setPropertyDescriptorDefault(currentResult, "BLOB");
         currentResult.setValue("configurable", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      super.buildPropertyDescriptors(descriptors);
   }

   private void fillinFactoryMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinCollectionMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinFinderMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinOperationMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   protected void buildMethodDescriptors(Map descriptors) throws IntrospectionException, NoSuchMethodException {
      this.fillinFinderMethodInfos(descriptors);
      if (!this.readOnly) {
         this.fillinCollectionMethodInfos(descriptors);
         this.fillinFactoryMethodInfos(descriptors);
      }

      this.fillinOperationMethodInfos(descriptors);
      super.buildMethodDescriptors(descriptors);
   }

   protected void buildEventSetDescriptors(Map descriptors) throws IntrospectionException {
   }
}
