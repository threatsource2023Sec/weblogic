package weblogic.j2ee.descriptor.wl;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class SessionDescriptorBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(SessionDescriptorBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("TimeoutSecs", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getTimeoutSecs", "setTimeoutSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("TimeoutSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isTimeoutSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InvalidationIntervalSecs", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getInvalidationIntervalSecs", "setInvalidationIntervalSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("InvalidationIntervalSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isInvalidationIntervalSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxSavePostSize", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getMaxSavePostSize", "setMaxSavePostSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxSavePostSizeSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isMaxSavePostSizeSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SavePostTimeoutSecs", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getSavePostTimeoutSecs", "setSavePostTimeoutSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("SavePostTimeoutSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isSavePostTimeoutSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SavePostTimeoutIntervalSecs", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getSavePostTimeoutIntervalSecs", "setSavePostTimeoutIntervalSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("SavePostTimeoutIntervalSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isSavePostTimeoutIntervalSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DebugEnabled", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isDebugEnabled", "setDebugEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("DebugEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isDebugEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IdLength", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getIdLength", "setIdLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IdLengthSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isIdLengthSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AuthCookieIdLength", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getAuthCookieIdLength", "setAuthCookieIdLength");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AuthCookieIdLengthSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isAuthCookieIdLengthSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrackingEnabled", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isTrackingEnabled", "setTrackingEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TrackingEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isTrackingEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CacheSize", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCacheSize", "setCacheSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CacheSizeSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCacheSizeSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxInMemorySessions", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getMaxInMemorySessions", "setMaxInMemorySessions");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxInMemorySessionsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isMaxInMemorySessionsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookiesEnabled", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookiesEnabled", "setCookiesEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookiesEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookiesEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieName", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCookieName", "setCookieName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieNameSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieNameSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookiePath", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCookiePath", "setCookiePath");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookiePathSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookiePathSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieDomain", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCookieDomain", "setCookieDomain");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieDomainSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieDomainSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieComment", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCookieComment", "setCookieComment");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieCommentSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieCommentSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieSecure", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieSecure", "setCookieSecure");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieSecureSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieSecureSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieMaxAgeSecs", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getCookieMaxAgeSecs", "setCookieMaxAgeSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieMaxAgeSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieMaxAgeSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieHttpOnly", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieHttpOnly", "setCookieHttpOnly");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CookieHttpOnlySet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isCookieHttpOnlySet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreType", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentStoreType", "setPersistentStoreType");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreTypeSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentStoreTypeSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreCookieName", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentStoreCookieName", "setPersistentStoreCookieName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreCookieNameSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentStoreCookieNameSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreDir", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentStoreDir", "setPersistentStoreDir");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreDirSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentStoreDirSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStorePool", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentStorePool", "setPersistentStorePool");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStorePoolSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentStorePoolSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentDataSourceJNDIName", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentDataSourceJNDIName", "setPersistentDataSourceJNDIName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentDataSourceJNDINameSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentDataSourceJNDINameSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentSessionFlushInterval", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentSessionFlushInterval", "setPersistentSessionFlushInterval");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentSessionFlushIntervalSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentSessionFlushIntervalSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentSessionFlushThreshold", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentSessionFlushThreshold", "setPersistentSessionFlushThreshold");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentSessionFlushThresholdSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentSessionFlushThresholdSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentAsyncQueueTimeout", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentAsyncQueueTimeout", "setPersistentAsyncQueueTimeout");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentAsyncQueueTimeoutSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentAsyncQueueTimeoutSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreTable", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getPersistentStoreTable", "setPersistentStoreTable");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PersistentStoreTableSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isPersistentStoreTableSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JdbcColumnNameMaxInactiveInterval", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getJdbcColumnNameMaxInactiveInterval", "setJdbcColumnNameMaxInactiveInterval");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JdbcColumnNameMaxInactiveIntervalSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isJdbcColumnNameMaxInactiveIntervalSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UrlRewritingEnabled", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isUrlRewritingEnabled", "setUrlRewritingEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UrlRewritingEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isUrlRewritingEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("HttpProxyCachingOfCookies", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isHttpProxyCachingOfCookies", "setHttpProxyCachingOfCookies");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("HttpProxyCachingOfCookiesSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isHttpProxyCachingOfCookiesSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EncodeSessionIdInQueryParams", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isEncodeSessionIdInQueryParams", "setEncodeSessionIdInQueryParams");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EncodeSessionIdInQueryParamsSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isEncodeSessionIdInQueryParamsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MonitoringAttributeName", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getMonitoringAttributeName", "setMonitoringAttributeName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("MonitoringAttributeNameSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isMonitoringAttributeNameSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SharingEnabled", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isSharingEnabled", "setSharingEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SharingEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isSharingEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InvalidateOnRelogin", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isInvalidateOnRelogin", "setInvalidateOnRelogin");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("InvalidateOnReloginSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isInvalidateOnReloginSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Id", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "getId", "setId");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IdSet", Class.forName("weblogic.j2ee.descriptor.wl.SessionDescriptorBeanDConfig"), "isIdSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for SessionDescriptorBeanDConfigBeanInfo");
         }
      }
   }
}
