package weblogic.j2ee.descriptor.wl;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class ContainerDescriptorBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(ContainerDescriptorBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("RefererValidation", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getRefererValidation", "setRefererValidation");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CheckAuthOnForward", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getCheckAuthOnForward", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FilterDispatchedRequestsEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isFilterDispatchedRequestsEnabled", "setFilterDispatchedRequestsEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RedirectContentType", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getRedirectContentType", "setRedirectContentType");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RedirectContent", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getRedirectContent", "setRedirectContent");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RedirectWithAbsoluteUrl", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isRedirectWithAbsoluteUrl", "setRedirectWithAbsoluteUrl");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IndexDirectoryEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isIndexDirectoryEnabled", "setIndexDirectoryEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("IndexDirectoryEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isIndexDirectoryEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("IndexDirectorySortBy", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getIndexDirectorySortBy", "setIndexDirectorySortBy");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("ServletReloadCheckSecs", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getServletReloadCheckSecs", "setServletReloadCheckSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("ServletReloadCheckSecsSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isServletReloadCheckSecsSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SendPermanentRedirects", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isSendPermanentRedirects", "setSendPermanentRedirects");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResourceReloadCheckSecs", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getResourceReloadCheckSecs", "setResourceReloadCheckSecs");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("SingleThreadedServletPoolSize", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getSingleThreadedServletPoolSize", "setSingleThreadedServletPoolSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SessionMonitoringEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isSessionMonitoringEnabled", "setSessionMonitoringEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("SaveSessionsEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isSaveSessionsEnabled", "setSaveSessionsEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferWebInfClasses", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isPreferWebInfClasses", "setPreferWebInfClasses");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferApplicationPackages", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getPreferApplicationPackages", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferApplicationResources", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getPreferApplicationResources", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("DefaultMimeType", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getDefaultMimeType", "setDefaultMimeType");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ReloginEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isReloginEnabled", "setReloginEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("AllowAllRoles", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isAllowAllRoles", "setAllowAllRoles");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClientCertProxyEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isClientCertProxyEnabled", "setClientCertProxyEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("NativeIOEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isNativeIOEnabled", "setNativeIOEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MinimumNativeFileSize", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getMinimumNativeFileSize", "setMinimumNativeFileSize");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("DisableImplicitServletMappings", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isDisableImplicitServletMappings", "setDisableImplicitServletMappings");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("TempDir", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getTempDir", "setTempDir");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OptimisticSerialization", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isOptimisticSerialization", "setOptimisticSerialization");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RetainOriginalURL", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isRetainOriginalURL", "setRetainOriginalURL");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Id", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getId", "setId");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ShowArchivedRealPathEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isShowArchivedRealPathEnabled", "setShowArchivedRealPathEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("ShowArchivedRealPathEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isShowArchivedRealPathEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RequireAdminTraffic", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isRequireAdminTraffic", "setRequireAdminTraffic");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("AccessLoggingDisabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isAccessLoggingDisabled", "setAccessLoggingDisabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("AccessLoggingDisabledSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isAccessLoggingDisabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferForwardQueryString", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isPreferForwardQueryString", "setPreferForwardQueryString");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferForwardQueryStringSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isPreferForwardQueryStringSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FailDeployOnFilterInitError", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getFailDeployOnFilterInitError", "setFailDeployOnFilterInitError");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ContainerInitializerEnabled", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isContainerInitializerEnabled", "setContainerInitializerEnabled");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ContainerInitializerEnabledSet", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "isContainerInitializerEnabledSet", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LangtagRevision", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getLangtagRevision", "setLangtagRevision");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("GzipCompression", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getGzipCompression", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClassLoading", Class.forName("weblogic.j2ee.descriptor.wl.ContainerDescriptorBeanDConfig"), "getClassLoading", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for ContainerDescriptorBeanDConfigBeanInfo");
         }
      }
   }
}
