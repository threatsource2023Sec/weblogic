package weblogic.j2ee.descriptor.wl;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class WeblogicWebAppBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(WeblogicWebAppBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("Descriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getDescriptions", "setDescriptions");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WeblogicVersions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getWeblogicVersions", "setWeblogicVersions");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SecurityRoleAssignments", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getSecurityRoleAssignments", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("RunAsRoleAssignments", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getRunAsRoleAssignments", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResourceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getResourceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResourceEnvDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getResourceEnvDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EjbReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getEjbReferenceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ServiceReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getServiceReferenceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MessageDestinationDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getMessageDestinationDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SessionDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getSessionDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("AsyncDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getAsyncDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JspDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getJspDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("ContainerDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getContainerDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("AuthFilters", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getAuthFilters", "setAuthFilters");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CharsetParams", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getCharsetParams", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("VirtualDirectoryMappings", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getVirtualDirectoryMappings", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("UrlMatchMaps", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getUrlMatchMaps", "setUrlMatchMaps");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SecurityPermissions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getSecurityPermissions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ContextRoots", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getContextRoots", "setContextRoots");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WlDispatchPolicies", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getWlDispatchPolicies", "setWlDispatchPolicies");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ServletDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getServletDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WorkManagers", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getWorkManagers", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedExecutorServices", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getManagedExecutorServices", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedScheduledExecutorServices", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getManagedScheduledExecutorServices", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedThreadFactories", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getManagedThreadFactories", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ComponentFactoryClassName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getComponentFactoryClassName", "setComponentFactoryClassName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Loggings", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getLoggings", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", true);
            plist.add(pd);
            pd = new PropertyDescriptor("LibraryRefs", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getLibraryRefs", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JASPICProvider", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getJASPICProvider", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FastSwap", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getFastSwap", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CoherenceClusterRef", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getCoherenceClusterRef", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Id", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getId", "setId");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Version", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getVersion", "setVersion");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OsgiFrameworkReference", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getOsgiFrameworkReference", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ReadyRegistration", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getReadyRegistration", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CdiDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getCdiDescriptor", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SecondaryDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicWebAppBeanDConfig"), "getSecondaryDescriptors", (String)null);
            pd.setValue("dependency", Boolean.FALSE);
            pd.setValue("declaration", Boolean.FALSE);
            pd.setValue("configurable", Boolean.FALSE);
            pd.setValue("key", Boolean.FALSE);
            pd.setValue("dynamic", Boolean.FALSE);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for WeblogicWebAppBeanDConfigBeanInfo");
         }
      }
   }
}
