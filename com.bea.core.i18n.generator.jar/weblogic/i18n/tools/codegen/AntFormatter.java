package weblogic.i18n.tools.codegen;

import java.io.FileWriter;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;

public class AntFormatter {
   private static StringBuffer[] m_indent = new StringBuffer[]{new StringBuffer(""), new StringBuffer("  "), new StringBuffer("    "), new StringBuffer("      "), new StringBuffer("        "), new StringBuffer("          ")};

   private static void addElement(String elementName, String attributeValue, StringBuffer strBuf, int indentLevel, boolean endOfElement) {
      indent(strBuf, indentLevel);
      if (attributeValue == null && endOfElement) {
         strBuf.append("</" + elementName + ">\n");
      } else if (attributeValue == null && !endOfElement) {
         strBuf.append("<" + elementName + ">\n");
      } else {
         strBuf.append("<" + elementName + " " + attributeValue);
         if (endOfElement) {
            strBuf.append("/>\n");
         } else {
            strBuf.append(">\n");
         }

      }
   }

   private static void indent(StringBuffer strBuf, int indentLevel) {
      strBuf.append(indent(indentLevel));
   }

   public static String generateBuildMsgcat(MsgCat2Java msgcat, String outputbuildfile) throws Exception {
      TreeMap dependencyList = new TreeMap();
      Iterator iter = msgcat.outputs.iterator();

      Vector targetFiles_v;
      String srcFile;
      String targetFile;
      for(targetFiles_v = null; iter.hasNext(); targetFiles_v.add(targetFile)) {
         MsgCat2Java.Output item = (MsgCat2Java.Output)iter.next();
         srcFile = item.xmlSrcFile.replace('\\', '/');
         srcFile = srcFile.substring(srcFile.lastIndexOf("/") + 1);
         targetFile = item.getPackage().replace('.', '/') + "/" + item.getOutputFile();
         targetFiles_v = (Vector)dependencyList.get(srcFile);
         if (targetFiles_v == null) {
            targetFiles_v = new Vector();
            dependencyList.put(srcFile, targetFiles_v);
         }
      }

      StringBuffer strBuf = new StringBuffer();
      int indentLevel = 0;
      strBuf.append("<!-- Please do not Edit this file, use ant -f build.xml generate-msgcat-dep to recreate this file -->\n");
      strBuf.append("<!-- Generated on " + new Date() + "-->\n");
      addElement("project", "name=\"wls\" default=\"msgcat-deplist\" basedir=\".\"", strBuf, indentLevel, false);
      addElement("property", "name=\"topdirs\" value=\"weblogic/msgcat/\"", strBuf, indentLevel, true);
      addElement("property", "file=\"${DEV_ROOT}/wls/buildenv.properties\"", strBuf, indentLevel, true);
      addElement("property", "name=\"generatedsrc\" value=\"${WL_HOME}/generatedsrc/\"", strBuf, indentLevel, true);
      addElement("mkdir", "dir=\"${generatedsrc}/weblogic/i18n\"", strBuf, indentLevel, true);
      Vector xmlFiles = new Vector();
      iter = dependencyList.entrySet().iterator();

      while(iter.hasNext()) {
         Map.Entry entry = (Map.Entry)iter.next();
         srcFile = (String)entry.getKey();
         targetFiles_v = (Vector)entry.getValue();
         String[] targetFiles = new String[targetFiles_v.size()];
         targetFiles_v.toArray(targetFiles);
         String str = createAntXMLDependencyString(srcFile, targetFiles, indentLevel + 2);
         strBuf.append(str);
         xmlFiles.add(srcFile);
      }

      indent(strBuf, indentLevel + 2);
      strBuf.append("<target name=\"msgcat-deplist\"  depends=\n");
      indent(strBuf, indentLevel + 4);
      strBuf.append("\"");

      for(int i = 0; i < xmlFiles.size(); ++i) {
         strBuf.append(xmlFiles.elementAt(i));
         boolean notLastElement = i != xmlFiles.size() - 1;
         if (notLastElement) {
            strBuf.append(", ");
         } else {
            strBuf.append("\"/>\n");
         }

         if ((i + 1) % 5 == 0 && notLastElement) {
            strBuf.append("\n");
            indent(strBuf, indentLevel + 5);
         }
      }

      addElement("project", (String)null, strBuf, indentLevel, true);
      FileWriter op = null;

      try {
         op = new FileWriter(outputbuildfile);
         op.write(strBuf.toString());
      } finally {
         if (op != null) {
            op.flush();
            op.close();
         }

      }

      return strBuf.toString();
   }

   private static String createAntXMLDependencyString(String srcFile, String[] targetFiles, int indentLevel) {
      StringBuffer str = new StringBuffer();
      addElement("target", "name=\"determine-msgcat-" + srcFile + "\"", str, indentLevel, false);
      String var10001 = "property=\"msgcat.notRequired." + srcFile + "\"";
      indentLevel += 2;
      addElement("condition", var10001, str, indentLevel, false);
      indentLevel += 2;
      addElement("and", (String)null, str, indentLevel, false);
      indentLevel += 2;

      for(int i = 0; i < targetFiles.length; ++i) {
         String trgtFl = targetFiles[i];
         if (trgtFl.endsWith(".java")) {
            addElement("uptodate", "targetfile=\"${generatedsrc}/" + trgtFl + "\"", str, indentLevel, false);
         } else {
            addElement("uptodate", "targetfile=\"${classes}/" + trgtFl + "\"", str, indentLevel, false);
         }

         var10001 = "dir=\"${src}/weblogic/msgcat\" includes=\"" + srcFile + "\"";
         indentLevel += 2;
         addElement("srcfiles", var10001, str, indentLevel, true);
         indentLevel -= 2;
         addElement("uptodate", (String)null, str, indentLevel, true);
      }

      indentLevel -= 2;
      addElement("and", (String)null, str, indentLevel, true);
      indentLevel -= 2;
      addElement("condition", (String)null, str, indentLevel, true);
      indentLevel -= 2;
      addElement("target", (String)null, str, indentLevel, true);
      addElement("target", "name=\"" + srcFile + "\" depends=\"determine-msgcat-" + srcFile + "\" unless=\"msgcat.notRequired." + srcFile + "\"", str, indentLevel, false);
      indentLevel += 2;
      addElement("java", "classname=\"weblogic.i18ngen\" failonerror=\"true\" fork=\"true\"", str, indentLevel, false);
      var10001 = "line=\"-d ${classes} -generated ${generatedsrc} -keepgenerated -compile -noexit -l10n -i18n -server ${src}/weblogic/msgcat/" + srcFile + "\"";
      indentLevel += 2;
      addElement("arg", var10001, str, indentLevel, true);
      indentLevel -= 2;
      addElement("java", (String)null, str, indentLevel, true);
      indentLevel -= 2;
      addElement("target", (String)null, str, indentLevel, true);
      return str.toString();
   }

   private static StringBuffer indent(int n) {
      if (n < m_indent.length * 2) {
         return m_indent[n / 2];
      } else {
         StringBuffer result = new StringBuffer("");

         for(int i = 0; i < n / 2; ++i) {
            result.append("  ");
         }

         return result;
      }
   }
}
