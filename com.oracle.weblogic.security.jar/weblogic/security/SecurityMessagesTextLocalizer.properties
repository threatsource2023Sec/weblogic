version=1.0
L10nPackage=weblogic.security
I18nPackage=weblogic.security
subsystem=Security Text

PasswordPromptMessage=Enter password to boot WebLogic server:
PasswordPromptMessageRenter=For confirmation, please re-enter password required to boot WebLogic server:
UsernamePromptMessage=Enter username to boot WebLogic server:
CallbackWarningMessage=Warning:
CallbackErrorMessage=Error:
getNewAdminstrativeUserPassCreated=A new adminstrative user and password has been created as part of the process of generating a default configuration. This is based on either the command line properties or the values you provided at the prompts. This username and password will be required for all adminstrative tasks for this new configuration, such as booting the server, logging into the console or WLST or issuing restricted commands from weblogic.Admin
getAdminUserTooShort=The username specified either on the command line or at the prompt is empty.
getAdminPassTooShort=The password specified either on the command line or at the prompt is empty.
PassNoMatch=Passwords do not match.
PassNoMatchBoom=Passwords do not match, unable to generate default configuration, please try again.
TryAgainPassNoMatchBoom=Please try again.
failCreateAdminUser=Please try again.
SSLClientTrustKeyStoreConfigError=The command line trust keystore configuration is incorrect. Either TrustKeyStore is set to an illegal value or TrustKeyStore is set to CustomTrust and CustomTrustKeyStoreFileName is not set.
SSLClientTrustKeyStoreSyntax=To use the trusted CAs in the JDK''s cacerts, specify:\n\n \t\-Dweblogic.security.TrustKeyStore=JavaStandardTrust\n \t\tdefaults to JavaStandardTrust\n\n \t-Dweblogic.security.JavaStandardTrustKeyStorePassPhrase=passphrase\n \t\tdefaults to no passphrase which means\n \t\tread-only access to the JDK''s cacerts.\n\n To use the trusted CAs in DemoTrust.jks and in the JDK''s cacerts, specify:\n\n \t-Dweblogic.security.TrustKeyStore=DemoTrust\n \t-Dweblogic.security.JavaStandardTrustKeyStorePassPhrase=passphrase\n \t\tdefaults to no passphrase which means\n \t\tread-only access to the JDK''s cacerts.\n\n To use the trusted CAs from another keystore, specify:\n\n \t-Dweblogic.security.TrustKeyStore=CustomTrust\n\n \t-Dweblogic.security.CustomTrustKeyStoreFileName=filename\n \t\teither an absolute pathname or a pathname relative to the\n \t\tdirectory the server was booted in.\n\n \t-Dweblogic.security.CustomTrustKeyStoreType=type\n \t\tdefaults to the default keystore type specified\n \t\tin the JDK''s java.security file.\n\n \t-Dweblogic.security.CustomTrustKeyStorePassPhrase=passphrase\n \t\tdefaults to no passphrase. Some keystore types allow this\n \t\tbut only grant read-access (eg. jks). Other keystore types\n \t\trequire a keystore passphrase even for read-access.
CATrustPasswordPromptMessage=Enter password for the trust keystore {0}:
UserKeyConfigCreatePrompt=Creating the key file can reduce the security of your system if it is not kept in a secured location after it is created. Do you want to create the key file? {0} or {1}:
UserKeyConfigCreateAffirmative=y
UserKeyConfigCreateNegative=n
UserKeyConfigCreateConfirm=Please confirm user config key creation: {0} or {1}
UserKeyConfigCreateFailure=Unable to create user configuration key file, cannot continue.
UsingExistingKeyFile=Using existing user key file...
UserKeyConfigCreateNoPrompt=Creating the key file can reduce the security of your system if it is not kept in a secured location after it is created. Creating new key...
SecurityPre90UpgradeNotPossible=Cannot upgrade the domain''s security configuration. \n\n{0} \n\nMake the following changes to the domain then upgrade to 9.0 again: \n\n{1} \n\nIf migrating from 8.1, make the changes in config.xml. \n\nIf migrating from 7.0, \n\t 1) use weblogic.management.commo.WebLogicMBeanDumper from 7.0 to dump the security mbeans to a text file \n\t 2) make the changes in the text file \n\t 3) use weblogic.management.commo.WebLogicMBeanLoader from 7.0 to load the modified security mbeans. \n\t See http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html for more detailed instructions.
SecurityPre90UpgradeNameSolution=Ensure all realms have a unique, non-empty "DisplayName" (e.g. DisplayName="myrealm"). \n\nEnsure all security providers and UserLockoutManagers for a realm have a unique, non-empty "DisplayName".\n Note: if not specified, it defaults to "Realm" for realms, "UserLockoutManager" for UserLockoutManagers and to the security provider''s type (e.g. "DefaultAuthenticator") for security providers. \n\nEnsure all realms have their "Name" set to "Security:Name=<realmdisplayname>" (e.g. Name="Security:Name=myrealm"). \n\nEnsure all security providers and UserLockoutManagers have their "Name" set to "Security:Name=<realmdisplayname><displayname>" (e.g. Name="Security:Name=myrealmDefaultAuthenticator"). \n\nEnsure all security providers and UserLockoutManagers have their "Realm" set to their realm''s "Name" (e.g. Realm="Security:Name=myrealm"). \n\nEnsure all realms have their provider and UserLockoutManager attributes set to their providers'' and user lockout manager''s "Name" (e.g. Authorizers="Security:Name=myrealmDefaultAuthorizer"). \n\nEnsure all realms refer their security providers and UserLockoutManagers only once.
SecurityPre90UpgradeMissingObjectNameProblem=A realm, security provider or user lockout manager has an empty or missing "Name".
SecurityPre90UpgradeDuplicateObjectNameProblem=Two or more realms, security providers or user lockout managers have the "Name" "{0}".
SecurityPre90UpgradeMissingRealmChildProblem=The realm "{0}" refers to "{1}" which does not exist.
SecurityPre90UpgradeRealmChildRefersToAnotherRealmProblem=The realm "{0}" refers to "{1}" who refers to the realm "{2}".
SecurityPre90UpgradeRealmChildRefersToNoRealmProblem=The realm "{0}" refers to "{1}" who does not refer to any realm.
SecurityPre90UpgradeUnreferencedRealmChildProblem=The security provider or UserLockoutManager "{0}" is not referred to by any realm.
SecurityPre90UpgradeNonStandardRealmChildObjectNameProblem=The security provider or user lockout manager "{0}" has a non-standard "Name". \nThe expected "Name" is "{1}" since its "DisplayName" is "{2}" and its realm''s "DisplayName" is "{3}".
SecurityPre90UpgradeNonStandardRealmObjectNameProblem=The realm "{0}" has a non-standard "Name". \nThe expected "Name" is "{1}" since its "DisplayName" is "{2}".
SecurityPre90UpgradeDuplicateRealmChildDisplayNameProblem=The realm "{0}" has more than one {1} whose "DisplayName" is "{2}".
SecurityPre90UpgradeDuplicateRealmChildReferencesProblem=The realm "{0}" has more than one reference to the "{1}" "{2}"
SecurityPre90UpgradeDuplicateRealmDisplayNameProblem=There are two or more realms with the "DisplayName" "{0}".
SecurityPre90UpgradeRealmCertPathBuilderNotChildProblem=The CertPathBuilder "{0}" for the realm "{1}" is not one of the realm''s CertPathProviders.
SecurityPre90UpgradeRealmCertPathBuilderNotChildSolution=Ensure that the realm''s CertPathBuilder is set to one of its CertPathProviders.
SecurityPre90UpgradeMultipleDefaultRealmsProblem=The realm "{0}" and the realm "{1}" both have "DefaultRealm" set to "true".
SecurityPre90UpgradeMultipleDefaultRealmsSolution=Ensure that only one realm has "DefaultRealm" set to "true".
SecurityPre90UpgradeMissingUserLockoutManagerProblem=The realm "{0}" does not have a UserLockoutManager specified.
SecurityPre90UpgradeMissingUserLockoutManagerSolution=Add a UserLockoutManager to the realm. By default, user lockouts will be enabled. To disable user lockouts, set the UserLockoutManager''s "LockoutEnabled" to "true".
SecurityPre90UpgradeUseDeprecatedWebResourceProblem=The realm "{0}" has "UseDeprecatedWebResource" set to "true"
SecurityPre90UpgradeUseDeprecatedWebResourceSolution=Remove this setting from the realm and add new security roles and policies for the domain''s web resources.
UnknownSecurityProviderTypeError="{0}" is not a legal {1} type. The legal types are {2}.
EmptyActiveTypeError="ActiveTypes" must not include null or empty string values.
SelfSignedCertificateInChainError=A certificate, which is not the last certificate in the chain, is self signed:\n {0}
CertificateNotSignedByIssuerError=A certificate was not signed by the next certificate in the chain. \nCertificate:\n{0} \nNext Certificate (should be issuer):\n{1}
IssuerDNMismatchError=The issuer DN of a certificate did not match the subject DN of the next certificate in the chain. \nCertificate:\n{0} \nNext Certificate (should be issuer):\n{1}

