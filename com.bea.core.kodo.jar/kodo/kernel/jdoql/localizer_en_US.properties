not-boolean: Attempt to use a non-boolean value as a boolean.
bad-from: The from clause "{0}" is not valid.  Specify the clause in the form: \
	from <candidate class> [exclude subclasses].  Error in query: {1}
bad-range: The range declaration "{0}" is not valid.  
bad-start-word: The query string "{0}" is not valid.  Single-string queries \
	must begin with the "select" keyword.
bad-word-order: The query string "{0}" is not valid.  The keyword "{1}" is \
	in the wrong position.
grouping-no-result: In your query on type "{0}" with filter "{1}", you have \
	specified grouping criteria without specifying a projection result with \
	setResult().  You cannot apply grouping withough specifying a result.  \
	The result must consist exclusively of aggregate values and/or the same \
	values you grouped on.
having-no-grouping: In your query on type "{0}" with filter "{1}", you have \
	attempted to specify a "having" clause without any grouping defined.  \
	You must group the results in order to apply having conditions.
param-var: Parameter "{0}" has the same name as a declared variable.
keyword: {0} "{1}" has the same name as a JDOQL keyword.
bad-type: The type "{0}" as used in the parameter/variable declarations could \
	not be found in the imports.
bad-candidate-type: The type "{0}" named as the candidate class could not be \
	found in the imports.
bad-result-type: The type "{0}" named as the result class could not be found \
	in the imports.
no-license-custom-filter: use custom query filter or aggregate listeners
assign-ops: Assignment, increment, and decrement operators are not supported \
	in JDOQL.
mixed-params: Attempt to use both declared and implicit parameters.  "{0}" \
	was not declared.
mixed-vars: Attempt to use both declared and implicit variables.  "{0}" was \
	not declared.
bad-instanceof-class: Your JDOQL query attempts to test for "instanceof {0}", \
	but this type is not recognized as a class name. 
bad-jdoql: The JDOQL string is not valid.  Make sure all parentheses are \
	matched and that you use proper Java syntax.
bad-ordering-dec: The ordering "{0}" is not valid.  The second part of \
	all ordering statements must be the keyword "ascending", "asc", \
	"descending", or "desc".
bad-result-class: The specified result class "{0}" could not be found. \
	Make sure the class is compiled.  If the name is not fully qualified, you \
	may need to qualify it or import add the class package to your query \
	imports.  Full query: {1}
bad-subquery-candidate: Subquery "{0}" has an unrecognized candidate class. \
	Make sure the class name is valid.  You may need to fully-qualify the \
	class name if it is not in the package of the query''s candidate class or \
	in any of the imports.
bad-tree: An internal error has been detected.  Please report this \
	error and the offending Query filter to technical support.
bitwise-invert: Kodo does not support the bitwise invert operation.
dup-subquery-alias: Attempt to use subquery candidate alias "{0}" twice.  \
	Each nested subquery must alias its candidates with a unique string in its \
	"from" clause.
invalid-custom: No filter extensions match the tag "{0}" used in this query.
methods: Arbitrary methods are not supported in JDOQL.
new-op: The "new" operator is not supported in JDOQL.
no-field: Attempt to query nonexistant or inaccessible field "{1}" of type \
	"{0}".  All fields used in queries must either be persistent, \
	transactional, or public static fields. Alternately, you may have \
	forgotten to declare "{1}" as a parameter or variable in the query.
no-subquery-alias: Missing candidate alias in subquery "{0}".  You must alias \
	the subquery candidates in the "from" clause.
not-unbound-var: Identifier "{0}" is not recognized as a managed or static \
	field, declared parameter, bound variable, or subquery alias, and cannot \
	be an implicit unbound variable because its type is unknown or is not \
	persistent.
subquery-decs: Subquery "{0}" attempts to declare imports, parameters, or \
	variables.  Subqueries cannot make declarations; use the to-level query \
	for all declarations.
token?: The token "{0}" is not supported in queries.
unexpected-var: Your query filter is invalid.  The variable "{0}" was found \
	where a constant or field value was expected.
unterminated-subquery: Your query contains an unterminated subquery.  All \
	subqueries must be enclosed in matching parentheses.
subquery-range: Range specifications are not allowed in subqueries.
path-no-meta: Attempt to query field "{0}" from a class ("{1}") without \
	metadata. If this is a field of an implicit variable, you may need \
	to cast the variable within the filter to identify its type.
not-numeric: The argument to the numeric function must be a numeric type, \
	but is of type "{0}".
not-orderable: The argument to the min/max function must be orderable, \ 
	type "{0}" is not orderable.
	
