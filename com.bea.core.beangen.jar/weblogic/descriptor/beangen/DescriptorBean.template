#* @vtlvariable name="author" type="java.lang.String" *#
#* @vtlvariable name="class" type="weblogic.descriptor.beangen.BeanClass" *#
#* @vtlvariable name="default" type="java.lang.String" *#
#* @vtlvariable name="options" type="weblogic.descriptor.beangen.BeanGenOptions" *#
#* @vtlvariable name="version" type="java.lang.String" *#
/*
 * This is a generated file. Do not edit this file.
 */
package $class.getPackageName();

import java.util.*;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.zip.CRC32;
import weblogic.descriptor.*;
import weblogic.descriptor.BeanUpdateEvent.PropertyUpdate;
import weblogic.descriptor.internal.*;
import weblogic.descriptor.internal.ReferenceManager.Resolver;
import weblogic.descriptor.beangen.LegalChecks;
import weblogic.descriptor.beangen.StringHelper;
import weblogic.utils.ArrayUtils;
import weblogic.utils.StringUtils;
import weblogic.utils.Debug;
import weblogic.utils.collections.ArrayIterator;
import weblogic.utils.collections.CombinedIterator;
import weblogic.descriptor.internal.Munger.ReaderEventInfo;

#foreach ($i in $class.getImports())
import $i;
#end

#set($base = "$options.getBaseClassName()")

/**
 * Corresponds to $class.getInterfaceName()
 * (Interface=$class.getQualifiedInterfaceName())
 * $author
 * $version
 *
 * $class.getCommentText()
 *
#foreach ($line in $class.getJavadocAnnotations())
 * $line
#end##foreach line
 */
public class $class.getClassName()
#if (!$class.getSuperClassName().equals(""))
  extends $class.getSuperClassName()
#end##if
  implements $class.getInterfaceName(), java.io.Serializable
{
#foreach ($f in $class.getFields())
  $f.getDeclaration()
#end##foreach

#if($class.isAnnotationDefined("delegateBean"))
##set($delegateType = $class.getClassName())
#if($class.getAnnotationString("delegateBean"))
#set($delegateType = $class.getSuperClassName())
#else
#set($delegateType = $class.getClassName())
#end

  private List<${delegateType}> _DelegateSources = new CopyOnWriteArrayList<${delegateType}>();

  private ${delegateType} _DelegateBean;

  public void _addDelegateSource(${delegateType} source) {
    _DelegateSources.add(source);
  }

  public void _removeDelegateSource(${delegateType} source) {
    _DelegateSources.remove(source);
  }

  public ${delegateType} _getDelegateBean() {
    return _DelegateBean;
  }

  public void _setDelegateBean(${delegateType} delegate) {
#if($class.isAnnotationDefinedOnSuperInterface("delegateBean"))
    super._setDelegateBean(delegate);
#end
    ${delegateType} oldDelegate = _DelegateBean;
    _DelegateBean = delegate;
    if (oldDelegate != null) {
      oldDelegate._removeDelegateSource(this);
    }
    if (delegate != null) {
      delegate._addDelegateSource(this);
    }

#foreach($p in $class.getDeclaredProperties())
#if ($p.isBean())
    // child bean: $p.getName()
#if ($p.isAnnotationDefinedOnPropertyInterface("delegateBean"))
## ServerMBean consider _ServerTemplate a child mbean, which should be avoid
#if (! $p.getName().equals($class.getAnnotationString("delegateBean")))
#if (! $p.isArray())
    if (_${p.getName()} instanceof ${p.getComponentImplType()}) {
      if (oldDelegate != null && oldDelegate.${p.getGetter().getName()}() != null) {
        _getReferenceManager().unregisterBean((${p.getComponentImplType()}) oldDelegate.${p.getGetter().getName()}());
      }
      if (delegate != null && delegate.${p.getGetter().getName()}() != null) {
        _getReferenceManager().registerBean((${p.getComponentImplType()}) delegate.${p.getGetter().getName()}(), false);
      }
      ((${p.getComponentImplType()}) _${p.getName()})._setDelegateBean(
        (${p.getComponentImplType()}) (delegate == null ? null : delegate.${p.getGetter().getName()}()));
    }
#end
#else
    // child bean $p.getName() is array type, no delegate
#end
#end
#end
#end
  }
#end

#foreach ($m in $class.getDeclaredMethods())
  /**
   * $m.getCommentText()
   * (Interface=$class.getQualifiedInterfaceName() Attribute=$m.getName())
   *
#foreach ($line in $m.getJavadocAnnotations())
   * $line
#end##foreach line
   */
#if ($m.getExceptionList().equals(""))
  $m.getDeclaration() {
#else
  $m.getDeclaration()
    throws $m.getExceptionList()
  {
#end##if hasExceptions
#foreach ($line in $m.getBody())
    $line
#end##foreach line
  }

#end##foreach method

#if ($class.implementPostCreate())
  protected void _postCreate() {
    _customizer._postCreate();
  }

#end##if
#if ($class.implementPreDestroy())
  protected void _preDestroy() {
    _customizer._preDestroy();
  }

#end##if

#if ($class.hasKey())
  public boolean _hasKey() {
    return true;
  }
#end ##if has key

#if ($class.implementIsPropertyAKey())
  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public boolean _isPropertyAKey(ReaderEventInfo info) {
    String s = info.getElementName();
    switch(s.length()) {
#foreach ($n in $class.getKeyBindingInfos())
    case $n.getIndex():
      if (false) return false;
#foreach ($m in $n.getKeyInfos())
      else if (s.equals("$m.getElementName()"))
        return info.compareXpaths(_getPropertyXpath("$m.getElementName()"));
#end##foreach keyInfos
      break;
#end##foreach keyInfoGroups
    default:
      return super._isPropertyAKey(info);
    }
    return super._isPropertyAKey(info);
  }
#end##if implementIsPropertyAKey

#if ($class.implementIsPropertyASingleton())
  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public boolean _isPropertyASingleton(ReaderEventInfo info) {
    String s = info.getElementName();
    switch(s.length()) {
#foreach ($n in $class.getSingletonBindingInfos())
    case $n.getIndex():
      if (false) return false;
#foreach ($m in $n.getKeyInfos())
      else if (s.equals("$m.getElementName()"))
        return info.compareXpaths(_getPropertyXpath("$m.getElementName()"));
#end##foreach keyInfos
      break;
#end##foreach keyInfoGroups
    default:
      return super._isPropertyASingleton(info);
    }
    return super._isPropertyASingleton(info);
  }
#end##if implementIsPropertyASingleton


#if ($class.implementIsPropertyAdditive())
  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public boolean _isPropertyAdditive(ReaderEventInfo info) {
    String s = info.getElementName();
    switch(s.length()) {
#foreach ($n in $class.getAdditiveBindingInfos())
    case $n.getIndex():
      if (false) return false;
#foreach ($m in $n.getKeyInfos())
      else if (s.equals("$m.getElementName()"))
        return info.compareXpaths(_getPropertyXpath("$m.getElementName()"));
#end##foreach keyInfos
      break;
#end##foreach keyInfoGroups
    default:
      return super._isPropertyAdditive(info);
    }
    return super._isPropertyAdditive(info);
  }
#end##if implementIsPropertyAdditive

#if ($class.implementIsChildPropertyAKey())
  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public boolean _isChildPropertyAKey(String s) {
    switch(s.length()) {
#foreach ($n in $class.getChildKeyBindingInfos())
    case $n.getIndex():
      if (false) return false;
#foreach ($m in $n.getKeyInfos())
      else if (s.equals("$m.getElementName()"))
        return true;
#end##foreach keyInfos
      break;
#end##foreach keyInfoGroups
    default:
      return false;
    }
    return false;
  }
#end##if implementGetParentReaderEvent

  protected void _unSet(int idx) {
    if (!_initializeProperty(idx)) {
      super._unSet(idx);
    } else {
      _markSet(idx, false);
#foreach ($p in $class.getDeclaredProperties())
#if ($p.isDeclaredEncrypted() && $p.getImplementation().getDelegate())
      if (idx == $p.getIndex()) _markSet($p.getImplementation().getDelegate().getDeclaration().getIndex(), false);
#end##if
#end##foreach      
    }
  }


  /**
   * @return new instance of helper
   */
  protected AbstractDescriptorBeanHelper _createHelper() {
    return new Helper(this);
  }

  /**
   * @return true if any property is set
   */
  public boolean _isAnythingSet() {
    return super._isAnythingSet()
#foreach ($p in $class.getDeclaredProperties())
#if ($p.isTransient())
## ignore
#elseif ($p.isChild() && $p.isReadOnly())
      || is${p.getName()}Set()
#end##if
#end##foreach
      ;
  }



  /**
   * @return true if property initialized, false idx refers to a property
   * handled by superclass
   */
  private boolean _initializeProperty(int idx) {
    boolean initOne = idx > -1;
    if (!initOne) {
      idx = $class.getFirstDeclaredPropertyIndex();
    }
    try {
      switch (idx) {
#foreach ($p in $class.getDeclaredProperties())
      case $p.getIndex():
#if ($p.isDeclaredEncrypted() && $p.getImplementation().getDelegate())
#set($p = $p.getImplementation().getDelegate().getDeclaration())
#end##if
#if ($p.isBean() && $p.isArray())
#set($default = "$p.getImplementation().getIntfInitializer()")
#else
#set($default = "$p.getImplementation().getInitializer()")
#end##if
#set($initializer = "$p.getInitializer()")
#set($cField = "$p.getSetter().getImplementation().getCustomizer().getField().getName()")
#if ($initializer == "")
#if ($p.getSetter().getImplementation().isImplementedByCustomizer())
        ${cField}.$p.getSetter().getName()($default);
#else
        $p.getImplementation().getField().getName() = $default;
#end##if
#else
#if ($p.getSetter().getImplementation().isImplementedByCustomizer())
        ${cField}.$p.getSetter().getName()(isEditable() ? $initializer : $default);
#else
        $p.getImplementation().getField().getName() = isEditable() ? $initializer : $default;
#end##if
        ## Bug 20748325: don't call _markSet when bean is transient
        if (isEditable() && !_isTransient()) _markSet($p.getIndex(), true);
#end##if
#if ($p.isReadOnly() && $p.isChild() && !$p.isArray())
        _postCreate((AbstractDescriptorBean)${p.getImplementation().getField().getName()});
#end##if
        if (initOne) break;
#end##foreach
      default:
        if (initOne) return false;
      }
      return true;
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw (Error)new AssertionError("Impossible Exception").initCause(e);
    }
  }


  /**
   * This helper class contains methods that are used infrequently and
   * can be easily separated from the bean implementations.  It is loaded
   * on demand to minimize memory usage.
   *
   * @xsdgen:complexType.exclude
   */
  protected static class Helper
#if ($class.getSuperClassName().startsWith("weblogic.descriptor.internal.Abstract"))
    extends ${class.getSuperClassName()}Helper
#else
    extends ${class.getSuperClassName()}.Helper
#end##if
  {
    private $class.getClassName() bean;

    protected Helper($class.getClassName() bean) {
      super(bean);
      this.bean = bean;
    }

    /**
     * @return property name indexed by propIndex.
     */
    public String getPropertyName(int propIndex) {
      switch (propIndex) {
#foreach ($p in $class.getDeclaredProperties())
      case $p.getIndex(): return "$p.getName()";
#end##foreach
      default: return super.getPropertyName(propIndex);
      }
    }


    /**
     * @return property index of propName.
     */
    public int getPropertyIndex(String propName) {
      if (false) return -1;
#foreach ($p in $class.getDeclaredProperties())
      else if (propName.equals("$p.getName()")) return $p.getIndex();
#end##foreach
      else return super.getPropertyIndex(propName);
    }

    /**
     * @return iterator over all children
     */
    public Iterator getChildren() {
      List iterators = new ArrayList();
#foreach ($p in $class.getProperties())
#if ($p.isChild())
#set($getter = "${p.getGetter().getName()}()")
#if ($p.isArray())
      iterators.add(new ArrayIterator(bean.$getter));
#else
      if (bean.$getter != null) {
        iterators.add(new ArrayIterator(new $p.getType()[] {bean.$getter}));
      }
#end##if isArray
#end##if isChild
#end##foreach
      return new CombinedIterator(iterators);
    }

    /**
     * Compute hash value for version helper
     */
    protected long computeHashValue(CRC32 crc) {
      try {
        StringBuffer buf = new StringBuffer();
        long superValue = super.computeHashValue(crc);
        if (superValue != 0) {
          buf.append(String.valueOf(superValue));
        }

        long childValue = 0;
#foreach ($p in $class.getDeclaredProperties())
#set($getter = "${p.getGetter().getName()}()")
#if ($p.isChild())
#if ($p.isArray())
        childValue = 0;
        for (int i = 0 ; i < bean.${p.getGetter().getName()}().length; i++){
          childValue ^= computeChildHashValue(bean.$getter[i]);
        }
#else
        childValue = computeChildHashValue(bean.$getter);
#end##if isArray
        if (childValue != 0) {
          buf.append(String.valueOf(childValue));
        }
#else
        if (bean.is$p.getName()Set()){
          buf.append("$p.getName()");
#if ($p.isArray())
          buf.append(Arrays.toString(ArrayUtils.copyAndSort(bean.$getter)));
#else
          buf.append(String.valueOf(bean.$getter));
#end##if isArray
        }
#end##if isChild
#end##foreach
        crc.update(buf.toString().getBytes());
        return crc.getValue();
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }
    /**
     * Compute difference between this and other
     */
    protected void computeDiff(AbstractDescriptorBean other) {
      try {
        super.computeDiff(other);
#if ($class.isAllowDiffWithSiblingClass())
#if (!$class.getSuperClassName().startsWith("weblogic.descriptor.internal.Abstract"))
        if (other instanceof $class.getSuperClassName() && 
            !(other instanceof $class.getClassName())) {
          return;
        }
#end##if
#end##if
      $class.getClassName() otherTyped = ($class.getClassName())other;
#foreach ($p in $class.getDeclaredProperties())
#set($getter = "${p.getGetter().getName()}()")
#if ($p.isTransient() || $p.isPreviouslyPersisted())
## ignore
#else
#if ($p.isObsolete())
      if (BootstrapProperties.getIncludeObsoletePropsInDiff()) {
#end##if
#if($p.hasRestarts() && !$p.isEmptyRestarts())
      addRestartElements("$p.getName()",$p.getRestartsMethod());
#end##if
#if (!$p.isChild())
#if ($p.arrayOrderSensitive())
      computeDiff("$p.getName()", bean.$getter, otherTyped.$getter, $p.isDynamic(), $p.arrayOrderSensitive());
#else
      computeDiff("$p.getName()", bean.$getter, otherTyped.$getter, $p.isDynamic());
#end##if
#elseif ($p.isReadOnly() && !$p.isArray())
      computeSubDiff("$p.getName()", bean.$getter, otherTyped.$getter);
#else
#if ($p.arrayOrderSensitive())
      ## Now into Ashok's CodeGen
      computeChildDiff("$p.getName()", bean.$getter, otherTyped.$getter, $p.isDynamic(), $p.arrayOrderSensitive());
#else
      ## Now into Ashok's CodeGen
      computeChildDiff("$p.getName()", bean.$getter, otherTyped.$getter, $p.isDynamic());
#end##if
#end##if
#if ($p.isObsolete())
      }
#end##if
#end##if
#end##foreach
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void applyPropertyUpdate(BeanUpdateEvent event, PropertyUpdate update) {
      try {
#set($implName = "$class.getClassName()")
        $implName original = ($implName)event.getSourceBean();
        $implName proposed = ($implName)event.getProposedBean();
        String prop = update.getPropertyName();
        int type = update.getUpdateType();
## If neither the original nor the proposed property is set
## it means that the change is becuase this is a derived
## property
        if (update.isDerivedUpdate()) {
          return;
        }
#foreach ($p in $class.getDeclaredProperties())
        if (prop.equals("$p.getName()")) {
#if ($p.isTransient() || $p.isPreviouslyPersisted())
## ignore
#elseif ($p.isReference())
## Always handle references by updating the reference string.  The setter will
## handle reference resolution
## FIXME ehalpern 8/8/04 -- This will get called for every change to the
## reference list.  This will not cause a problem since duplicate references
## are ignored however it is inefficient.
          original.set${p.getName()}AsString(proposed.get${p.getName()}AsString());
#*  *##if ($p.arrayOrderSensitive())
          reorderArrayObjects(original.$p.getGetter().getName()(), proposed.$p.getGetter().getName()());
#*  *##end
## If the proposed tree's property is unset, unset it here
          original._conditionalUnset(update.isUnsetUpdate(), $p.getIndex());
#elseif (!$p.hasAddressableComponents())
## assert type == PropertyUpdate.CHANGE;
#if ($p.isChild())
## This handling is for a singleton Child
## If the destroyer exists and can be invoked, do destroy it and re-create it
          if (type == PropertyUpdate.ADD) {
            original.set$p.getName()(($p.getComponentType())
              createCopy((AbstractDescriptorBean)proposed.${p.getGetter().getName()}())
            );
          } else if (type == PropertyUpdate.REMOVE) {
            original._destroySingleton("$p.getName()", (DescriptorBean)original.${p.getGetter().getName()}());
          } else {
            throw new AssertionError("Invalid type: " + type);
          }
#elseif (!$p.isReadOnly())
#if ($p.getJClass().getClassLoader().loadClass("java.lang.Cloneable").isAssignableFrom($p.getJClass()))
          // is Cloneable
          original.set$p.getName()(proposed.${p.getGetter().getName()}() == null ? 
            null : ($p.getType())proposed.${p.getGetter().getName()}().clone());
#else
          original.set$p.getName()(proposed.$p.getGetter().getName()());
#end##if is Clonable
#end##if is not readonly
## If the proposed tree's property is unset, unset it here
          original._conditionalUnset(update.isUnsetUpdate(), $p.getIndex());
#else
          if (type == PropertyUpdate.ADD) {
#if ($p.isBean())
            if (!((AbstractDescriptorBean)update.getAddedObject())._isSynthetic()) {
              update.resetAddedObject(createCopy((AbstractDescriptorBean)update.getAddedObject()));
              original.add$p.getComponentName()(($p.getComponentType())update.getAddedObject());
            }
#else
            update.resetAddedObject(update.getAddedObject());
            original.add$p.getComponentName()(($p.getComponentType())update.getAddedObject());
#end##if
#*        *##if ($p.arrayOrderSensitive())
            reorderArrayObjects(original.$p.getGetter().getName()(), proposed.$p.getGetter().getName()());
#*        *##end
          } else if (type == PropertyUpdate.REMOVE) {
            original.remove$p.getComponentName()(($p.getComponentType())update.getRemovedObject());
          } else {
#*        *##if ($p.arrayOrderSensitive())
            reorderArrayObjects(original.$p.getGetter().getName()(), proposed.$p.getGetter().getName()());
#*        *##else
            throw new AssertionError("Invalid type: " + type);
#*        *##end
          }
## If the proposed tree's property is unset, unset it here
#*      *##if (!$p.hasAddressableComponents())
          original._conditionalUnset(update.isUnsetUpdate(), $p.getIndex());
#*      *##else
          if (original.$p.getGetter().getName()() == null || original.${p.getGetter().getName()}().length == 0) {
            original._conditionalUnset(update.isUnsetUpdate(), $p.getIndex());
          }
#*      *##end##if
#end##if transient/reference/addressable_components/else
        } else
#end##foreach
        {
          super.applyPropertyUpdate(event, update);
        }
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected AbstractDescriptorBean finishCopy(
    AbstractDescriptorBean initialCopy, boolean includeObsolete, List excludeProps
    ) {
      Object o;
      try {
        $class.getClassName() copy = ($class.getClassName())initialCopy;
        super.finishCopy(copy, includeObsolete, excludeProps);
#foreach ($p in $class.getDeclaredProperties())
#if ($p.isTransient() || $p.isPreviouslyPersisted())
## ignore
#else
#if ($p.isObsolete())
        if (includeObsolete) {
#end##if
        if ((excludeProps == null || !excludeProps.contains("$p.getName()")) && bean.is$p.getName()Set()) {
#if ($p.isReference())
          copy._unSet(copy, $p.getIndex());
          copy.set${p.getName()}AsString(bean.get${p.getName()}AsString());
#elseif ($p.isBean() && !$p.isArray())
          if (!copy._isSet($p.getIndex())) {
            o = bean.$p.getGetter().getName()();
            copy.set$p.getName()(null); // required to avoid BeanAlreadyExistsEx
            copy.set$p.getName()((o == null) ? null : ($p.getType())createCopy((AbstractDescriptorBean)o, includeObsolete));
          }
#elseif ($p.isBean() && $p.isArray())
          if (!copy._isSet($p.getIndex())) {
            $p.getType() old$p.getName() = bean.get$p.getName()();
            $p.getType() new$p.getName() = new $p.getComponentType()[old${p.getName()}.length];
            for (int i = 0; i < new${p.getName()}.length; i++) {
              new$p.getName()[i] = ($p.getComponentType())(createCopy((AbstractDescriptorBean)old$p.getName()[i], includeObsolete));
            }
            copy.set$p.getName()(new$p.getName());
          }
#elseif (!$p.isBean() && $p.isArray())
          o = bean.$p.getGetter().getName()();
          copy.set$p.getName()((o == null) ? null : ($p.getType())(($p.getType())o).clone());
#elseif (!$p.isReadOnly())
          copy.set$p.getName()(($p.getType())bean.$p.getGetter().getName()());
#end##if
        }
#if ($p.isObsolete())
        }
#end##if
#end##if
#end##foreach
        return copy;
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void inferSubTree(Class clazz, Object annotation) {
    	super.inferSubTree(clazz, annotation);
    	Object currentAnnotation = null;
#foreach ($p in $class.getDeclaredProperties())
#if ($p.hasAnnotationListener())
#foreach ($line in $p.getImplementation().getAnnotationListenerCode("clazz", "annotation"))
			$line
#end ##for each code line
#else ## if has annotation listener
#if ($p.isBean())
		inferSubTree(bean.$p.getGetter().getName()(), clazz, annotation);
#end ##if bean
#end ## if has annotation listener
#end ##foreach
    }
  }


  // FIXME ec@weblogic.com 01-Feb-05 -- no longer used. Remove when ADB method is removed
  public weblogic.descriptor.internal.Munger.SchemaHelper _getSchemaHelper() {
    return null;
  }

  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public String _getElementName(int propIndex) {
    return _getSchemaHelper2().getElementName(propIndex);
  }

## the workround to check for null, see details from
## http://wiki.apache.org/jakarta-velocity/CheckingForNull
#if ($class.getSchemaLocation())
  protected String getSchemaLocation() {
    return "$class.getSchemaLocation()";
  }
#end##if

#if ($class.getTargetNamespace())
  protected String getTargetNamespace() {
    return "$class.getTargetNamespace()";
  }
#end##if

  private static SchemaHelper2 _schemaHelper;
  public weblogic.descriptor.internal.SchemaHelper _getSchemaHelper2() {
    if (_schemaHelper == null)
	_schemaHelper = new SchemaHelper2();
    return _schemaHelper;
  }

   // new schema helper
  /**
   * @xsdgen:complexType.exclude
   */
  public static class SchemaHelper2
#if ($class.getSuperClassName().startsWith("weblogic.descriptor.internal.Abstract"))
   extends weblogic.descriptor.internal.AbstractSchemaHelper2
#elseif ($class.getSuperClassName().startsWith("weblogic.management"))
   extends weblogic.descriptor.internal.AbstractSchemaHelper2
#else
   extends ${class.getSuperClassName()}.SchemaHelper2
#end##if
   implements weblogic.descriptor.internal.SchemaHelper
  {
    public int getPropertyIndex(String s) {
      switch(s.length()) {
#foreach ($n in $class.getAllBindingInfos())
      case $n.getIndex():
        if (false) return -1;
#foreach ($m in $n.getKeyInfos())
        else if (s.equals("$m.getElementName()"))
          return $m.getPropertyIndex();
#end##foreach keyInfos
        break;
#end##foreach keyInfoGroups
      default:
        break;
      }
      return super.getPropertyIndex(s);
    }

    public weblogic.descriptor.internal.SchemaHelper getSchemaHelper(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isChild())
      case $p.getIndex():
#set($default = "$p.getComponentType()")
        return new ${default}Impl.SchemaHelper2();
#end##if isChild
#end##foreach
      default:
        return super.getSchemaHelper(propIndex);
      }
    }


#if ($class.implementSchemaHelperGetRootElementName())
    public String getRootElementName() {
      return "$class.getRootElementName()";
    }
#end##if implementSchemaHelperGetRootElementName

    public String getElementName(int propIndex) {
      switch (propIndex) {
#foreach ($p in $class.getDeclaredProperties())
        case $p.getIndex(): return "$p.getBindingInfo().getElementName()";
#end##foreach
        default: return super.getElementName(propIndex);
      }
    }


#if ($class.implementSchemaHelperIsArray())
    public boolean isArray(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isArray() && ! $p.getImplementation().isEncryptionDelegate())
      case $p.getIndex():
        return true;
#end##if isArray
#end##foreach
      default:
        return super.isArray(propIndex);
      }
    }
#end##if implementSchemaHelperIsArray

#if ($class.implementSchemaHelperIsAttribute())
    public boolean isAttribute(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isAttribute())
      case $p.getIndex():
        return true;
#end##if isAttribute
#end##foreach
      default:
        return super.isAttribute(propIndex);
      }
    }

    public String getAttributeName(int propIndex) {
      return getElementName(propIndex);
    }

#end##if implementSchemaHelperIsAttribute



#if ($class.implementSchemaHelperIsBean())
    public boolean isBean(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isChild())
      case $p.getIndex():
        return $p.isBean();
#end##if isChild
#end##foreach
      default:
        return super.isBean(propIndex);
      }
    }
#end##if implementSchemaHelperIsBean

#if ($class.implementSchemaHelperIsConfigurable())
    public boolean isConfigurable(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isConfigurable())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isConfigurable(propIndex);
      }
    }
#end##if implementSchemaHelperIsConfigurable

#if ($class.implementMergePrepend())
    public boolean isMergeRulePrependDefined(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isMergeRulePrependDefined())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isMergeRulePrependDefined(propIndex);
      }
    }
#end##if implementMergePrepend


#if ($class.implementMergeIgnoreSource())
    public boolean isMergeRuleIgnoreSourceDefined(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isMergeRuleIgnoreSourceDefined())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isMergeRuleIgnoreSourceDefined(propIndex);
      }
    }
#end##if implementMergeIgnoreSource

#if ($class.implementMergeIgnoreTarget())
    public boolean isMergeRuleIgnoreTargetDefined(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isMergeRuleIgnoreTargetDefined())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isMergeRuleIgnoreTargetDefined(propIndex);
      }
    }
#end##if implementMergeIgnoreTarget

#if ($class.implementSchemaHelperIsKey())
    public boolean isKey(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isKey())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isKey(propIndex);
      }
    }
#end##if implementSchemaHelperIsKey

#if ($class.implementSchemaHelperIsKeyChoise())
    public boolean isKeyChoice(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isKeyChoice())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isKeyChoice(propIndex);
      }
    }
#end##if implementSchemaHelperIsKeyChoise

#if ($class.implementSchemaHelperIsKeyComponent())
    public boolean isKeyComponent(int propIndex) {
      switch(propIndex) {
#foreach ($p in $class.getProperties())
#if ($p.isKeyComponent())
      case $p.getIndex():
        return true;
#end##if isChild
#end##foreach
      default:
        return super.isKeyComponent(propIndex);
      }
    }
#end##if implementSchemaHelperIsKeyComponent

#if ($class.implementSchemaHelperHasKey())
    public boolean hasKey() {
      return true;
    }
#end##if implementSchemaHelperHasKey

#if ($class.implementSchemaHelperIsKey() || $class.implementSchemaHelperIsKeyComponent())
    public String[] getKeyElementNames() {
    List indices = new ArrayList();
#if ($class.implementSchemaHelperIsKey())
#foreach ($p in $class.getProperties())
#if ($p.isKey())
      indices.add("$p.getBindingInfo().getElementName()");
#end##if isChild
#end##foreach
#elseif ($class.implementSchemaHelperIsKeyComponent())
#foreach ($p in $class.getProperties())
#if ($p.isKeyComponent())
      indices.add("$p.getBindingInfo().getElementName()");
#end##if isChild
#end##foreach
#end##if is key or key component
      return (String[])indices.toArray(new String[0]);
    }
#end## if implementSchemaHelperGetKeyIndices
  }


#if (!$options.getTemplateExtension().equals(""))
#parse($options.getTemplateExtension())
#end

#if ($class.needsPostGenValidation())
  public static void validateGeneration() {
#foreach ($p in $class.getDeclaredProperties())
#if ($p.needsPostGenValidation())
#foreach ($v in $p.getPostGenValidations())
      try {
#foreach ($line in $v.getValidationCode())
        $line
#end##foreach line of code
      } catch (IllegalArgumentException e) {
        throw new DescriptorValidateException("$v.getMessage()" + e.getMessage());
      }
#end##foreach validation
#end##if property needs delayed validation
#end##foreach property
  }
#end##if class needs delayed validations
}
