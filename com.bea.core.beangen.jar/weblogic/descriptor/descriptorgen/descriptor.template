
/*
 * This is a generated file. Do not edit this file.
 */
package $target.getPackage();

/** 
 * Deployment descriptor implementation for $source.getQualifiedName()
 * Generated on $date
 * $copyright
 * $author
 * $version
 */

#if ($target.isAbsract())
public abstract class $target.getName()
#else
public class $target.getName()
#end ## if(isAbsract)
#if ($target.hasSuperClass())
extends ${target.getSuperClassName()}
#else
 extends weblogic.descriptor.internal.AbstractDescriptorBean
#end ## if(hasSuperClass)
implements $source.getQualifiedName() {
#if (${target.hasAttributes()})
  // declare
#foreach ($attribute in $target.getAttributes())
  private ${attribute.getType().getQualifiedName()} ${attribute.getName()};
#end ## foreach(getAttributes)
#end ## if (hasAttributes)
  public ${target.getName()}() {
    this(null,null);
  }

  public ${target.getName()}(weblogic.descriptor.Descriptor descriptor, weblogic.descriptor.DescriptorBean parent) {
    super(descriptor,parent);
#if (${target.hasAttributes()})
    // have attributes
#foreach( $attribute in $target.getAttributes())
    ${attribute.getName()} = $attribute.getInitializer();
#end ## foreach(attribute)
#end ## if(hasAttibutes)
}

#if ($target.hasMethods())
   // method productions
#foreach ($method in ${target.getMethods()})
#if ($method.hasExceptions())
  public ${method.getReturnType().getQualifiedName()} ${method.getName()}( $method.getParameterList() ) throws $method.getExceptionList() {
#else
  public ${method.getReturnType().getQualifiedName()} ${method.getName()}( $method.getParameterList() ) {
#end
#if ($method.isOperation())
#if (${method.getReturnType().getName().equals("void")})
   return;
#else
    return null;
#end ## end if(isOperation)
#elseif ($method.isSetter())
#if (${method.getAnnotatableAttribute().getType().getQualifiedName().equals("java.lang.String")})
     this.${method.getAnnotatableAttribute().getName()} = ( ${method.getArgumentList()} == null ? null : ${method.getArgumentList()}.trim() );
#elseif (${method.getAnnotatableAttribute().getType().getQualifiedName().equals("java.lang.String[]")})
     this.${method.getAnnotatableAttribute().getName()} = ${method.getArgumentList()};
     for (int i = 0; i < ${method.getAnnotatableAttribute().getName()}.length;  i++)
       this.${method.getAnnotatableAttribute().getName()}[i] = ${method.getArgumentList()}[i].trim();
#else
     this.${method.getAnnotatableAttribute().getName()} = ${method.getArgumentList()};
#end ## end if (is string)
## end if(isSetter)
#elseif ($method.isGetter())
     return ${method.getAnnotatableAttribute().getName()};
##end if(isGetter)
#elseif ($method.isBeanFactory())
     // FIXME ec@weblogic.com 07-Nov-03 -- set parent, what else?
     ${method.getReturnType().getQualifiedName()} enrollee = new ${method.getReturnType().getQualifiedName()}Impl(getDescriptor(),getParent());
     set${method.getAnnotatableAttribute().getPropertyName()}(enrollee);
     return enrollee;
##end if(isBeanFactory)
#elseif ($method.isBeanAntiFactory())
     // FIXME ec@weblogic.com 07-Nov-03 -- disown bean: set parent null, what else?
     return;
#elseif ($method.isEnroller())
     // FIXME ec@weblogic.com 07-Nov-03 -- set parent, what else?
     int len;
     ${method.getAnnotatableAttribute().getType().getComponentType().getQualifiedName()} enrollee =
        new ${method.getReturnType().getQualifiedName()}Impl(getDescriptor(),getParent());

     if ( ${method.getAnnotatableAttribute().getName()} == null) {
       len = 1;
       ${method.getAnnotatableAttribute().getName()} = new ${method.getAnnotatableAttribute().getType().getComponentType().getQualifiedName()}[len];
       ${method.getAnnotatableAttribute().getName()}[0] =  enrollee;
       return enrollee;
     }
     
     len = ${method.getAnnotatableAttribute().getName()}.length+1;
     $method.getAnnotatableAttribute().getType().getQualifiedName() temp  = new ${method.getAnnotatableAttribute().getType().getComponentType().getQualifiedName()}[len];
     for (int i = 0; i < ${method.getAnnotatableAttribute().getName()}.length;  i++)
       temp[i] = ${method.getAnnotatableAttribute().getName()}[i];
     temp[${method.getAnnotatableAttribute().getName()}.length] = enrollee;
     ${method.getAnnotatableAttribute().getName()} = temp;

     return enrollee;
#elseif ($method.isUnenroller())
     // FIXME ec@weblogic.com 07-Nov-03 -- disown bean: set parent null, what else?
     // FIXME ec@weblogic.com 07-Nov-03 -- remove from attribute array
     return;
#elseif ($method.isAdder())
     int len;

     if ( ${method.getAnnotatableAttribute().getName()} == null) {
       len = 1;
       ${method.getAnnotatableAttribute().getName()} = new ${method.getAnnotatableAttribute().getType().getComponentType().getQualifiedName()}[len];
#if (${method.getAnnotatableAttribute().getType().getQualifiedName().equals("java.lang.String[]")})
       ${method.getAnnotatableAttribute().getName()}[0] = ( ${method.getArgumentList()} == null ? null : ${method.getArgumentList()}.trim() );
#else
       ${method.getAnnotatableAttribute().getName()}[0] =  ${method.getArgumentList()};
#end
       return;
     }
     
     len = ${method.getAnnotatableAttribute().getName()}.length+1;
     $method.getAnnotatableAttribute().getType().getQualifiedName() temp  = new ${method.getAnnotatableAttribute().getType().getComponentType().getQualifiedName()}[len];
     for (int i = 0; i < ${method.getAnnotatableAttribute().getName()}.length;  i++)
       temp[i] = ${method.getAnnotatableAttribute().getName()}[i];
#if (${method.getAnnotatableAttribute().getType().getQualifiedName().equals("java.lang.String[]")})
       temp[${method.getAnnotatableAttribute().getName()}.length] = ( ${method.getArgumentList()} == null ? null : ${method.getArgumentList()}.trim() );
#else
     temp[${method.getAnnotatableAttribute().getName()}.length] = ${method.getArgumentList()};
#end
     ${method.getAnnotatableAttribute().getName()} = temp;
     return;
#elseif ($method.isRemover())
     // FIXME ec@weblogic.com 07-Nov-03 -- remove from attribute array
     return;
#end ## end if/elseif(isOperation/isSetter/isGetter)
 }

#end## foreach(methods)
##
   // end method productions
#end ## if(hasMehtods)
}




