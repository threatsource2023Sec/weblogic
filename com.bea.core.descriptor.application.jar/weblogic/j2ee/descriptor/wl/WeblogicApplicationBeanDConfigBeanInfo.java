package weblogic.j2ee.descriptor.wl;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;
import java.util.List;

public class WeblogicApplicationBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(WeblogicApplicationBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         List plist = new ArrayList();

         try {
            PropertyDescriptor pd = new PropertyDescriptor("Ejb", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getEjb", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Xml", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getXml", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("JDBCConnectionPools", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getJDBCConnectionPools", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Security", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getSecurity", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ApplicationParams", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getApplicationParams", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClassloaderStructure", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getClassloaderStructure", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Listeners", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getListeners", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SingletonServices", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getSingletonServices", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Startups", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getStartups", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Shutdowns", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getShutdowns", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Modules", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getModules", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LibraryRefs", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getLibraryRefs", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FairShareRequests", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getFairShareRequests", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResponseTimeRequests", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getResponseTimeRequests", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ContextRequests", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getContextRequests", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MaxThreadsConstraints", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getMaxThreadsConstraints", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MinThreadsConstraints", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getMinThreadsConstraints", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Capacities", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getCapacities", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("WorkManagers", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getWorkManagers", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedExecutorServices", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getManagedExecutorServices", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedScheduledExecutorServices", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getManagedScheduledExecutorServices", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ManagedThreadFactories", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getManagedThreadFactories", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ComponentFactoryClassName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getComponentFactoryClassName", "setComponentFactoryClassName");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ApplicationAdminModeTrigger", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getApplicationAdminModeTrigger", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", true);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SessionDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getSessionDescriptor", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("LibraryContextRootOverrides", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getLibraryContextRootOverrides", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferApplicationPackages", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getPreferApplicationPackages", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("PreferApplicationResources", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getPreferApplicationResources", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("FastSwap", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getFastSwap", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CoherenceClusterRef", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getCoherenceClusterRef", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResourceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getResourceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ResourceEnvDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getResourceEnvDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("EjbReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getEjbReferenceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ServiceReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getServiceReferenceDescriptions", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("MessageDestinationDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getMessageDestinationDescriptors", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("Version", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getVersion", "setVersion");
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("OsgiFrameworkReference", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getOsgiFrameworkReference", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ClassLoading", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getClassLoading", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("ReadyRegistration", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getReadyRegistration", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("CdiDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getCdiDescriptor", (String)null);
            pd.setValue("dependency", false);
            pd.setValue("declaration", false);
            pd.setValue("configurable", false);
            pd.setValue("key", false);
            pd.setValue("dynamic", false);
            plist.add(pd);
            pd = new PropertyDescriptor("SecondaryDescriptors", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicApplicationBeanDConfig"), "getSecondaryDescriptors", (String)null);
            pd.setValue("dependency", Boolean.FALSE);
            pd.setValue("declaration", Boolean.FALSE);
            pd.setValue("configurable", Boolean.FALSE);
            pd.setValue("key", Boolean.FALSE);
            pd.setValue("dynamic", Boolean.FALSE);
            plist.add(pd);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])plist.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for WeblogicApplicationBeanDConfigBeanInfo");
         }
      }
   }
}
