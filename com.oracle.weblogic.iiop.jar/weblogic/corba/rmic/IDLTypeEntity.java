package weblogic.corba.rmic;

import java.io.File;
import java.util.Hashtable;
import weblogic.iiop.IDLUtils;
import weblogic.utils.compiler.CodeGenerationException;

public class IDLTypeEntity extends IDLType {
   public static final String OPENING_DECLARATION = "valuetype";
   public static final TypeTraits TRAITS = new TypeTraits() {
      public Class getValidClass(Class c, Class ec) {
         return IDLMangler.isIDLEntity(c) ? c : null;
      }

      public IDLType createType(Class c, Class ec) {
         return new IDLTypeEntity(c, ec);
      }
   };

   public IDLTypeEntity(Class c, Class ec) {
      super(c, ec);
   }

   public String getIncludeDeclaration() throws CodeGenerationException {
      String result = new String();
      return result;
   }

   public String getForwardDeclaration() throws CodeGenerationException {
      String result = IDLUtils.generateInclude(this.getDirectory(), this.getJavaClass());
      return result;
   }

   public String beforeMainDeclaration() {
      String boxedType = IDLUtils.getIDLType(this.getJavaClass(), ".", "");
      String nonBoxedType = boxedType.substring(".org.omg.boxedIDL.".length() - 1);
      StringBuffer ret = new StringBuffer();
      System.err.println("<Warning> You must provide the IDL definition for " + nonBoxedType);
      System.err.println("<Warning> In general, do not mix CORBA and RMI programming models");
      ret.append("// The following include file has not been generated by ejbc because it\n");
      ret.append("// references an IDL type that already exists. You must supply this file\n");
      ret.append("// from the original IDL.\n");
      ret.append("#include \"");
      ret.append(nonBoxedType.replace('.', File.separatorChar) + ".idl");
      ret.append("\"\n\n");
      return ret.toString();
   }

   public String getOpeningDeclaration() throws CodeGenerationException {
      Class c = this.getJavaClass();
      String type = IDLUtils.stripPackage(IDLUtils.getIDLType(c, "."));
      String boxedType = IDLUtils.getIDLType(c);
      String nonBoxedType = boxedType.substring("::org::omg::boxedIDL::".length());
      StringBuffer ret = new StringBuffer();
      ret.append("valuetype ");
      ret.append(type + " ");
      ret.append("::" + nonBoxedType + ";\n");
      return ret.toString();
   }

   public String getOpenBrace() {
      return "";
   }

   public String getCloseBrace() {
      return "";
   }

   public void getReferences(Hashtable hResult) {
      Class c = this.getJavaClass();
      getAll(c, hResult, false);
   }

   public Hashtable getMethods() {
      return new Hashtable();
   }

   public Hashtable getAttributes() {
      return new Hashtable();
   }

   public String getPragmaID() {
      return IDLUtils.getPragmaID(this.getJavaClass());
   }

   public boolean canHaveSubtype(IDLType t) {
      return false;
   }
}
