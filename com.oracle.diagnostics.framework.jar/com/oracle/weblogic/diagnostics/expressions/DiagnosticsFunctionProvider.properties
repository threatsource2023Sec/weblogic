extract.short=<p>Extracts a table of time series from a specified set of input sources,\
    based on a specified sampling rate schedule and time window.\
    </p>
extract.full=<p>Extracts a table of time series from a specified set of input sources,\
    based on a specified sampling rate schedule and time window.\
    </p>\
    <br/>\
    <p>\
    The input source can be one of the following:<br/>\
    <ol>\
    <li>The output from a <code>query()</code> operation from a JMX expression\
    bean (e.g., <code>wls.runtime.query('com.bea:Type=ServletRuntime,*', 'ExecutionTimeAverage')</code>)</li>\
    <li>An EL expression, as a string (e.g.,\
    <code>wls.runtime.JVMRuntime.heapFreePercent</code></li>\
    </ol>\
    </p>\
    <br/>\
    <p>\
    The <code>schedule</code> and <code>duration</code> parameters can be in\
    hours, minutes, or seconds, and are specified as strings of the form<br/>\
    <br/>\
   \
    <pre>\
    amount[unit]\
    </pre>\
   \
    <br/>\
    where <code>amount</code> is an integer value, and <code>unit</code> is a\
    whole or partial word indicating the unit of time that applies to the the\
    <code>amount</code> value. If <code>unit</code> is not specified, seconds\
    are assumed. There can be spaces between the <code>amount</code> and\
    <code>units</code> values\
    </p>\
    <br/>\
    <p>\
    The units can be specified as one of<br/>\
    <ol>\
    <li>&quot;s&quot;[econds] (default)</li>\
    <li>&quot;m&quot;[inutes]</li>\
    <li>&quot;s&quot;[ours]</li>\
    </ol>\
    <br/>\
    <p>\
    The units, as mentioned above, can be a whole partial word, as long as it\
    begins with one of &quot;s&quot;, &quot;m&quot;, or &quot;h&quot;.\
    </p>\
    <br/>\
    Examples:<br/>\
   \
    <code>5seconds</code> <code>5 sec</code> <code>5s</code> <code>5m</code>\
    <code>5min</code> <code>5 mins</code> <code>5h</code> <code>5hrs</code>\
    <code>5 hr</code>\
   \
    </p>
extract.displayName=Extract Metrics
extract.spec.short=Metric to sample 
extract.spec.full=The metric to sample, specified either an EL expression as a string, or the output from a JMX bean <code>query()</code> operation
extract.schedule.short=The samping rate of the metric, specified as a string, in hours, minutes, or seconds (the default)
extract.schedule.full=<p>The samping rate of the metric, specified as a string, in hours, minutes, or seconds (the default)</p>\
    Examples:<br/>\
   \
    <code>5seconds</code> <code>5 sec</code> <code>5s</code> <code>5m</code>\
    <code>5min</code> <code>5 mins</code> <code>5h</code> <code>5hrs</code>\
    <code>5 hr</code>
extract.duration.short=<p>The required sampling window of the metric, specified as a string, in hours, minutes, or seconds (the default)</p>
extract.duration.full=<p>The required sampling window of the metric, specified as a string, in hours, minutes, or seconds (the default)</p>\
    Examples:<br/>\
   \
    <code>5seconds</code> <code>5 sec</code> <code>5s</code> <code>5m</code>\
    <code>5min</code> <code>5 mins</code> <code>5h</code> <code>5hrs</code>\
    <code>5 hr</code>
tableAverages.short=<p>Computes a vector of averages based on an input table of numeric values</p>
tableAverages.full=<p>Performs a matrix reduction on an input table of values, computing the\
 average of each row in the table and producing a vector of averages (one\
 for each row in the table).</p>\
<p>Typically each row in the table represents a time series of values from\
 a particular metric instance.</p>\
<p>Throws an <code>IllegalArgumentException</code> if the input is not a 2-dimensional table, or the input \
contains non-numeric values</p> 
tableAverages.displayName=Table Averages
tableAverages.table.short=The input table of numeric values
tableAverages.table.full=The input table of numeric values, where each row is typically a time series of values\
from the same metric instance
average.short=<p>Computes an average value based on set of numeric input values.</p>
average.full=<p>Computes an average value based on set of numeric input values.</p>\
<p>Returns the scalar average of the input vector, or <code>Double.NaN</code> if the input is empty.</p>\
<p>If the input contains any non-numeric values an <code>IllegalArgumentException</code> is thrown.</p>
average.displayName=Average
averages.inputValues.short=A vector of numeric input values
average.inputValues.full=A vector of numeric input values
changes.short=Computes a vector of differences from an input vector of numeric values
changes.displayName=Table Changes
changes.full=<p>Takes a vector of input values of size <code>n</code> and produces vector of (at most) <code>n-1</code> \
differences between successive values.</p>\
<p>For example, if the input vector is <code>{ 3, 2, 5, 3, 7 }</code>, the result vector will be\
<code>{ 1, -1, 3, -2, 4 }</code>.</p>\
<p>It is possible for a sequence to contain <code>Double.NaN</code>, in which case those values will be skipped.</p>\
<p>If an input value is non-numeric, an <code>IllegalArgumentException<code>is thrown.</p>
changes.inputValues.short=A input vector of numeric values
changes.inputValues.full=A input vector of numeric values
tableChanges.displayName=Table Changes
tableChanges.short=<p>Takes a table of input values and generates an output table of difference vectors,\
one for each input vector. </p>
tableChanges.full=<p>Takes a table of input values and generates an output table of difference vectors,\
one for each input vector. </p>\
<p>Throws an <code>IllegalArgumentException</code> if the input is not a 2-dimensional table, or the input \
contains non-numeric values</p> 
tableChanges.inputTable.short=The input table of numeric values
tableChanges.inputTable.full=The input table of numeric values, where each row is typically a time series of values\
from the same metric instance
