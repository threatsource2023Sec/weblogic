package org.apache.openjpa.jdbc.sql;

import org.apache.openjpa.jdbc.kernel.exps.FilterValue;

public abstract class AbstractDB2Dictionary extends DBDictionary {
   public int varcharCastLength = 1000;

   public AbstractDB2Dictionary() {
      this.numericTypeName = "DOUBLE";
      this.bitTypeName = "SMALLINT";
      this.smallintTypeName = "SMALLINT";
      this.tinyintTypeName = "SMALLINT";
      this.longVarbinaryTypeName = "BLOB";
      this.varbinaryTypeName = "BLOB";
      this.toUpperCaseFunction = "UPPER(CAST({0} AS VARCHAR(" + this.varcharCastLength + ")))";
      this.toLowerCaseFunction = "LOWER(CAST({0} AS VARCHAR(" + this.varcharCastLength + ")))";
      this.stringLengthFunction = "LENGTH({0})";
      this.concatenateFunction = "(CAST({0} AS VARCHAR(" + this.varcharCastLength + ")))||(CAST({1} AS VARCHAR(1000)))";
      this.trimLeadingFunction = "LTRIM({0})";
      this.trimTrailingFunction = "RTRIM({0})";
      this.trimBothFunction = "LTRIM(RTRIM({0}))";
      this.forUpdateClause = "FOR UPDATE WITH RR";
      this.supportsLockingWithDistinctClause = false;
      this.supportsLockingWithMultipleTables = false;
      this.supportsLockingWithOrderClause = false;
      this.supportsLockingWithOuterJoin = false;
      this.supportsLockingWithInnerJoin = false;
      this.supportsLockingWithSelectRange = true;
      this.requiresAutoCommitForMetaData = true;
      this.requiresAliasForSubselect = true;
      this.supportsAutoAssign = true;
      this.autoAssignClause = "GENERATED BY DEFAULT AS IDENTITY";
      this.lastGeneratedKeyQuery = "VALUES(IDENTITY_VAL_LOCAL())";
      this.crossJoinClause = "JOIN";
      this.requiresConditionForCrossJoin = true;
   }

   public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find, FilterValue start) {
      buf.append("(LOCATE(CAST((");
      find.appendTo(buf);
      buf.append(") AS VARCHAR(").append(Integer.toString(this.varcharCastLength)).append(")), CAST((");
      str.appendTo(buf);
      buf.append(") AS VARCHAR(").append(Integer.toString(this.varcharCastLength)).append("))");
      if (start != null) {
         buf.append(", CAST((");
         start.appendTo(buf);
         buf.append(") AS INTEGER) + 1");
      }

      buf.append(") - 1)");
   }

   public void substring(SQLBuffer buf, FilterValue str, FilterValue start, FilterValue end) {
      buf.append("SUBSTR(CAST((");
      str.appendTo(buf);
      buf.append(") AS VARCHAR(").append(Integer.toString(this.varcharCastLength)).append(")), ");
      long startLong;
      if (start.getValue() instanceof Number) {
         startLong = this.toLong(start);
         buf.append(Long.toString(startLong + 1L));
      } else {
         buf.append("CAST((");
         start.appendTo(buf);
         buf.append(") AS INTEGER) + 1");
      }

      if (end != null) {
         buf.append(", ");
         if (start.getValue() instanceof Number && end.getValue() instanceof Number) {
            startLong = this.toLong(start);
            long endLong = this.toLong(end);
            buf.append(Long.toString(endLong - startLong));
         } else {
            buf.append("CAST((");
            end.appendTo(buf);
            buf.append(") AS INTEGER) - CAST((");
            start.appendTo(buf);
            buf.append(") AS INTEGER)");
         }
      }

      buf.append(")");
   }
}
