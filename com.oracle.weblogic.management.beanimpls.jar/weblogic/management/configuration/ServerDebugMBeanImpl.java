package weblogic.management.configuration;

import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.zip.CRC32;
import javax.management.InvalidAttributeValueException;
import weblogic.descriptor.BeanUpdateEvent;
import weblogic.descriptor.BootstrapProperties;
import weblogic.descriptor.DescriptorBean;
import weblogic.descriptor.DescriptorValidateException;
import weblogic.descriptor.beangen.LegalChecks;
import weblogic.descriptor.internal.AbstractDescriptorBean;
import weblogic.descriptor.internal.AbstractDescriptorBeanHelper;
import weblogic.descriptor.internal.Munger;
import weblogic.descriptor.internal.ReferenceManager;
import weblogic.descriptor.internal.ResolvedReference;
import weblogic.descriptor.internal.SchemaHelper;
import weblogic.diagnostics.context.DiagnosticContextHelper;
import weblogic.utils.ArrayUtils;
import weblogic.utils.collections.ArrayIterator;
import weblogic.utils.collections.CombinedIterator;

public class ServerDebugMBeanImpl extends KernelDebugMBeanImpl implements ServerDebugMBean, Serializable {
   private boolean _ApplicationContainer;
   private String _BugReportServiceWsdlUrl;
   private boolean _ClassChangeNotifier;
   private boolean _ClassFinder;
   private boolean _ClassLoader;
   private boolean _ClassLoaderVerbose;
   private boolean _ClassloaderWebApp;
   private boolean _ClasspathServlet;
   private boolean _DebugAbbrevs;
   private boolean _DebugAppAnnotations;
   private boolean _DebugAppClient;
   private boolean _DebugAppContainer;
   private boolean _DebugAppContainerTools;
   private boolean _DebugAppTiming;
   private boolean _DebugAsyncQueue;
   private boolean _DebugAttach;
   private boolean _DebugBackgroundDeployment;
   private boolean _DebugBatchConnector;
   private boolean _DebugBeanTreeHarvesterControl;
   private boolean _DebugBeanTreeHarvesterDataCollection;
   private boolean _DebugBeanTreeHarvesterResolution;
   private boolean _DebugBeanTreeHarvesterThreading;
   private boolean _DebugBootstrapServlet;
   private boolean _DebugBuzzProtocol;
   private boolean _DebugBuzzProtocolDetails;
   private boolean _DebugBuzzProtocolHttp;
   private boolean _DebugCAT;
   private boolean _DebugCertRevocCheck;
   private boolean _DebugChannel;
   private boolean _DebugClassLoadingConsistencyChecker;
   private boolean _DebugClassLoadingContextualTrace;
   private boolean _DebugClassLoadingVerbose;
   private boolean _DebugClassRedef;
   private boolean _DebugClassSize;
   private boolean _DebugCluster;
   private boolean _DebugClusterAnnouncements;
   private boolean _DebugClusterFragments;
   private boolean _DebugClusterHeartbeats;
   private boolean _DebugCoherence;
   private boolean _DebugConcurrent;
   private boolean _DebugConcurrentContext;
   private boolean _DebugConcurrentMES;
   private boolean _DebugConcurrentMSES;
   private boolean _DebugConcurrentMTF;
   private boolean _DebugConcurrentTransaction;
   private boolean _DebugConfigurationEdit;
   private boolean _DebugConfigurationRuntime;
   private boolean _DebugConnectorService;
   private boolean _DebugConsensusLeasing;
   private boolean _DebugDRSCalls;
   private boolean _DebugDRSHeartbeats;
   private boolean _DebugDRSMessages;
   private boolean _DebugDRSQueues;
   private boolean _DebugDRSStateTransitions;
   private boolean _DebugDRSUpdateStatus;
   private boolean _DebugDataSourceInterceptor;
   private boolean _DebugDebugPatches;
   private boolean _DebugDefaultStoreVerbose;
   private boolean _DebugDeploy;
   private boolean _DebugDeployment;
   private boolean _DebugDeploymentConcise;
   private boolean _DebugDeploymentPlan;
   private boolean _DebugDeploymentService;
   private boolean _DebugDeploymentServiceInternal;
   private boolean _DebugDeploymentServiceStatusUpdates;
   private boolean _DebugDeploymentServiceTransport;
   private boolean _DebugDeploymentServiceTransportHttp;
   private boolean _DebugDescriptor;
   private boolean _DebugDiagnosticAccessor;
   private boolean _DebugDiagnosticArchive;
   private boolean _DebugDiagnosticArchiveRetirement;
   private boolean _DebugDiagnosticCollections;
   private boolean _DebugDiagnosticContext;
   private boolean _DebugDiagnosticDataGathering;
   private boolean _DebugDiagnosticFileArchive;
   private boolean _DebugDiagnosticImage;
   private boolean _DebugDiagnosticInstrumentation;
   private boolean _DebugDiagnosticInstrumentationActions;
   private boolean _DebugDiagnosticInstrumentationClassInfo;
   private boolean _DebugDiagnosticInstrumentationConfig;
   private boolean _DebugDiagnosticInstrumentationEvents;
   private boolean _DebugDiagnosticInstrumentationResult;
   private boolean _DebugDiagnosticInstrumentationWeaving;
   private boolean _DebugDiagnosticInstrumentationWeavingMatches;
   private boolean _DebugDiagnosticJdbcArchive;
   private boolean _DebugDiagnosticLifecycleHandlers;
   private boolean _DebugDiagnosticNotifications;
   private boolean _DebugDiagnosticQuery;
   private boolean _DebugDiagnosticRuntimeControlDriver;
   private boolean _DebugDiagnosticRuntimeControlService;
   private boolean _DebugDiagnosticWatch;
   private boolean _DebugDiagnosticWatchEvents;
   private boolean _DebugDiagnosticWatchEventsDetails;
   private boolean _DebugDiagnosticWlstoreArchive;
   private boolean _DebugDiagnosticsBeanExtensionResolver;
   private boolean _DebugDiagnosticsBeanInfoProviders;
   private boolean _DebugDiagnosticsELContext;
   private boolean _DebugDiagnosticsELResolver;
   private boolean _DebugDiagnosticsExpressionEvaluators;
   private boolean _DebugDiagnosticsExpressionFunctionMapper;
   private boolean _DebugDiagnosticsExpressionFunctions;
   private boolean _DebugDiagnosticsExpressionMetrics;
   private boolean _DebugDiagnosticsExpressionPoller;
   private boolean _DebugDiagnosticsExpressionPollerBuffer;
   private boolean _DebugDiagnosticsHarvester;
   private boolean _DebugDiagnosticsHarvesterData;
   private boolean _DebugDiagnosticsHarvesterMBeanPlugin;
   private boolean _DebugDiagnosticsHarvesterTreeBeanPlugin;
   private boolean _DebugDiagnosticsMBeanELResolver;
   private boolean _DebugDiagnosticsModule;
   private boolean _DebugDiagnosticsNotifications;
   private boolean _DebugDiagnosticsScriptAction;
   private boolean _DebugDiagnosticsTimer;
   private boolean _DebugDiagnosticsUtils;
   private boolean _DebugDiagnosticsValueTracingELResolver;
   private boolean _DebugDomainLogHandler;
   private boolean _DebugDomainUpgradeServerService;
   private boolean _DebugDynamicSingletonServices;
   private boolean _DebugEjbCaching;
   private boolean _DebugEjbCmpDeployment;
   private boolean _DebugEjbCmpRuntime;
   private boolean _DebugEjbCompilation;
   private boolean _DebugEjbDeployment;
   private boolean _DebugEjbInvoke;
   private boolean _DebugEjbLocking;
   private boolean _DebugEjbMdbConnection;
   private boolean _DebugEjbMetadata;
   private boolean _DebugEjbPooling;
   private boolean _DebugEjbSecurity;
   private boolean _DebugEjbSwapping;
   private boolean _DebugEjbTimerStore;
   private boolean _DebugEjbTimers;
   private boolean _DebugElasticActions;
   private boolean _DebugElasticServices;
   private boolean _DebugEmbeddedLDAP;
   private int _DebugEmbeddedLDAPLogLevel;
   private boolean _DebugEmbeddedLDAPLogToConsole;
   private boolean _DebugEmbeddedLDAPWriteOverrideProps;
   private boolean _DebugEventManager;
   private boolean _DebugExpressionBeanLocalizer;
   private boolean _DebugExpressionExtensionsManager;
   private boolean _DebugExpressionPoller;
   private boolean _DebugFileDistributionServlet;
   private boolean _DebugFileOwnerFixer;
   private boolean _DebugHarvesterTypeInfoCache;
   private boolean _DebugHttp;
   private boolean _DebugHttpConcise;
   private boolean _DebugHttpLogging;
   private boolean _DebugHttpSessions;
   private boolean _DebugIIOPDetail;
   private boolean _DebugIIOPNaming;
   private boolean _DebugIIOPRepalcer;
   private boolean _DebugIIOPTunneling;
   private boolean _DebugInterceptors;
   private boolean _DebugJ2EEManagement;
   private int _DebugJAXPDebugLevel;
   private String _DebugJAXPDebugName;
   private boolean _DebugJAXPIncludeClass;
   private boolean _DebugJAXPIncludeLocation;
   private boolean _DebugJAXPIncludeName;
   private boolean _DebugJAXPIncludeTime;
   private OutputStream _DebugJAXPOutputStream;
   private boolean _DebugJAXPUseShortClass;
   private boolean _DebugJDBCConn;
   private boolean _DebugJDBCDriverLogging;
   private boolean _DebugJDBCInternal;
   private boolean _DebugJDBCONS;
   private boolean _DebugJDBCRAC;
   private boolean _DebugJDBCRMI;
   private boolean _DebugJDBCReplay;
   private boolean _DebugJDBCSQL;
   private boolean _DebugJDBCUCP;
   private boolean _DebugJMSAME;
   private boolean _DebugJMSBackEnd;
   private boolean _DebugJMSBoot;
   private boolean _DebugJMSCDS;
   private boolean _DebugJMSCommon;
   private boolean _DebugJMSConfig;
   private boolean _DebugJMSCrossDomainSecurity;
   private boolean _DebugJMSDispatcher;
   private boolean _DebugJMSDispatcherProxy;
   private boolean _DebugJMSDispatcherUtilsVerbose;
   private boolean _DebugJMSDispatcherVerbose;
   private boolean _DebugJMSDistTopic;
   private boolean _DebugJMSDotNetProxy;
   private boolean _DebugJMSDotNetT3Server;
   private boolean _DebugJMSDotNetTransport;
   private boolean _DebugJMSDurSub;
   private boolean _DebugJMSDurableSubscribers;
   private boolean _DebugJMSFrontEnd;
   private boolean _DebugJMSJDBCScavengeOnFlush;
   private boolean _DebugJMSJNDI;
   private boolean _DebugJMSLocking;
   private boolean _DebugJMSMessagePath;
   private boolean _DebugJMSModule;
   private boolean _DebugJMSOBS;
   private boolean _DebugJMSPauseResume;
   private boolean _DebugJMSSAF;
   private boolean _DebugJMSStore;
   private boolean _DebugJMST3Server;
   private boolean _DebugJMSWrappers;
   private boolean _DebugJMSXA;
   private boolean _DebugJMX;
   private boolean _DebugJMXCompatibility;
   private boolean _DebugJMXContext;
   private boolean _DebugJMXCore;
   private boolean _DebugJMXCoreConcise;
   private boolean _DebugJMXDomain;
   private boolean _DebugJMXEdit;
   private boolean _DebugJMXRuntime;
   private boolean _DebugJNDI;
   private boolean _DebugJNDIFactories;
   private boolean _DebugJNDIResolution;
   private boolean _DebugJPA;
   private boolean _DebugJTA2PC;
   private boolean _DebugJTA2PCDetail;
   private boolean _DebugJTA2PCStackTrace;
   private boolean _DebugJTAAPI;
   private boolean _DebugJTACDI;
   private boolean _DebugJTAGateway;
   private boolean _DebugJTAGatewayStackTrace;
   private boolean _DebugJTAHealth;
   private boolean _DebugJTAJDBC;
   private boolean _DebugJTALLR;
   private boolean _DebugJTALifecycle;
   private boolean _DebugJTAMigration;
   private boolean _DebugJTANaming;
   private boolean _DebugJTANamingStackTrace;
   private boolean _DebugJTANonXA;
   private boolean _DebugJTAPropagate;
   private boolean _DebugJTARMI;
   private boolean _DebugJTARecovery;
   private boolean _DebugJTARecoveryStackTrace;
   private boolean _DebugJTAResourceHealth;
   private String _DebugJTAResourceName;
   private boolean _DebugJTATLOG;
   private String _DebugJTATransactionName;
   private boolean _DebugJTAXA;
   private boolean _DebugJTAXAStackTrace;
   private boolean _DebugJpaDataCache;
   private boolean _DebugJpaEnhance;
   private boolean _DebugJpaJdbcJdbc;
   private boolean _DebugJpaJdbcSchema;
   private boolean _DebugJpaJdbcSql;
   private boolean _DebugJpaManage;
   private boolean _DebugJpaMetaData;
   private boolean _DebugJpaProfile;
   private boolean _DebugJpaQuery;
   private boolean _DebugJpaRuntime;
   private boolean _DebugJpaTool;
   private boolean _DebugKodoWeblogic;
   private boolean _DebugLeaderElection;
   private boolean _DebugLegacy;
   private boolean _DebugLibraries;
   private boolean _DebugLifecycleManager;
   private boolean _DebugLoggingConfiguration;
   private boolean _DebugMBeanCIC;
   private boolean _DebugMBeanEventHandler;
   private boolean _DebugMBeanEventHandlerSummary;
   private boolean _DebugMBeanEventHandlerWork;
   private boolean _DebugMBeanHarvesterControl;
   private boolean _DebugMBeanHarvesterDataCollection;
   private boolean _DebugMBeanHarvesterResolution;
   private boolean _DebugMBeanHarvesterThreading;
   private boolean _DebugMBeanLocalization;
   private boolean _DebugMBeanTypeUtilQueue;
   private boolean _DebugMBeanTypeUtilQueuePriority;
   private boolean _DebugMBeanTypeUtilityListener;
   private boolean _DebugMBeanTypingUtility;
   private boolean _DebugMailSessionDeployment;
   private boolean _DebugManagedBean;
   private boolean _DebugManagementServicesResource;
   private String[] _DebugMaskCriterias;
   private boolean _DebugMessagingBridgeDumpToConsole;
   private boolean _DebugMessagingBridgeDumpToLog;
   private boolean _DebugMessagingBridgeRuntime;
   private boolean _DebugMessagingBridgeRuntimeVerbose;
   private boolean _DebugMessagingBridgeStartup;
   private boolean _DebugMessagingKernel;
   private boolean _DebugMessagingKernelBoot;
   private boolean _DebugMessagingOwnableLock;
   private boolean _DebugMigrationInfo;
   private boolean _DebugNIO;
   private boolean _DebugNodeManagerRuntime;
   private boolean _DebugPageFlowMonitoring;
   private boolean _DebugPartitionJMX;
   private boolean _DebugPartitionLifecycle;
   private boolean _DebugPartitionPortability;
   private boolean _DebugPartitionResourceMetricsRuntime;
   private boolean _DebugPatchingRuntime;
   private boolean _DebugPathSvc;
   private boolean _DebugPathSvcVerbose;
   private boolean _DebugPersistentStoreManager;
   private boolean _DebugPubSubBayeux;
   private boolean _DebugPubSubChannel;
   private boolean _DebugPubSubClient;
   private boolean _DebugPubSubSecurity;
   private boolean _DebugPubSubServer;
   private boolean _DebugRA;
   private boolean _DebugRAClassloader;
   private boolean _DebugRAConnEvents;
   private boolean _DebugRAConnections;
   private boolean _DebugRADeployment;
   private boolean _DebugRALifecycle;
   private boolean _DebugRALocalOut;
   private boolean _DebugRAParsing;
   private boolean _DebugRAPoolVerbose;
   private boolean _DebugRAPooling;
   private boolean _DebugRASecurityCtx;
   private boolean _DebugRAWork;
   private boolean _DebugRAWorkEvents;
   private boolean _DebugRAXAin;
   private boolean _DebugRAXAout;
   private boolean _DebugRAXAwork;
   private boolean _DebugRCM;
   private boolean _DebugRESTNotifications;
   private boolean _DebugRMIDetailed;
   private boolean _DebugRMIRequestPerf;
   private boolean _DebugReadyApp;
   private boolean _DebugRedefAttach;
   private boolean _DebugReplication;
   private boolean _DebugReplicationDetails;
   private boolean _DebugReplicationSize;
   private boolean _DebugRequestManager;
   private boolean _DebugResourceGroupMigration;
   private boolean _DebugRestJersey1Integration;
   private boolean _DebugRestJersey2Integration;
   private boolean _DebugRestartInPlace;
   private boolean _DebugSAFAdmin;
   private boolean _DebugSAFLifeCycle;
   private boolean _DebugSAFManager;
   private boolean _DebugSAFMessagePath;
   private boolean _DebugSAFReceivingAgent;
   private boolean _DebugSAFSendingAgent;
   private boolean _DebugSAFStore;
   private boolean _DebugSAFTransport;
   private boolean _DebugSAFVerbose;
   private boolean _DebugSNMPAgent;
   private boolean _DebugSNMPExtensionProvider;
   private boolean _DebugSNMPMib;
   private boolean _DebugSNMPProtocolTCP;
   private boolean _DebugSNMPToolkit;
   private boolean _DebugScaContainer;
   private boolean _DebugScrubberStartService;
   private boolean _DebugSecurity;
   private boolean _DebugSecurityAdjudicator;
   private boolean _DebugSecurityAtn;
   private boolean _DebugSecurityAtz;
   private boolean _DebugSecurityAuditor;
   private boolean _DebugSecurityCertPath;
   private boolean _DebugSecurityCredMap;
   private boolean _DebugSecurityEEngine;
   private boolean _DebugSecurityEncryptionService;
   private boolean _DebugSecurityJACC;
   private boolean _DebugSecurityJACCNonPolicy;
   private boolean _DebugSecurityJACCPolicy;
   private boolean _DebugSecurityKeyStore;
   private boolean _DebugSecurityPasswordPolicy;
   private boolean _DebugSecurityPredicate;
   private boolean _DebugSecurityProfiler;
   private boolean _DebugSecurityRealm;
   private boolean _DebugSecurityRoleMap;
   private boolean _DebugSecuritySAML2Atn;
   private boolean _DebugSecuritySAML2CredMap;
   private boolean _DebugSecuritySAML2Lib;
   private boolean _DebugSecuritySAML2Service;
   private boolean _DebugSecuritySAMLAtn;
   private boolean _DebugSecuritySAMLCredMap;
   private boolean _DebugSecuritySAMLLib;
   private boolean _DebugSecuritySAMLService;
   private boolean _DebugSecuritySSL;
   private boolean _DebugSecuritySSLEaten;
   private boolean _DebugSecurityService;
   private boolean _DebugSecurityUserLockout;
   private boolean _DebugSelfTuning;
   private boolean _DebugServerLifeCycle;
   private boolean _DebugServerMigration;
   private boolean _DebugServerRuntime;
   private boolean _DebugServerShutdownStatistics;
   private boolean _DebugServerShutdownTimer;
   private boolean _DebugServerStartStatistics;
   private boolean _DebugServerStartupTimer;
   private boolean _DebugSingletonServices;
   private boolean _DebugSituationalConfig;
   private boolean _DebugSpringStatistics;
   private boolean _DebugStore;
   private boolean _DebugStoreAdmin;
   private boolean _DebugStoreCache;
   private boolean _DebugStoreIOLogical;
   private boolean _DebugStoreIOLogicalBoot;
   private boolean _DebugStoreIOPhysical;
   private boolean _DebugStoreIOPhysicalVerbose;
   private boolean _DebugStoreRCM;
   private boolean _DebugStoreRCMVerbose;
   private boolean _DebugStoreXA;
   private boolean _DebugStoreXAVerbose;
   private boolean _DebugStubGeneration;
   private boolean _DebugTunnelingConnection;
   private boolean _DebugTunnelingConnectionTimeout;
   private boolean _DebugURLResolution;
   private boolean _DebugUnicastMessaging;
   private boolean _DebugValidation;
   private boolean _DebugValidationClassLoading;
   private boolean _DebugVerboseRCM;
   private boolean _DebugWANReplicationDetails;
   private boolean _DebugWTCConfig;
   private boolean _DebugWTCCorbaEx;
   private boolean _DebugWTCGwtEx;
   private boolean _DebugWTCJatmiEx;
   private boolean _DebugWTCTDomPdu;
   private boolean _DebugWTCTdomPdu;
   private boolean _DebugWTCUData;
   private boolean _DebugWTCtBridgeEx;
   private boolean _DebugWatchScalingActions;
   private boolean _DebugWebAppDI;
   private boolean _DebugWebAppIdentityAssertion;
   private boolean _DebugWebAppModule;
   private boolean _DebugWebAppSecurity;
   private boolean _DebugWebSocket;
   private int _DebugXMLEntityCacheDebugLevel;
   private String _DebugXMLEntityCacheDebugName;
   private boolean _DebugXMLEntityCacheIncludeClass;
   private boolean _DebugXMLEntityCacheIncludeLocation;
   private boolean _DebugXMLEntityCacheIncludeName;
   private boolean _DebugXMLEntityCacheIncludeTime;
   private OutputStream _DebugXMLEntityCacheOutputStream;
   private boolean _DebugXMLEntityCacheUseShortClass;
   private int _DebugXMLRegistryDebugLevel;
   private String _DebugXMLRegistryDebugName;
   private boolean _DebugXMLRegistryIncludeClass;
   private boolean _DebugXMLRegistryIncludeLocation;
   private boolean _DebugXMLRegistryIncludeName;
   private boolean _DebugXMLRegistryIncludeTime;
   private OutputStream _DebugXMLRegistryOutputStream;
   private boolean _DebugXMLRegistryUseShortClass;
   private boolean _DefaultStore;
   private String _DiagnosticContextDebugMode;
   private int _ForceShutdownTimeoutNumOfThreadDump;
   private int _ForceShutdownTimeoutThreadDumpInterval;
   private boolean _GlassFishWebAppParser;
   private int _GracefulShutdownTimeoutNumOfThreadDump;
   private int _GracefulShutdownTimeoutThreadDumpInterval;
   private boolean _ListenThreadDebug;
   private boolean _MagicThreadDumpBackToSocket;
   private boolean _MagicThreadDumpEnabled;
   private String _MagicThreadDumpFile;
   private String _MagicThreadDumpHost;
   private boolean _MasterDeployer;
   private boolean _OSGiForApps;
   private boolean _PartitionDebugLoggingEnabled;
   private boolean _PartitionEvenInterceptor;
   private boolean _PortablePartitionHelper;
   private boolean _RedefiningClassLoader;
   private boolean _ScriptExecutorCommand;
   private boolean _SecurityEncryptionService;
   private ServerMBean _Server;
   private boolean _SlaveDeployer;
   private int _StartupTimeoutNumOfThreadDump;
   private int _StartupTimeoutThreadDumpInterval;
   private boolean _T3HttpUpgradeHandler;
   private boolean _WarExtraction;
   private boolean _WebModule;
   private List _DelegateSources = new CopyOnWriteArrayList();
   private ServerDebugMBeanImpl _DelegateBean;
   private static SchemaHelper2 _schemaHelper;

   public void _addDelegateSource(ServerDebugMBeanImpl source) {
      this._DelegateSources.add(source);
   }

   public void _removeDelegateSource(ServerDebugMBeanImpl source) {
      this._DelegateSources.remove(source);
   }

   public ServerDebugMBeanImpl _getDelegateBean() {
      return this._DelegateBean;
   }

   public void _setDelegateBean(ServerDebugMBeanImpl delegate) {
      super._setDelegateBean(delegate);
      ServerDebugMBeanImpl oldDelegate = this._DelegateBean;
      this._DelegateBean = delegate;
      if (oldDelegate != null) {
         oldDelegate._removeDelegateSource(this);
      }

      if (delegate != null) {
         delegate._addDelegateSource(this);
      }

      if (this._Server instanceof ServerMBeanImpl) {
         if (oldDelegate != null && oldDelegate.getServer() != null) {
            this._getReferenceManager().unregisterBean((ServerMBeanImpl)oldDelegate.getServer());
         }

         if (delegate != null && delegate.getServer() != null) {
            this._getReferenceManager().registerBean((ServerMBeanImpl)delegate.getServer(), false);
         }

         ((ServerMBeanImpl)this._Server)._setDelegateBean((ServerMBeanImpl)((ServerMBeanImpl)(delegate == null ? null : delegate.getServer())));
      }

   }

   public ServerDebugMBeanImpl() {
      this._initializeProperty(-1);
   }

   public ServerDebugMBeanImpl(DescriptorBean param0, int param1) {
      super(param0, param1);
      this._initializeProperty(-1);
   }

   public ServerDebugMBeanImpl(DescriptorBean param0, int param1, boolean param2) {
      super(param0, param1);
      this._setTransient(param2);
      this._initializeProperty(-1);
   }

   public boolean isPartitionDebugLoggingEnabled() {
      return !this._isSet(40) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(40) ? this._getDelegateBean().isPartitionDebugLoggingEnabled() : this._PartitionDebugLoggingEnabled;
   }

   public boolean isPartitionDebugLoggingEnabledInherited() {
      return !this._isSet(40) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(40);
   }

   public boolean isPartitionDebugLoggingEnabledSet() {
      return this._isSet(40);
   }

   public void setPartitionDebugLoggingEnabled(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(40);
      boolean _oldVal = this._PartitionDebugLoggingEnabled;
      this._PartitionDebugLoggingEnabled = param0;
      this._postSet(40, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(40)) {
            source._postSetFirePropertyChange(40, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDiagnosticContextDebugMode() {
      return !this._isSet(41) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(41) ? this._performMacroSubstitution(this._getDelegateBean().getDiagnosticContextDebugMode(), this) : this._DiagnosticContextDebugMode;
   }

   public boolean isDiagnosticContextDebugModeInherited() {
      return !this._isSet(41) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(41);
   }

   public boolean isDiagnosticContextDebugModeSet() {
      return this._isSet(41);
   }

   public void setDiagnosticContextDebugMode(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      String[] _set = new String[]{"Off", "And", "Or"};
      param0 = LegalChecks.checkInEnum("DiagnosticContextDebugMode", param0, _set);
      boolean wasSet = this._isSet(41);
      String _oldVal = this._DiagnosticContextDebugMode;
      this._DiagnosticContextDebugMode = param0;
      this._postSet(41, _oldVal, param0);
      Iterator var5 = this._DelegateSources.iterator();

      while(var5.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var5.next();
         if (source != null && !source._isSet(41)) {
            source._postSetFirePropertyChange(41, wasSet, _oldVal, param0);
         }
      }

   }

   public String[] getDebugMaskCriterias() {
      return !this._isSet(42) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(42) ? this._getDelegateBean().getDebugMaskCriterias() : this._DebugMaskCriterias;
   }

   public boolean isDebugMaskCriteriasInherited() {
      return !this._isSet(42) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(42);
   }

   public boolean isDebugMaskCriteriasSet() {
      return this._isSet(42);
   }

   public void setDebugMaskCriterias(String[] param0) {
      param0 = param0 == null ? new String[0] : param0;
      param0 = this._getHelper()._trimElements(param0);
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      DiagnosticContextHelper.validateDyeFlagNames(param0);
      boolean wasSet = this._isSet(42);
      String[] _oldVal = this._DebugMaskCriterias;
      this._DebugMaskCriterias = param0;
      this._postSet(42, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(42)) {
            source._postSetFirePropertyChange(42, wasSet, _oldVal, param0);
         }
      }

   }

   public ServerMBean getServer() {
      return !this._isSet(43) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(43) ? this._getDelegateBean().getServer() : this._Server;
   }

   public String getServerAsString() {
      AbstractDescriptorBean bean = (AbstractDescriptorBean)this.getServer();
      return bean == null ? null : bean._getKey().toString();
   }

   public boolean isServerInherited() {
      return !this._isSet(43) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(43);
   }

   public boolean isServerSet() {
      return this._isSet(43);
   }

   public void setServerAsString(String param0) {
      if (param0 != null && param0.length() != 0) {
         param0 = param0 == null ? null : param0.trim();
         this._getReferenceManager().registerUnresolvedReference(param0, ServerMBean.class, new ReferenceManager.Resolver(this, 43) {
            public void resolveReference(Object value) {
               try {
                  ServerDebugMBeanImpl.this.setServer((ServerMBean)value);
               } catch (RuntimeException var3) {
                  throw var3;
               } catch (Exception var4) {
                  throw new AssertionError("Impossible exception: " + var4);
               }
            }
         });
      } else {
         ServerMBean _oldVal = this._Server;
         this._initializeProperty(43);
         this._postSet(43, _oldVal, this._Server);
      }

   }

   public void setServer(ServerMBean param0) throws InvalidAttributeValueException {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      if (param0 != null) {
         ResolvedReference _ref = new ResolvedReference(this, 43, (AbstractDescriptorBean)param0) {
            protected Object getPropertyValue() {
               return ServerDebugMBeanImpl.this.getServer();
            }
         };
         this._getReferenceManager().registerResolvedReference((AbstractDescriptorBean)param0, _ref);
      }

      boolean wasSet = this._isSet(43);
      ServerMBean _oldVal = this._Server;
      this._Server = param0;
      this._postSet(43, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(43)) {
            source._postSetFirePropertyChange(43, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getListenThreadDebug() {
      if (!this._isSet(44) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(44)) {
         return this._getDelegateBean().getListenThreadDebug();
      } else if (!this._isSet(44)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._ListenThreadDebug;
      }
   }

   public boolean isListenThreadDebugInherited() {
      return !this._isSet(44) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(44);
   }

   public boolean isListenThreadDebugSet() {
      return this._isSet(44);
   }

   public void setListenThreadDebug(boolean param0) throws InvalidAttributeValueException {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(44);
      boolean _oldVal = this._ListenThreadDebug;
      this._ListenThreadDebug = param0;
      this._postSet(44, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(44)) {
            source._postSetFirePropertyChange(44, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean isMagicThreadDumpEnabled() {
      if (!this._isSet(45) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(45)) {
         return this._getDelegateBean().isMagicThreadDumpEnabled();
      } else if (!this._isSet(45)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._MagicThreadDumpEnabled;
      }
   }

   public boolean isMagicThreadDumpEnabledInherited() {
      return !this._isSet(45) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(45);
   }

   public boolean isMagicThreadDumpEnabledSet() {
      return this._isSet(45);
   }

   public void setMagicThreadDumpEnabled(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(45);
      boolean _oldVal = this._MagicThreadDumpEnabled;
      this._MagicThreadDumpEnabled = param0;
      this._postSet(45, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(45)) {
            source._postSetFirePropertyChange(45, wasSet, _oldVal, param0);
         }
      }

   }

   public String getMagicThreadDumpHost() {
      if (!this._isSet(46) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(46)) {
         return this._performMacroSubstitution(this._getDelegateBean().getMagicThreadDumpHost(), this);
      } else if (!this._isSet(46)) {
         return this._isSecureModeEnabled() ? "127.0.0.1" : "localhost";
      } else {
         return this._MagicThreadDumpHost;
      }
   }

   public boolean isMagicThreadDumpHostInherited() {
      return !this._isSet(46) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(46);
   }

   public boolean isMagicThreadDumpHostSet() {
      return this._isSet(46);
   }

   public void setMagicThreadDumpHost(String param0) throws InvalidAttributeValueException {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkNonNull("MagicThreadDumpHost", param0);
      boolean wasSet = this._isSet(46);
      String _oldVal = this._MagicThreadDumpHost;
      this._MagicThreadDumpHost = param0;
      this._postSet(46, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(46)) {
            source._postSetFirePropertyChange(46, wasSet, _oldVal, param0);
         }
      }

   }

   public String getMagicThreadDumpFile() {
      return !this._isSet(47) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(47) ? this._performMacroSubstitution(this._getDelegateBean().getMagicThreadDumpFile(), this) : this._MagicThreadDumpFile;
   }

   public boolean isMagicThreadDumpFileInherited() {
      return !this._isSet(47) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(47);
   }

   public boolean isMagicThreadDumpFileSet() {
      return this._isSet(47);
   }

   public void setMagicThreadDumpFile(String param0) throws InvalidAttributeValueException {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(47);
      String _oldVal = this._MagicThreadDumpFile;
      this._MagicThreadDumpFile = param0;
      this._postSet(47, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(47)) {
            source._postSetFirePropertyChange(47, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getMagicThreadDumpBackToSocket() {
      if (!this._isSet(48) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(48)) {
         return this._getDelegateBean().getMagicThreadDumpBackToSocket();
      } else if (!this._isSet(48)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._MagicThreadDumpBackToSocket;
      }
   }

   public boolean isMagicThreadDumpBackToSocketInherited() {
      return !this._isSet(48) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(48);
   }

   public boolean isMagicThreadDumpBackToSocketSet() {
      return this._isSet(48);
   }

   public void setMagicThreadDumpBackToSocket(boolean param0) throws InvalidAttributeValueException {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(48);
      boolean _oldVal = this._MagicThreadDumpBackToSocket;
      this._MagicThreadDumpBackToSocket = param0;
      this._postSet(48, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(48)) {
            source._postSetFirePropertyChange(48, wasSet, _oldVal, param0);
         }
      }

   }

   public void setBugReportServiceWsdlUrl(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(49);
      String _oldVal = this._BugReportServiceWsdlUrl;
      this._BugReportServiceWsdlUrl = param0;
      this._postSet(49, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(49)) {
            source._postSetFirePropertyChange(49, wasSet, _oldVal, param0);
         }
      }

   }

   public String getBugReportServiceWsdlUrl() {
      return !this._isSet(49) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(49) ? this._performMacroSubstitution(this._getDelegateBean().getBugReportServiceWsdlUrl(), this) : this._BugReportServiceWsdlUrl;
   }

   public boolean isBugReportServiceWsdlUrlInherited() {
      return !this._isSet(49) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(49);
   }

   public boolean isBugReportServiceWsdlUrlSet() {
      return this._isSet(49);
   }

   public void setStartupTimeoutNumOfThreadDump(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("StartupTimeoutNumOfThreadDump", (long)param0, 0L, 2147483647L);
      boolean wasSet = this._isSet(50);
      int _oldVal = this._StartupTimeoutNumOfThreadDump;
      this._StartupTimeoutNumOfThreadDump = param0;
      this._postSet(50, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(50)) {
            source._postSetFirePropertyChange(50, wasSet, _oldVal, param0);
         }
      }

   }

   public int getStartupTimeoutNumOfThreadDump() {
      return !this._isSet(50) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(50) ? this._getDelegateBean().getStartupTimeoutNumOfThreadDump() : this._StartupTimeoutNumOfThreadDump;
   }

   public boolean isStartupTimeoutNumOfThreadDumpInherited() {
      return !this._isSet(50) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(50);
   }

   public boolean isStartupTimeoutNumOfThreadDumpSet() {
      return this._isSet(50);
   }

   public void setStartupTimeoutThreadDumpInterval(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("StartupTimeoutThreadDumpInterval", (long)param0, 10000L, 2147483647L);
      boolean wasSet = this._isSet(51);
      int _oldVal = this._StartupTimeoutThreadDumpInterval;
      this._StartupTimeoutThreadDumpInterval = param0;
      this._postSet(51, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(51)) {
            source._postSetFirePropertyChange(51, wasSet, _oldVal, param0);
         }
      }

   }

   public int getStartupTimeoutThreadDumpInterval() {
      return !this._isSet(51) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(51) ? this._getDelegateBean().getStartupTimeoutThreadDumpInterval() : this._StartupTimeoutThreadDumpInterval;
   }

   public boolean isStartupTimeoutThreadDumpIntervalInherited() {
      return !this._isSet(51) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(51);
   }

   public boolean isStartupTimeoutThreadDumpIntervalSet() {
      return this._isSet(51);
   }

   public void setGracefulShutdownTimeoutNumOfThreadDump(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("GracefulShutdownTimeoutNumOfThreadDump", (long)param0, 0L, 2147483647L);
      boolean wasSet = this._isSet(52);
      int _oldVal = this._GracefulShutdownTimeoutNumOfThreadDump;
      this._GracefulShutdownTimeoutNumOfThreadDump = param0;
      this._postSet(52, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(52)) {
            source._postSetFirePropertyChange(52, wasSet, _oldVal, param0);
         }
      }

   }

   public int getGracefulShutdownTimeoutNumOfThreadDump() {
      return !this._isSet(52) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(52) ? this._getDelegateBean().getGracefulShutdownTimeoutNumOfThreadDump() : this._GracefulShutdownTimeoutNumOfThreadDump;
   }

   public boolean isGracefulShutdownTimeoutNumOfThreadDumpInherited() {
      return !this._isSet(52) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(52);
   }

   public boolean isGracefulShutdownTimeoutNumOfThreadDumpSet() {
      return this._isSet(52);
   }

   public void setGracefulShutdownTimeoutThreadDumpInterval(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("GracefulShutdownTimeoutThreadDumpInterval", (long)param0, 10000L, 2147483647L);
      boolean wasSet = this._isSet(53);
      int _oldVal = this._GracefulShutdownTimeoutThreadDumpInterval;
      this._GracefulShutdownTimeoutThreadDumpInterval = param0;
      this._postSet(53, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(53)) {
            source._postSetFirePropertyChange(53, wasSet, _oldVal, param0);
         }
      }

   }

   public int getGracefulShutdownTimeoutThreadDumpInterval() {
      return !this._isSet(53) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(53) ? this._getDelegateBean().getGracefulShutdownTimeoutThreadDumpInterval() : this._GracefulShutdownTimeoutThreadDumpInterval;
   }

   public boolean isGracefulShutdownTimeoutThreadDumpIntervalInherited() {
      return !this._isSet(53) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(53);
   }

   public boolean isGracefulShutdownTimeoutThreadDumpIntervalSet() {
      return this._isSet(53);
   }

   public void setForceShutdownTimeoutNumOfThreadDump(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("ForceShutdownTimeoutNumOfThreadDump", (long)param0, 0L, 2147483647L);
      boolean wasSet = this._isSet(54);
      int _oldVal = this._ForceShutdownTimeoutNumOfThreadDump;
      this._ForceShutdownTimeoutNumOfThreadDump = param0;
      this._postSet(54, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(54)) {
            source._postSetFirePropertyChange(54, wasSet, _oldVal, param0);
         }
      }

   }

   public int getForceShutdownTimeoutNumOfThreadDump() {
      return !this._isSet(54) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(54) ? this._getDelegateBean().getForceShutdownTimeoutNumOfThreadDump() : this._ForceShutdownTimeoutNumOfThreadDump;
   }

   public boolean isForceShutdownTimeoutNumOfThreadDumpInherited() {
      return !this._isSet(54) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(54);
   }

   public boolean isForceShutdownTimeoutNumOfThreadDumpSet() {
      return this._isSet(54);
   }

   public void setForceShutdownTimeoutThreadDumpInterval(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("ForceShutdownTimeoutThreadDumpInterval", (long)param0, 10000L, 2147483647L);
      boolean wasSet = this._isSet(55);
      int _oldVal = this._ForceShutdownTimeoutThreadDumpInterval;
      this._ForceShutdownTimeoutThreadDumpInterval = param0;
      this._postSet(55, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(55)) {
            source._postSetFirePropertyChange(55, wasSet, _oldVal, param0);
         }
      }

   }

   public int getForceShutdownTimeoutThreadDumpInterval() {
      return !this._isSet(55) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(55) ? this._getDelegateBean().getForceShutdownTimeoutThreadDumpInterval() : this._ForceShutdownTimeoutThreadDumpInterval;
   }

   public boolean isForceShutdownTimeoutThreadDumpIntervalInherited() {
      return !this._isSet(55) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(55);
   }

   public boolean isForceShutdownTimeoutThreadDumpIntervalSet() {
      return this._isSet(55);
   }

   public boolean getDebugRMIRequestPerf() {
      return !this._isSet(56) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(56) ? this._getDelegateBean().getDebugRMIRequestPerf() : this._DebugRMIRequestPerf;
   }

   public boolean isDebugRMIRequestPerfInherited() {
      return !this._isSet(56) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(56);
   }

   public boolean isDebugRMIRequestPerfSet() {
      return this._isSet(56);
   }

   public void setDebugRMIRequestPerf(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(56);
      boolean _oldVal = this._DebugRMIRequestPerf;
      this._DebugRMIRequestPerf = param0;
      this._postSet(56, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(56)) {
            source._postSetFirePropertyChange(56, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAppContainer() {
      if (!this._isSet(57) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(57)) {
         return this._getDelegateBean().getDebugAppContainer();
      } else if (!this._isSet(57)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugAppContainer;
      }
   }

   public boolean isDebugAppContainerInherited() {
      return !this._isSet(57) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(57);
   }

   public boolean isDebugAppContainerSet() {
      return this._isSet(57);
   }

   public void setDebugAppContainer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(57);
      boolean _oldVal = this._DebugAppContainer;
      this._DebugAppContainer = param0;
      this._postSet(57, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(57)) {
            source._postSetFirePropertyChange(57, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugLibraries() {
      if (!this._isSet(58) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(58)) {
         return this._getDelegateBean().getDebugLibraries();
      } else if (!this._isSet(58)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugLibraries;
      }
   }

   public boolean isDebugLibrariesInherited() {
      return !this._isSet(58) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(58);
   }

   public boolean isDebugLibrariesSet() {
      return this._isSet(58);
   }

   public void setDebugLibraries(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(58);
      boolean _oldVal = this._DebugLibraries;
      this._DebugLibraries = param0;
      this._postSet(58, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(58)) {
            source._postSetFirePropertyChange(58, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAppAnnotations() {
      if (!this._isSet(59) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(59)) {
         return this._getDelegateBean().getDebugAppAnnotations();
      } else if (!this._isSet(59)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugAppAnnotations;
      }
   }

   public boolean isDebugAppAnnotationsInherited() {
      return !this._isSet(59) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(59);
   }

   public boolean isDebugAppAnnotationsSet() {
      return this._isSet(59);
   }

   public void setDebugAppAnnotations(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(59);
      boolean _oldVal = this._DebugAppAnnotations;
      this._DebugAppAnnotations = param0;
      this._postSet(59, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(59)) {
            source._postSetFirePropertyChange(59, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClassRedef() {
      if (!this._isSet(60) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(60)) {
         return this._getDelegateBean().getDebugClassRedef();
      } else if (!this._isSet(60)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugClassRedef;
      }
   }

   public boolean isDebugClassRedefInherited() {
      return !this._isSet(60) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(60);
   }

   public boolean isDebugClassRedefSet() {
      return this._isSet(60);
   }

   public void setDebugClassRedef(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(60);
      boolean _oldVal = this._DebugClassRedef;
      this._DebugClassRedef = param0;
      this._postSet(60, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(60)) {
            source._postSetFirePropertyChange(60, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getRedefiningClassLoader() {
      if (!this._isSet(61) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(61)) {
         return this._getDelegateBean().getRedefiningClassLoader();
      } else if (!this._isSet(61)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._RedefiningClassLoader;
      }
   }

   public boolean isRedefiningClassLoaderInherited() {
      return !this._isSet(61) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(61);
   }

   public boolean isRedefiningClassLoaderSet() {
      return this._isSet(61);
   }

   public void setRedefiningClassLoader(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(61);
      boolean _oldVal = this._RedefiningClassLoader;
      this._RedefiningClassLoader = param0;
      this._postSet(61, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(61)) {
            source._postSetFirePropertyChange(61, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClassSize() {
      if (!this._isSet(62) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(62)) {
         return this._getDelegateBean().getDebugClassSize();
      } else if (!this._isSet(62)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugClassSize;
      }
   }

   public boolean isDebugClassSizeInherited() {
      return !this._isSet(62) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(62);
   }

   public boolean isDebugClassSizeSet() {
      return this._isSet(62);
   }

   public void setDebugClassSize(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(62);
      boolean _oldVal = this._DebugClassSize;
      this._DebugClassSize = param0;
      this._postSet(62, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(62)) {
            source._postSetFirePropertyChange(62, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDefaultStore() {
      if (!this._isSet(63) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(63)) {
         return this._getDelegateBean().getDefaultStore();
      } else if (!this._isSet(63)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DefaultStore;
      }
   }

   public boolean isDefaultStoreInherited() {
      return !this._isSet(63) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(63);
   }

   public boolean isDefaultStoreSet() {
      return this._isSet(63);
   }

   public void setDefaultStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(63);
      boolean _oldVal = this._DefaultStore;
      this._DefaultStore = param0;
      this._postSet(63, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(63)) {
            source._postSetFirePropertyChange(63, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClassChangeNotifier() {
      if (!this._isSet(64) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(64)) {
         return this._getDelegateBean().getClassChangeNotifier();
      } else if (!this._isSet(64)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._ClassChangeNotifier;
      }
   }

   public boolean isClassChangeNotifierInherited() {
      return !this._isSet(64) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(64);
   }

   public boolean isClassChangeNotifierSet() {
      return this._isSet(64);
   }

   public void setClassChangeNotifier(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(64);
      boolean _oldVal = this._ClassChangeNotifier;
      this._ClassChangeNotifier = param0;
      this._postSet(64, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(64)) {
            source._postSetFirePropertyChange(64, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugHttp() {
      if (!this._isSet(65) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(65)) {
         return this._getDelegateBean().getDebugHttp();
      } else if (!this._isSet(65)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugHttp;
      }
   }

   public boolean isDebugHttpInherited() {
      return !this._isSet(65) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(65);
   }

   public boolean isDebugHttpSet() {
      return this._isSet(65);
   }

   public void setDebugHttp(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(65);
      boolean _oldVal = this._DebugHttp;
      this._DebugHttp = param0;
      this._postSet(65, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(65)) {
            source._postSetFirePropertyChange(65, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugHttpConcise() {
      if (!this._isSet(66) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(66)) {
         return this._getDelegateBean().getDebugHttpConcise();
      } else if (!this._isSet(66)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugHttpConcise;
      }
   }

   public boolean isDebugHttpConciseInherited() {
      return !this._isSet(66) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(66);
   }

   public boolean isDebugHttpConciseSet() {
      return this._isSet(66);
   }

   public void setDebugHttpConcise(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(66);
      boolean _oldVal = this._DebugHttpConcise;
      this._DebugHttpConcise = param0;
      this._postSet(66, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(66)) {
            source._postSetFirePropertyChange(66, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSelfTuning() {
      return !this._isSet(38) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(38) ? this._getDelegateBean().getDebugSelfTuning() : this._DebugSelfTuning;
   }

   public boolean getDebugURLResolution() {
      if (!this._isSet(67) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(67)) {
         return this._getDelegateBean().getDebugURLResolution();
      } else if (!this._isSet(67)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugURLResolution;
      }
   }

   public boolean isDebugSelfTuningInherited() {
      return !this._isSet(38) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(38);
   }

   public boolean isDebugSelfTuningSet() {
      return this._isSet(38);
   }

   public boolean isDebugURLResolutionInherited() {
      return !this._isSet(67) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(67);
   }

   public boolean isDebugURLResolutionSet() {
      return this._isSet(67);
   }

   public void setDebugSelfTuning(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(38);
      boolean _oldVal = this._DebugSelfTuning;
      this._DebugSelfTuning = param0;
      this._postSet(38, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(38)) {
            source._postSetFirePropertyChange(38, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugURLResolution(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(67);
      boolean _oldVal = this._DebugURLResolution;
      this._DebugURLResolution = param0;
      this._postSet(67, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(67)) {
            source._postSetFirePropertyChange(67, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugHttpSessions() {
      if (!this._isSet(68) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(68)) {
         return this._getDelegateBean().getDebugHttpSessions();
      } else if (!this._isSet(68)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugHttpSessions;
      }
   }

   public boolean isDebugHttpSessionsInherited() {
      return !this._isSet(68) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(68);
   }

   public boolean isDebugHttpSessionsSet() {
      return this._isSet(68);
   }

   public void setDebugHttpSessions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(68);
      boolean _oldVal = this._DebugHttpSessions;
      this._DebugHttpSessions = param0;
      this._postSet(68, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(68)) {
            source._postSetFirePropertyChange(68, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugHttpLogging() {
      if (!this._isSet(69) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(69)) {
         return this._getDelegateBean().getDebugHttpLogging();
      } else if (!this._isSet(69)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugHttpLogging;
      }
   }

   public boolean isDebugHttpLoggingInherited() {
      return !this._isSet(69) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(69);
   }

   public boolean isDebugHttpLoggingSet() {
      return this._isSet(69);
   }

   public void setDebugHttpLogging(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(69);
      boolean _oldVal = this._DebugHttpLogging;
      this._DebugHttpLogging = param0;
      this._postSet(69, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(69)) {
            source._postSetFirePropertyChange(69, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWebAppIdentityAssertion() {
      if (!this._isSet(70) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(70)) {
         return this._getDelegateBean().getDebugWebAppIdentityAssertion();
      } else if (!this._isSet(70)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugWebAppIdentityAssertion;
      }
   }

   public boolean isDebugWebAppIdentityAssertionInherited() {
      return !this._isSet(70) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(70);
   }

   public boolean isDebugWebAppIdentityAssertionSet() {
      return this._isSet(70);
   }

   public void setDebugWebAppIdentityAssertion(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(70);
      boolean _oldVal = this._DebugWebAppIdentityAssertion;
      this._DebugWebAppIdentityAssertion = param0;
      this._postSet(70, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(70)) {
            source._postSetFirePropertyChange(70, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWebAppSecurity() {
      if (!this._isSet(71) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(71)) {
         return this._getDelegateBean().getDebugWebAppSecurity();
      } else if (!this._isSet(71)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugWebAppSecurity;
      }
   }

   public boolean isDebugWebAppSecurityInherited() {
      return !this._isSet(71) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(71);
   }

   public boolean isDebugWebAppSecuritySet() {
      return this._isSet(71);
   }

   public void setDebugWebAppSecurity(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(71);
      boolean _oldVal = this._DebugWebAppSecurity;
      this._DebugWebAppSecurity = param0;
      this._postSet(71, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(71)) {
            source._postSetFirePropertyChange(71, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWebAppModule() {
      if (!this._isSet(72) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(72)) {
         return this._getDelegateBean().getDebugWebAppModule();
      } else if (!this._isSet(72)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugWebAppModule;
      }
   }

   public boolean isDebugWebAppModuleInherited() {
      return !this._isSet(72) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(72);
   }

   public boolean isDebugWebAppModuleSet() {
      return this._isSet(72);
   }

   public void setDebugWebAppModule(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(72);
      boolean _oldVal = this._DebugWebAppModule;
      this._DebugWebAppModule = param0;
      this._postSet(72, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(72)) {
            source._postSetFirePropertyChange(72, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbCompilation() {
      if (!this._isSet(73) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(73)) {
         return this._getDelegateBean().getDebugEjbCompilation();
      } else if (!this._isSet(73)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbCompilation;
      }
   }

   public boolean isDebugEjbCompilationInherited() {
      return !this._isSet(73) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(73);
   }

   public boolean isDebugEjbCompilationSet() {
      return this._isSet(73);
   }

   public void setDebugEjbCompilation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(73);
      boolean _oldVal = this._DebugEjbCompilation;
      this._DebugEjbCompilation = param0;
      this._postSet(73, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(73)) {
            source._postSetFirePropertyChange(73, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbDeployment() {
      if (!this._isSet(74) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(74)) {
         return this._getDelegateBean().getDebugEjbDeployment();
      } else if (!this._isSet(74)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbDeployment;
      }
   }

   public boolean isDebugEjbDeploymentInherited() {
      return !this._isSet(74) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(74);
   }

   public boolean isDebugEjbDeploymentSet() {
      return this._isSet(74);
   }

   public void setDebugEjbDeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(74);
      boolean _oldVal = this._DebugEjbDeployment;
      this._DebugEjbDeployment = param0;
      this._postSet(74, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(74)) {
            source._postSetFirePropertyChange(74, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbMdbConnection() {
      if (!this._isSet(75) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(75)) {
         return this._getDelegateBean().getDebugEjbMdbConnection();
      } else if (!this._isSet(75)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbMdbConnection;
      }
   }

   public boolean isDebugEjbMdbConnectionInherited() {
      return !this._isSet(75) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(75);
   }

   public boolean isDebugEjbMdbConnectionSet() {
      return this._isSet(75);
   }

   public void setDebugEjbMdbConnection(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(75);
      boolean _oldVal = this._DebugEjbMdbConnection;
      this._DebugEjbMdbConnection = param0;
      this._postSet(75, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(75)) {
            source._postSetFirePropertyChange(75, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbCaching() {
      if (!this._isSet(76) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(76)) {
         return this._getDelegateBean().getDebugEjbCaching();
      } else if (!this._isSet(76)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbCaching;
      }
   }

   public boolean isDebugEjbCachingInherited() {
      return !this._isSet(76) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(76);
   }

   public boolean isDebugEjbCachingSet() {
      return this._isSet(76);
   }

   public void setDebugEjbCaching(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(76);
      boolean _oldVal = this._DebugEjbCaching;
      this._DebugEjbCaching = param0;
      this._postSet(76, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(76)) {
            source._postSetFirePropertyChange(76, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbSwapping() {
      if (!this._isSet(77) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(77)) {
         return this._getDelegateBean().getDebugEjbSwapping();
      } else if (!this._isSet(77)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbSwapping;
      }
   }

   public boolean isDebugEjbSwappingInherited() {
      return !this._isSet(77) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(77);
   }

   public boolean isDebugEjbSwappingSet() {
      return this._isSet(77);
   }

   public void setDebugEjbSwapping(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(77);
      boolean _oldVal = this._DebugEjbSwapping;
      this._DebugEjbSwapping = param0;
      this._postSet(77, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(77)) {
            source._postSetFirePropertyChange(77, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbLocking() {
      if (!this._isSet(78) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(78)) {
         return this._getDelegateBean().getDebugEjbLocking();
      } else if (!this._isSet(78)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbLocking;
      }
   }

   public boolean isDebugEjbLockingInherited() {
      return !this._isSet(78) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(78);
   }

   public boolean isDebugEjbLockingSet() {
      return this._isSet(78);
   }

   public void setDebugEjbLocking(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(78);
      boolean _oldVal = this._DebugEjbLocking;
      this._DebugEjbLocking = param0;
      this._postSet(78, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(78)) {
            source._postSetFirePropertyChange(78, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbPooling() {
      if (!this._isSet(79) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(79)) {
         return this._getDelegateBean().getDebugEjbPooling();
      } else if (!this._isSet(79)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbPooling;
      }
   }

   public boolean isDebugEjbPoolingInherited() {
      return !this._isSet(79) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(79);
   }

   public boolean isDebugEjbPoolingSet() {
      return this._isSet(79);
   }

   public void setDebugEjbPooling(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(79);
      boolean _oldVal = this._DebugEjbPooling;
      this._DebugEjbPooling = param0;
      this._postSet(79, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(79)) {
            source._postSetFirePropertyChange(79, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbTimers() {
      if (!this._isSet(80) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(80)) {
         return this._getDelegateBean().getDebugEjbTimers();
      } else if (!this._isSet(80)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbTimers;
      }
   }

   public boolean isDebugEjbTimersInherited() {
      return !this._isSet(80) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(80);
   }

   public boolean isDebugEjbTimersSet() {
      return this._isSet(80);
   }

   public void setDebugEjbTimers(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(80);
      boolean _oldVal = this._DebugEjbTimers;
      this._DebugEjbTimers = param0;
      this._postSet(80, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(80)) {
            source._postSetFirePropertyChange(80, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbInvoke() {
      if (!this._isSet(81) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(81)) {
         return this._getDelegateBean().getDebugEjbInvoke();
      } else if (!this._isSet(81)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbInvoke;
      }
   }

   public boolean isDebugEjbInvokeInherited() {
      return !this._isSet(81) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(81);
   }

   public boolean isDebugEjbInvokeSet() {
      return this._isSet(81);
   }

   public void setDebugEjbInvoke(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(81);
      boolean _oldVal = this._DebugEjbInvoke;
      this._DebugEjbInvoke = param0;
      this._postSet(81, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(81)) {
            source._postSetFirePropertyChange(81, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbSecurity() {
      if (!this._isSet(82) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(82)) {
         return this._getDelegateBean().getDebugEjbSecurity();
      } else if (!this._isSet(82)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbSecurity;
      }
   }

   public boolean isDebugEjbSecurityInherited() {
      return !this._isSet(82) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(82);
   }

   public boolean isDebugEjbSecuritySet() {
      return this._isSet(82);
   }

   public void setDebugEjbSecurity(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(82);
      boolean _oldVal = this._DebugEjbSecurity;
      this._DebugEjbSecurity = param0;
      this._postSet(82, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(82)) {
            source._postSetFirePropertyChange(82, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbCmpDeployment() {
      if (!this._isSet(83) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(83)) {
         return this._getDelegateBean().getDebugEjbCmpDeployment();
      } else if (!this._isSet(83)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbCmpDeployment;
      }
   }

   public boolean isDebugEjbCmpDeploymentInherited() {
      return !this._isSet(83) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(83);
   }

   public boolean isDebugEjbCmpDeploymentSet() {
      return this._isSet(83);
   }

   public void setDebugEjbCmpDeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(83);
      boolean _oldVal = this._DebugEjbCmpDeployment;
      this._DebugEjbCmpDeployment = param0;
      this._postSet(83, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(83)) {
            source._postSetFirePropertyChange(83, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbCmpRuntime() {
      if (!this._isSet(84) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(84)) {
         return this._getDelegateBean().getDebugEjbCmpRuntime();
      } else if (!this._isSet(84)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbCmpRuntime;
      }
   }

   public boolean isDebugEjbCmpRuntimeInherited() {
      return !this._isSet(84) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(84);
   }

   public boolean isDebugEjbCmpRuntimeSet() {
      return this._isSet(84);
   }

   public void setDebugEjbCmpRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(84);
      boolean _oldVal = this._DebugEjbCmpRuntime;
      this._DebugEjbCmpRuntime = param0;
      this._postSet(84, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(84)) {
            source._postSetFirePropertyChange(84, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbMetadata() {
      if (!this._isSet(85) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(85)) {
         return this._getDelegateBean().getDebugEjbMetadata();
      } else if (!this._isSet(85)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEjbMetadata;
      }
   }

   public boolean isDebugEjbMetadataInherited() {
      return !this._isSet(85) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(85);
   }

   public boolean isDebugEjbMetadataSet() {
      return this._isSet(85);
   }

   public void setDebugEjbMetadata(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(85);
      boolean _oldVal = this._DebugEjbMetadata;
      this._DebugEjbMetadata = param0;
      this._postSet(85, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(85)) {
            source._postSetFirePropertyChange(85, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEventManager() {
      if (!this._isSet(86) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(86)) {
         return this._getDelegateBean().getDebugEventManager();
      } else if (!this._isSet(86)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugEventManager;
      }
   }

   public boolean isDebugEventManagerInherited() {
      return !this._isSet(86) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(86);
   }

   public boolean isDebugEventManagerSet() {
      return this._isSet(86);
   }

   public void setDebugEventManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(86);
      boolean _oldVal = this._DebugEventManager;
      this._DebugEventManager = param0;
      this._postSet(86, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(86)) {
            source._postSetFirePropertyChange(86, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerMigration() {
      return !this._isSet(87) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(87) ? this._getDelegateBean().getDebugServerMigration() : this._DebugServerMigration;
   }

   public boolean isDebugServerMigrationInherited() {
      return !this._isSet(87) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(87);
   }

   public boolean isDebugServerMigrationSet() {
      return this._isSet(87);
   }

   public void setDebugServerMigration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(87);
      boolean _oldVal = this._DebugServerMigration;
      this._DebugServerMigration = param0;
      this._postSet(87, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(87)) {
            source._postSetFirePropertyChange(87, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClusterFragments() {
      if (!this._isSet(88) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(88)) {
         return this._getDelegateBean().getDebugClusterFragments();
      } else if (!this._isSet(88)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugClusterFragments;
      }
   }

   public boolean isDebugClusterFragmentsInherited() {
      return !this._isSet(88) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(88);
   }

   public boolean isDebugClusterFragmentsSet() {
      return this._isSet(88);
   }

   public void setDebugClusterFragments(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(88);
      boolean _oldVal = this._DebugClusterFragments;
      this._DebugClusterFragments = param0;
      this._postSet(88, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(88)) {
            source._postSetFirePropertyChange(88, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugCluster() {
      return !this._isSet(89) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(89) ? this._getDelegateBean().getDebugCluster() : this._DebugCluster;
   }

   public boolean isDebugClusterInherited() {
      return !this._isSet(89) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(89);
   }

   public boolean isDebugClusterSet() {
      return this._isSet(89);
   }

   public void setDebugCluster(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(89);
      boolean _oldVal = this._DebugCluster;
      this._DebugCluster = param0;
      this._postSet(89, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(89)) {
            source._postSetFirePropertyChange(89, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClusterHeartbeats() {
      return !this._isSet(90) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(90) ? this._getDelegateBean().getDebugClusterHeartbeats() : this._DebugClusterHeartbeats;
   }

   public boolean isDebugClusterHeartbeatsInherited() {
      return !this._isSet(90) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(90);
   }

   public boolean isDebugClusterHeartbeatsSet() {
      return this._isSet(90);
   }

   public void setDebugClusterHeartbeats(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(90);
      boolean _oldVal = this._DebugClusterHeartbeats;
      this._DebugClusterHeartbeats = param0;
      this._postSet(90, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(90)) {
            source._postSetFirePropertyChange(90, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClusterAnnouncements() {
      return !this._isSet(91) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(91) ? this._getDelegateBean().getDebugClusterAnnouncements() : this._DebugClusterAnnouncements;
   }

   public boolean isDebugClusterAnnouncementsInherited() {
      return !this._isSet(91) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(91);
   }

   public boolean isDebugClusterAnnouncementsSet() {
      return this._isSet(91);
   }

   public void setDebugClusterAnnouncements(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(91);
      boolean _oldVal = this._DebugClusterAnnouncements;
      this._DebugClusterAnnouncements = param0;
      this._postSet(91, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(91)) {
            source._postSetFirePropertyChange(91, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugReplication() {
      return !this._isSet(92) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(92) ? this._getDelegateBean().getDebugReplication() : this._DebugReplication;
   }

   public boolean isDebugReplicationInherited() {
      return !this._isSet(92) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(92);
   }

   public boolean isDebugReplicationSet() {
      return this._isSet(92);
   }

   public void setDebugReplication(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(92);
      boolean _oldVal = this._DebugReplication;
      this._DebugReplication = param0;
      this._postSet(92, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(92)) {
            source._postSetFirePropertyChange(92, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugReplicationDetails() {
      return !this._isSet(93) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(93) ? this._getDelegateBean().getDebugReplicationDetails() : this._DebugReplicationDetails;
   }

   public boolean isDebugReplicationDetailsInherited() {
      return !this._isSet(93) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(93);
   }

   public boolean isDebugReplicationDetailsSet() {
      return this._isSet(93);
   }

   public void setDebugReplicationDetails(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(93);
      boolean _oldVal = this._DebugReplicationDetails;
      this._DebugReplicationDetails = param0;
      this._postSet(93, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(93)) {
            source._postSetFirePropertyChange(93, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAsyncQueue() {
      return !this._isSet(94) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(94) ? this._getDelegateBean().getDebugAsyncQueue() : this._DebugAsyncQueue;
   }

   public boolean isDebugAsyncQueueInherited() {
      return !this._isSet(94) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(94);
   }

   public boolean isDebugAsyncQueueSet() {
      return this._isSet(94);
   }

   public void setDebugAsyncQueue(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(94);
      boolean _oldVal = this._DebugAsyncQueue;
      this._DebugAsyncQueue = param0;
      this._postSet(94, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(94)) {
            source._postSetFirePropertyChange(94, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugLeaderElection() {
      if (!this._isSet(95) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(95)) {
         return this._getDelegateBean().getDebugLeaderElection();
      } else if (!this._isSet(95)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugLeaderElection;
      }
   }

   public boolean isDebugLeaderElectionInherited() {
      return !this._isSet(95) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(95);
   }

   public boolean isDebugLeaderElectionSet() {
      return this._isSet(95);
   }

   public void setDebugLeaderElection(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(95);
      boolean _oldVal = this._DebugLeaderElection;
      this._DebugLeaderElection = param0;
      this._postSet(95, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(95)) {
            source._postSetFirePropertyChange(95, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSCalls() {
      if (!this._isSet(96) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(96)) {
         return this._getDelegateBean().getDebugDRSCalls();
      } else if (!this._isSet(96)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSCalls;
      }
   }

   public boolean isDebugDRSCallsInherited() {
      return !this._isSet(96) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(96);
   }

   public boolean isDebugDRSCallsSet() {
      return this._isSet(96);
   }

   public void setDebugDRSCalls(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(96);
      boolean _oldVal = this._DebugDRSCalls;
      this._DebugDRSCalls = param0;
      this._postSet(96, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(96)) {
            source._postSetFirePropertyChange(96, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSHeartbeats() {
      if (!this._isSet(97) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(97)) {
         return this._getDelegateBean().getDebugDRSHeartbeats();
      } else if (!this._isSet(97)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSHeartbeats;
      }
   }

   public boolean isDebugDRSHeartbeatsInherited() {
      return !this._isSet(97) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(97);
   }

   public boolean isDebugDRSHeartbeatsSet() {
      return this._isSet(97);
   }

   public void setDebugDRSHeartbeats(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(97);
      boolean _oldVal = this._DebugDRSHeartbeats;
      this._DebugDRSHeartbeats = param0;
      this._postSet(97, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(97)) {
            source._postSetFirePropertyChange(97, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSMessages() {
      if (!this._isSet(98) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(98)) {
         return this._getDelegateBean().getDebugDRSMessages();
      } else if (!this._isSet(98)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSMessages;
      }
   }

   public boolean isDebugDRSMessagesInherited() {
      return !this._isSet(98) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(98);
   }

   public boolean isDebugDRSMessagesSet() {
      return this._isSet(98);
   }

   public void setDebugDRSMessages(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(98);
      boolean _oldVal = this._DebugDRSMessages;
      this._DebugDRSMessages = param0;
      this._postSet(98, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(98)) {
            source._postSetFirePropertyChange(98, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSUpdateStatus() {
      if (!this._isSet(99) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(99)) {
         return this._getDelegateBean().getDebugDRSUpdateStatus();
      } else if (!this._isSet(99)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSUpdateStatus;
      }
   }

   public boolean isDebugDRSUpdateStatusInherited() {
      return !this._isSet(99) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(99);
   }

   public boolean isDebugDRSUpdateStatusSet() {
      return this._isSet(99);
   }

   public void setDebugDRSUpdateStatus(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(99);
      boolean _oldVal = this._DebugDRSUpdateStatus;
      this._DebugDRSUpdateStatus = param0;
      this._postSet(99, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(99)) {
            source._postSetFirePropertyChange(99, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSStateTransitions() {
      if (!this._isSet(100) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(100)) {
         return this._getDelegateBean().getDebugDRSStateTransitions();
      } else if (!this._isSet(100)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSStateTransitions;
      }
   }

   public boolean isDebugDRSStateTransitionsInherited() {
      return !this._isSet(100) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(100);
   }

   public boolean isDebugDRSStateTransitionsSet() {
      return this._isSet(100);
   }

   public void setDebugDRSStateTransitions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(100);
      boolean _oldVal = this._DebugDRSStateTransitions;
      this._DebugDRSStateTransitions = param0;
      this._postSet(100, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(100)) {
            source._postSetFirePropertyChange(100, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDRSQueues() {
      if (!this._isSet(101) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(101)) {
         return this._getDelegateBean().getDebugDRSQueues();
      } else if (!this._isSet(101)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugDRSQueues;
      }
   }

   public boolean isDebugDRSQueuesInherited() {
      return !this._isSet(101) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(101);
   }

   public boolean isDebugDRSQueuesSet() {
      return this._isSet(101);
   }

   public void setDebugDRSQueues(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(101);
      boolean _oldVal = this._DebugDRSQueues;
      this._DebugDRSQueues = param0;
      this._postSet(101, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(101)) {
            source._postSetFirePropertyChange(101, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJNDI() {
      return !this._isSet(102) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(102) ? this._getDelegateBean().getDebugJNDI() : this._DebugJNDI;
   }

   public boolean isDebugJNDIInherited() {
      return !this._isSet(102) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(102);
   }

   public boolean isDebugJNDISet() {
      return this._isSet(102);
   }

   public void setDebugJNDI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(102);
      boolean _oldVal = this._DebugJNDI;
      this._DebugJNDI = param0;
      this._postSet(102, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(102)) {
            source._postSetFirePropertyChange(102, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJNDIResolution() {
      return !this._isSet(103) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(103) ? this._getDelegateBean().getDebugJNDIResolution() : this._DebugJNDIResolution;
   }

   public boolean isDebugJNDIResolutionInherited() {
      return !this._isSet(103) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(103);
   }

   public boolean isDebugJNDIResolutionSet() {
      return this._isSet(103);
   }

   public void setDebugJNDIResolution(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(103);
      boolean _oldVal = this._DebugJNDIResolution;
      this._DebugJNDIResolution = param0;
      this._postSet(103, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(103)) {
            source._postSetFirePropertyChange(103, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJNDIFactories() {
      if (!this._isSet(104) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(104)) {
         return this._getDelegateBean().getDebugJNDIFactories();
      } else if (!this._isSet(104)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugJNDIFactories;
      }
   }

   public boolean isDebugJNDIFactoriesInherited() {
      return !this._isSet(104) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(104);
   }

   public boolean isDebugJNDIFactoriesSet() {
      return this._isSet(104);
   }

   public void setDebugJNDIFactories(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(104);
      boolean _oldVal = this._DebugJNDIFactories;
      this._DebugJNDIFactories = param0;
      this._postSet(104, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(104)) {
            source._postSetFirePropertyChange(104, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugTunnelingConnectionTimeout() {
      if (!this._isSet(105) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(105)) {
         return this._getDelegateBean().getDebugTunnelingConnectionTimeout();
      } else if (!this._isSet(105)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugTunnelingConnectionTimeout;
      }
   }

   public boolean isDebugTunnelingConnectionTimeoutInherited() {
      return !this._isSet(105) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(105);
   }

   public boolean isDebugTunnelingConnectionTimeoutSet() {
      return this._isSet(105);
   }

   public void setDebugTunnelingConnectionTimeout(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(105);
      boolean _oldVal = this._DebugTunnelingConnectionTimeout;
      this._DebugTunnelingConnectionTimeout = param0;
      this._postSet(105, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(105)) {
            source._postSetFirePropertyChange(105, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugTunnelingConnection() {
      if (!this._isSet(106) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(106)) {
         return this._getDelegateBean().getDebugTunnelingConnection();
      } else if (!this._isSet(106)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugTunnelingConnection;
      }
   }

   public boolean isDebugTunnelingConnectionInherited() {
      return !this._isSet(106) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(106);
   }

   public boolean isDebugTunnelingConnectionSet() {
      return this._isSet(106);
   }

   public void setDebugTunnelingConnection(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(106);
      boolean _oldVal = this._DebugTunnelingConnection;
      this._DebugTunnelingConnection = param0;
      this._postSet(106, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(106)) {
            source._postSetFirePropertyChange(106, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSBackEnd() {
      return !this._isSet(107) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(107) ? this._getDelegateBean().getDebugJMSBackEnd() : this._DebugJMSBackEnd;
   }

   public boolean isDebugJMSBackEndInherited() {
      return !this._isSet(107) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(107);
   }

   public boolean isDebugJMSBackEndSet() {
      return this._isSet(107);
   }

   public void setDebugJMSBackEnd(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(107);
      boolean _oldVal = this._DebugJMSBackEnd;
      this._DebugJMSBackEnd = param0;
      this._postSet(107, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(107)) {
            source._postSetFirePropertyChange(107, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSFrontEnd() {
      return !this._isSet(108) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(108) ? this._getDelegateBean().getDebugJMSFrontEnd() : this._DebugJMSFrontEnd;
   }

   public boolean isDebugJMSFrontEndInherited() {
      return !this._isSet(108) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(108);
   }

   public boolean isDebugJMSFrontEndSet() {
      return this._isSet(108);
   }

   public void setDebugJMSFrontEnd(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(108);
      boolean _oldVal = this._DebugJMSFrontEnd;
      this._DebugJMSFrontEnd = param0;
      this._postSet(108, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(108)) {
            source._postSetFirePropertyChange(108, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSCommon() {
      return !this._isSet(109) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(109) ? this._getDelegateBean().getDebugJMSCommon() : this._DebugJMSCommon;
   }

   public boolean isDebugJMSCommonInherited() {
      return !this._isSet(109) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(109);
   }

   public boolean isDebugJMSCommonSet() {
      return this._isSet(109);
   }

   public void setDebugJMSCommon(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(109);
      boolean _oldVal = this._DebugJMSCommon;
      this._DebugJMSCommon = param0;
      this._postSet(109, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(109)) {
            source._postSetFirePropertyChange(109, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSConfig() {
      return !this._isSet(110) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(110) ? this._getDelegateBean().getDebugJMSConfig() : this._DebugJMSConfig;
   }

   public boolean isDebugJMSConfigInherited() {
      return !this._isSet(110) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(110);
   }

   public boolean isDebugJMSConfigSet() {
      return this._isSet(110);
   }

   public void setDebugJMSConfig(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(110);
      boolean _oldVal = this._DebugJMSConfig;
      this._DebugJMSConfig = param0;
      this._postSet(110, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(110)) {
            source._postSetFirePropertyChange(110, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDistTopic() {
      return !this._isSet(111) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(111) ? this._getDelegateBean().getDebugJMSDistTopic() : this._DebugJMSDistTopic;
   }

   public boolean isDebugJMSDistTopicInherited() {
      return !this._isSet(111) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(111);
   }

   public boolean isDebugJMSDistTopicSet() {
      return this._isSet(111);
   }

   public void setDebugJMSDistTopic(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(111);
      boolean _oldVal = this._DebugJMSDistTopic;
      this._DebugJMSDistTopic = param0;
      this._postSet(111, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(111)) {
            source._postSetFirePropertyChange(111, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSLocking() {
      return !this._isSet(112) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(112) ? this._getDelegateBean().getDebugJMSLocking() : this._DebugJMSLocking;
   }

   public boolean isDebugJMSLockingInherited() {
      return !this._isSet(112) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(112);
   }

   public boolean isDebugJMSLockingSet() {
      return this._isSet(112);
   }

   public void setDebugJMSLocking(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(112);
      boolean _oldVal = this._DebugJMSLocking;
      this._DebugJMSLocking = param0;
      this._postSet(112, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(112)) {
            source._postSetFirePropertyChange(112, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSXA() {
      return !this._isSet(113) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(113) ? this._getDelegateBean().getDebugJMSXA() : this._DebugJMSXA;
   }

   public boolean isDebugJMSXAInherited() {
      return !this._isSet(113) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(113);
   }

   public boolean isDebugJMSXASet() {
      return this._isSet(113);
   }

   public void setDebugJMSXA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(113);
      boolean _oldVal = this._DebugJMSXA;
      this._DebugJMSXA = param0;
      this._postSet(113, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(113)) {
            source._postSetFirePropertyChange(113, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDispatcher() {
      return !this._isSet(114) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(114) ? this._getDelegateBean().getDebugJMSDispatcher() : this._DebugJMSDispatcher;
   }

   public boolean isDebugJMSDispatcherInherited() {
      return !this._isSet(114) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(114);
   }

   public boolean isDebugJMSDispatcherSet() {
      return this._isSet(114);
   }

   public void setDebugJMSDispatcher(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(114);
      boolean _oldVal = this._DebugJMSDispatcher;
      this._DebugJMSDispatcher = param0;
      this._postSet(114, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(114)) {
            source._postSetFirePropertyChange(114, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDispatcherProxy() {
      return !this._isSet(115) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(115) ? this._getDelegateBean().getDebugJMSDispatcherProxy() : this._DebugJMSDispatcherProxy;
   }

   public boolean isDebugJMSDispatcherProxyInherited() {
      return !this._isSet(115) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(115);
   }

   public boolean isDebugJMSDispatcherProxySet() {
      return this._isSet(115);
   }

   public void setDebugJMSDispatcherProxy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(115);
      boolean _oldVal = this._DebugJMSDispatcherProxy;
      this._DebugJMSDispatcherProxy = param0;
      this._postSet(115, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(115)) {
            source._postSetFirePropertyChange(115, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSStore() {
      return !this._isSet(116) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(116) ? this._getDelegateBean().getDebugJMSStore() : this._DebugJMSStore;
   }

   public boolean isDebugJMSStoreInherited() {
      return !this._isSet(116) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(116);
   }

   public boolean isDebugJMSStoreSet() {
      return this._isSet(116);
   }

   public void setDebugJMSStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(116);
      boolean _oldVal = this._DebugJMSStore;
      this._DebugJMSStore = param0;
      this._postSet(116, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(116)) {
            source._postSetFirePropertyChange(116, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSBoot() {
      return !this._isSet(117) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(117) ? this._getDelegateBean().getDebugJMSBoot() : this._DebugJMSBoot;
   }

   public boolean isDebugJMSBootInherited() {
      return !this._isSet(117) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(117);
   }

   public boolean isDebugJMSBootSet() {
      return this._isSet(117);
   }

   public void setDebugJMSBoot(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(117);
      boolean _oldVal = this._DebugJMSBoot;
      this._DebugJMSBoot = param0;
      this._postSet(117, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(117)) {
            source._postSetFirePropertyChange(117, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDurableSubscribers() {
      return !this._isSet(118) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(118) ? this._getDelegateBean().getDebugJMSDurableSubscribers() : this._DebugJMSDurableSubscribers;
   }

   public boolean isDebugJMSDurableSubscribersInherited() {
      return !this._isSet(118) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(118);
   }

   public boolean isDebugJMSDurableSubscribersSet() {
      return this._isSet(118);
   }

   public void setDebugJMSDurableSubscribers(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(118);
      boolean _oldVal = this._DebugJMSDurableSubscribers;
      this._DebugJMSDurableSubscribers = param0;
      this._postSet(118, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(118)) {
            source._postSetFirePropertyChange(118, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSJDBCScavengeOnFlush() {
      return !this._isSet(119) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(119) ? this._getDelegateBean().getDebugJMSJDBCScavengeOnFlush() : this._DebugJMSJDBCScavengeOnFlush;
   }

   public boolean isDebugJMSJDBCScavengeOnFlushInherited() {
      return !this._isSet(119) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(119);
   }

   public boolean isDebugJMSJDBCScavengeOnFlushSet() {
      return this._isSet(119);
   }

   public void setDebugJMSJDBCScavengeOnFlush(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(119);
      boolean _oldVal = this._DebugJMSJDBCScavengeOnFlush;
      this._DebugJMSJDBCScavengeOnFlush = param0;
      this._postSet(119, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(119)) {
            source._postSetFirePropertyChange(119, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSAME() {
      return !this._isSet(120) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(120) ? this._getDelegateBean().getDebugJMSAME() : this._DebugJMSAME;
   }

   public boolean isDebugJMSAMEInherited() {
      return !this._isSet(120) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(120);
   }

   public boolean isDebugJMSAMESet() {
      return this._isSet(120);
   }

   public void setDebugJMSAME(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(120);
      boolean _oldVal = this._DebugJMSAME;
      this._DebugJMSAME = param0;
      this._postSet(120, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(120)) {
            source._postSetFirePropertyChange(120, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSPauseResume() {
      return !this._isSet(121) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(121) ? this._getDelegateBean().getDebugJMSPauseResume() : this._DebugJMSPauseResume;
   }

   public boolean isDebugJMSPauseResumeInherited() {
      return !this._isSet(121) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(121);
   }

   public boolean isDebugJMSPauseResumeSet() {
      return this._isSet(121);
   }

   public void setDebugJMSPauseResume(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(121);
      boolean _oldVal = this._DebugJMSPauseResume;
      this._DebugJMSPauseResume = param0;
      this._postSet(121, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(121)) {
            source._postSetFirePropertyChange(121, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSModule() {
      return !this._isSet(122) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(122) ? this._getDelegateBean().getDebugJMSModule() : this._DebugJMSModule;
   }

   public boolean isDebugJMSModuleInherited() {
      return !this._isSet(122) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(122);
   }

   public boolean isDebugJMSModuleSet() {
      return this._isSet(122);
   }

   public void setDebugJMSModule(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(122);
      boolean _oldVal = this._DebugJMSModule;
      this._DebugJMSModule = param0;
      this._postSet(122, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(122)) {
            source._postSetFirePropertyChange(122, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSMessagePath() {
      return !this._isSet(123) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(123) ? this._getDelegateBean().getDebugJMSMessagePath() : this._DebugJMSMessagePath;
   }

   public boolean isDebugJMSMessagePathInherited() {
      return !this._isSet(123) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(123);
   }

   public boolean isDebugJMSMessagePathSet() {
      return this._isSet(123);
   }

   public void setDebugJMSMessagePath(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(123);
      boolean _oldVal = this._DebugJMSMessagePath;
      this._DebugJMSMessagePath = param0;
      this._postSet(123, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(123)) {
            source._postSetFirePropertyChange(123, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSSAF() {
      return !this._isSet(124) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(124) ? this._getDelegateBean().getDebugJMSSAF() : this._DebugJMSSAF;
   }

   public boolean isDebugJMSSAFInherited() {
      return !this._isSet(124) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(124);
   }

   public boolean isDebugJMSSAFSet() {
      return this._isSet(124);
   }

   public void setDebugJMSSAF(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(124);
      boolean _oldVal = this._DebugJMSSAF;
      this._DebugJMSSAF = param0;
      this._postSet(124, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(124)) {
            source._postSetFirePropertyChange(124, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSWrappers() {
      return !this._isSet(125) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(125) ? this._getDelegateBean().getDebugJMSWrappers() : this._DebugJMSWrappers;
   }

   public boolean isDebugJMSWrappersInherited() {
      return !this._isSet(125) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(125);
   }

   public boolean isDebugJMSWrappersSet() {
      return this._isSet(125);
   }

   public void setDebugJMSWrappers(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(125);
      boolean _oldVal = this._DebugJMSWrappers;
      this._DebugJMSWrappers = param0;
      this._postSet(125, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(125)) {
            source._postSetFirePropertyChange(125, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSCDS() {
      return !this._isSet(126) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(126) ? this._getDelegateBean().getDebugJMSCDS() : this._DebugJMSCDS;
   }

   public boolean isDebugJMSCDSInherited() {
      return !this._isSet(126) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(126);
   }

   public boolean isDebugJMSCDSSet() {
      return this._isSet(126);
   }

   public void setDebugJMSCDS(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(126);
      boolean _oldVal = this._DebugJMSCDS;
      this._DebugJMSCDS = param0;
      this._postSet(126, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(126)) {
            source._postSetFirePropertyChange(126, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAXA() {
      return !this._isSet(127) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(127) ? this._getDelegateBean().getDebugJTAXA() : this._DebugJTAXA;
   }

   public boolean isDebugJTAXAInherited() {
      return !this._isSet(127) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(127);
   }

   public boolean isDebugJTAXASet() {
      return this._isSet(127);
   }

   public void setDebugJTAXA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(127);
      boolean _oldVal = this._DebugJTAXA;
      this._DebugJTAXA = param0;
      this._postSet(127, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(127)) {
            source._postSetFirePropertyChange(127, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTANonXA() {
      return !this._isSet(128) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(128) ? this._getDelegateBean().getDebugJTANonXA() : this._DebugJTANonXA;
   }

   public boolean isDebugJTANonXAInherited() {
      return !this._isSet(128) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(128);
   }

   public boolean isDebugJTANonXASet() {
      return this._isSet(128);
   }

   public void setDebugJTANonXA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(128);
      boolean _oldVal = this._DebugJTANonXA;
      this._DebugJTANonXA = param0;
      this._postSet(128, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(128)) {
            source._postSetFirePropertyChange(128, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAXAStackTrace() {
      return !this._isSet(129) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(129) ? this._getDelegateBean().getDebugJTAXAStackTrace() : this._DebugJTAXAStackTrace;
   }

   public boolean isDebugJTAXAStackTraceInherited() {
      return !this._isSet(129) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(129);
   }

   public boolean isDebugJTAXAStackTraceSet() {
      return this._isSet(129);
   }

   public void setDebugJTAXAStackTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(129);
      boolean _oldVal = this._DebugJTAXAStackTrace;
      this._DebugJTAXAStackTrace = param0;
      this._postSet(129, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(129)) {
            source._postSetFirePropertyChange(129, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTARMI() {
      return !this._isSet(130) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(130) ? this._getDelegateBean().getDebugJTARMI() : this._DebugJTARMI;
   }

   public boolean isDebugJTARMIInherited() {
      return !this._isSet(130) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(130);
   }

   public boolean isDebugJTARMISet() {
      return this._isSet(130);
   }

   public void setDebugJTARMI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(130);
      boolean _oldVal = this._DebugJTARMI;
      this._DebugJTARMI = param0;
      this._postSet(130, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(130)) {
            source._postSetFirePropertyChange(130, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTA2PC() {
      return !this._isSet(131) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(131) ? this._getDelegateBean().getDebugJTA2PC() : this._DebugJTA2PC;
   }

   public boolean isDebugJTA2PCInherited() {
      return !this._isSet(131) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(131);
   }

   public boolean isDebugJTA2PCSet() {
      return this._isSet(131);
   }

   public void setDebugJTA2PC(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(131);
      boolean _oldVal = this._DebugJTA2PC;
      this._DebugJTA2PC = param0;
      this._postSet(131, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(131)) {
            source._postSetFirePropertyChange(131, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTA2PCStackTrace() {
      return !this._isSet(132) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(132) ? this._getDelegateBean().getDebugJTA2PCStackTrace() : this._DebugJTA2PCStackTrace;
   }

   public boolean isDebugJTA2PCStackTraceInherited() {
      return !this._isSet(132) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(132);
   }

   public boolean isDebugJTA2PCStackTraceSet() {
      return this._isSet(132);
   }

   public void setDebugJTA2PCStackTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(132);
      boolean _oldVal = this._DebugJTA2PCStackTrace;
      this._DebugJTA2PCStackTrace = param0;
      this._postSet(132, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(132)) {
            source._postSetFirePropertyChange(132, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTATLOG() {
      return !this._isSet(133) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(133) ? this._getDelegateBean().getDebugJTATLOG() : this._DebugJTATLOG;
   }

   public boolean isDebugJTATLOGInherited() {
      return !this._isSet(133) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(133);
   }

   public boolean isDebugJTATLOGSet() {
      return this._isSet(133);
   }

   public void setDebugJTATLOG(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(133);
      boolean _oldVal = this._DebugJTATLOG;
      this._DebugJTATLOG = param0;
      this._postSet(133, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(133)) {
            source._postSetFirePropertyChange(133, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAJDBC() {
      return !this._isSet(134) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(134) ? this._getDelegateBean().getDebugJTAJDBC() : this._DebugJTAJDBC;
   }

   public boolean isDebugJTAJDBCInherited() {
      return !this._isSet(134) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(134);
   }

   public boolean isDebugJTAJDBCSet() {
      return this._isSet(134);
   }

   public void setDebugJTAJDBC(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(134);
      boolean _oldVal = this._DebugJTAJDBC;
      this._DebugJTAJDBC = param0;
      this._postSet(134, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(134)) {
            source._postSetFirePropertyChange(134, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTARecovery() {
      return !this._isSet(135) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(135) ? this._getDelegateBean().getDebugJTARecovery() : this._DebugJTARecovery;
   }

   public boolean isDebugJTARecoveryInherited() {
      return !this._isSet(135) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(135);
   }

   public boolean isDebugJTARecoverySet() {
      return this._isSet(135);
   }

   public void setDebugJTARecovery(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(135);
      boolean _oldVal = this._DebugJTARecovery;
      this._DebugJTARecovery = param0;
      this._postSet(135, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(135)) {
            source._postSetFirePropertyChange(135, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTARecoveryStackTrace() {
      return !this._isSet(136) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(136) ? this._getDelegateBean().getDebugJTARecoveryStackTrace() : this._DebugJTARecoveryStackTrace;
   }

   public boolean isDebugJTARecoveryStackTraceInherited() {
      return !this._isSet(136) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(136);
   }

   public boolean isDebugJTARecoveryStackTraceSet() {
      return this._isSet(136);
   }

   public void setDebugJTARecoveryStackTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(136);
      boolean _oldVal = this._DebugJTARecoveryStackTrace;
      this._DebugJTARecoveryStackTrace = param0;
      this._postSet(136, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(136)) {
            source._postSetFirePropertyChange(136, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAAPI() {
      return !this._isSet(137) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(137) ? this._getDelegateBean().getDebugJTAAPI() : this._DebugJTAAPI;
   }

   public boolean isDebugJTAAPIInherited() {
      return !this._isSet(137) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(137);
   }

   public boolean isDebugJTAAPISet() {
      return this._isSet(137);
   }

   public void setDebugJTAAPI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(137);
      boolean _oldVal = this._DebugJTAAPI;
      this._DebugJTAAPI = param0;
      this._postSet(137, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(137)) {
            source._postSetFirePropertyChange(137, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAPropagate() {
      return !this._isSet(138) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(138) ? this._getDelegateBean().getDebugJTAPropagate() : this._DebugJTAPropagate;
   }

   public boolean isDebugJTAPropagateInherited() {
      return !this._isSet(138) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(138);
   }

   public boolean isDebugJTAPropagateSet() {
      return this._isSet(138);
   }

   public void setDebugJTAPropagate(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(138);
      boolean _oldVal = this._DebugJTAPropagate;
      this._DebugJTAPropagate = param0;
      this._postSet(138, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(138)) {
            source._postSetFirePropertyChange(138, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAGateway() {
      return !this._isSet(139) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(139) ? this._getDelegateBean().getDebugJTAGateway() : this._DebugJTAGateway;
   }

   public boolean isDebugJTAGatewayInherited() {
      return !this._isSet(139) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(139);
   }

   public boolean isDebugJTAGatewaySet() {
      return this._isSet(139);
   }

   public void setDebugJTAGateway(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(139);
      boolean _oldVal = this._DebugJTAGateway;
      this._DebugJTAGateway = param0;
      this._postSet(139, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(139)) {
            source._postSetFirePropertyChange(139, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAGatewayStackTrace() {
      return !this._isSet(140) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(140) ? this._getDelegateBean().getDebugJTAGatewayStackTrace() : this._DebugJTAGatewayStackTrace;
   }

   public boolean isDebugJTAGatewayStackTraceInherited() {
      return !this._isSet(140) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(140);
   }

   public boolean isDebugJTAGatewayStackTraceSet() {
      return this._isSet(140);
   }

   public void setDebugJTAGatewayStackTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(140);
      boolean _oldVal = this._DebugJTAGatewayStackTrace;
      this._DebugJTAGatewayStackTrace = param0;
      this._postSet(140, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(140)) {
            source._postSetFirePropertyChange(140, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTANaming() {
      return !this._isSet(141) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(141) ? this._getDelegateBean().getDebugJTANaming() : this._DebugJTANaming;
   }

   public boolean isDebugJTANamingInherited() {
      return !this._isSet(141) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(141);
   }

   public boolean isDebugJTANamingSet() {
      return this._isSet(141);
   }

   public void setDebugJTANaming(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(141);
      boolean _oldVal = this._DebugJTANaming;
      this._DebugJTANaming = param0;
      this._postSet(141, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(141)) {
            source._postSetFirePropertyChange(141, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTANamingStackTrace() {
      return !this._isSet(142) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(142) ? this._getDelegateBean().getDebugJTANamingStackTrace() : this._DebugJTANamingStackTrace;
   }

   public boolean isDebugJTANamingStackTraceInherited() {
      return !this._isSet(142) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(142);
   }

   public boolean isDebugJTANamingStackTraceSet() {
      return this._isSet(142);
   }

   public void setDebugJTANamingStackTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(142);
      boolean _oldVal = this._DebugJTANamingStackTrace;
      this._DebugJTANamingStackTrace = param0;
      this._postSet(142, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(142)) {
            source._postSetFirePropertyChange(142, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAResourceHealth() {
      return !this._isSet(143) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(143) ? this._getDelegateBean().getDebugJTAResourceHealth() : this._DebugJTAResourceHealth;
   }

   public boolean isDebugJTAResourceHealthInherited() {
      return !this._isSet(143) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(143);
   }

   public boolean isDebugJTAResourceHealthSet() {
      return this._isSet(143);
   }

   public void setDebugJTAResourceHealth(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(143);
      boolean _oldVal = this._DebugJTAResourceHealth;
      this._DebugJTAResourceHealth = param0;
      this._postSet(143, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(143)) {
            source._postSetFirePropertyChange(143, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAMigration() {
      return !this._isSet(144) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(144) ? this._getDelegateBean().getDebugJTAMigration() : this._DebugJTAMigration;
   }

   public boolean isDebugJTAMigrationInherited() {
      return !this._isSet(144) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(144);
   }

   public boolean isDebugJTAMigrationSet() {
      return this._isSet(144);
   }

   public void setDebugJTAMigration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(144);
      boolean _oldVal = this._DebugJTAMigration;
      this._DebugJTAMigration = param0;
      this._postSet(144, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(144)) {
            source._postSetFirePropertyChange(144, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTALifecycle() {
      return !this._isSet(145) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(145) ? this._getDelegateBean().getDebugJTALifecycle() : this._DebugJTALifecycle;
   }

   public boolean isDebugJTALifecycleInherited() {
      return !this._isSet(145) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(145);
   }

   public boolean isDebugJTALifecycleSet() {
      return this._isSet(145);
   }

   public void setDebugJTALifecycle(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(145);
      boolean _oldVal = this._DebugJTALifecycle;
      this._DebugJTALifecycle = param0;
      this._postSet(145, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(145)) {
            source._postSetFirePropertyChange(145, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTALLR() {
      return !this._isSet(146) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(146) ? this._getDelegateBean().getDebugJTALLR() : this._DebugJTALLR;
   }

   public boolean isDebugJTALLRInherited() {
      return !this._isSet(146) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(146);
   }

   public boolean isDebugJTALLRSet() {
      return this._isSet(146);
   }

   public void setDebugJTALLR(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(146);
      boolean _oldVal = this._DebugJTALLR;
      this._DebugJTALLR = param0;
      this._postSet(146, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(146)) {
            source._postSetFirePropertyChange(146, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTAHealth() {
      return !this._isSet(147) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(147) ? this._getDelegateBean().getDebugJTAHealth() : this._DebugJTAHealth;
   }

   public boolean isDebugJTAHealthInherited() {
      return !this._isSet(147) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(147);
   }

   public boolean isDebugJTAHealthSet() {
      return this._isSet(147);
   }

   public void setDebugJTAHealth(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(147);
      boolean _oldVal = this._DebugJTAHealth;
      this._DebugJTAHealth = param0;
      this._postSet(147, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(147)) {
            source._postSetFirePropertyChange(147, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDebugJTATransactionName() {
      return !this._isSet(148) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(148) ? this._performMacroSubstitution(this._getDelegateBean().getDebugJTATransactionName(), this) : this._DebugJTATransactionName;
   }

   public boolean isDebugJTATransactionNameInherited() {
      return !this._isSet(148) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(148);
   }

   public boolean isDebugJTATransactionNameSet() {
      return this._isSet(148);
   }

   public void setDebugJTATransactionName(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(148);
      String _oldVal = this._DebugJTATransactionName;
      this._DebugJTATransactionName = param0;
      this._postSet(148, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(148)) {
            source._postSetFirePropertyChange(148, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDebugJTAResourceName() {
      return !this._isSet(149) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(149) ? this._performMacroSubstitution(this._getDelegateBean().getDebugJTAResourceName(), this) : this._DebugJTAResourceName;
   }

   public boolean isDebugJTAResourceNameInherited() {
      return !this._isSet(149) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(149);
   }

   public boolean isDebugJTAResourceNameSet() {
      return this._isSet(149);
   }

   public void setDebugJTAResourceName(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(149);
      String _oldVal = this._DebugJTAResourceName;
      this._DebugJTAResourceName = param0;
      this._postSet(149, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(149)) {
            source._postSetFirePropertyChange(149, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTACDI() {
      return !this._isSet(150) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(150) ? this._getDelegateBean().getDebugJTACDI() : this._DebugJTACDI;
   }

   public boolean isDebugJTACDIInherited() {
      return !this._isSet(150) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(150);
   }

   public boolean isDebugJTACDISet() {
      return this._isSet(150);
   }

   public void setDebugJTACDI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(150);
      boolean _oldVal = this._DebugJTACDI;
      this._DebugJTACDI = param0;
      this._postSet(150, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(150)) {
            source._postSetFirePropertyChange(150, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugLifecycleManager() {
      return !this._isSet(151) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(151) ? this._getDelegateBean().getDebugLifecycleManager() : this._DebugLifecycleManager;
   }

   public boolean isDebugLifecycleManagerInherited() {
      return !this._isSet(151) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(151);
   }

   public boolean isDebugLifecycleManagerSet() {
      return this._isSet(151);
   }

   public void setDebugLifecycleManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(151);
      boolean _oldVal = this._DebugLifecycleManager;
      this._DebugLifecycleManager = param0;
      this._postSet(151, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(151)) {
            source._postSetFirePropertyChange(151, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugMessagingKernel(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(152);
      boolean _oldVal = this._DebugMessagingKernel;
      this._DebugMessagingKernel = param0;
      this._postSet(152, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(152)) {
            source._postSetFirePropertyChange(152, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingKernel() {
      return !this._isSet(152) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(152) ? this._getDelegateBean().getDebugMessagingKernel() : this._DebugMessagingKernel;
   }

   public boolean isDebugMessagingKernelInherited() {
      return !this._isSet(152) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(152);
   }

   public boolean isDebugMessagingKernelSet() {
      return this._isSet(152);
   }

   public void setDebugMessagingKernelBoot(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(153);
      boolean _oldVal = this._DebugMessagingKernelBoot;
      this._DebugMessagingKernelBoot = param0;
      this._postSet(153, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(153)) {
            source._postSetFirePropertyChange(153, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingKernelBoot() {
      return !this._isSet(153) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(153) ? this._getDelegateBean().getDebugMessagingKernelBoot() : this._DebugMessagingKernelBoot;
   }

   public boolean isDebugMessagingKernelBootInherited() {
      return !this._isSet(153) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(153);
   }

   public boolean isDebugMessagingKernelBootSet() {
      return this._isSet(153);
   }

   public void setDebugMessagingOwnableLock(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(154);
      boolean _oldVal = this._DebugMessagingOwnableLock;
      this._DebugMessagingOwnableLock = param0;
      this._postSet(154, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(154)) {
            source._postSetFirePropertyChange(154, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingOwnableLock() {
      return !this._isSet(154) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(154) ? this._getDelegateBean().getDebugMessagingOwnableLock() : this._DebugMessagingOwnableLock;
   }

   public boolean isDebugMessagingOwnableLockInherited() {
      return !this._isSet(154) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(154);
   }

   public boolean isDebugMessagingOwnableLockSet() {
      return this._isSet(154);
   }

   public boolean getDebugSAFLifeCycle() {
      return !this._isSet(155) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(155) ? this._getDelegateBean().getDebugSAFLifeCycle() : this._DebugSAFLifeCycle;
   }

   public boolean isDebugSAFLifeCycleInherited() {
      return !this._isSet(155) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(155);
   }

   public boolean isDebugSAFLifeCycleSet() {
      return this._isSet(155);
   }

   public void setDebugSAFLifeCycle(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(155);
      boolean _oldVal = this._DebugSAFLifeCycle;
      this._DebugSAFLifeCycle = param0;
      this._postSet(155, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(155)) {
            source._postSetFirePropertyChange(155, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFAdmin() {
      return !this._isSet(156) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(156) ? this._getDelegateBean().getDebugSAFAdmin() : this._DebugSAFAdmin;
   }

   public boolean isDebugSAFAdminInherited() {
      return !this._isSet(156) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(156);
   }

   public boolean isDebugSAFAdminSet() {
      return this._isSet(156);
   }

   public void setDebugSAFAdmin(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(156);
      boolean _oldVal = this._DebugSAFAdmin;
      this._DebugSAFAdmin = param0;
      this._postSet(156, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(156)) {
            source._postSetFirePropertyChange(156, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFManager() {
      return !this._isSet(157) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(157) ? this._getDelegateBean().getDebugSAFManager() : this._DebugSAFManager;
   }

   public boolean isDebugSAFManagerInherited() {
      return !this._isSet(157) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(157);
   }

   public boolean isDebugSAFManagerSet() {
      return this._isSet(157);
   }

   public void setDebugSAFManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(157);
      boolean _oldVal = this._DebugSAFManager;
      this._DebugSAFManager = param0;
      this._postSet(157, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(157)) {
            source._postSetFirePropertyChange(157, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFSendingAgent() {
      return !this._isSet(158) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(158) ? this._getDelegateBean().getDebugSAFSendingAgent() : this._DebugSAFSendingAgent;
   }

   public boolean isDebugSAFSendingAgentInherited() {
      return !this._isSet(158) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(158);
   }

   public boolean isDebugSAFSendingAgentSet() {
      return this._isSet(158);
   }

   public void setDebugSAFSendingAgent(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(158);
      boolean _oldVal = this._DebugSAFSendingAgent;
      this._DebugSAFSendingAgent = param0;
      this._postSet(158, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(158)) {
            source._postSetFirePropertyChange(158, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFReceivingAgent() {
      return !this._isSet(159) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(159) ? this._getDelegateBean().getDebugSAFReceivingAgent() : this._DebugSAFReceivingAgent;
   }

   public boolean isDebugSAFReceivingAgentInherited() {
      return !this._isSet(159) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(159);
   }

   public boolean isDebugSAFReceivingAgentSet() {
      return this._isSet(159);
   }

   public void setDebugSAFReceivingAgent(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(159);
      boolean _oldVal = this._DebugSAFReceivingAgent;
      this._DebugSAFReceivingAgent = param0;
      this._postSet(159, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(159)) {
            source._postSetFirePropertyChange(159, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFTransport() {
      return !this._isSet(160) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(160) ? this._getDelegateBean().getDebugSAFTransport() : this._DebugSAFTransport;
   }

   public boolean isDebugSAFTransportInherited() {
      return !this._isSet(160) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(160);
   }

   public boolean isDebugSAFTransportSet() {
      return this._isSet(160);
   }

   public void setDebugSAFTransport(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(160);
      boolean _oldVal = this._DebugSAFTransport;
      this._DebugSAFTransport = param0;
      this._postSet(160, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(160)) {
            source._postSetFirePropertyChange(160, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFMessagePath() {
      return !this._isSet(161) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(161) ? this._getDelegateBean().getDebugSAFMessagePath() : this._DebugSAFMessagePath;
   }

   public boolean isDebugSAFMessagePathInherited() {
      return !this._isSet(161) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(161);
   }

   public boolean isDebugSAFMessagePathSet() {
      return this._isSet(161);
   }

   public void setDebugSAFMessagePath(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(161);
      boolean _oldVal = this._DebugSAFMessagePath;
      this._DebugSAFMessagePath = param0;
      this._postSet(161, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(161)) {
            source._postSetFirePropertyChange(161, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFStore() {
      return !this._isSet(162) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(162) ? this._getDelegateBean().getDebugSAFStore() : this._DebugSAFStore;
   }

   public boolean isDebugSAFStoreInherited() {
      return !this._isSet(162) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(162);
   }

   public boolean isDebugSAFStoreSet() {
      return this._isSet(162);
   }

   public void setDebugSAFStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(162);
      boolean _oldVal = this._DebugSAFStore;
      this._DebugSAFStore = param0;
      this._postSet(162, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(162)) {
            source._postSetFirePropertyChange(162, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSAFVerbose() {
      return !this._isSet(163) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(163) ? this._getDelegateBean().getDebugSAFVerbose() : this._DebugSAFVerbose;
   }

   public boolean isDebugSAFVerboseInherited() {
      return !this._isSet(163) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(163);
   }

   public boolean isDebugSAFVerboseSet() {
      return this._isSet(163);
   }

   public void setDebugSAFVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(163);
      boolean _oldVal = this._DebugSAFVerbose;
      this._DebugSAFVerbose = param0;
      this._postSet(163, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(163)) {
            source._postSetFirePropertyChange(163, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugPathSvc(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(164);
      boolean _oldVal = this._DebugPathSvc;
      this._DebugPathSvc = param0;
      this._postSet(164, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(164)) {
            source._postSetFirePropertyChange(164, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPathSvc() {
      return !this._isSet(164) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(164) ? this._getDelegateBean().getDebugPathSvc() : this._DebugPathSvc;
   }

   public boolean isDebugPathSvcInherited() {
      return !this._isSet(164) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(164);
   }

   public boolean isDebugPathSvcSet() {
      return this._isSet(164);
   }

   public void setDebugPathSvcVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(165);
      boolean _oldVal = this._DebugPathSvcVerbose;
      this._DebugPathSvcVerbose = param0;
      this._postSet(165, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(165)) {
            source._postSetFirePropertyChange(165, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPathSvcVerbose() {
      return !this._isSet(165) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(165) ? this._getDelegateBean().getDebugPathSvcVerbose() : this._DebugPathSvcVerbose;
   }

   public boolean isDebugPathSvcVerboseInherited() {
      return !this._isSet(165) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(165);
   }

   public boolean isDebugPathSvcVerboseSet() {
      return this._isSet(165);
   }

   public boolean getDebugScaContainer() {
      return !this._isSet(166) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(166) ? this._getDelegateBean().getDebugScaContainer() : this._DebugScaContainer;
   }

   public boolean isDebugScaContainerInherited() {
      return !this._isSet(166) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(166);
   }

   public boolean isDebugScaContainerSet() {
      return this._isSet(166);
   }

   public void setDebugScaContainer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(166);
      boolean _oldVal = this._DebugScaContainer;
      this._DebugScaContainer = param0;
      this._postSet(166, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(166)) {
            source._postSetFirePropertyChange(166, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityRealm() {
      return !this._isSet(167) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(167) ? this._getDelegateBean().getDebugSecurityRealm() : this._DebugSecurityRealm;
   }

   public boolean isDebugSecurityRealmInherited() {
      return !this._isSet(167) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(167);
   }

   public boolean isDebugSecurityRealmSet() {
      return this._isSet(167);
   }

   public void setDebugSecurityRealm(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(167);
      boolean _oldVal = this._DebugSecurityRealm;
      this._DebugSecurityRealm = param0;
      this._postSet(167, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(167)) {
            source._postSetFirePropertyChange(167, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurity() {
      return !this._isSet(168) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(168) ? this._getDelegateBean().getDebugSecurity() : this._DebugSecurity;
   }

   public boolean isDebugSecurityInherited() {
      return !this._isSet(168) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(168);
   }

   public boolean isDebugSecuritySet() {
      return this._isSet(168);
   }

   public void setDebugSecurity(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(168);
      boolean _oldVal = this._DebugSecurity;
      this._DebugSecurity = param0;
      this._postSet(168, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(168)) {
            source._postSetFirePropertyChange(168, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityPasswordPolicy() {
      return !this._isSet(169) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(169) ? this._getDelegateBean().getDebugSecurityPasswordPolicy() : this._DebugSecurityPasswordPolicy;
   }

   public boolean isDebugSecurityPasswordPolicyInherited() {
      return !this._isSet(169) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(169);
   }

   public boolean isDebugSecurityPasswordPolicySet() {
      return this._isSet(169);
   }

   public void setDebugSecurityPasswordPolicy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(169);
      boolean _oldVal = this._DebugSecurityPasswordPolicy;
      this._DebugSecurityPasswordPolicy = param0;
      this._postSet(169, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(169)) {
            source._postSetFirePropertyChange(169, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityUserLockout() {
      return !this._isSet(170) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(170) ? this._getDelegateBean().getDebugSecurityUserLockout() : this._DebugSecurityUserLockout;
   }

   public boolean isDebugSecurityUserLockoutInherited() {
      return !this._isSet(170) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(170);
   }

   public boolean isDebugSecurityUserLockoutSet() {
      return this._isSet(170);
   }

   public void setDebugSecurityUserLockout(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(170);
      boolean _oldVal = this._DebugSecurityUserLockout;
      this._DebugSecurityUserLockout = param0;
      this._postSet(170, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(170)) {
            source._postSetFirePropertyChange(170, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityService() {
      return !this._isSet(171) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(171) ? this._getDelegateBean().getDebugSecurityService() : this._DebugSecurityService;
   }

   public boolean isDebugSecurityServiceInherited() {
      return !this._isSet(171) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(171);
   }

   public boolean isDebugSecurityServiceSet() {
      return this._isSet(171);
   }

   public void setDebugSecurityService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(171);
      boolean _oldVal = this._DebugSecurityService;
      this._DebugSecurityService = param0;
      this._postSet(171, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(171)) {
            source._postSetFirePropertyChange(171, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityPredicate() {
      return !this._isSet(172) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(172) ? this._getDelegateBean().getDebugSecurityPredicate() : this._DebugSecurityPredicate;
   }

   public boolean isDebugSecurityPredicateInherited() {
      return !this._isSet(172) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(172);
   }

   public boolean isDebugSecurityPredicateSet() {
      return this._isSet(172);
   }

   public void setDebugSecurityPredicate(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(172);
      boolean _oldVal = this._DebugSecurityPredicate;
      this._DebugSecurityPredicate = param0;
      this._postSet(172, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(172)) {
            source._postSetFirePropertyChange(172, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySSL() {
      return !this._isSet(173) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(173) ? this._getDelegateBean().getDebugSecuritySSL() : this._DebugSecuritySSL;
   }

   public boolean isDebugSecuritySSLInherited() {
      return !this._isSet(173) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(173);
   }

   public boolean isDebugSecuritySSLSet() {
      return this._isSet(173);
   }

   public void setDebugSecuritySSL(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(173);
      boolean _oldVal = this._DebugSecuritySSL;
      this._DebugSecuritySSL = param0;
      this._postSet(173, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(173)) {
            source._postSetFirePropertyChange(173, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySSLEaten() {
      return !this._isSet(174) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(174) ? this._getDelegateBean().getDebugSecuritySSLEaten() : this._DebugSecuritySSLEaten;
   }

   public boolean isDebugSecuritySSLEatenInherited() {
      return !this._isSet(174) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(174);
   }

   public boolean isDebugSecuritySSLEatenSet() {
      return this._isSet(174);
   }

   public void setDebugSecuritySSLEaten(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(174);
      boolean _oldVal = this._DebugSecuritySSLEaten;
      this._DebugSecuritySSLEaten = param0;
      this._postSet(174, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(174)) {
            source._postSetFirePropertyChange(174, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugCertRevocCheck() {
      return !this._isSet(175) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(175) ? this._getDelegateBean().getDebugCertRevocCheck() : this._DebugCertRevocCheck;
   }

   public boolean isDebugCertRevocCheckInherited() {
      return !this._isSet(175) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(175);
   }

   public boolean isDebugCertRevocCheckSet() {
      return this._isSet(175);
   }

   public void setDebugCertRevocCheck(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(175);
      boolean _oldVal = this._DebugCertRevocCheck;
      this._DebugCertRevocCheck = param0;
      this._postSet(175, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(175)) {
            source._postSetFirePropertyChange(175, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEmbeddedLDAP() {
      return !this._isSet(176) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(176) ? this._getDelegateBean().getDebugEmbeddedLDAP() : this._DebugEmbeddedLDAP;
   }

   public boolean isDebugEmbeddedLDAPInherited() {
      return !this._isSet(176) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(176);
   }

   public boolean isDebugEmbeddedLDAPSet() {
      return this._isSet(176);
   }

   public void setDebugEmbeddedLDAP(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(176);
      boolean _oldVal = this._DebugEmbeddedLDAP;
      this._DebugEmbeddedLDAP = param0;
      this._postSet(176, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(176)) {
            source._postSetFirePropertyChange(176, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEmbeddedLDAPLogToConsole() {
      return !this._isSet(177) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(177) ? this._getDelegateBean().getDebugEmbeddedLDAPLogToConsole() : this._DebugEmbeddedLDAPLogToConsole;
   }

   public boolean isDebugEmbeddedLDAPLogToConsoleInherited() {
      return !this._isSet(177) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(177);
   }

   public boolean isDebugEmbeddedLDAPLogToConsoleSet() {
      return this._isSet(177);
   }

   public void setDebugEmbeddedLDAPLogToConsole(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(177);
      boolean _oldVal = this._DebugEmbeddedLDAPLogToConsole;
      this._DebugEmbeddedLDAPLogToConsole = param0;
      this._postSet(177, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(177)) {
            source._postSetFirePropertyChange(177, wasSet, _oldVal, param0);
         }
      }

   }

   public int getDebugEmbeddedLDAPLogLevel() {
      return !this._isSet(178) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(178) ? this._getDelegateBean().getDebugEmbeddedLDAPLogLevel() : this._DebugEmbeddedLDAPLogLevel;
   }

   public boolean isDebugEmbeddedLDAPLogLevelInherited() {
      return !this._isSet(178) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(178);
   }

   public boolean isDebugEmbeddedLDAPLogLevelSet() {
      return this._isSet(178);
   }

   public void setDebugEmbeddedLDAPLogLevel(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("DebugEmbeddedLDAPLogLevel", (long)param0, 0L, 11L);
      boolean wasSet = this._isSet(178);
      int _oldVal = this._DebugEmbeddedLDAPLogLevel;
      this._DebugEmbeddedLDAPLogLevel = param0;
      this._postSet(178, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(178)) {
            source._postSetFirePropertyChange(178, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEmbeddedLDAPWriteOverrideProps() {
      return !this._isSet(179) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(179) ? this._getDelegateBean().getDebugEmbeddedLDAPWriteOverrideProps() : this._DebugEmbeddedLDAPWriteOverrideProps;
   }

   public boolean isDebugEmbeddedLDAPWriteOverridePropsInherited() {
      return !this._isSet(179) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(179);
   }

   public boolean isDebugEmbeddedLDAPWriteOverridePropsSet() {
      return this._isSet(179);
   }

   public void setDebugEmbeddedLDAPWriteOverrideProps(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(179);
      boolean _oldVal = this._DebugEmbeddedLDAPWriteOverrideProps;
      this._DebugEmbeddedLDAPWriteOverrideProps = param0;
      this._postSet(179, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(179)) {
            source._postSetFirePropertyChange(179, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityAdjudicator() {
      return !this._isSet(180) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(180) ? this._getDelegateBean().getDebugSecurityAdjudicator() : this._DebugSecurityAdjudicator;
   }

   public boolean isDebugSecurityAdjudicatorInherited() {
      return !this._isSet(180) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(180);
   }

   public boolean isDebugSecurityAdjudicatorSet() {
      return this._isSet(180);
   }

   public void setDebugSecurityAdjudicator(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(180);
      boolean _oldVal = this._DebugSecurityAdjudicator;
      this._DebugSecurityAdjudicator = param0;
      this._postSet(180, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(180)) {
            source._postSetFirePropertyChange(180, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityAtn() {
      return !this._isSet(181) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(181) ? this._getDelegateBean().getDebugSecurityAtn() : this._DebugSecurityAtn;
   }

   public boolean isDebugSecurityAtnInherited() {
      return !this._isSet(181) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(181);
   }

   public boolean isDebugSecurityAtnSet() {
      return this._isSet(181);
   }

   public void setDebugSecurityAtn(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(181);
      boolean _oldVal = this._DebugSecurityAtn;
      this._DebugSecurityAtn = param0;
      this._postSet(181, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(181)) {
            source._postSetFirePropertyChange(181, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityAtz() {
      return !this._isSet(182) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(182) ? this._getDelegateBean().getDebugSecurityAtz() : this._DebugSecurityAtz;
   }

   public boolean isDebugSecurityAtzInherited() {
      return !this._isSet(182) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(182);
   }

   public boolean isDebugSecurityAtzSet() {
      return this._isSet(182);
   }

   public void setDebugSecurityAtz(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(182);
      boolean _oldVal = this._DebugSecurityAtz;
      this._DebugSecurityAtz = param0;
      this._postSet(182, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(182)) {
            source._postSetFirePropertyChange(182, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityAuditor() {
      return !this._isSet(183) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(183) ? this._getDelegateBean().getDebugSecurityAuditor() : this._DebugSecurityAuditor;
   }

   public boolean isDebugSecurityAuditorInherited() {
      return !this._isSet(183) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(183);
   }

   public boolean isDebugSecurityAuditorSet() {
      return this._isSet(183);
   }

   public void setDebugSecurityAuditor(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(183);
      boolean _oldVal = this._DebugSecurityAuditor;
      this._DebugSecurityAuditor = param0;
      this._postSet(183, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(183)) {
            source._postSetFirePropertyChange(183, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityCredMap() {
      return !this._isSet(184) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(184) ? this._getDelegateBean().getDebugSecurityCredMap() : this._DebugSecurityCredMap;
   }

   public boolean isDebugSecurityCredMapInherited() {
      return !this._isSet(184) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(184);
   }

   public boolean isDebugSecurityCredMapSet() {
      return this._isSet(184);
   }

   public void setDebugSecurityCredMap(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(184);
      boolean _oldVal = this._DebugSecurityCredMap;
      this._DebugSecurityCredMap = param0;
      this._postSet(184, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(184)) {
            source._postSetFirePropertyChange(184, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityEncryptionService() {
      return !this._isSet(185) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(185) ? this._getDelegateBean().getDebugSecurityEncryptionService() : this._DebugSecurityEncryptionService;
   }

   public boolean isDebugSecurityEncryptionServiceInherited() {
      return !this._isSet(185) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(185);
   }

   public boolean isDebugSecurityEncryptionServiceSet() {
      return this._isSet(185);
   }

   public void setDebugSecurityEncryptionService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(185);
      boolean _oldVal = this._DebugSecurityEncryptionService;
      this._DebugSecurityEncryptionService = param0;
      this._postSet(185, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(185)) {
            source._postSetFirePropertyChange(185, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityKeyStore() {
      return !this._isSet(186) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(186) ? this._getDelegateBean().getDebugSecurityKeyStore() : this._DebugSecurityKeyStore;
   }

   public boolean isDebugSecurityKeyStoreInherited() {
      return !this._isSet(186) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(186);
   }

   public boolean isDebugSecurityKeyStoreSet() {
      return this._isSet(186);
   }

   public void setDebugSecurityKeyStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(186);
      boolean _oldVal = this._DebugSecurityKeyStore;
      this._DebugSecurityKeyStore = param0;
      this._postSet(186, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(186)) {
            source._postSetFirePropertyChange(186, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityCertPath() {
      return !this._isSet(187) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(187) ? this._getDelegateBean().getDebugSecurityCertPath() : this._DebugSecurityCertPath;
   }

   public boolean isDebugSecurityCertPathInherited() {
      return !this._isSet(187) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(187);
   }

   public boolean isDebugSecurityCertPathSet() {
      return this._isSet(187);
   }

   public void setDebugSecurityCertPath(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(187);
      boolean _oldVal = this._DebugSecurityCertPath;
      this._DebugSecurityCertPath = param0;
      this._postSet(187, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(187)) {
            source._postSetFirePropertyChange(187, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityProfiler() {
      return !this._isSet(188) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(188) ? this._getDelegateBean().getDebugSecurityProfiler() : this._DebugSecurityProfiler;
   }

   public boolean isDebugSecurityProfilerInherited() {
      return !this._isSet(188) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(188);
   }

   public boolean isDebugSecurityProfilerSet() {
      return this._isSet(188);
   }

   public void setDebugSecurityProfiler(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(188);
      boolean _oldVal = this._DebugSecurityProfiler;
      this._DebugSecurityProfiler = param0;
      this._postSet(188, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(188)) {
            source._postSetFirePropertyChange(188, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityRoleMap() {
      return !this._isSet(189) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(189) ? this._getDelegateBean().getDebugSecurityRoleMap() : this._DebugSecurityRoleMap;
   }

   public boolean isDebugSecurityRoleMapInherited() {
      return !this._isSet(189) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(189);
   }

   public boolean isDebugSecurityRoleMapSet() {
      return this._isSet(189);
   }

   public void setDebugSecurityRoleMap(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(189);
      boolean _oldVal = this._DebugSecurityRoleMap;
      this._DebugSecurityRoleMap = param0;
      this._postSet(189, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(189)) {
            source._postSetFirePropertyChange(189, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityEEngine() {
      return !this._isSet(190) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(190) ? this._getDelegateBean().getDebugSecurityEEngine() : this._DebugSecurityEEngine;
   }

   public boolean isDebugSecurityEEngineInherited() {
      return !this._isSet(190) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(190);
   }

   public boolean isDebugSecurityEEngineSet() {
      return this._isSet(190);
   }

   public void setDebugSecurityEEngine(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(190);
      boolean _oldVal = this._DebugSecurityEEngine;
      this._DebugSecurityEEngine = param0;
      this._postSet(190, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(190)) {
            source._postSetFirePropertyChange(190, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityJACC() {
      return !this._isSet(191) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(191) ? this._getDelegateBean().getDebugSecurityJACC() : this._DebugSecurityJACC;
   }

   public boolean isDebugSecurityJACCInherited() {
      return !this._isSet(191) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(191);
   }

   public boolean isDebugSecurityJACCSet() {
      return this._isSet(191);
   }

   public void setDebugSecurityJACC(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(191);
      boolean _oldVal = this._DebugSecurityJACC;
      this._DebugSecurityJACC = param0;
      this._postSet(191, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(191)) {
            source._postSetFirePropertyChange(191, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityJACCNonPolicy() {
      return !this._isSet(192) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(192) ? this._getDelegateBean().getDebugSecurityJACCNonPolicy() : this._DebugSecurityJACCNonPolicy;
   }

   public boolean isDebugSecurityJACCNonPolicyInherited() {
      return !this._isSet(192) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(192);
   }

   public boolean isDebugSecurityJACCNonPolicySet() {
      return this._isSet(192);
   }

   public void setDebugSecurityJACCNonPolicy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(192);
      boolean _oldVal = this._DebugSecurityJACCNonPolicy;
      this._DebugSecurityJACCNonPolicy = param0;
      this._postSet(192, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(192)) {
            source._postSetFirePropertyChange(192, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecurityJACCPolicy() {
      return !this._isSet(193) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(193) ? this._getDelegateBean().getDebugSecurityJACCPolicy() : this._DebugSecurityJACCPolicy;
   }

   public boolean isDebugSecurityJACCPolicyInherited() {
      return !this._isSet(193) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(193);
   }

   public boolean isDebugSecurityJACCPolicySet() {
      return this._isSet(193);
   }

   public void setDebugSecurityJACCPolicy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(193);
      boolean _oldVal = this._DebugSecurityJACCPolicy;
      this._DebugSecurityJACCPolicy = param0;
      this._postSet(193, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(193)) {
            source._postSetFirePropertyChange(193, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAMLLib() {
      return !this._isSet(194) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(194) ? this._getDelegateBean().getDebugSecuritySAMLLib() : this._DebugSecuritySAMLLib;
   }

   public boolean isDebugSecuritySAMLLibInherited() {
      return !this._isSet(194) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(194);
   }

   public boolean isDebugSecuritySAMLLibSet() {
      return this._isSet(194);
   }

   public void setDebugSecuritySAMLLib(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(194);
      boolean _oldVal = this._DebugSecuritySAMLLib;
      this._DebugSecuritySAMLLib = param0;
      this._postSet(194, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(194)) {
            source._postSetFirePropertyChange(194, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAMLAtn() {
      return !this._isSet(195) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(195) ? this._getDelegateBean().getDebugSecuritySAMLAtn() : this._DebugSecuritySAMLAtn;
   }

   public boolean isDebugSecuritySAMLAtnInherited() {
      return !this._isSet(195) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(195);
   }

   public boolean isDebugSecuritySAMLAtnSet() {
      return this._isSet(195);
   }

   public void setDebugSecuritySAMLAtn(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(195);
      boolean _oldVal = this._DebugSecuritySAMLAtn;
      this._DebugSecuritySAMLAtn = param0;
      this._postSet(195, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(195)) {
            source._postSetFirePropertyChange(195, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAMLCredMap() {
      return !this._isSet(196) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(196) ? this._getDelegateBean().getDebugSecuritySAMLCredMap() : this._DebugSecuritySAMLCredMap;
   }

   public boolean isDebugSecuritySAMLCredMapInherited() {
      return !this._isSet(196) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(196);
   }

   public boolean isDebugSecuritySAMLCredMapSet() {
      return this._isSet(196);
   }

   public void setDebugSecuritySAMLCredMap(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(196);
      boolean _oldVal = this._DebugSecuritySAMLCredMap;
      this._DebugSecuritySAMLCredMap = param0;
      this._postSet(196, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(196)) {
            source._postSetFirePropertyChange(196, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAMLService() {
      return !this._isSet(197) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(197) ? this._getDelegateBean().getDebugSecuritySAMLService() : this._DebugSecuritySAMLService;
   }

   public boolean isDebugSecuritySAMLServiceInherited() {
      return !this._isSet(197) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(197);
   }

   public boolean isDebugSecuritySAMLServiceSet() {
      return this._isSet(197);
   }

   public void setDebugSecuritySAMLService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(197);
      boolean _oldVal = this._DebugSecuritySAMLService;
      this._DebugSecuritySAMLService = param0;
      this._postSet(197, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(197)) {
            source._postSetFirePropertyChange(197, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAML2Lib() {
      return !this._isSet(198) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(198) ? this._getDelegateBean().getDebugSecuritySAML2Lib() : this._DebugSecuritySAML2Lib;
   }

   public boolean isDebugSecuritySAML2LibInherited() {
      return !this._isSet(198) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(198);
   }

   public boolean isDebugSecuritySAML2LibSet() {
      return this._isSet(198);
   }

   public void setDebugSecuritySAML2Lib(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(198);
      boolean _oldVal = this._DebugSecuritySAML2Lib;
      this._DebugSecuritySAML2Lib = param0;
      this._postSet(198, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(198)) {
            source._postSetFirePropertyChange(198, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAML2Atn() {
      return !this._isSet(199) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(199) ? this._getDelegateBean().getDebugSecuritySAML2Atn() : this._DebugSecuritySAML2Atn;
   }

   public boolean isDebugSecuritySAML2AtnInherited() {
      return !this._isSet(199) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(199);
   }

   public boolean isDebugSecuritySAML2AtnSet() {
      return this._isSet(199);
   }

   public void setDebugSecuritySAML2Atn(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(199);
      boolean _oldVal = this._DebugSecuritySAML2Atn;
      this._DebugSecuritySAML2Atn = param0;
      this._postSet(199, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(199)) {
            source._postSetFirePropertyChange(199, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAML2CredMap() {
      return !this._isSet(200) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(200) ? this._getDelegateBean().getDebugSecuritySAML2CredMap() : this._DebugSecuritySAML2CredMap;
   }

   public boolean isDebugSecuritySAML2CredMapInherited() {
      return !this._isSet(200) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(200);
   }

   public boolean isDebugSecuritySAML2CredMapSet() {
      return this._isSet(200);
   }

   public void setDebugSecuritySAML2CredMap(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(200);
      boolean _oldVal = this._DebugSecuritySAML2CredMap;
      this._DebugSecuritySAML2CredMap = param0;
      this._postSet(200, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(200)) {
            source._postSetFirePropertyChange(200, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSecuritySAML2Service() {
      return !this._isSet(201) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(201) ? this._getDelegateBean().getDebugSecuritySAML2Service() : this._DebugSecuritySAML2Service;
   }

   public boolean isDebugSecuritySAML2ServiceInherited() {
      return !this._isSet(201) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(201);
   }

   public boolean isDebugSecuritySAML2ServiceSet() {
      return this._isSet(201);
   }

   public void setDebugSecuritySAML2Service(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(201);
      boolean _oldVal = this._DebugSecuritySAML2Service;
      this._DebugSecuritySAML2Service = param0;
      this._postSet(201, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(201)) {
            source._postSetFirePropertyChange(201, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCConn() {
      return !this._isSet(202) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(202) ? this._getDelegateBean().getDebugJDBCConn() : this._DebugJDBCConn;
   }

   public boolean isDebugJDBCConnInherited() {
      return !this._isSet(202) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(202);
   }

   public boolean isDebugJDBCConnSet() {
      return this._isSet(202);
   }

   public void setDebugJDBCConn(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(202);
      boolean _oldVal = this._DebugJDBCConn;
      this._DebugJDBCConn = param0;
      this._postSet(202, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(202)) {
            source._postSetFirePropertyChange(202, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCSQL() {
      return !this._isSet(203) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(203) ? this._getDelegateBean().getDebugJDBCSQL() : this._DebugJDBCSQL;
   }

   public boolean isDebugJDBCSQLInherited() {
      return !this._isSet(203) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(203);
   }

   public boolean isDebugJDBCSQLSet() {
      return this._isSet(203);
   }

   public void setDebugJDBCSQL(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(203);
      boolean _oldVal = this._DebugJDBCSQL;
      this._DebugJDBCSQL = param0;
      this._postSet(203, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(203)) {
            source._postSetFirePropertyChange(203, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCRMI() {
      return !this._isSet(204) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(204) ? this._getDelegateBean().getDebugJDBCRMI() : this._DebugJDBCRMI;
   }

   public boolean isDebugJDBCRMIInherited() {
      return !this._isSet(204) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(204);
   }

   public boolean isDebugJDBCRMISet() {
      return this._isSet(204);
   }

   public void setDebugJDBCRMI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(204);
      boolean _oldVal = this._DebugJDBCRMI;
      this._DebugJDBCRMI = param0;
      this._postSet(204, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(204)) {
            source._postSetFirePropertyChange(204, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCDriverLogging() {
      return !this._isSet(205) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(205) ? this._getDelegateBean().getDebugJDBCDriverLogging() : this._DebugJDBCDriverLogging;
   }

   public boolean isDebugJDBCDriverLoggingInherited() {
      return !this._isSet(205) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(205);
   }

   public boolean isDebugJDBCDriverLoggingSet() {
      return this._isSet(205);
   }

   public void setDebugJDBCDriverLogging(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(205);
      boolean _oldVal = this._DebugJDBCDriverLogging;
      this._DebugJDBCDriverLogging = param0;
      this._postSet(205, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(205)) {
            source._postSetFirePropertyChange(205, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCInternal() {
      return !this._isSet(206) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(206) ? this._getDelegateBean().getDebugJDBCInternal() : this._DebugJDBCInternal;
   }

   public boolean isDebugJDBCInternalInherited() {
      return !this._isSet(206) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(206);
   }

   public boolean isDebugJDBCInternalSet() {
      return this._isSet(206);
   }

   public void setDebugJDBCInternal(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(206);
      boolean _oldVal = this._DebugJDBCInternal;
      this._DebugJDBCInternal = param0;
      this._postSet(206, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(206)) {
            source._postSetFirePropertyChange(206, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCRAC() {
      return !this._isSet(207) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(207) ? this._getDelegateBean().getDebugJDBCRAC() : this._DebugJDBCRAC;
   }

   public boolean isDebugJDBCRACInherited() {
      return !this._isSet(207) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(207);
   }

   public boolean isDebugJDBCRACSet() {
      return this._isSet(207);
   }

   public void setDebugJDBCRAC(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(207);
      boolean _oldVal = this._DebugJDBCRAC;
      this._DebugJDBCRAC = param0;
      this._postSet(207, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(207)) {
            source._postSetFirePropertyChange(207, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCONS() {
      return !this._isSet(208) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(208) ? this._getDelegateBean().getDebugJDBCONS() : this._DebugJDBCONS;
   }

   public boolean isDebugJDBCONSInherited() {
      return !this._isSet(208) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(208);
   }

   public boolean isDebugJDBCONSSet() {
      return this._isSet(208);
   }

   public void setDebugJDBCONS(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(208);
      boolean _oldVal = this._DebugJDBCONS;
      this._DebugJDBCONS = param0;
      this._postSet(208, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(208)) {
            source._postSetFirePropertyChange(208, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCUCP() {
      return !this._isSet(209) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(209) ? this._getDelegateBean().getDebugJDBCUCP() : this._DebugJDBCUCP;
   }

   public boolean isDebugJDBCUCPInherited() {
      return !this._isSet(209) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(209);
   }

   public boolean isDebugJDBCUCPSet() {
      return this._isSet(209);
   }

   public void setDebugJDBCUCP(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(209);
      boolean _oldVal = this._DebugJDBCUCP;
      this._DebugJDBCUCP = param0;
      this._postSet(209, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(209)) {
            source._postSetFirePropertyChange(209, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJDBCReplay() {
      return !this._isSet(210) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(210) ? this._getDelegateBean().getDebugJDBCReplay() : this._DebugJDBCReplay;
   }

   public boolean isDebugJDBCReplayInherited() {
      return !this._isSet(210) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(210);
   }

   public boolean isDebugJDBCReplaySet() {
      return this._isSet(210);
   }

   public void setDebugJDBCReplay(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(210);
      boolean _oldVal = this._DebugJDBCReplay;
      this._DebugJDBCReplay = param0;
      this._postSet(210, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(210)) {
            source._postSetFirePropertyChange(210, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingBridgeStartup() {
      return !this._isSet(211) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(211) ? this._getDelegateBean().getDebugMessagingBridgeStartup() : this._DebugMessagingBridgeStartup;
   }

   public boolean isDebugMessagingBridgeStartupInherited() {
      return !this._isSet(211) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(211);
   }

   public boolean isDebugMessagingBridgeStartupSet() {
      return this._isSet(211);
   }

   public void setDebugMessagingBridgeStartup(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(211);
      boolean _oldVal = this._DebugMessagingBridgeStartup;
      this._DebugMessagingBridgeStartup = param0;
      this._postSet(211, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(211)) {
            source._postSetFirePropertyChange(211, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingBridgeRuntime() {
      return !this._isSet(212) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(212) ? this._getDelegateBean().getDebugMessagingBridgeRuntime() : this._DebugMessagingBridgeRuntime;
   }

   public boolean isDebugMessagingBridgeRuntimeInherited() {
      return !this._isSet(212) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(212);
   }

   public boolean isDebugMessagingBridgeRuntimeSet() {
      return this._isSet(212);
   }

   public void setDebugMessagingBridgeRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(212);
      boolean _oldVal = this._DebugMessagingBridgeRuntime;
      this._DebugMessagingBridgeRuntime = param0;
      this._postSet(212, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(212)) {
            source._postSetFirePropertyChange(212, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingBridgeRuntimeVerbose() {
      return !this._isSet(213) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(213) ? this._getDelegateBean().getDebugMessagingBridgeRuntimeVerbose() : this._DebugMessagingBridgeRuntimeVerbose;
   }

   public boolean isDebugMessagingBridgeRuntimeVerboseInherited() {
      return !this._isSet(213) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(213);
   }

   public boolean isDebugMessagingBridgeRuntimeVerboseSet() {
      return this._isSet(213);
   }

   public void setDebugMessagingBridgeRuntimeVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(213);
      boolean _oldVal = this._DebugMessagingBridgeRuntimeVerbose;
      this._DebugMessagingBridgeRuntimeVerbose = param0;
      this._postSet(213, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(213)) {
            source._postSetFirePropertyChange(213, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingBridgeDumpToLog() {
      return !this._isSet(214) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(214) ? this._getDelegateBean().getDebugMessagingBridgeDumpToLog() : this._DebugMessagingBridgeDumpToLog;
   }

   public boolean isDebugMessagingBridgeDumpToLogInherited() {
      return !this._isSet(214) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(214);
   }

   public boolean isDebugMessagingBridgeDumpToLogSet() {
      return this._isSet(214);
   }

   public void setDebugMessagingBridgeDumpToLog(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(214);
      boolean _oldVal = this._DebugMessagingBridgeDumpToLog;
      this._DebugMessagingBridgeDumpToLog = param0;
      this._postSet(214, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(214)) {
            source._postSetFirePropertyChange(214, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMessagingBridgeDumpToConsole() {
      return !this._isSet(215) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(215) ? this._getDelegateBean().getDebugMessagingBridgeDumpToConsole() : this._DebugMessagingBridgeDumpToConsole;
   }

   public boolean isDebugMessagingBridgeDumpToConsoleInherited() {
      return !this._isSet(215) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(215);
   }

   public boolean isDebugMessagingBridgeDumpToConsoleSet() {
      return this._isSet(215);
   }

   public void setDebugMessagingBridgeDumpToConsole(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(215);
      boolean _oldVal = this._DebugMessagingBridgeDumpToConsole;
      this._DebugMessagingBridgeDumpToConsole = param0;
      this._postSet(215, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(215)) {
            source._postSetFirePropertyChange(215, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugStoreIOLogical(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(216);
      boolean _oldVal = this._DebugStoreIOLogical;
      this._DebugStoreIOLogical = param0;
      this._postSet(216, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(216)) {
            source._postSetFirePropertyChange(216, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreIOLogical() {
      return !this._isSet(216) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(216) ? this._getDelegateBean().getDebugStoreIOLogical() : this._DebugStoreIOLogical;
   }

   public boolean isDebugStoreIOLogicalInherited() {
      return !this._isSet(216) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(216);
   }

   public boolean isDebugStoreIOLogicalSet() {
      return this._isSet(216);
   }

   public void setDebugStoreIOLogicalBoot(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(217);
      boolean _oldVal = this._DebugStoreIOLogicalBoot;
      this._DebugStoreIOLogicalBoot = param0;
      this._postSet(217, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(217)) {
            source._postSetFirePropertyChange(217, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreIOLogicalBoot() {
      return !this._isSet(217) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(217) ? this._getDelegateBean().getDebugStoreIOLogicalBoot() : this._DebugStoreIOLogicalBoot;
   }

   public boolean isDebugStoreIOLogicalBootInherited() {
      return !this._isSet(217) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(217);
   }

   public boolean isDebugStoreIOLogicalBootSet() {
      return this._isSet(217);
   }

   public void setDebugStoreIOPhysical(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(218);
      boolean _oldVal = this._DebugStoreIOPhysical;
      this._DebugStoreIOPhysical = param0;
      this._postSet(218, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(218)) {
            source._postSetFirePropertyChange(218, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreIOPhysical() {
      return !this._isSet(218) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(218) ? this._getDelegateBean().getDebugStoreIOPhysical() : this._DebugStoreIOPhysical;
   }

   public boolean isDebugStoreIOPhysicalInherited() {
      return !this._isSet(218) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(218);
   }

   public boolean isDebugStoreIOPhysicalSet() {
      return this._isSet(218);
   }

   public void setDebugStoreIOPhysicalVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(219);
      boolean _oldVal = this._DebugStoreIOPhysicalVerbose;
      this._DebugStoreIOPhysicalVerbose = param0;
      this._postSet(219, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(219)) {
            source._postSetFirePropertyChange(219, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreIOPhysicalVerbose() {
      return !this._isSet(219) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(219) ? this._getDelegateBean().getDebugStoreIOPhysicalVerbose() : this._DebugStoreIOPhysicalVerbose;
   }

   public boolean isDebugStoreIOPhysicalVerboseInherited() {
      return !this._isSet(219) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(219);
   }

   public boolean isDebugStoreIOPhysicalVerboseSet() {
      return this._isSet(219);
   }

   public void setDebugStoreXA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(220);
      boolean _oldVal = this._DebugStoreXA;
      this._DebugStoreXA = param0;
      this._postSet(220, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(220)) {
            source._postSetFirePropertyChange(220, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreXA() {
      return !this._isSet(220) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(220) ? this._getDelegateBean().getDebugStoreXA() : this._DebugStoreXA;
   }

   public boolean isDebugStoreXAInherited() {
      return !this._isSet(220) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(220);
   }

   public boolean isDebugStoreXASet() {
      return this._isSet(220);
   }

   public void setDebugStoreXAVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(221);
      boolean _oldVal = this._DebugStoreXAVerbose;
      this._DebugStoreXAVerbose = param0;
      this._postSet(221, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(221)) {
            source._postSetFirePropertyChange(221, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreXAVerbose() {
      return !this._isSet(221) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(221) ? this._getDelegateBean().getDebugStoreXAVerbose() : this._DebugStoreXAVerbose;
   }

   public boolean isDebugStoreXAVerboseInherited() {
      return !this._isSet(221) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(221);
   }

   public boolean isDebugStoreXAVerboseSet() {
      return this._isSet(221);
   }

   public void setDebugStoreAdmin(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(222);
      boolean _oldVal = this._DebugStoreAdmin;
      this._DebugStoreAdmin = param0;
      this._postSet(222, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(222)) {
            source._postSetFirePropertyChange(222, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreAdmin() {
      return !this._isSet(222) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(222) ? this._getDelegateBean().getDebugStoreAdmin() : this._DebugStoreAdmin;
   }

   public boolean isDebugStoreAdminInherited() {
      return !this._isSet(222) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(222);
   }

   public boolean isDebugStoreAdminSet() {
      return this._isSet(222);
   }

   public int getDebugXMLRegistryDebugLevel() {
      return !this._isSet(223) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(223) ? this._getDelegateBean().getDebugXMLRegistryDebugLevel() : this._DebugXMLRegistryDebugLevel;
   }

   public boolean isDebugXMLRegistryDebugLevelInherited() {
      return !this._isSet(223) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(223);
   }

   public boolean isDebugXMLRegistryDebugLevelSet() {
      return this._isSet(223);
   }

   public void setDebugXMLRegistryDebugLevel(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("DebugXMLRegistryDebugLevel", (long)param0, 0L, 3L);
      boolean wasSet = this._isSet(223);
      int _oldVal = this._DebugXMLRegistryDebugLevel;
      this._DebugXMLRegistryDebugLevel = param0;
      this._postSet(223, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(223)) {
            source._postSetFirePropertyChange(223, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDebugXMLRegistryDebugName() {
      return !this._isSet(224) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(224) ? this._performMacroSubstitution(this._getDelegateBean().getDebugXMLRegistryDebugName(), this) : this._DebugXMLRegistryDebugName;
   }

   public boolean isDebugXMLRegistryDebugNameInherited() {
      return !this._isSet(224) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(224);
   }

   public boolean isDebugXMLRegistryDebugNameSet() {
      return this._isSet(224);
   }

   public void setDebugXMLRegistryDebugName(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(224);
      String _oldVal = this._DebugXMLRegistryDebugName;
      this._DebugXMLRegistryDebugName = param0;
      this._postSet(224, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(224)) {
            source._postSetFirePropertyChange(224, wasSet, _oldVal, param0);
         }
      }

   }

   public OutputStream getDebugXMLRegistryOutputStream() {
      return !this._isSet(225) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(225) ? this._getDelegateBean().getDebugXMLRegistryOutputStream() : this._DebugXMLRegistryOutputStream;
   }

   public boolean isDebugXMLRegistryOutputStreamInherited() {
      return !this._isSet(225) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(225);
   }

   public boolean isDebugXMLRegistryOutputStreamSet() {
      return this._isSet(225);
   }

   public void setDebugXMLRegistryOutputStream(OutputStream param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      this._DebugXMLRegistryOutputStream = param0;
   }

   public boolean getDebugXMLRegistryIncludeTime() {
      return !this._isSet(226) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(226) ? this._getDelegateBean().getDebugXMLRegistryIncludeTime() : this._DebugXMLRegistryIncludeTime;
   }

   public boolean isDebugXMLRegistryIncludeTimeInherited() {
      return !this._isSet(226) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(226);
   }

   public boolean isDebugXMLRegistryIncludeTimeSet() {
      return this._isSet(226);
   }

   public void setDebugXMLRegistryIncludeTime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(226);
      boolean _oldVal = this._DebugXMLRegistryIncludeTime;
      this._DebugXMLRegistryIncludeTime = param0;
      this._postSet(226, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(226)) {
            source._postSetFirePropertyChange(226, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLRegistryIncludeName() {
      if (!this._isSet(227) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(227)) {
         return this._getDelegateBean().getDebugXMLRegistryIncludeName();
      } else if (!this._isSet(227)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugXMLRegistryIncludeName;
      }
   }

   public boolean isDebugXMLRegistryIncludeNameInherited() {
      return !this._isSet(227) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(227);
   }

   public boolean isDebugXMLRegistryIncludeNameSet() {
      return this._isSet(227);
   }

   public void setDebugXMLRegistryIncludeName(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(227);
      boolean _oldVal = this._DebugXMLRegistryIncludeName;
      this._DebugXMLRegistryIncludeName = param0;
      this._postSet(227, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(227)) {
            source._postSetFirePropertyChange(227, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLRegistryIncludeClass() {
      return !this._isSet(228) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(228) ? this._getDelegateBean().getDebugXMLRegistryIncludeClass() : this._DebugXMLRegistryIncludeClass;
   }

   public boolean isDebugXMLRegistryIncludeClassInherited() {
      return !this._isSet(228) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(228);
   }

   public boolean isDebugXMLRegistryIncludeClassSet() {
      return this._isSet(228);
   }

   public void setDebugXMLRegistryIncludeClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(228);
      boolean _oldVal = this._DebugXMLRegistryIncludeClass;
      this._DebugXMLRegistryIncludeClass = param0;
      this._postSet(228, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(228)) {
            source._postSetFirePropertyChange(228, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLRegistryIncludeLocation() {
      return !this._isSet(229) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(229) ? this._getDelegateBean().getDebugXMLRegistryIncludeLocation() : this._DebugXMLRegistryIncludeLocation;
   }

   public boolean isDebugXMLRegistryIncludeLocationInherited() {
      return !this._isSet(229) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(229);
   }

   public boolean isDebugXMLRegistryIncludeLocationSet() {
      return this._isSet(229);
   }

   public void setDebugXMLRegistryIncludeLocation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(229);
      boolean _oldVal = this._DebugXMLRegistryIncludeLocation;
      this._DebugXMLRegistryIncludeLocation = param0;
      this._postSet(229, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(229)) {
            source._postSetFirePropertyChange(229, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLRegistryUseShortClass() {
      if (!this._isSet(230) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(230)) {
         return this._getDelegateBean().getDebugXMLRegistryUseShortClass();
      } else if (!this._isSet(230)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugXMLRegistryUseShortClass;
      }
   }

   public boolean isDebugXMLRegistryUseShortClassInherited() {
      return !this._isSet(230) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(230);
   }

   public boolean isDebugXMLRegistryUseShortClassSet() {
      return this._isSet(230);
   }

   public void setDebugXMLRegistryUseShortClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(230);
      boolean _oldVal = this._DebugXMLRegistryUseShortClass;
      this._DebugXMLRegistryUseShortClass = param0;
      this._postSet(230, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(230)) {
            source._postSetFirePropertyChange(230, wasSet, _oldVal, param0);
         }
      }

   }

   public int getDebugJAXPDebugLevel() {
      return !this._isSet(231) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(231) ? this._getDelegateBean().getDebugJAXPDebugLevel() : this._DebugJAXPDebugLevel;
   }

   public boolean isDebugJAXPDebugLevelInherited() {
      return !this._isSet(231) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(231);
   }

   public boolean isDebugJAXPDebugLevelSet() {
      return this._isSet(231);
   }

   public void setDebugJAXPDebugLevel(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("DebugJAXPDebugLevel", (long)param0, 0L, 3L);
      boolean wasSet = this._isSet(231);
      int _oldVal = this._DebugJAXPDebugLevel;
      this._DebugJAXPDebugLevel = param0;
      this._postSet(231, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(231)) {
            source._postSetFirePropertyChange(231, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDebugJAXPDebugName() {
      return !this._isSet(232) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(232) ? this._performMacroSubstitution(this._getDelegateBean().getDebugJAXPDebugName(), this) : this._DebugJAXPDebugName;
   }

   public boolean isDebugJAXPDebugNameInherited() {
      return !this._isSet(232) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(232);
   }

   public boolean isDebugJAXPDebugNameSet() {
      return this._isSet(232);
   }

   public void setDebugJAXPDebugName(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(232);
      String _oldVal = this._DebugJAXPDebugName;
      this._DebugJAXPDebugName = param0;
      this._postSet(232, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(232)) {
            source._postSetFirePropertyChange(232, wasSet, _oldVal, param0);
         }
      }

   }

   public OutputStream getDebugJAXPOutputStream() {
      return !this._isSet(233) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(233) ? this._getDelegateBean().getDebugJAXPOutputStream() : this._DebugJAXPOutputStream;
   }

   public boolean isDebugJAXPOutputStreamInherited() {
      return !this._isSet(233) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(233);
   }

   public boolean isDebugJAXPOutputStreamSet() {
      return this._isSet(233);
   }

   public void setDebugJAXPOutputStream(OutputStream param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      this._DebugJAXPOutputStream = param0;
   }

   public boolean getDebugJAXPIncludeTime() {
      return !this._isSet(234) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(234) ? this._getDelegateBean().getDebugJAXPIncludeTime() : this._DebugJAXPIncludeTime;
   }

   public boolean isDebugJAXPIncludeTimeInherited() {
      return !this._isSet(234) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(234);
   }

   public boolean isDebugJAXPIncludeTimeSet() {
      return this._isSet(234);
   }

   public void setDebugJAXPIncludeTime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(234);
      boolean _oldVal = this._DebugJAXPIncludeTime;
      this._DebugJAXPIncludeTime = param0;
      this._postSet(234, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(234)) {
            source._postSetFirePropertyChange(234, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJAXPIncludeName() {
      if (!this._isSet(235) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(235)) {
         return this._getDelegateBean().getDebugJAXPIncludeName();
      } else if (!this._isSet(235)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugJAXPIncludeName;
      }
   }

   public boolean isDebugJAXPIncludeNameInherited() {
      return !this._isSet(235) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(235);
   }

   public boolean isDebugJAXPIncludeNameSet() {
      return this._isSet(235);
   }

   public void setDebugJAXPIncludeName(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(235);
      boolean _oldVal = this._DebugJAXPIncludeName;
      this._DebugJAXPIncludeName = param0;
      this._postSet(235, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(235)) {
            source._postSetFirePropertyChange(235, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJAXPIncludeClass() {
      return !this._isSet(236) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(236) ? this._getDelegateBean().getDebugJAXPIncludeClass() : this._DebugJAXPIncludeClass;
   }

   public boolean isDebugJAXPIncludeClassInherited() {
      return !this._isSet(236) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(236);
   }

   public boolean isDebugJAXPIncludeClassSet() {
      return this._isSet(236);
   }

   public void setDebugJAXPIncludeClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(236);
      boolean _oldVal = this._DebugJAXPIncludeClass;
      this._DebugJAXPIncludeClass = param0;
      this._postSet(236, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(236)) {
            source._postSetFirePropertyChange(236, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJAXPIncludeLocation() {
      return !this._isSet(237) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(237) ? this._getDelegateBean().getDebugJAXPIncludeLocation() : this._DebugJAXPIncludeLocation;
   }

   public boolean isDebugJAXPIncludeLocationInherited() {
      return !this._isSet(237) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(237);
   }

   public boolean isDebugJAXPIncludeLocationSet() {
      return this._isSet(237);
   }

   public void setDebugJAXPIncludeLocation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(237);
      boolean _oldVal = this._DebugJAXPIncludeLocation;
      this._DebugJAXPIncludeLocation = param0;
      this._postSet(237, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(237)) {
            source._postSetFirePropertyChange(237, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJAXPUseShortClass() {
      if (!this._isSet(238) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(238)) {
         return this._getDelegateBean().getDebugJAXPUseShortClass();
      } else if (!this._isSet(238)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugJAXPUseShortClass;
      }
   }

   public boolean isDebugJAXPUseShortClassInherited() {
      return !this._isSet(238) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(238);
   }

   public boolean isDebugJAXPUseShortClassSet() {
      return this._isSet(238);
   }

   public void setDebugJAXPUseShortClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(238);
      boolean _oldVal = this._DebugJAXPUseShortClass;
      this._DebugJAXPUseShortClass = param0;
      this._postSet(238, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(238)) {
            source._postSetFirePropertyChange(238, wasSet, _oldVal, param0);
         }
      }

   }

   public int getDebugXMLEntityCacheDebugLevel() {
      return !this._isSet(239) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(239) ? this._getDelegateBean().getDebugXMLEntityCacheDebugLevel() : this._DebugXMLEntityCacheDebugLevel;
   }

   public boolean isDebugXMLEntityCacheDebugLevelInherited() {
      return !this._isSet(239) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(239);
   }

   public boolean isDebugXMLEntityCacheDebugLevelSet() {
      return this._isSet(239);
   }

   public void setDebugXMLEntityCacheDebugLevel(int param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      LegalChecks.checkInRange("DebugXMLEntityCacheDebugLevel", (long)param0, 0L, 3L);
      boolean wasSet = this._isSet(239);
      int _oldVal = this._DebugXMLEntityCacheDebugLevel;
      this._DebugXMLEntityCacheDebugLevel = param0;
      this._postSet(239, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(239)) {
            source._postSetFirePropertyChange(239, wasSet, _oldVal, param0);
         }
      }

   }

   public String getDebugXMLEntityCacheDebugName() {
      return !this._isSet(240) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(240) ? this._performMacroSubstitution(this._getDelegateBean().getDebugXMLEntityCacheDebugName(), this) : this._DebugXMLEntityCacheDebugName;
   }

   public boolean isDebugXMLEntityCacheDebugNameInherited() {
      return !this._isSet(240) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(240);
   }

   public boolean isDebugXMLEntityCacheDebugNameSet() {
      return this._isSet(240);
   }

   public void setDebugXMLEntityCacheDebugName(String param0) {
      param0 = param0 == null ? null : param0.trim();
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(240);
      String _oldVal = this._DebugXMLEntityCacheDebugName;
      this._DebugXMLEntityCacheDebugName = param0;
      this._postSet(240, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(240)) {
            source._postSetFirePropertyChange(240, wasSet, _oldVal, param0);
         }
      }

   }

   public OutputStream getDebugXMLEntityCacheOutputStream() {
      return !this._isSet(241) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(241) ? this._getDelegateBean().getDebugXMLEntityCacheOutputStream() : this._DebugXMLEntityCacheOutputStream;
   }

   public boolean isDebugXMLEntityCacheOutputStreamInherited() {
      return !this._isSet(241) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(241);
   }

   public boolean isDebugXMLEntityCacheOutputStreamSet() {
      return this._isSet(241);
   }

   public void setDebugXMLEntityCacheOutputStream(OutputStream param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      this._DebugXMLEntityCacheOutputStream = param0;
   }

   public boolean getDebugXMLEntityCacheIncludeTime() {
      return !this._isSet(242) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(242) ? this._getDelegateBean().getDebugXMLEntityCacheIncludeTime() : this._DebugXMLEntityCacheIncludeTime;
   }

   public boolean isDebugXMLEntityCacheIncludeTimeInherited() {
      return !this._isSet(242) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(242);
   }

   public boolean isDebugXMLEntityCacheIncludeTimeSet() {
      return this._isSet(242);
   }

   public void setDebugXMLEntityCacheIncludeTime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(242);
      boolean _oldVal = this._DebugXMLEntityCacheIncludeTime;
      this._DebugXMLEntityCacheIncludeTime = param0;
      this._postSet(242, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(242)) {
            source._postSetFirePropertyChange(242, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLEntityCacheIncludeName() {
      if (!this._isSet(243) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(243)) {
         return this._getDelegateBean().getDebugXMLEntityCacheIncludeName();
      } else if (!this._isSet(243)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugXMLEntityCacheIncludeName;
      }
   }

   public boolean isDebugXMLEntityCacheIncludeNameInherited() {
      return !this._isSet(243) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(243);
   }

   public boolean isDebugXMLEntityCacheIncludeNameSet() {
      return this._isSet(243);
   }

   public void setDebugXMLEntityCacheIncludeName(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(243);
      boolean _oldVal = this._DebugXMLEntityCacheIncludeName;
      this._DebugXMLEntityCacheIncludeName = param0;
      this._postSet(243, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(243)) {
            source._postSetFirePropertyChange(243, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLEntityCacheIncludeClass() {
      return !this._isSet(244) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(244) ? this._getDelegateBean().getDebugXMLEntityCacheIncludeClass() : this._DebugXMLEntityCacheIncludeClass;
   }

   public boolean isDebugXMLEntityCacheIncludeClassInherited() {
      return !this._isSet(244) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(244);
   }

   public boolean isDebugXMLEntityCacheIncludeClassSet() {
      return this._isSet(244);
   }

   public void setDebugXMLEntityCacheIncludeClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(244);
      boolean _oldVal = this._DebugXMLEntityCacheIncludeClass;
      this._DebugXMLEntityCacheIncludeClass = param0;
      this._postSet(244, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(244)) {
            source._postSetFirePropertyChange(244, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLEntityCacheIncludeLocation() {
      return !this._isSet(245) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(245) ? this._getDelegateBean().getDebugXMLEntityCacheIncludeLocation() : this._DebugXMLEntityCacheIncludeLocation;
   }

   public boolean isDebugXMLEntityCacheIncludeLocationInherited() {
      return !this._isSet(245) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(245);
   }

   public boolean isDebugXMLEntityCacheIncludeLocationSet() {
      return this._isSet(245);
   }

   public void setDebugXMLEntityCacheIncludeLocation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(245);
      boolean _oldVal = this._DebugXMLEntityCacheIncludeLocation;
      this._DebugXMLEntityCacheIncludeLocation = param0;
      this._postSet(245, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(245)) {
            source._postSetFirePropertyChange(245, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugXMLEntityCacheUseShortClass() {
      if (!this._isSet(246) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(246)) {
         return this._getDelegateBean().getDebugXMLEntityCacheUseShortClass();
      } else if (!this._isSet(246)) {
         return this._isSecureModeEnabled();
      } else {
         return this._DebugXMLEntityCacheUseShortClass;
      }
   }

   public boolean isDebugXMLEntityCacheUseShortClassInherited() {
      return !this._isSet(246) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(246);
   }

   public boolean isDebugXMLEntityCacheUseShortClassSet() {
      return this._isSet(246);
   }

   public void setDebugXMLEntityCacheUseShortClass(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(246);
      boolean _oldVal = this._DebugXMLEntityCacheUseShortClass;
      this._DebugXMLEntityCacheUseShortClass = param0;
      this._postSet(246, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(246)) {
            source._postSetFirePropertyChange(246, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploy() {
      return !this._isSet(247) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(247) ? this._getDelegateBean().getDebugDeploy() : this._DebugDeploy;
   }

   public boolean isDebugDeployInherited() {
      return !this._isSet(247) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(247);
   }

   public boolean isDebugDeploySet() {
      return this._isSet(247);
   }

   public void setDebugDeploy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(247);
      boolean _oldVal = this._DebugDeploy;
      this._DebugDeploy = param0;
      this._postSet(247, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(247)) {
            source._postSetFirePropertyChange(247, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeployment() {
      return !this._isSet(248) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(248) ? this._getDelegateBean().getDebugDeployment() : this._DebugDeployment;
   }

   public boolean isDebugDeploymentInherited() {
      return !this._isSet(248) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(248);
   }

   public boolean isDebugDeploymentSet() {
      return this._isSet(248);
   }

   public void setDebugDeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(248);
      boolean _oldVal = this._DebugDeployment;
      this._DebugDeployment = param0;
      this._postSet(248, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(248)) {
            source._postSetFirePropertyChange(248, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentConcise() {
      return !this._isSet(249) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(249) ? this._getDelegateBean().getDebugDeploymentConcise() : this._DebugDeploymentConcise;
   }

   public boolean isDebugDeploymentConciseInherited() {
      return !this._isSet(249) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(249);
   }

   public boolean isDebugDeploymentConciseSet() {
      return this._isSet(249);
   }

   public void setDebugDeploymentConcise(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(249);
      boolean _oldVal = this._DebugDeploymentConcise;
      this._DebugDeploymentConcise = param0;
      this._postSet(249, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(249)) {
            source._postSetFirePropertyChange(249, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentService() {
      return !this._isSet(250) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(250) ? this._getDelegateBean().getDebugDeploymentService() : this._DebugDeploymentService;
   }

   public boolean isDebugDeploymentServiceInherited() {
      return !this._isSet(250) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(250);
   }

   public boolean isDebugDeploymentServiceSet() {
      return this._isSet(250);
   }

   public void setDebugDeploymentService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(250);
      boolean _oldVal = this._DebugDeploymentService;
      this._DebugDeploymentService = param0;
      this._postSet(250, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(250)) {
            source._postSetFirePropertyChange(250, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentServiceStatusUpdates() {
      return !this._isSet(251) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(251) ? this._getDelegateBean().getDebugDeploymentServiceStatusUpdates() : this._DebugDeploymentServiceStatusUpdates;
   }

   public boolean isDebugDeploymentServiceStatusUpdatesInherited() {
      return !this._isSet(251) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(251);
   }

   public boolean isDebugDeploymentServiceStatusUpdatesSet() {
      return this._isSet(251);
   }

   public void setDebugDeploymentServiceStatusUpdates(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(251);
      boolean _oldVal = this._DebugDeploymentServiceStatusUpdates;
      this._DebugDeploymentServiceStatusUpdates = param0;
      this._postSet(251, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(251)) {
            source._postSetFirePropertyChange(251, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentServiceInternal() {
      return !this._isSet(252) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(252) ? this._getDelegateBean().getDebugDeploymentServiceInternal() : this._DebugDeploymentServiceInternal;
   }

   public boolean isDebugDeploymentServiceInternalInherited() {
      return !this._isSet(252) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(252);
   }

   public boolean isDebugDeploymentServiceInternalSet() {
      return this._isSet(252);
   }

   public void setDebugDeploymentServiceInternal(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(252);
      boolean _oldVal = this._DebugDeploymentServiceInternal;
      this._DebugDeploymentServiceInternal = param0;
      this._postSet(252, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(252)) {
            source._postSetFirePropertyChange(252, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentServiceTransport() {
      return !this._isSet(253) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(253) ? this._getDelegateBean().getDebugDeploymentServiceTransport() : this._DebugDeploymentServiceTransport;
   }

   public boolean isDebugDeploymentServiceTransportInherited() {
      return !this._isSet(253) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(253);
   }

   public boolean isDebugDeploymentServiceTransportSet() {
      return this._isSet(253);
   }

   public void setDebugDeploymentServiceTransport(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(253);
      boolean _oldVal = this._DebugDeploymentServiceTransport;
      this._DebugDeploymentServiceTransport = param0;
      this._postSet(253, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(253)) {
            source._postSetFirePropertyChange(253, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentServiceTransportHttp() {
      return !this._isSet(254) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(254) ? this._getDelegateBean().getDebugDeploymentServiceTransportHttp() : this._DebugDeploymentServiceTransportHttp;
   }

   public boolean isDebugDeploymentServiceTransportHttpInherited() {
      return !this._isSet(254) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(254);
   }

   public boolean isDebugDeploymentServiceTransportHttpSet() {
      return this._isSet(254);
   }

   public void setDebugDeploymentServiceTransportHttp(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(254);
      boolean _oldVal = this._DebugDeploymentServiceTransportHttp;
      this._DebugDeploymentServiceTransportHttp = param0;
      this._postSet(254, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(254)) {
            source._postSetFirePropertyChange(254, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getMasterDeployer() {
      return !this._isSet(255) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(255) ? this._getDelegateBean().getMasterDeployer() : this._MasterDeployer;
   }

   public boolean isMasterDeployerInherited() {
      return !this._isSet(255) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(255);
   }

   public boolean isMasterDeployerSet() {
      return this._isSet(255);
   }

   public void setMasterDeployer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(255);
      boolean _oldVal = this._MasterDeployer;
      this._MasterDeployer = param0;
      this._postSet(255, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(255)) {
            source._postSetFirePropertyChange(255, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getSlaveDeployer() {
      return !this._isSet(256) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(256) ? this._getDelegateBean().getSlaveDeployer() : this._SlaveDeployer;
   }

   public boolean isSlaveDeployerInherited() {
      return !this._isSet(256) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(256);
   }

   public boolean isSlaveDeployerSet() {
      return this._isSet(256);
   }

   public void setSlaveDeployer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(256);
      boolean _oldVal = this._SlaveDeployer;
      this._SlaveDeployer = param0;
      this._postSet(256, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(256)) {
            source._postSetFirePropertyChange(256, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getApplicationContainer() {
      return !this._isSet(257) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(257) ? this._getDelegateBean().getApplicationContainer() : this._ApplicationContainer;
   }

   public boolean isApplicationContainerInherited() {
      return !this._isSet(257) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(257);
   }

   public boolean isApplicationContainerSet() {
      return this._isSet(257);
   }

   public void setApplicationContainer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(257);
      boolean _oldVal = this._ApplicationContainer;
      this._ApplicationContainer = param0;
      this._postSet(257, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(257)) {
            source._postSetFirePropertyChange(257, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClassFinder() {
      return !this._isSet(258) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(258) ? this._getDelegateBean().getClassFinder() : this._ClassFinder;
   }

   public boolean isClassFinderInherited() {
      return !this._isSet(258) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(258);
   }

   public boolean isClassFinderSet() {
      return this._isSet(258);
   }

   public void setClassFinder(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(258);
      boolean _oldVal = this._ClassFinder;
      this._ClassFinder = param0;
      this._postSet(258, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(258)) {
            source._postSetFirePropertyChange(258, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClasspathServlet() {
      return !this._isSet(259) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(259) ? this._getDelegateBean().getClasspathServlet() : this._ClasspathServlet;
   }

   public boolean isClasspathServletInherited() {
      return !this._isSet(259) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(259);
   }

   public boolean isClasspathServletSet() {
      return this._isSet(259);
   }

   public void setClasspathServlet(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(259);
      boolean _oldVal = this._ClasspathServlet;
      this._ClasspathServlet = param0;
      this._postSet(259, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(259)) {
            source._postSetFirePropertyChange(259, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getWebModule() {
      return !this._isSet(260) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(260) ? this._getDelegateBean().getWebModule() : this._WebModule;
   }

   public boolean isWebModuleInherited() {
      return !this._isSet(260) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(260);
   }

   public boolean isWebModuleSet() {
      return this._isSet(260);
   }

   public void setWebModule(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(260);
      boolean _oldVal = this._WebModule;
      this._WebModule = param0;
      this._postSet(260, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(260)) {
            source._postSetFirePropertyChange(260, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClassLoadingVerbose() {
      return !this._isSet(261) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(261) ? this._getDelegateBean().getDebugClassLoadingVerbose() : this._DebugClassLoadingVerbose;
   }

   public boolean isDebugClassLoadingVerboseInherited() {
      return !this._isSet(261) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(261);
   }

   public boolean isDebugClassLoadingVerboseSet() {
      return this._isSet(261);
   }

   public void setDebugClassLoadingVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(261);
      boolean _oldVal = this._DebugClassLoadingVerbose;
      this._DebugClassLoadingVerbose = param0;
      this._postSet(261, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(261)) {
            source._postSetFirePropertyChange(261, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClassLoadingContextualTrace() {
      return !this._isSet(262) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(262) ? this._getDelegateBean().getDebugClassLoadingContextualTrace() : this._DebugClassLoadingContextualTrace;
   }

   public boolean isDebugClassLoadingContextualTraceInherited() {
      return !this._isSet(262) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(262);
   }

   public boolean isDebugClassLoadingContextualTraceSet() {
      return this._isSet(262);
   }

   public void setDebugClassLoadingContextualTrace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(262);
      boolean _oldVal = this._DebugClassLoadingContextualTrace;
      this._DebugClassLoadingContextualTrace = param0;
      this._postSet(262, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(262)) {
            source._postSetFirePropertyChange(262, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClassLoader() {
      return !this._isSet(263) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(263) ? this._getDelegateBean().getClassLoader() : this._ClassLoader;
   }

   public boolean isClassLoaderInherited() {
      return !this._isSet(263) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(263);
   }

   public boolean isClassLoaderSet() {
      return this._isSet(263);
   }

   public void setClassLoader(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(263);
      boolean _oldVal = this._ClassLoader;
      this._ClassLoader = param0;
      this._postSet(263, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(263)) {
            source._postSetFirePropertyChange(263, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClassLoaderVerbose() {
      return !this._isSet(264) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(264) ? this._getDelegateBean().getClassLoaderVerbose() : this._ClassLoaderVerbose;
   }

   public boolean isClassLoaderVerboseInherited() {
      return !this._isSet(264) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(264);
   }

   public boolean isClassLoaderVerboseSet() {
      return this._isSet(264);
   }

   public void setClassLoaderVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(264);
      boolean _oldVal = this._ClassLoaderVerbose;
      this._ClassLoaderVerbose = param0;
      this._postSet(264, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(264)) {
            source._postSetFirePropertyChange(264, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getClassloaderWebApp() {
      return !this._isSet(265) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(265) ? this._getDelegateBean().getClassloaderWebApp() : this._ClassloaderWebApp;
   }

   public boolean isClassloaderWebAppInherited() {
      return !this._isSet(265) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(265);
   }

   public boolean isClassloaderWebAppSet() {
      return this._isSet(265);
   }

   public void setClassloaderWebApp(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(265);
      boolean _oldVal = this._ClassloaderWebApp;
      this._ClassloaderWebApp = param0;
      this._postSet(265, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(265)) {
            source._postSetFirePropertyChange(265, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBootstrapServlet() {
      return !this._isSet(266) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(266) ? this._getDelegateBean().getDebugBootstrapServlet() : this._DebugBootstrapServlet;
   }

   public boolean isDebugBootstrapServletInherited() {
      return !this._isSet(266) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(266);
   }

   public boolean isDebugBootstrapServletSet() {
      return this._isSet(266);
   }

   public void setDebugBootstrapServlet(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(266);
      boolean _oldVal = this._DebugBootstrapServlet;
      this._DebugBootstrapServlet = param0;
      this._postSet(266, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(266)) {
            source._postSetFirePropertyChange(266, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugFileDistributionServlet() {
      return !this._isSet(267) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(267) ? this._getDelegateBean().getDebugFileDistributionServlet() : this._DebugFileDistributionServlet;
   }

   public boolean isDebugFileDistributionServletInherited() {
      return !this._isSet(267) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(267);
   }

   public boolean isDebugFileDistributionServletSet() {
      return this._isSet(267);
   }

   public void setDebugFileDistributionServlet(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(267);
      boolean _oldVal = this._DebugFileDistributionServlet;
      this._DebugFileDistributionServlet = param0;
      this._postSet(267, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(267)) {
            source._postSetFirePropertyChange(267, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticLifecycleHandlers() {
      return !this._isSet(268) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(268) ? this._getDelegateBean().getDebugDiagnosticLifecycleHandlers() : this._DebugDiagnosticLifecycleHandlers;
   }

   public boolean isDebugDiagnosticLifecycleHandlersInherited() {
      return !this._isSet(268) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(268);
   }

   public boolean isDebugDiagnosticLifecycleHandlersSet() {
      return this._isSet(268);
   }

   public void setDebugDiagnosticLifecycleHandlers(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(268);
      boolean _oldVal = this._DebugDiagnosticLifecycleHandlers;
      this._DebugDiagnosticLifecycleHandlers = param0;
      this._postSet(268, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(268)) {
            source._postSetFirePropertyChange(268, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticDataGathering() {
      return !this._isSet(269) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(269) ? this._getDelegateBean().getDebugDiagnosticDataGathering() : this._DebugDiagnosticDataGathering;
   }

   public boolean isDebugDiagnosticDataGatheringInherited() {
      return !this._isSet(269) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(269);
   }

   public boolean isDebugDiagnosticDataGatheringSet() {
      return this._isSet(269);
   }

   public void setDebugDiagnosticDataGathering(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(269);
      boolean _oldVal = this._DebugDiagnosticDataGathering;
      this._DebugDiagnosticDataGathering = param0;
      this._postSet(269, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(269)) {
            source._postSetFirePropertyChange(269, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentation() {
      return !this._isSet(270) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(270) ? this._getDelegateBean().getDebugDiagnosticInstrumentation() : this._DebugDiagnosticInstrumentation;
   }

   public boolean isDebugDiagnosticInstrumentationInherited() {
      return !this._isSet(270) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(270);
   }

   public boolean isDebugDiagnosticInstrumentationSet() {
      return this._isSet(270);
   }

   public void setDebugDiagnosticInstrumentation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(270);
      boolean _oldVal = this._DebugDiagnosticInstrumentation;
      this._DebugDiagnosticInstrumentation = param0;
      this._postSet(270, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(270)) {
            source._postSetFirePropertyChange(270, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationWeaving() {
      return !this._isSet(271) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(271) ? this._getDelegateBean().getDebugDiagnosticInstrumentationWeaving() : this._DebugDiagnosticInstrumentationWeaving;
   }

   public boolean isDebugDiagnosticInstrumentationWeavingInherited() {
      return !this._isSet(271) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(271);
   }

   public boolean isDebugDiagnosticInstrumentationWeavingSet() {
      return this._isSet(271);
   }

   public void setDebugDiagnosticInstrumentationWeaving(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(271);
      boolean _oldVal = this._DebugDiagnosticInstrumentationWeaving;
      this._DebugDiagnosticInstrumentationWeaving = param0;
      this._postSet(271, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(271)) {
            source._postSetFirePropertyChange(271, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationWeavingMatches() {
      return !this._isSet(272) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(272) ? this._getDelegateBean().getDebugDiagnosticInstrumentationWeavingMatches() : this._DebugDiagnosticInstrumentationWeavingMatches;
   }

   public boolean isDebugDiagnosticInstrumentationWeavingMatchesInherited() {
      return !this._isSet(272) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(272);
   }

   public boolean isDebugDiagnosticInstrumentationWeavingMatchesSet() {
      return this._isSet(272);
   }

   public void setDebugDiagnosticInstrumentationWeavingMatches(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(272);
      boolean _oldVal = this._DebugDiagnosticInstrumentationWeavingMatches;
      this._DebugDiagnosticInstrumentationWeavingMatches = param0;
      this._postSet(272, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(272)) {
            source._postSetFirePropertyChange(272, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationActions() {
      return !this._isSet(273) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(273) ? this._getDelegateBean().getDebugDiagnosticInstrumentationActions() : this._DebugDiagnosticInstrumentationActions;
   }

   public boolean isDebugDiagnosticInstrumentationActionsInherited() {
      return !this._isSet(273) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(273);
   }

   public boolean isDebugDiagnosticInstrumentationActionsSet() {
      return this._isSet(273);
   }

   public void setDebugDiagnosticInstrumentationActions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(273);
      boolean _oldVal = this._DebugDiagnosticInstrumentationActions;
      this._DebugDiagnosticInstrumentationActions = param0;
      this._postSet(273, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(273)) {
            source._postSetFirePropertyChange(273, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationEvents() {
      return !this._isSet(274) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(274) ? this._getDelegateBean().getDebugDiagnosticInstrumentationEvents() : this._DebugDiagnosticInstrumentationEvents;
   }

   public boolean isDebugDiagnosticInstrumentationEventsInherited() {
      return !this._isSet(274) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(274);
   }

   public boolean isDebugDiagnosticInstrumentationEventsSet() {
      return this._isSet(274);
   }

   public void setDebugDiagnosticInstrumentationEvents(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(274);
      boolean _oldVal = this._DebugDiagnosticInstrumentationEvents;
      this._DebugDiagnosticInstrumentationEvents = param0;
      this._postSet(274, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(274)) {
            source._postSetFirePropertyChange(274, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationConfig() {
      return !this._isSet(275) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(275) ? this._getDelegateBean().getDebugDiagnosticInstrumentationConfig() : this._DebugDiagnosticInstrumentationConfig;
   }

   public boolean isDebugDiagnosticInstrumentationConfigInherited() {
      return !this._isSet(275) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(275);
   }

   public boolean isDebugDiagnosticInstrumentationConfigSet() {
      return this._isSet(275);
   }

   public void setDebugDiagnosticInstrumentationConfig(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(275);
      boolean _oldVal = this._DebugDiagnosticInstrumentationConfig;
      this._DebugDiagnosticInstrumentationConfig = param0;
      this._postSet(275, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(275)) {
            source._postSetFirePropertyChange(275, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticArchive() {
      return !this._isSet(276) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(276) ? this._getDelegateBean().getDebugDiagnosticArchive() : this._DebugDiagnosticArchive;
   }

   public boolean isDebugDiagnosticArchiveInherited() {
      return !this._isSet(276) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(276);
   }

   public boolean isDebugDiagnosticArchiveSet() {
      return this._isSet(276);
   }

   public void setDebugDiagnosticArchive(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(276);
      boolean _oldVal = this._DebugDiagnosticArchive;
      this._DebugDiagnosticArchive = param0;
      this._postSet(276, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(276)) {
            source._postSetFirePropertyChange(276, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticFileArchive() {
      return !this._isSet(277) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(277) ? this._getDelegateBean().getDebugDiagnosticFileArchive() : this._DebugDiagnosticFileArchive;
   }

   public boolean isDebugDiagnosticFileArchiveInherited() {
      return !this._isSet(277) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(277);
   }

   public boolean isDebugDiagnosticFileArchiveSet() {
      return this._isSet(277);
   }

   public void setDebugDiagnosticFileArchive(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(277);
      boolean _oldVal = this._DebugDiagnosticFileArchive;
      this._DebugDiagnosticFileArchive = param0;
      this._postSet(277, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(277)) {
            source._postSetFirePropertyChange(277, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticWlstoreArchive() {
      return !this._isSet(278) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(278) ? this._getDelegateBean().getDebugDiagnosticWlstoreArchive() : this._DebugDiagnosticWlstoreArchive;
   }

   public boolean isDebugDiagnosticWlstoreArchiveInherited() {
      return !this._isSet(278) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(278);
   }

   public boolean isDebugDiagnosticWlstoreArchiveSet() {
      return this._isSet(278);
   }

   public void setDebugDiagnosticWlstoreArchive(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(278);
      boolean _oldVal = this._DebugDiagnosticWlstoreArchive;
      this._DebugDiagnosticWlstoreArchive = param0;
      this._postSet(278, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(278)) {
            source._postSetFirePropertyChange(278, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticJdbcArchive() {
      return !this._isSet(279) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(279) ? this._getDelegateBean().getDebugDiagnosticJdbcArchive() : this._DebugDiagnosticJdbcArchive;
   }

   public boolean isDebugDiagnosticJdbcArchiveInherited() {
      return !this._isSet(279) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(279);
   }

   public boolean isDebugDiagnosticJdbcArchiveSet() {
      return this._isSet(279);
   }

   public void setDebugDiagnosticJdbcArchive(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(279);
      boolean _oldVal = this._DebugDiagnosticJdbcArchive;
      this._DebugDiagnosticJdbcArchive = param0;
      this._postSet(279, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(279)) {
            source._postSetFirePropertyChange(279, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticArchiveRetirement() {
      return !this._isSet(280) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(280) ? this._getDelegateBean().getDebugDiagnosticArchiveRetirement() : this._DebugDiagnosticArchiveRetirement;
   }

   public boolean isDebugDiagnosticArchiveRetirementInherited() {
      return !this._isSet(280) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(280);
   }

   public boolean isDebugDiagnosticArchiveRetirementSet() {
      return this._isSet(280);
   }

   public void setDebugDiagnosticArchiveRetirement(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(280);
      boolean _oldVal = this._DebugDiagnosticArchiveRetirement;
      this._DebugDiagnosticArchiveRetirement = param0;
      this._postSet(280, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(280)) {
            source._postSetFirePropertyChange(280, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsModule() {
      return !this._isSet(281) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(281) ? this._getDelegateBean().getDebugDiagnosticsModule() : this._DebugDiagnosticsModule;
   }

   public boolean isDebugDiagnosticsModuleInherited() {
      return !this._isSet(281) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(281);
   }

   public boolean isDebugDiagnosticsModuleSet() {
      return this._isSet(281);
   }

   public void setDebugDiagnosticsModule(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(281);
      boolean _oldVal = this._DebugDiagnosticsModule;
      this._DebugDiagnosticsModule = param0;
      this._postSet(281, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(281)) {
            source._postSetFirePropertyChange(281, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticRuntimeControlDriver() {
      return !this._isSet(282) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(282) ? this._getDelegateBean().getDebugDiagnosticRuntimeControlDriver() : this._DebugDiagnosticRuntimeControlDriver;
   }

   public boolean isDebugDiagnosticRuntimeControlDriverInherited() {
      return !this._isSet(282) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(282);
   }

   public boolean isDebugDiagnosticRuntimeControlDriverSet() {
      return this._isSet(282);
   }

   public void setDebugDiagnosticRuntimeControlDriver(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(282);
      boolean _oldVal = this._DebugDiagnosticRuntimeControlDriver;
      this._DebugDiagnosticRuntimeControlDriver = param0;
      this._postSet(282, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(282)) {
            source._postSetFirePropertyChange(282, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticRuntimeControlService() {
      return !this._isSet(283) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(283) ? this._getDelegateBean().getDebugDiagnosticRuntimeControlService() : this._DebugDiagnosticRuntimeControlService;
   }

   public boolean isDebugDiagnosticRuntimeControlServiceInherited() {
      return !this._isSet(283) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(283);
   }

   public boolean isDebugDiagnosticRuntimeControlServiceSet() {
      return this._isSet(283);
   }

   public void setDebugDiagnosticRuntimeControlService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(283);
      boolean _oldVal = this._DebugDiagnosticRuntimeControlService;
      this._DebugDiagnosticRuntimeControlService = param0;
      this._postSet(283, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(283)) {
            source._postSetFirePropertyChange(283, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsHarvester() {
      return !this._isSet(284) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(284) ? this._getDelegateBean().getDebugDiagnosticsHarvester() : this._DebugDiagnosticsHarvester;
   }

   public boolean isDebugDiagnosticsHarvesterInherited() {
      return !this._isSet(284) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(284);
   }

   public boolean isDebugDiagnosticsHarvesterSet() {
      return this._isSet(284);
   }

   public void setDebugDiagnosticsHarvester(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(284);
      boolean _oldVal = this._DebugDiagnosticsHarvester;
      this._DebugDiagnosticsHarvester = param0;
      this._postSet(284, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(284)) {
            source._postSetFirePropertyChange(284, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanHarvesterControl() {
      return !this._isSet(285) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(285) ? this._getDelegateBean().getDebugMBeanHarvesterControl() : this._DebugMBeanHarvesterControl;
   }

   public boolean isDebugMBeanHarvesterControlInherited() {
      return !this._isSet(285) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(285);
   }

   public boolean isDebugMBeanHarvesterControlSet() {
      return this._isSet(285);
   }

   public void setDebugMBeanHarvesterControl(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(285);
      boolean _oldVal = this._DebugMBeanHarvesterControl;
      this._DebugMBeanHarvesterControl = param0;
      this._postSet(285, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(285)) {
            source._postSetFirePropertyChange(285, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanHarvesterResolution() {
      return !this._isSet(286) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(286) ? this._getDelegateBean().getDebugMBeanHarvesterResolution() : this._DebugMBeanHarvesterResolution;
   }

   public boolean isDebugMBeanHarvesterResolutionInherited() {
      return !this._isSet(286) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(286);
   }

   public boolean isDebugMBeanHarvesterResolutionSet() {
      return this._isSet(286);
   }

   public void setDebugMBeanHarvesterResolution(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(286);
      boolean _oldVal = this._DebugMBeanHarvesterResolution;
      this._DebugMBeanHarvesterResolution = param0;
      this._postSet(286, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(286)) {
            source._postSetFirePropertyChange(286, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanHarvesterDataCollection() {
      return !this._isSet(287) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(287) ? this._getDelegateBean().getDebugMBeanHarvesterDataCollection() : this._DebugMBeanHarvesterDataCollection;
   }

   public boolean isDebugMBeanHarvesterDataCollectionInherited() {
      return !this._isSet(287) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(287);
   }

   public boolean isDebugMBeanHarvesterDataCollectionSet() {
      return this._isSet(287);
   }

   public void setDebugMBeanHarvesterDataCollection(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(287);
      boolean _oldVal = this._DebugMBeanHarvesterDataCollection;
      this._DebugMBeanHarvesterDataCollection = param0;
      this._postSet(287, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(287)) {
            source._postSetFirePropertyChange(287, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanHarvesterThreading() {
      return !this._isSet(288) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(288) ? this._getDelegateBean().getDebugMBeanHarvesterThreading() : this._DebugMBeanHarvesterThreading;
   }

   public boolean isDebugMBeanHarvesterThreadingInherited() {
      return !this._isSet(288) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(288);
   }

   public boolean isDebugMBeanHarvesterThreadingSet() {
      return this._isSet(288);
   }

   public void setDebugMBeanHarvesterThreading(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(288);
      boolean _oldVal = this._DebugMBeanHarvesterThreading;
      this._DebugMBeanHarvesterThreading = param0;
      this._postSet(288, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(288)) {
            source._postSetFirePropertyChange(288, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBeanTreeHarvesterControl() {
      return !this._isSet(289) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(289) ? this._getDelegateBean().getDebugBeanTreeHarvesterControl() : this._DebugBeanTreeHarvesterControl;
   }

   public boolean isDebugBeanTreeHarvesterControlInherited() {
      return !this._isSet(289) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(289);
   }

   public boolean isDebugBeanTreeHarvesterControlSet() {
      return this._isSet(289);
   }

   public void setDebugBeanTreeHarvesterControl(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(289);
      boolean _oldVal = this._DebugBeanTreeHarvesterControl;
      this._DebugBeanTreeHarvesterControl = param0;
      this._postSet(289, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(289)) {
            source._postSetFirePropertyChange(289, wasSet, _oldVal, param0);
         }
      }

   }

   public Object _getKey() {
      return super._getKey();
   }

   public void _validate() throws IllegalArgumentException {
      super._validate();
   }

   public boolean getDebugBeanTreeHarvesterResolution() {
      return !this._isSet(290) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(290) ? this._getDelegateBean().getDebugBeanTreeHarvesterResolution() : this._DebugBeanTreeHarvesterResolution;
   }

   public boolean isDebugBeanTreeHarvesterResolutionInherited() {
      return !this._isSet(290) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(290);
   }

   public boolean isDebugBeanTreeHarvesterResolutionSet() {
      return this._isSet(290);
   }

   public void setDebugBeanTreeHarvesterResolution(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(290);
      boolean _oldVal = this._DebugBeanTreeHarvesterResolution;
      this._DebugBeanTreeHarvesterResolution = param0;
      this._postSet(290, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(290)) {
            source._postSetFirePropertyChange(290, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBeanTreeHarvesterDataCollection() {
      return !this._isSet(291) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(291) ? this._getDelegateBean().getDebugBeanTreeHarvesterDataCollection() : this._DebugBeanTreeHarvesterDataCollection;
   }

   public boolean isDebugBeanTreeHarvesterDataCollectionInherited() {
      return !this._isSet(291) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(291);
   }

   public boolean isDebugBeanTreeHarvesterDataCollectionSet() {
      return this._isSet(291);
   }

   public void setDebugBeanTreeHarvesterDataCollection(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(291);
      boolean _oldVal = this._DebugBeanTreeHarvesterDataCollection;
      this._DebugBeanTreeHarvesterDataCollection = param0;
      this._postSet(291, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(291)) {
            source._postSetFirePropertyChange(291, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBeanTreeHarvesterThreading() {
      return !this._isSet(292) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(292) ? this._getDelegateBean().getDebugBeanTreeHarvesterThreading() : this._DebugBeanTreeHarvesterThreading;
   }

   public boolean isDebugBeanTreeHarvesterThreadingInherited() {
      return !this._isSet(292) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(292);
   }

   public boolean isDebugBeanTreeHarvesterThreadingSet() {
      return this._isSet(292);
   }

   public void setDebugBeanTreeHarvesterThreading(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(292);
      boolean _oldVal = this._DebugBeanTreeHarvesterThreading;
      this._DebugBeanTreeHarvesterThreading = param0;
      this._postSet(292, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(292)) {
            source._postSetFirePropertyChange(292, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanTypeUtilityListener() {
      return !this._isSet(293) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(293) ? this._getDelegateBean().getDebugMBeanTypeUtilityListener() : this._DebugMBeanTypeUtilityListener;
   }

   public boolean isDebugMBeanTypeUtilityListenerInherited() {
      return !this._isSet(293) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(293);
   }

   public boolean isDebugMBeanTypeUtilityListenerSet() {
      return this._isSet(293);
   }

   public void setDebugMBeanTypeUtilityListener(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(293);
      boolean _oldVal = this._DebugMBeanTypeUtilityListener;
      this._DebugMBeanTypeUtilityListener = param0;
      this._postSet(293, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(293)) {
            source._postSetFirePropertyChange(293, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanTypeUtilQueue() {
      return !this._isSet(294) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(294) ? this._getDelegateBean().getDebugMBeanTypeUtilQueue() : this._DebugMBeanTypeUtilQueue;
   }

   public boolean isDebugMBeanTypeUtilQueueInherited() {
      return !this._isSet(294) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(294);
   }

   public boolean isDebugMBeanTypeUtilQueueSet() {
      return this._isSet(294);
   }

   public void setDebugMBeanTypeUtilQueue(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(294);
      boolean _oldVal = this._DebugMBeanTypeUtilQueue;
      this._DebugMBeanTypeUtilQueue = param0;
      this._postSet(294, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(294)) {
            source._postSetFirePropertyChange(294, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanTypeUtilQueuePriority() {
      return !this._isSet(295) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(295) ? this._getDelegateBean().getDebugMBeanTypeUtilQueuePriority() : this._DebugMBeanTypeUtilQueuePriority;
   }

   public boolean isDebugMBeanTypeUtilQueuePriorityInherited() {
      return !this._isSet(295) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(295);
   }

   public boolean isDebugMBeanTypeUtilQueuePrioritySet() {
      return this._isSet(295);
   }

   public void setDebugMBeanTypeUtilQueuePriority(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(295);
      boolean _oldVal = this._DebugMBeanTypeUtilQueuePriority;
      this._DebugMBeanTypeUtilQueuePriority = param0;
      this._postSet(295, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(295)) {
            source._postSetFirePropertyChange(295, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanTypingUtility() {
      return !this._isSet(296) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(296) ? this._getDelegateBean().getDebugMBeanTypingUtility() : this._DebugMBeanTypingUtility;
   }

   public boolean isDebugMBeanTypingUtilityInherited() {
      return !this._isSet(296) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(296);
   }

   public boolean isDebugMBeanTypingUtilitySet() {
      return this._isSet(296);
   }

   public void setDebugMBeanTypingUtility(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(296);
      boolean _oldVal = this._DebugMBeanTypingUtility;
      this._DebugMBeanTypingUtility = param0;
      this._postSet(296, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(296)) {
            source._postSetFirePropertyChange(296, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsHarvesterData() {
      return !this._isSet(297) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(297) ? this._getDelegateBean().getDebugDiagnosticsHarvesterData() : this._DebugDiagnosticsHarvesterData;
   }

   public boolean isDebugDiagnosticsHarvesterDataInherited() {
      return !this._isSet(297) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(297);
   }

   public boolean isDebugDiagnosticsHarvesterDataSet() {
      return this._isSet(297);
   }

   public void setDebugDiagnosticsHarvesterData(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(297);
      boolean _oldVal = this._DebugDiagnosticsHarvesterData;
      this._DebugDiagnosticsHarvesterData = param0;
      this._postSet(297, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(297)) {
            source._postSetFirePropertyChange(297, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsHarvesterMBeanPlugin() {
      return !this._isSet(298) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(298) ? this._getDelegateBean().getDebugDiagnosticsHarvesterMBeanPlugin() : this._DebugDiagnosticsHarvesterMBeanPlugin;
   }

   public boolean isDebugDiagnosticsHarvesterMBeanPluginInherited() {
      return !this._isSet(298) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(298);
   }

   public boolean isDebugDiagnosticsHarvesterMBeanPluginSet() {
      return this._isSet(298);
   }

   public void setDebugDiagnosticsHarvesterMBeanPlugin(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(298);
      boolean _oldVal = this._DebugDiagnosticsHarvesterMBeanPlugin;
      this._DebugDiagnosticsHarvesterMBeanPlugin = param0;
      this._postSet(298, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(298)) {
            source._postSetFirePropertyChange(298, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsHarvesterTreeBeanPlugin() {
      return !this._isSet(299) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(299) ? this._getDelegateBean().getDebugDiagnosticsHarvesterTreeBeanPlugin() : this._DebugDiagnosticsHarvesterTreeBeanPlugin;
   }

   public boolean isDebugDiagnosticsHarvesterTreeBeanPluginInherited() {
      return !this._isSet(299) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(299);
   }

   public boolean isDebugDiagnosticsHarvesterTreeBeanPluginSet() {
      return this._isSet(299);
   }

   public void setDebugDiagnosticsHarvesterTreeBeanPlugin(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(299);
      boolean _oldVal = this._DebugDiagnosticsHarvesterTreeBeanPlugin;
      this._DebugDiagnosticsHarvesterTreeBeanPlugin = param0;
      this._postSet(299, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(299)) {
            source._postSetFirePropertyChange(299, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionEvaluators() {
      return !this._isSet(300) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(300) ? this._getDelegateBean().getDebugDiagnosticsExpressionEvaluators() : this._DebugDiagnosticsExpressionEvaluators;
   }

   public boolean isDebugDiagnosticsExpressionEvaluatorsInherited() {
      return !this._isSet(300) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(300);
   }

   public boolean isDebugDiagnosticsExpressionEvaluatorsSet() {
      return this._isSet(300);
   }

   public void setDebugDiagnosticsExpressionEvaluators(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(300);
      boolean _oldVal = this._DebugDiagnosticsExpressionEvaluators;
      this._DebugDiagnosticsExpressionEvaluators = param0;
      this._postSet(300, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(300)) {
            source._postSetFirePropertyChange(300, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionMetrics() {
      return !this._isSet(301) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(301) ? this._getDelegateBean().getDebugDiagnosticsExpressionMetrics() : this._DebugDiagnosticsExpressionMetrics;
   }

   public boolean isDebugDiagnosticsExpressionMetricsInherited() {
      return !this._isSet(301) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(301);
   }

   public boolean isDebugDiagnosticsExpressionMetricsSet() {
      return this._isSet(301);
   }

   public void setDebugDiagnosticsExpressionMetrics(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(301);
      boolean _oldVal = this._DebugDiagnosticsExpressionMetrics;
      this._DebugDiagnosticsExpressionMetrics = param0;
      this._postSet(301, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(301)) {
            source._postSetFirePropertyChange(301, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsBeanInfoProviders() {
      return !this._isSet(302) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(302) ? this._getDelegateBean().getDebugDiagnosticsBeanInfoProviders() : this._DebugDiagnosticsBeanInfoProviders;
   }

   public boolean isDebugDiagnosticsBeanInfoProvidersInherited() {
      return !this._isSet(302) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(302);
   }

   public boolean isDebugDiagnosticsBeanInfoProvidersSet() {
      return this._isSet(302);
   }

   public void setDebugDiagnosticsBeanInfoProviders(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(302);
      boolean _oldVal = this._DebugDiagnosticsBeanInfoProviders;
      this._DebugDiagnosticsBeanInfoProviders = param0;
      this._postSet(302, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(302)) {
            source._postSetFirePropertyChange(302, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsELResolver() {
      return !this._isSet(303) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(303) ? this._getDelegateBean().getDebugDiagnosticsELResolver() : this._DebugDiagnosticsELResolver;
   }

   public boolean isDebugDiagnosticsELResolverInherited() {
      return !this._isSet(303) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(303);
   }

   public boolean isDebugDiagnosticsELResolverSet() {
      return this._isSet(303);
   }

   public void setDebugDiagnosticsELResolver(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(303);
      boolean _oldVal = this._DebugDiagnosticsELResolver;
      this._DebugDiagnosticsELResolver = param0;
      this._postSet(303, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(303)) {
            source._postSetFirePropertyChange(303, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsBeanExtensionResolver() {
      return !this._isSet(304) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(304) ? this._getDelegateBean().getDebugDiagnosticsBeanExtensionResolver() : this._DebugDiagnosticsBeanExtensionResolver;
   }

   public boolean isDebugDiagnosticsBeanExtensionResolverInherited() {
      return !this._isSet(304) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(304);
   }

   public boolean isDebugDiagnosticsBeanExtensionResolverSet() {
      return this._isSet(304);
   }

   public void setDebugDiagnosticsBeanExtensionResolver(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(304);
      boolean _oldVal = this._DebugDiagnosticsBeanExtensionResolver;
      this._DebugDiagnosticsBeanExtensionResolver = param0;
      this._postSet(304, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(304)) {
            source._postSetFirePropertyChange(304, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsValueTracingELResolver() {
      return !this._isSet(305) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(305) ? this._getDelegateBean().getDebugDiagnosticsValueTracingELResolver() : this._DebugDiagnosticsValueTracingELResolver;
   }

   public boolean isDebugDiagnosticsValueTracingELResolverInherited() {
      return !this._isSet(305) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(305);
   }

   public boolean isDebugDiagnosticsValueTracingELResolverSet() {
      return this._isSet(305);
   }

   public void setDebugDiagnosticsValueTracingELResolver(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(305);
      boolean _oldVal = this._DebugDiagnosticsValueTracingELResolver;
      this._DebugDiagnosticsValueTracingELResolver = param0;
      this._postSet(305, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(305)) {
            source._postSetFirePropertyChange(305, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsMBeanELResolver() {
      return !this._isSet(306) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(306) ? this._getDelegateBean().getDebugDiagnosticsMBeanELResolver() : this._DebugDiagnosticsMBeanELResolver;
   }

   public boolean isDebugDiagnosticsMBeanELResolverInherited() {
      return !this._isSet(306) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(306);
   }

   public boolean isDebugDiagnosticsMBeanELResolverSet() {
      return this._isSet(306);
   }

   public void setDebugDiagnosticsMBeanELResolver(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(306);
      boolean _oldVal = this._DebugDiagnosticsMBeanELResolver;
      this._DebugDiagnosticsMBeanELResolver = param0;
      this._postSet(306, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(306)) {
            source._postSetFirePropertyChange(306, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsELContext() {
      return !this._isSet(307) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(307) ? this._getDelegateBean().getDebugDiagnosticsELContext() : this._DebugDiagnosticsELContext;
   }

   public boolean isDebugDiagnosticsELContextInherited() {
      return !this._isSet(307) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(307);
   }

   public boolean isDebugDiagnosticsELContextSet() {
      return this._isSet(307);
   }

   public void setDebugDiagnosticsELContext(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(307);
      boolean _oldVal = this._DebugDiagnosticsELContext;
      this._DebugDiagnosticsELContext = param0;
      this._postSet(307, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(307)) {
            source._postSetFirePropertyChange(307, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionPoller() {
      return !this._isSet(308) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(308) ? this._getDelegateBean().getDebugDiagnosticsExpressionPoller() : this._DebugDiagnosticsExpressionPoller;
   }

   public boolean isDebugDiagnosticsExpressionPollerInherited() {
      return !this._isSet(308) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(308);
   }

   public boolean isDebugDiagnosticsExpressionPollerSet() {
      return this._isSet(308);
   }

   public void setDebugDiagnosticsExpressionPoller(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(308);
      boolean _oldVal = this._DebugDiagnosticsExpressionPoller;
      this._DebugDiagnosticsExpressionPoller = param0;
      this._postSet(308, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(308)) {
            source._postSetFirePropertyChange(308, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionFunctions() {
      return !this._isSet(309) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(309) ? this._getDelegateBean().getDebugDiagnosticsExpressionFunctions() : this._DebugDiagnosticsExpressionFunctions;
   }

   public boolean isDebugDiagnosticsExpressionFunctionsInherited() {
      return !this._isSet(309) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(309);
   }

   public boolean isDebugDiagnosticsExpressionFunctionsSet() {
      return this._isSet(309);
   }

   public void setDebugDiagnosticsExpressionFunctions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(309);
      boolean _oldVal = this._DebugDiagnosticsExpressionFunctions;
      this._DebugDiagnosticsExpressionFunctions = param0;
      this._postSet(309, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(309)) {
            source._postSetFirePropertyChange(309, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionFunctionMapper() {
      return !this._isSet(310) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(310) ? this._getDelegateBean().getDebugDiagnosticsExpressionFunctionMapper() : this._DebugDiagnosticsExpressionFunctionMapper;
   }

   public boolean isDebugDiagnosticsExpressionFunctionMapperInherited() {
      return !this._isSet(310) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(310);
   }

   public boolean isDebugDiagnosticsExpressionFunctionMapperSet() {
      return this._isSet(310);
   }

   public void setDebugDiagnosticsExpressionFunctionMapper(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(310);
      boolean _oldVal = this._DebugDiagnosticsExpressionFunctionMapper;
      this._DebugDiagnosticsExpressionFunctionMapper = param0;
      this._postSet(310, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(310)) {
            source._postSetFirePropertyChange(310, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugExpressionBeanLocalizer() {
      return !this._isSet(311) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(311) ? this._getDelegateBean().getDebugExpressionBeanLocalizer() : this._DebugExpressionBeanLocalizer;
   }

   public boolean isDebugExpressionBeanLocalizerInherited() {
      return !this._isSet(311) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(311);
   }

   public boolean isDebugExpressionBeanLocalizerSet() {
      return this._isSet(311);
   }

   public void setDebugExpressionBeanLocalizer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(311);
      boolean _oldVal = this._DebugExpressionBeanLocalizer;
      this._DebugExpressionBeanLocalizer = param0;
      this._postSet(311, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(311)) {
            source._postSetFirePropertyChange(311, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugExpressionExtensionsManager() {
      return !this._isSet(312) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(312) ? this._getDelegateBean().getDebugExpressionExtensionsManager() : this._DebugExpressionExtensionsManager;
   }

   public boolean isDebugExpressionExtensionsManagerInherited() {
      return !this._isSet(312) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(312);
   }

   public boolean isDebugExpressionExtensionsManagerSet() {
      return this._isSet(312);
   }

   public void setDebugExpressionExtensionsManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(312);
      boolean _oldVal = this._DebugExpressionExtensionsManager;
      this._DebugExpressionExtensionsManager = param0;
      this._postSet(312, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(312)) {
            source._postSetFirePropertyChange(312, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsUtils() {
      return !this._isSet(313) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(313) ? this._getDelegateBean().getDebugDiagnosticsUtils() : this._DebugDiagnosticsUtils;
   }

   public boolean isDebugDiagnosticsUtilsInherited() {
      return !this._isSet(313) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(313);
   }

   public boolean isDebugDiagnosticsUtilsSet() {
      return this._isSet(313);
   }

   public void setDebugDiagnosticsUtils(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(313);
      boolean _oldVal = this._DebugDiagnosticsUtils;
      this._DebugDiagnosticsUtils = param0;
      this._postSet(313, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(313)) {
            source._postSetFirePropertyChange(313, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsExpressionPollerBuffer() {
      return !this._isSet(314) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(314) ? this._getDelegateBean().getDebugDiagnosticsExpressionPollerBuffer() : this._DebugDiagnosticsExpressionPollerBuffer;
   }

   public boolean isDebugDiagnosticsExpressionPollerBufferInherited() {
      return !this._isSet(314) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(314);
   }

   public boolean isDebugDiagnosticsExpressionPollerBufferSet() {
      return this._isSet(314);
   }

   public void setDebugDiagnosticsExpressionPollerBuffer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(314);
      boolean _oldVal = this._DebugDiagnosticsExpressionPollerBuffer;
      this._DebugDiagnosticsExpressionPollerBuffer = param0;
      this._postSet(314, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(314)) {
            source._postSetFirePropertyChange(314, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRESTNotifications() {
      return !this._isSet(315) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(315) ? this._getDelegateBean().getDebugRESTNotifications() : this._DebugRESTNotifications;
   }

   public boolean isDebugRESTNotificationsInherited() {
      return !this._isSet(315) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(315);
   }

   public boolean isDebugRESTNotificationsSet() {
      return this._isSet(315);
   }

   public void setDebugRESTNotifications(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(315);
      boolean _oldVal = this._DebugRESTNotifications;
      this._DebugRESTNotifications = param0;
      this._postSet(315, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(315)) {
            source._postSetFirePropertyChange(315, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsScriptAction() {
      return !this._isSet(316) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(316) ? this._getDelegateBean().getDebugDiagnosticsScriptAction() : this._DebugDiagnosticsScriptAction;
   }

   public boolean isDebugDiagnosticsScriptActionInherited() {
      return !this._isSet(316) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(316);
   }

   public boolean isDebugDiagnosticsScriptActionSet() {
      return this._isSet(316);
   }

   public void setDebugDiagnosticsScriptAction(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(316);
      boolean _oldVal = this._DebugDiagnosticsScriptAction;
      this._DebugDiagnosticsScriptAction = param0;
      this._postSet(316, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(316)) {
            source._postSetFirePropertyChange(316, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugElasticActions() {
      return !this._isSet(317) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(317) ? this._getDelegateBean().getDebugElasticActions() : this._DebugElasticActions;
   }

   public boolean isDebugElasticActionsInherited() {
      return !this._isSet(317) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(317);
   }

   public boolean isDebugElasticActionsSet() {
      return this._isSet(317);
   }

   public void setDebugElasticActions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(317);
      boolean _oldVal = this._DebugElasticActions;
      this._DebugElasticActions = param0;
      this._postSet(317, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(317)) {
            source._postSetFirePropertyChange(317, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugElasticServices() {
      return !this._isSet(318) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(318) ? this._getDelegateBean().getDebugElasticServices() : this._DebugElasticServices;
   }

   public boolean isDebugElasticServicesInherited() {
      return !this._isSet(318) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(318);
   }

   public boolean isDebugElasticServicesSet() {
      return this._isSet(318);
   }

   public void setDebugElasticServices(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(318);
      boolean _oldVal = this._DebugElasticServices;
      this._DebugElasticServices = param0;
      this._postSet(318, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(318)) {
            source._postSetFirePropertyChange(318, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticImage() {
      return !this._isSet(319) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(319) ? this._getDelegateBean().getDebugDiagnosticImage() : this._DebugDiagnosticImage;
   }

   public boolean isDebugDiagnosticImageInherited() {
      return !this._isSet(319) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(319);
   }

   public boolean isDebugDiagnosticImageSet() {
      return this._isSet(319);
   }

   public void setDebugDiagnosticImage(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(319);
      boolean _oldVal = this._DebugDiagnosticImage;
      this._DebugDiagnosticImage = param0;
      this._postSet(319, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(319)) {
            source._postSetFirePropertyChange(319, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticQuery() {
      return !this._isSet(320) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(320) ? this._getDelegateBean().getDebugDiagnosticQuery() : this._DebugDiagnosticQuery;
   }

   public boolean isDebugDiagnosticQueryInherited() {
      return !this._isSet(320) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(320);
   }

   public boolean isDebugDiagnosticQuerySet() {
      return this._isSet(320);
   }

   public void setDebugDiagnosticQuery(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(320);
      boolean _oldVal = this._DebugDiagnosticQuery;
      this._DebugDiagnosticQuery = param0;
      this._postSet(320, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(320)) {
            source._postSetFirePropertyChange(320, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticAccessor() {
      return !this._isSet(321) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(321) ? this._getDelegateBean().getDebugDiagnosticAccessor() : this._DebugDiagnosticAccessor;
   }

   public boolean isDebugDiagnosticAccessorInherited() {
      return !this._isSet(321) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(321);
   }

   public boolean isDebugDiagnosticAccessorSet() {
      return this._isSet(321);
   }

   public void setDebugDiagnosticAccessor(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(321);
      boolean _oldVal = this._DebugDiagnosticAccessor;
      this._DebugDiagnosticAccessor = param0;
      this._postSet(321, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(321)) {
            source._postSetFirePropertyChange(321, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticCollections() {
      return !this._isSet(322) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(322) ? this._getDelegateBean().getDebugDiagnosticCollections() : this._DebugDiagnosticCollections;
   }

   public boolean isDebugDiagnosticCollectionsInherited() {
      return !this._isSet(322) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(322);
   }

   public boolean isDebugDiagnosticCollectionsSet() {
      return this._isSet(322);
   }

   public void setDebugDiagnosticCollections(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(322);
      boolean _oldVal = this._DebugDiagnosticCollections;
      this._DebugDiagnosticCollections = param0;
      this._postSet(322, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(322)) {
            source._postSetFirePropertyChange(322, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticContext() {
      return !this._isSet(323) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(323) ? this._getDelegateBean().getDebugDiagnosticContext() : this._DebugDiagnosticContext;
   }

   public boolean isDebugDiagnosticContextInherited() {
      return !this._isSet(323) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(323);
   }

   public boolean isDebugDiagnosticContextSet() {
      return this._isSet(323);
   }

   public void setDebugDiagnosticContext(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(323);
      boolean _oldVal = this._DebugDiagnosticContext;
      this._DebugDiagnosticContext = param0;
      this._postSet(323, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(323)) {
            source._postSetFirePropertyChange(323, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSNMPToolkit() {
      return !this._isSet(324) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(324) ? this._getDelegateBean().getDebugSNMPToolkit() : this._DebugSNMPToolkit;
   }

   public boolean isDebugSNMPToolkitInherited() {
      return !this._isSet(324) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(324);
   }

   public boolean isDebugSNMPToolkitSet() {
      return this._isSet(324);
   }

   public void setDebugSNMPToolkit(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(324);
      boolean _oldVal = this._DebugSNMPToolkit;
      this._DebugSNMPToolkit = param0;
      this._postSet(324, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(324)) {
            source._postSetFirePropertyChange(324, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSNMPAgent() {
      return !this._isSet(325) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(325) ? this._getDelegateBean().getDebugSNMPAgent() : this._DebugSNMPAgent;
   }

   public boolean isDebugSNMPAgentInherited() {
      return !this._isSet(325) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(325);
   }

   public boolean isDebugSNMPAgentSet() {
      return this._isSet(325);
   }

   public void setDebugSNMPAgent(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(325);
      boolean _oldVal = this._DebugSNMPAgent;
      this._DebugSNMPAgent = param0;
      this._postSet(325, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(325)) {
            source._postSetFirePropertyChange(325, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSNMPProtocolTCP() {
      return !this._isSet(326) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(326) ? this._getDelegateBean().getDebugSNMPProtocolTCP() : this._DebugSNMPProtocolTCP;
   }

   public boolean isDebugSNMPProtocolTCPInherited() {
      return !this._isSet(326) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(326);
   }

   public boolean isDebugSNMPProtocolTCPSet() {
      return this._isSet(326);
   }

   public boolean getDebugSNMPExtensionProvider() {
      return !this._isSet(327) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(327) ? this._getDelegateBean().getDebugSNMPExtensionProvider() : this._DebugSNMPExtensionProvider;
   }

   public boolean isDebugSNMPExtensionProviderInherited() {
      return !this._isSet(327) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(327);
   }

   public boolean isDebugSNMPExtensionProviderSet() {
      return this._isSet(327);
   }

   public void setDebugSNMPExtensionProvider(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(327);
      boolean _oldVal = this._DebugSNMPExtensionProvider;
      this._DebugSNMPExtensionProvider = param0;
      this._postSet(327, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(327)) {
            source._postSetFirePropertyChange(327, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugSNMPProtocolTCP(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(326);
      boolean _oldVal = this._DebugSNMPProtocolTCP;
      this._DebugSNMPProtocolTCP = param0;
      this._postSet(326, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(326)) {
            source._postSetFirePropertyChange(326, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDomainLogHandler() {
      return !this._isSet(328) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(328) ? this._getDelegateBean().getDebugDomainLogHandler() : this._DebugDomainLogHandler;
   }

   public boolean isDebugDomainLogHandlerInherited() {
      return !this._isSet(328) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(328);
   }

   public boolean isDebugDomainLogHandlerSet() {
      return this._isSet(328);
   }

   public void setDebugDomainLogHandler(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(328);
      boolean _oldVal = this._DebugDomainLogHandler;
      this._DebugDomainLogHandler = param0;
      this._postSet(328, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(328)) {
            source._postSetFirePropertyChange(328, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugLoggingConfiguration() {
      return !this._isSet(329) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(329) ? this._getDelegateBean().getDebugLoggingConfiguration() : this._DebugLoggingConfiguration;
   }

   public boolean isDebugLoggingConfigurationInherited() {
      return !this._isSet(329) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(329);
   }

   public boolean isDebugLoggingConfigurationSet() {
      return this._isSet(329);
   }

   public void setDebugLoggingConfiguration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(329);
      boolean _oldVal = this._DebugLoggingConfiguration;
      this._DebugLoggingConfiguration = param0;
      this._postSet(329, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(329)) {
            source._postSetFirePropertyChange(329, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticWatch() {
      return !this._isSet(330) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(330) ? this._getDelegateBean().getDebugDiagnosticWatch() : this._DebugDiagnosticWatch;
   }

   public boolean isDebugDiagnosticWatchInherited() {
      return !this._isSet(330) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(330);
   }

   public boolean isDebugDiagnosticWatchSet() {
      return this._isSet(330);
   }

   public void setDebugDiagnosticWatch(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(330);
      boolean _oldVal = this._DebugDiagnosticWatch;
      this._DebugDiagnosticWatch = param0;
      this._postSet(330, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(330)) {
            source._postSetFirePropertyChange(330, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticWatchEvents() {
      return !this._isSet(331) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(331) ? this._getDelegateBean().getDebugDiagnosticWatchEvents() : this._DebugDiagnosticWatchEvents;
   }

   public boolean isDebugDiagnosticWatchEventsInherited() {
      return !this._isSet(331) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(331);
   }

   public boolean isDebugDiagnosticWatchEventsSet() {
      return this._isSet(331);
   }

   public void setDebugDiagnosticWatchEvents(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(331);
      boolean _oldVal = this._DebugDiagnosticWatchEvents;
      this._DebugDiagnosticWatchEvents = param0;
      this._postSet(331, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(331)) {
            source._postSetFirePropertyChange(331, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticWatchEventsDetails() {
      return !this._isSet(332) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(332) ? this._getDelegateBean().getDebugDiagnosticWatchEventsDetails() : this._DebugDiagnosticWatchEventsDetails;
   }

   public boolean isDebugDiagnosticWatchEventsDetailsInherited() {
      return !this._isSet(332) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(332);
   }

   public boolean isDebugDiagnosticWatchEventsDetailsSet() {
      return this._isSet(332);
   }

   public void setDebugDiagnosticWatchEventsDetails(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(332);
      boolean _oldVal = this._DebugDiagnosticWatchEventsDetails;
      this._DebugDiagnosticWatchEventsDetails = param0;
      this._postSet(332, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(332)) {
            source._postSetFirePropertyChange(332, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPartitionResourceMetricsRuntime() {
      return !this._isSet(333) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(333) ? this._getDelegateBean().getDebugPartitionResourceMetricsRuntime() : this._DebugPartitionResourceMetricsRuntime;
   }

   public boolean isDebugPartitionResourceMetricsRuntimeInherited() {
      return !this._isSet(333) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(333);
   }

   public boolean isDebugPartitionResourceMetricsRuntimeSet() {
      return this._isSet(333);
   }

   public void setDebugPartitionResourceMetricsRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(333);
      boolean _oldVal = this._DebugPartitionResourceMetricsRuntime;
      this._DebugPartitionResourceMetricsRuntime = param0;
      this._postSet(333, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(333)) {
            source._postSetFirePropertyChange(333, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAPoolVerbose() {
      return !this._isSet(334) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(334) ? this._getDelegateBean().getDebugRAPoolVerbose() : this._DebugRAPoolVerbose;
   }

   public boolean isDebugRAPoolVerboseInherited() {
      return !this._isSet(334) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(334);
   }

   public boolean isDebugRAPoolVerboseSet() {
      return this._isSet(334);
   }

   public void setDebugRAPoolVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(334);
      boolean _oldVal = this._DebugRAPoolVerbose;
      this._DebugRAPoolVerbose = param0;
      this._postSet(334, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(334)) {
            source._postSetFirePropertyChange(334, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRA() {
      return !this._isSet(335) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(335) ? this._getDelegateBean().getDebugRA() : this._DebugRA;
   }

   public boolean isDebugRAInherited() {
      return !this._isSet(335) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(335);
   }

   public boolean isDebugRASet() {
      return this._isSet(335);
   }

   public void setDebugRA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(335);
      boolean _oldVal = this._DebugRA;
      this._DebugRA = param0;
      this._postSet(335, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(335)) {
            source._postSetFirePropertyChange(335, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAXAin() {
      return !this._isSet(336) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(336) ? this._getDelegateBean().getDebugRAXAin() : this._DebugRAXAin;
   }

   public boolean isDebugRAXAinInherited() {
      return !this._isSet(336) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(336);
   }

   public boolean isDebugRAXAinSet() {
      return this._isSet(336);
   }

   public void setDebugRAXAin(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(336);
      boolean _oldVal = this._DebugRAXAin;
      this._DebugRAXAin = param0;
      this._postSet(336, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(336)) {
            source._postSetFirePropertyChange(336, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAXAout() {
      return !this._isSet(337) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(337) ? this._getDelegateBean().getDebugRAXAout() : this._DebugRAXAout;
   }

   public boolean isDebugRAXAoutInherited() {
      return !this._isSet(337) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(337);
   }

   public boolean isDebugRAXAoutSet() {
      return this._isSet(337);
   }

   public void setDebugRAXAout(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(337);
      boolean _oldVal = this._DebugRAXAout;
      this._DebugRAXAout = param0;
      this._postSet(337, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(337)) {
            source._postSetFirePropertyChange(337, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAXAwork() {
      return !this._isSet(338) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(338) ? this._getDelegateBean().getDebugRAXAwork() : this._DebugRAXAwork;
   }

   public boolean isDebugRAXAworkInherited() {
      return !this._isSet(338) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(338);
   }

   public boolean isDebugRAXAworkSet() {
      return this._isSet(338);
   }

   public void setDebugRAXAwork(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(338);
      boolean _oldVal = this._DebugRAXAwork;
      this._DebugRAXAwork = param0;
      this._postSet(338, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(338)) {
            source._postSetFirePropertyChange(338, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRALocalOut() {
      return !this._isSet(339) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(339) ? this._getDelegateBean().getDebugRALocalOut() : this._DebugRALocalOut;
   }

   public boolean isDebugRALocalOutInherited() {
      return !this._isSet(339) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(339);
   }

   public boolean isDebugRALocalOutSet() {
      return this._isSet(339);
   }

   public void setDebugRALocalOut(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(339);
      boolean _oldVal = this._DebugRALocalOut;
      this._DebugRALocalOut = param0;
      this._postSet(339, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(339)) {
            source._postSetFirePropertyChange(339, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRALifecycle() {
      return !this._isSet(340) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(340) ? this._getDelegateBean().getDebugRALifecycle() : this._DebugRALifecycle;
   }

   public boolean isDebugRALifecycleInherited() {
      return !this._isSet(340) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(340);
   }

   public boolean isDebugRALifecycleSet() {
      return this._isSet(340);
   }

   public void setDebugRALifecycle(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(340);
      boolean _oldVal = this._DebugRALifecycle;
      this._DebugRALifecycle = param0;
      this._postSet(340, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(340)) {
            source._postSetFirePropertyChange(340, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConnectorService() {
      return !this._isSet(341) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(341) ? this._getDelegateBean().getDebugConnectorService() : this._DebugConnectorService;
   }

   public boolean isDebugConnectorServiceInherited() {
      return !this._isSet(341) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(341);
   }

   public boolean isDebugConnectorServiceSet() {
      return this._isSet(341);
   }

   public void setDebugConnectorService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(341);
      boolean _oldVal = this._DebugConnectorService;
      this._DebugConnectorService = param0;
      this._postSet(341, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(341)) {
            source._postSetFirePropertyChange(341, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRADeployment() {
      return !this._isSet(342) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(342) ? this._getDelegateBean().getDebugRADeployment() : this._DebugRADeployment;
   }

   public boolean isDebugRADeploymentInherited() {
      return !this._isSet(342) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(342);
   }

   public boolean isDebugRADeploymentSet() {
      return this._isSet(342);
   }

   public void setDebugRADeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(342);
      boolean _oldVal = this._DebugRADeployment;
      this._DebugRADeployment = param0;
      this._postSet(342, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(342)) {
            source._postSetFirePropertyChange(342, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAParsing() {
      return !this._isSet(343) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(343) ? this._getDelegateBean().getDebugRAParsing() : this._DebugRAParsing;
   }

   public boolean isDebugRAParsingInherited() {
      return !this._isSet(343) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(343);
   }

   public boolean isDebugRAParsingSet() {
      return this._isSet(343);
   }

   public void setDebugRAParsing(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(343);
      boolean _oldVal = this._DebugRAParsing;
      this._DebugRAParsing = param0;
      this._postSet(343, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(343)) {
            source._postSetFirePropertyChange(343, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRASecurityCtx() {
      return !this._isSet(344) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(344) ? this._getDelegateBean().getDebugRASecurityCtx() : this._DebugRASecurityCtx;
   }

   public boolean isDebugRASecurityCtxInherited() {
      return !this._isSet(344) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(344);
   }

   public boolean isDebugRASecurityCtxSet() {
      return this._isSet(344);
   }

   public void setDebugRASecurityCtx(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(344);
      boolean _oldVal = this._DebugRASecurityCtx;
      this._DebugRASecurityCtx = param0;
      this._postSet(344, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(344)) {
            source._postSetFirePropertyChange(344, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAPooling() {
      return !this._isSet(345) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(345) ? this._getDelegateBean().getDebugRAPooling() : this._DebugRAPooling;
   }

   public boolean isDebugRAPoolingInherited() {
      return !this._isSet(345) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(345);
   }

   public boolean isDebugRAPoolingSet() {
      return this._isSet(345);
   }

   public void setDebugRAPooling(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(345);
      boolean _oldVal = this._DebugRAPooling;
      this._DebugRAPooling = param0;
      this._postSet(345, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(345)) {
            source._postSetFirePropertyChange(345, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAConnections() {
      return !this._isSet(346) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(346) ? this._getDelegateBean().getDebugRAConnections() : this._DebugRAConnections;
   }

   public boolean isDebugRAConnectionsInherited() {
      return !this._isSet(346) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(346);
   }

   public boolean isDebugRAConnectionsSet() {
      return this._isSet(346);
   }

   public void setDebugRAConnections(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(346);
      boolean _oldVal = this._DebugRAConnections;
      this._DebugRAConnections = param0;
      this._postSet(346, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(346)) {
            source._postSetFirePropertyChange(346, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAConnEvents() {
      return !this._isSet(347) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(347) ? this._getDelegateBean().getDebugRAConnEvents() : this._DebugRAConnEvents;
   }

   public boolean isDebugRAConnEventsInherited() {
      return !this._isSet(347) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(347);
   }

   public boolean isDebugRAConnEventsSet() {
      return this._isSet(347);
   }

   public void setDebugRAConnEvents(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(347);
      boolean _oldVal = this._DebugRAConnEvents;
      this._DebugRAConnEvents = param0;
      this._postSet(347, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(347)) {
            source._postSetFirePropertyChange(347, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAWork() {
      return !this._isSet(348) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(348) ? this._getDelegateBean().getDebugRAWork() : this._DebugRAWork;
   }

   public boolean isDebugRAWorkInherited() {
      return !this._isSet(348) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(348);
   }

   public boolean isDebugRAWorkSet() {
      return this._isSet(348);
   }

   public void setDebugRAWork(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(348);
      boolean _oldVal = this._DebugRAWork;
      this._DebugRAWork = param0;
      this._postSet(348, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(348)) {
            source._postSetFirePropertyChange(348, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAWorkEvents() {
      return !this._isSet(349) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(349) ? this._getDelegateBean().getDebugRAWorkEvents() : this._DebugRAWorkEvents;
   }

   public boolean isDebugRAWorkEventsInherited() {
      return !this._isSet(349) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(349);
   }

   public boolean isDebugRAWorkEventsSet() {
      return this._isSet(349);
   }

   public void setDebugRAWorkEvents(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(349);
      boolean _oldVal = this._DebugRAWorkEvents;
      this._DebugRAWorkEvents = param0;
      this._postSet(349, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(349)) {
            source._postSetFirePropertyChange(349, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRAClassloader() {
      return !this._isSet(350) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(350) ? this._getDelegateBean().getDebugRAClassloader() : this._DebugRAClassloader;
   }

   public boolean isDebugRAClassloaderInherited() {
      return !this._isSet(350) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(350);
   }

   public boolean isDebugRAClassloaderSet() {
      return this._isSet(350);
   }

   public void setDebugRAClassloader(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(350);
      boolean _oldVal = this._DebugRAClassloader;
      this._DebugRAClassloader = param0;
      this._postSet(350, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(350)) {
            source._postSetFirePropertyChange(350, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWANReplicationDetails() {
      return !this._isSet(351) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(351) ? this._getDelegateBean().getDebugWANReplicationDetails() : this._DebugWANReplicationDetails;
   }

   public boolean isDebugWANReplicationDetailsInherited() {
      return !this._isSet(351) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(351);
   }

   public boolean isDebugWANReplicationDetailsSet() {
      return this._isSet(351);
   }

   public void setDebugWANReplicationDetails(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(351);
      boolean _oldVal = this._DebugWANReplicationDetails;
      this._DebugWANReplicationDetails = param0;
      this._postSet(351, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(351)) {
            source._postSetFirePropertyChange(351, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMX() {
      return !this._isSet(352) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(352) ? this._getDelegateBean().getDebugJMX() : this._DebugJMX;
   }

   public boolean isDebugJMXInherited() {
      return !this._isSet(352) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(352);
   }

   public boolean isDebugJMXSet() {
      return this._isSet(352);
   }

   public void setDebugJMX(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(352);
      boolean _oldVal = this._DebugJMX;
      this._DebugJMX = param0;
      this._postSet(352, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(352)) {
            source._postSetFirePropertyChange(352, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXCore() {
      return !this._isSet(353) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(353) ? this._getDelegateBean().getDebugJMXCore() : this._DebugJMXCore;
   }

   public boolean isDebugJMXCoreInherited() {
      return !this._isSet(353) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(353);
   }

   public boolean isDebugJMXCoreSet() {
      return this._isSet(353);
   }

   public void setDebugJMXCore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(353);
      boolean _oldVal = this._DebugJMXCore;
      this._DebugJMXCore = param0;
      this._postSet(353, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(353)) {
            source._postSetFirePropertyChange(353, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXCoreConcise() {
      return !this._isSet(354) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(354) ? this._getDelegateBean().getDebugJMXCoreConcise() : this._DebugJMXCoreConcise;
   }

   public boolean isDebugJMXCoreConciseInherited() {
      return !this._isSet(354) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(354);
   }

   public boolean isDebugJMXCoreConciseSet() {
      return this._isSet(354);
   }

   public void setDebugJMXCoreConcise(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(354);
      boolean _oldVal = this._DebugJMXCoreConcise;
      this._DebugJMXCoreConcise = param0;
      this._postSet(354, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(354)) {
            source._postSetFirePropertyChange(354, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXRuntime() {
      return !this._isSet(355) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(355) ? this._getDelegateBean().getDebugJMXRuntime() : this._DebugJMXRuntime;
   }

   public boolean isDebugJMXRuntimeInherited() {
      return !this._isSet(355) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(355);
   }

   public boolean isDebugJMXRuntimeSet() {
      return this._isSet(355);
   }

   public void setDebugJMXRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(355);
      boolean _oldVal = this._DebugJMXRuntime;
      this._DebugJMXRuntime = param0;
      this._postSet(355, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(355)) {
            source._postSetFirePropertyChange(355, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXDomain() {
      return !this._isSet(356) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(356) ? this._getDelegateBean().getDebugJMXDomain() : this._DebugJMXDomain;
   }

   public boolean isDebugJMXDomainInherited() {
      return !this._isSet(356) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(356);
   }

   public boolean isDebugJMXDomainSet() {
      return this._isSet(356);
   }

   public void setDebugJMXDomain(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(356);
      boolean _oldVal = this._DebugJMXDomain;
      this._DebugJMXDomain = param0;
      this._postSet(356, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(356)) {
            source._postSetFirePropertyChange(356, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXEdit() {
      return !this._isSet(357) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(357) ? this._getDelegateBean().getDebugJMXEdit() : this._DebugJMXEdit;
   }

   public boolean isDebugJMXEditInherited() {
      return !this._isSet(357) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(357);
   }

   public boolean isDebugJMXEditSet() {
      return this._isSet(357);
   }

   public void setDebugJMXEdit(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(357);
      boolean _oldVal = this._DebugJMXEdit;
      this._DebugJMXEdit = param0;
      this._postSet(357, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(357)) {
            source._postSetFirePropertyChange(357, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXCompatibility() {
      return !this._isSet(358) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(358) ? this._getDelegateBean().getDebugJMXCompatibility() : this._DebugJMXCompatibility;
   }

   public boolean isDebugJMXCompatibilityInherited() {
      return !this._isSet(358) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(358);
   }

   public boolean isDebugJMXCompatibilitySet() {
      return this._isSet(358);
   }

   public void setDebugJMXCompatibility(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(358);
      boolean _oldVal = this._DebugJMXCompatibility;
      this._DebugJMXCompatibility = param0;
      this._postSet(358, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(358)) {
            source._postSetFirePropertyChange(358, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConfigurationEdit() {
      return !this._isSet(359) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(359) ? this._getDelegateBean().getDebugConfigurationEdit() : this._DebugConfigurationEdit;
   }

   public boolean isDebugConfigurationEditInherited() {
      return !this._isSet(359) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(359);
   }

   public boolean isDebugConfigurationEditSet() {
      return this._isSet(359);
   }

   public void setDebugConfigurationEdit(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(359);
      boolean _oldVal = this._DebugConfigurationEdit;
      this._DebugConfigurationEdit = param0;
      this._postSet(359, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(359)) {
            source._postSetFirePropertyChange(359, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConfigurationRuntime() {
      return !this._isSet(360) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(360) ? this._getDelegateBean().getDebugConfigurationRuntime() : this._DebugConfigurationRuntime;
   }

   public boolean isDebugConfigurationRuntimeInherited() {
      return !this._isSet(360) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(360);
   }

   public boolean isDebugConfigurationRuntimeSet() {
      return this._isSet(360);
   }

   public void setDebugConfigurationRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(360);
      boolean _oldVal = this._DebugConfigurationRuntime;
      this._DebugConfigurationRuntime = param0;
      this._postSet(360, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(360)) {
            source._postSetFirePropertyChange(360, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSituationalConfig() {
      return !this._isSet(361) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(361) ? this._getDelegateBean().getDebugSituationalConfig() : this._DebugSituationalConfig;
   }

   public boolean isDebugSituationalConfigInherited() {
      return !this._isSet(361) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(361);
   }

   public boolean isDebugSituationalConfigSet() {
      return this._isSet(361);
   }

   public void setDebugSituationalConfig(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(361);
      boolean _oldVal = this._DebugSituationalConfig;
      this._DebugSituationalConfig = param0;
      this._postSet(361, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(361)) {
            source._postSetFirePropertyChange(361, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPatchingRuntime() {
      return !this._isSet(362) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(362) ? this._getDelegateBean().getDebugPatchingRuntime() : this._DebugPatchingRuntime;
   }

   public boolean isDebugPatchingRuntimeInherited() {
      return !this._isSet(362) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(362);
   }

   public boolean isDebugPatchingRuntimeSet() {
      return this._isSet(362);
   }

   public void setDebugPatchingRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(362);
      boolean _oldVal = this._DebugPatchingRuntime;
      this._DebugPatchingRuntime = param0;
      this._postSet(362, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(362)) {
            source._postSetFirePropertyChange(362, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJ2EEManagement() {
      return !this._isSet(363) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(363) ? this._getDelegateBean().getDebugJ2EEManagement() : this._DebugJ2EEManagement;
   }

   public boolean isDebugJ2EEManagementInherited() {
      return !this._isSet(363) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(363);
   }

   public boolean isDebugJ2EEManagementSet() {
      return this._isSet(363);
   }

   public void setDebugJ2EEManagement(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(363);
      boolean _oldVal = this._DebugJ2EEManagement;
      this._DebugJ2EEManagement = param0;
      this._postSet(363, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(363)) {
            source._postSetFirePropertyChange(363, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugIIOPNaming() {
      return !this._isSet(364) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(364) ? this._getDelegateBean().getDebugIIOPNaming() : this._DebugIIOPNaming;
   }

   public boolean isDebugIIOPNamingInherited() {
      return !this._isSet(364) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(364);
   }

   public boolean isDebugIIOPNamingSet() {
      return this._isSet(364);
   }

   public void setDebugIIOPNaming(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(364);
      boolean _oldVal = this._DebugIIOPNaming;
      this._DebugIIOPNaming = param0;
      this._postSet(364, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(364)) {
            source._postSetFirePropertyChange(364, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugIIOPTunneling() {
      return !this._isSet(365) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(365) ? this._getDelegateBean().getDebugIIOPTunneling() : this._DebugIIOPTunneling;
   }

   public boolean isDebugIIOPTunnelingInherited() {
      return !this._isSet(365) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(365);
   }

   public boolean isDebugIIOPTunnelingSet() {
      return this._isSet(365);
   }

   public void setDebugIIOPTunneling(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(365);
      boolean _oldVal = this._DebugIIOPTunneling;
      this._DebugIIOPTunneling = param0;
      this._postSet(365, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(365)) {
            source._postSetFirePropertyChange(365, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConsensusLeasing() {
      return !this._isSet(366) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(366) ? this._getDelegateBean().getDebugConsensusLeasing() : this._DebugConsensusLeasing;
   }

   public boolean isDebugConsensusLeasingInherited() {
      return !this._isSet(366) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(366);
   }

   public boolean isDebugConsensusLeasingSet() {
      return this._isSet(366);
   }

   public void setDebugConsensusLeasing(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(366);
      boolean _oldVal = this._DebugConsensusLeasing;
      this._DebugConsensusLeasing = param0;
      this._postSet(366, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(366)) {
            source._postSetFirePropertyChange(366, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerLifeCycle() {
      return !this._isSet(367) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(367) ? this._getDelegateBean().getDebugServerLifeCycle() : this._DebugServerLifeCycle;
   }

   public boolean isDebugServerLifeCycleInherited() {
      return !this._isSet(367) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(367);
   }

   public boolean isDebugServerLifeCycleSet() {
      return this._isSet(367);
   }

   public void setDebugServerLifeCycle(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(367);
      boolean _oldVal = this._DebugServerLifeCycle;
      this._DebugServerLifeCycle = param0;
      this._postSet(367, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(367)) {
            source._postSetFirePropertyChange(367, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCConfig() {
      return !this._isSet(368) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(368) ? this._getDelegateBean().getDebugWTCConfig() : this._DebugWTCConfig;
   }

   public boolean isDebugWTCConfigInherited() {
      return !this._isSet(368) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(368);
   }

   public boolean isDebugWTCConfigSet() {
      return this._isSet(368);
   }

   public void setDebugWTCConfig(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(368);
      boolean _oldVal = this._DebugWTCConfig;
      this._DebugWTCConfig = param0;
      this._postSet(368, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(368)) {
            source._postSetFirePropertyChange(368, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCTDomPdu() {
      return !this._isSet(369) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(369) ? this._getDelegateBean().getDebugWTCTDomPdu() : this._DebugWTCTDomPdu;
   }

   public boolean isDebugWTCTDomPduInherited() {
      return !this._isSet(369) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(369);
   }

   public boolean isDebugWTCTDomPduSet() {
      return this._isSet(369);
   }

   public void setDebugWTCTDomPdu(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(369);
      boolean _oldVal = this._DebugWTCTDomPdu;
      this._DebugWTCTDomPdu = param0;
      this._postSet(369, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(369)) {
            source._postSetFirePropertyChange(369, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCUData() {
      return !this._isSet(370) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(370) ? this._getDelegateBean().getDebugWTCUData() : this._DebugWTCUData;
   }

   public boolean isDebugWTCUDataInherited() {
      return !this._isSet(370) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(370);
   }

   public boolean isDebugWTCUDataSet() {
      return this._isSet(370);
   }

   public void setDebugWTCUData(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(370);
      boolean _oldVal = this._DebugWTCUData;
      this._DebugWTCUData = param0;
      this._postSet(370, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(370)) {
            source._postSetFirePropertyChange(370, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCGwtEx() {
      return !this._isSet(371) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(371) ? this._getDelegateBean().getDebugWTCGwtEx() : this._DebugWTCGwtEx;
   }

   public boolean isDebugWTCGwtExInherited() {
      return !this._isSet(371) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(371);
   }

   public boolean isDebugWTCGwtExSet() {
      return this._isSet(371);
   }

   public void setDebugWTCGwtEx(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(371);
      boolean _oldVal = this._DebugWTCGwtEx;
      this._DebugWTCGwtEx = param0;
      this._postSet(371, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(371)) {
            source._postSetFirePropertyChange(371, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCJatmiEx() {
      return !this._isSet(372) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(372) ? this._getDelegateBean().getDebugWTCJatmiEx() : this._DebugWTCJatmiEx;
   }

   public boolean isDebugWTCJatmiExInherited() {
      return !this._isSet(372) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(372);
   }

   public boolean isDebugWTCJatmiExSet() {
      return this._isSet(372);
   }

   public void setDebugWTCJatmiEx(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(372);
      boolean _oldVal = this._DebugWTCJatmiEx;
      this._DebugWTCJatmiEx = param0;
      this._postSet(372, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(372)) {
            source._postSetFirePropertyChange(372, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCCorbaEx() {
      return !this._isSet(373) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(373) ? this._getDelegateBean().getDebugWTCCorbaEx() : this._DebugWTCCorbaEx;
   }

   public boolean isDebugWTCCorbaExInherited() {
      return !this._isSet(373) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(373);
   }

   public boolean isDebugWTCCorbaExSet() {
      return this._isSet(373);
   }

   public void setDebugWTCCorbaEx(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(373);
      boolean _oldVal = this._DebugWTCCorbaEx;
      this._DebugWTCCorbaEx = param0;
      this._postSet(373, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(373)) {
            source._postSetFirePropertyChange(373, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCtBridgeEx() {
      return !this._isSet(374) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(374) ? this._getDelegateBean().getDebugWTCtBridgeEx() : this._DebugWTCtBridgeEx;
   }

   public boolean isDebugWTCtBridgeExInherited() {
      return !this._isSet(374) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(374);
   }

   public boolean isDebugWTCtBridgeExSet() {
      return this._isSet(374);
   }

   public void setDebugWTCtBridgeEx(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(374);
      boolean _oldVal = this._DebugWTCtBridgeEx;
      this._DebugWTCtBridgeEx = param0;
      this._postSet(374, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(374)) {
            source._postSetFirePropertyChange(374, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaMetaData() {
      return !this._isSet(375) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(375) ? this._getDelegateBean().getDebugJpaMetaData() : this._DebugJpaMetaData;
   }

   public boolean isDebugJpaMetaDataInherited() {
      return !this._isSet(375) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(375);
   }

   public boolean isDebugJpaMetaDataSet() {
      return this._isSet(375);
   }

   public void setDebugJpaMetaData(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(375);
      boolean _oldVal = this._DebugJpaMetaData;
      this._DebugJpaMetaData = param0;
      this._postSet(375, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(375)) {
            source._postSetFirePropertyChange(375, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaEnhance() {
      return !this._isSet(376) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(376) ? this._getDelegateBean().getDebugJpaEnhance() : this._DebugJpaEnhance;
   }

   public boolean isDebugJpaEnhanceInherited() {
      return !this._isSet(376) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(376);
   }

   public boolean isDebugJpaEnhanceSet() {
      return this._isSet(376);
   }

   public void setDebugJpaEnhance(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(376);
      boolean _oldVal = this._DebugJpaEnhance;
      this._DebugJpaEnhance = param0;
      this._postSet(376, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(376)) {
            source._postSetFirePropertyChange(376, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaRuntime() {
      return !this._isSet(377) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(377) ? this._getDelegateBean().getDebugJpaRuntime() : this._DebugJpaRuntime;
   }

   public boolean isDebugJpaRuntimeInherited() {
      return !this._isSet(377) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(377);
   }

   public boolean isDebugJpaRuntimeSet() {
      return this._isSet(377);
   }

   public void setDebugJpaRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(377);
      boolean _oldVal = this._DebugJpaRuntime;
      this._DebugJpaRuntime = param0;
      this._postSet(377, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(377)) {
            source._postSetFirePropertyChange(377, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaQuery() {
      return !this._isSet(378) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(378) ? this._getDelegateBean().getDebugJpaQuery() : this._DebugJpaQuery;
   }

   public boolean isDebugJpaQueryInherited() {
      return !this._isSet(378) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(378);
   }

   public boolean isDebugJpaQuerySet() {
      return this._isSet(378);
   }

   public void setDebugJpaQuery(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(378);
      boolean _oldVal = this._DebugJpaQuery;
      this._DebugJpaQuery = param0;
      this._postSet(378, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(378)) {
            source._postSetFirePropertyChange(378, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaDataCache() {
      return !this._isSet(379) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(379) ? this._getDelegateBean().getDebugJpaDataCache() : this._DebugJpaDataCache;
   }

   public boolean isDebugJpaDataCacheInherited() {
      return !this._isSet(379) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(379);
   }

   public boolean isDebugJpaDataCacheSet() {
      return this._isSet(379);
   }

   public void setDebugJpaDataCache(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(379);
      boolean _oldVal = this._DebugJpaDataCache;
      this._DebugJpaDataCache = param0;
      this._postSet(379, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(379)) {
            source._postSetFirePropertyChange(379, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaTool() {
      return !this._isSet(380) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(380) ? this._getDelegateBean().getDebugJpaTool() : this._DebugJpaTool;
   }

   public boolean isDebugJpaToolInherited() {
      return !this._isSet(380) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(380);
   }

   public boolean isDebugJpaToolSet() {
      return this._isSet(380);
   }

   public void setDebugJpaTool(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(380);
      boolean _oldVal = this._DebugJpaTool;
      this._DebugJpaTool = param0;
      this._postSet(380, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(380)) {
            source._postSetFirePropertyChange(380, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaManage() {
      return !this._isSet(381) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(381) ? this._getDelegateBean().getDebugJpaManage() : this._DebugJpaManage;
   }

   public boolean isDebugJpaManageInherited() {
      return !this._isSet(381) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(381);
   }

   public boolean isDebugJpaManageSet() {
      return this._isSet(381);
   }

   public void setDebugJpaManage(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(381);
      boolean _oldVal = this._DebugJpaManage;
      this._DebugJpaManage = param0;
      this._postSet(381, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(381)) {
            source._postSetFirePropertyChange(381, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaProfile() {
      return !this._isSet(382) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(382) ? this._getDelegateBean().getDebugJpaProfile() : this._DebugJpaProfile;
   }

   public boolean isDebugJpaProfileInherited() {
      return !this._isSet(382) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(382);
   }

   public boolean isDebugJpaProfileSet() {
      return this._isSet(382);
   }

   public void setDebugJpaProfile(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(382);
      boolean _oldVal = this._DebugJpaProfile;
      this._DebugJpaProfile = param0;
      this._postSet(382, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(382)) {
            source._postSetFirePropertyChange(382, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaJdbcSql() {
      return !this._isSet(383) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(383) ? this._getDelegateBean().getDebugJpaJdbcSql() : this._DebugJpaJdbcSql;
   }

   public boolean isDebugJpaJdbcSqlInherited() {
      return !this._isSet(383) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(383);
   }

   public boolean isDebugJpaJdbcSqlSet() {
      return this._isSet(383);
   }

   public void setDebugJpaJdbcSql(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(383);
      boolean _oldVal = this._DebugJpaJdbcSql;
      this._DebugJpaJdbcSql = param0;
      this._postSet(383, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(383)) {
            source._postSetFirePropertyChange(383, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaJdbcJdbc() {
      return !this._isSet(384) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(384) ? this._getDelegateBean().getDebugJpaJdbcJdbc() : this._DebugJpaJdbcJdbc;
   }

   public boolean isDebugJpaJdbcJdbcInherited() {
      return !this._isSet(384) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(384);
   }

   public boolean isDebugJpaJdbcJdbcSet() {
      return this._isSet(384);
   }

   public void setDebugJpaJdbcJdbc(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(384);
      boolean _oldVal = this._DebugJpaJdbcJdbc;
      this._DebugJpaJdbcJdbc = param0;
      this._postSet(384, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(384)) {
            source._postSetFirePropertyChange(384, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJpaJdbcSchema() {
      return !this._isSet(385) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(385) ? this._getDelegateBean().getDebugJpaJdbcSchema() : this._DebugJpaJdbcSchema;
   }

   public boolean isDebugJpaJdbcSchemaInherited() {
      return !this._isSet(385) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(385);
   }

   public boolean isDebugJpaJdbcSchemaSet() {
      return this._isSet(385);
   }

   public void setDebugJpaJdbcSchema(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(385);
      boolean _oldVal = this._DebugJpaJdbcSchema;
      this._DebugJpaJdbcSchema = param0;
      this._postSet(385, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(385)) {
            source._postSetFirePropertyChange(385, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugJMST3Server(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(386);
      boolean _oldVal = this._DebugJMST3Server;
      this._DebugJMST3Server = param0;
      this._postSet(386, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(386)) {
            source._postSetFirePropertyChange(386, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMST3Server() {
      return !this._isSet(386) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(386) ? this._getDelegateBean().getDebugJMST3Server() : this._DebugJMST3Server;
   }

   public boolean isDebugJMST3ServerInherited() {
      return !this._isSet(386) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(386);
   }

   public boolean isDebugJMST3ServerSet() {
      return this._isSet(386);
   }

   public boolean getDebugDescriptor() {
      return !this._isSet(387) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(387) ? this._getDelegateBean().getDebugDescriptor() : this._DebugDescriptor;
   }

   public boolean isDebugDescriptorInherited() {
      return !this._isSet(387) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(387);
   }

   public boolean isDebugDescriptorSet() {
      return this._isSet(387);
   }

   public void setDebugDescriptor(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(387);
      boolean _oldVal = this._DebugDescriptor;
      this._DebugDescriptor = param0;
      this._postSet(387, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(387)) {
            source._postSetFirePropertyChange(387, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerStartStatistics() {
      return !this._isSet(388) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(388) ? this._getDelegateBean().getDebugServerStartStatistics() : this._DebugServerStartStatistics;
   }

   public boolean isDebugServerStartStatisticsInherited() {
      return !this._isSet(388) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(388);
   }

   public boolean isDebugServerStartStatisticsSet() {
      return this._isSet(388);
   }

   public void setDebugServerStartStatistics(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(388);
      boolean _oldVal = this._DebugServerStartStatistics;
      this._DebugServerStartStatistics = param0;
      this._postSet(388, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(388)) {
            source._postSetFirePropertyChange(388, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugManagementServicesResource() {
      return !this._isSet(389) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(389) ? this._getDelegateBean().getDebugManagementServicesResource() : this._DebugManagementServicesResource;
   }

   public boolean isDebugManagementServicesResourceInherited() {
      return !this._isSet(389) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(389);
   }

   public boolean isDebugManagementServicesResourceSet() {
      return this._isSet(389);
   }

   public void setDebugManagementServicesResource(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(389);
      boolean _oldVal = this._DebugManagementServicesResource;
      this._DebugManagementServicesResource = param0;
      this._postSet(389, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(389)) {
            source._postSetFirePropertyChange(389, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDeploymentPlan() {
      return !this._isSet(390) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(390) ? this._getDelegateBean().getDebugDeploymentPlan() : this._DebugDeploymentPlan;
   }

   public boolean isDebugDeploymentPlanInherited() {
      return !this._isSet(390) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(390);
   }

   public boolean isDebugDeploymentPlanSet() {
      return this._isSet(390);
   }

   public void setDebugDeploymentPlan(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(390);
      boolean _oldVal = this._DebugDeploymentPlan;
      this._DebugDeploymentPlan = param0;
      this._postSet(390, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(390)) {
            source._postSetFirePropertyChange(390, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugReplicationSize() {
      return !this._isSet(391) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(391) ? this._getDelegateBean().getDebugReplicationSize() : this._DebugReplicationSize;
   }

   public boolean isDebugReplicationSizeInherited() {
      return !this._isSet(391) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(391);
   }

   public boolean isDebugReplicationSizeSet() {
      return this._isSet(391);
   }

   public void setDebugReplicationSize(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(391);
      boolean _oldVal = this._DebugReplicationSize;
      this._DebugReplicationSize = param0;
      this._postSet(391, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(391)) {
            source._postSetFirePropertyChange(391, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBuzzProtocol() {
      return !this._isSet(392) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(392) ? this._getDelegateBean().getDebugBuzzProtocol() : this._DebugBuzzProtocol;
   }

   public boolean isDebugBuzzProtocolInherited() {
      return !this._isSet(392) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(392);
   }

   public boolean isDebugBuzzProtocolSet() {
      return this._isSet(392);
   }

   public void setDebugBuzzProtocol(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(392);
      boolean _oldVal = this._DebugBuzzProtocol;
      this._DebugBuzzProtocol = param0;
      this._postSet(392, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(392)) {
            source._postSetFirePropertyChange(392, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBuzzProtocolDetails() {
      return !this._isSet(393) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(393) ? this._getDelegateBean().getDebugBuzzProtocolDetails() : this._DebugBuzzProtocolDetails;
   }

   public boolean isDebugBuzzProtocolDetailsInherited() {
      return !this._isSet(393) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(393);
   }

   public boolean isDebugBuzzProtocolDetailsSet() {
      return this._isSet(393);
   }

   public void setDebugBuzzProtocolDetails(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(393);
      boolean _oldVal = this._DebugBuzzProtocolDetails;
      this._DebugBuzzProtocolDetails = param0;
      this._postSet(393, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(393)) {
            source._postSetFirePropertyChange(393, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBuzzProtocolHttp() {
      return !this._isSet(394) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(394) ? this._getDelegateBean().getDebugBuzzProtocolHttp() : this._DebugBuzzProtocolHttp;
   }

   public boolean isDebugBuzzProtocolHttpInherited() {
      return !this._isSet(394) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(394);
   }

   public boolean isDebugBuzzProtocolHttpSet() {
      return this._isSet(394);
   }

   public void setDebugBuzzProtocolHttp(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(394);
      boolean _oldVal = this._DebugBuzzProtocolHttp;
      this._DebugBuzzProtocolHttp = param0;
      this._postSet(394, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(394)) {
            source._postSetFirePropertyChange(394, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrent() {
      return !this._isSet(395) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(395) ? this._getDelegateBean().getDebugConcurrent() : this._DebugConcurrent;
   }

   public boolean isDebugConcurrentInherited() {
      return !this._isSet(395) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(395);
   }

   public boolean isDebugConcurrentSet() {
      return this._isSet(395);
   }

   public void setDebugConcurrent(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(395);
      boolean _oldVal = this._DebugConcurrent;
      this._DebugConcurrent = param0;
      this._postSet(395, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(395)) {
            source._postSetFirePropertyChange(395, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrentContext() {
      return !this._isSet(396) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(396) ? this._getDelegateBean().getDebugConcurrentContext() : this._DebugConcurrentContext;
   }

   public boolean isDebugConcurrentContextInherited() {
      return !this._isSet(396) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(396);
   }

   public boolean isDebugConcurrentContextSet() {
      return this._isSet(396);
   }

   public void setDebugConcurrentContext(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(396);
      boolean _oldVal = this._DebugConcurrentContext;
      this._DebugConcurrentContext = param0;
      this._postSet(396, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(396)) {
            source._postSetFirePropertyChange(396, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrentTransaction() {
      return !this._isSet(397) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(397) ? this._getDelegateBean().getDebugConcurrentTransaction() : this._DebugConcurrentTransaction;
   }

   public boolean isDebugConcurrentTransactionInherited() {
      return !this._isSet(397) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(397);
   }

   public boolean isDebugConcurrentTransactionSet() {
      return this._isSet(397);
   }

   public void setDebugConcurrentTransaction(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(397);
      boolean _oldVal = this._DebugConcurrentTransaction;
      this._DebugConcurrentTransaction = param0;
      this._postSet(397, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(397)) {
            source._postSetFirePropertyChange(397, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrentMES() {
      return !this._isSet(398) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(398) ? this._getDelegateBean().getDebugConcurrentMES() : this._DebugConcurrentMES;
   }

   public boolean isDebugConcurrentMESInherited() {
      return !this._isSet(398) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(398);
   }

   public boolean isDebugConcurrentMESSet() {
      return this._isSet(398);
   }

   public void setDebugConcurrentMES(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(398);
      boolean _oldVal = this._DebugConcurrentMES;
      this._DebugConcurrentMES = param0;
      this._postSet(398, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(398)) {
            source._postSetFirePropertyChange(398, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrentMSES() {
      return !this._isSet(399) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(399) ? this._getDelegateBean().getDebugConcurrentMSES() : this._DebugConcurrentMSES;
   }

   public boolean isDebugConcurrentMSESInherited() {
      return !this._isSet(399) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(399);
   }

   public boolean isDebugConcurrentMSESSet() {
      return this._isSet(399);
   }

   public void setDebugConcurrentMSES(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(399);
      boolean _oldVal = this._DebugConcurrentMSES;
      this._DebugConcurrentMSES = param0;
      this._postSet(399, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(399)) {
            source._postSetFirePropertyChange(399, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugConcurrentMTF() {
      return !this._isSet(400) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(400) ? this._getDelegateBean().getDebugConcurrentMTF() : this._DebugConcurrentMTF;
   }

   public boolean isDebugConcurrentMTFInherited() {
      return !this._isSet(400) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(400);
   }

   public boolean isDebugConcurrentMTFSet() {
      return this._isSet(400);
   }

   public void setDebugConcurrentMTF(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(400);
      boolean _oldVal = this._DebugConcurrentMTF;
      this._DebugConcurrentMTF = param0;
      this._postSet(400, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(400)) {
            source._postSetFirePropertyChange(400, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugReadyApp() {
      if (!this._isSet(401) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(401)) {
         return this._getDelegateBean().getDebugReadyApp();
      } else if (!this._isSet(401)) {
         return this._isSecureModeEnabled() ? false : false;
      } else {
         return this._DebugReadyApp;
      }
   }

   public boolean isDebugReadyAppInherited() {
      return !this._isSet(401) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(401);
   }

   public boolean isDebugReadyAppSet() {
      return this._isSet(401);
   }

   public void setDebugReadyApp(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(401);
      boolean _oldVal = this._DebugReadyApp;
      this._DebugReadyApp = param0;
      this._postSet(401, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(401)) {
            source._postSetFirePropertyChange(401, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugInterceptors() {
      return !this._isSet(402) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(402) ? this._getDelegateBean().getDebugInterceptors() : this._DebugInterceptors;
   }

   public boolean isDebugInterceptorsInherited() {
      return !this._isSet(402) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(402);
   }

   public boolean isDebugInterceptorsSet() {
      return this._isSet(402);
   }

   public void setDebugInterceptors(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(402);
      boolean _oldVal = this._DebugInterceptors;
      this._DebugInterceptors = param0;
      this._postSet(402, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(402)) {
            source._postSetFirePropertyChange(402, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDynamicSingletonServices() {
      return !this._isSet(403) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(403) ? this._getDelegateBean().getDebugDynamicSingletonServices() : this._DebugDynamicSingletonServices;
   }

   public boolean isDebugDynamicSingletonServicesInherited() {
      return !this._isSet(403) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(403);
   }

   public boolean isDebugDynamicSingletonServicesSet() {
      return this._isSet(403);
   }

   public void setDebugDynamicSingletonServices(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(403);
      boolean _oldVal = this._DebugDynamicSingletonServices;
      this._DebugDynamicSingletonServices = param0;
      this._postSet(403, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(403)) {
            source._postSetFirePropertyChange(403, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRCM() {
      return !this._isSet(404) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(404) ? this._getDelegateBean().getDebugRCM() : this._DebugRCM;
   }

   public boolean isDebugRCMInherited() {
      return !this._isSet(404) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(404);
   }

   public boolean isDebugRCMSet() {
      return this._isSet(404);
   }

   public void setDebugRCM(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(404);
      boolean _oldVal = this._DebugRCM;
      this._DebugRCM = param0;
      this._postSet(404, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(404)) {
            source._postSetFirePropertyChange(404, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugVerboseRCM() {
      return !this._isSet(405) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(405) ? this._getDelegateBean().getDebugVerboseRCM() : this._DebugVerboseRCM;
   }

   public boolean isDebugVerboseRCMInherited() {
      return !this._isSet(405) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(405);
   }

   public boolean isDebugVerboseRCMSet() {
      return this._isSet(405);
   }

   public void setDebugVerboseRCM(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(405);
      boolean _oldVal = this._DebugVerboseRCM;
      this._DebugVerboseRCM = param0;
      this._postSet(405, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(405)) {
            source._postSetFirePropertyChange(405, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRestJersey1Integration() {
      return !this._isSet(406) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(406) ? this._getDelegateBean().getDebugRestJersey1Integration() : this._DebugRestJersey1Integration;
   }

   public boolean isDebugRestJersey1IntegrationInherited() {
      return !this._isSet(406) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(406);
   }

   public boolean isDebugRestJersey1IntegrationSet() {
      return this._isSet(406);
   }

   public void setDebugRestJersey1Integration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(406);
      boolean _oldVal = this._DebugRestJersey1Integration;
      this._DebugRestJersey1Integration = param0;
      this._postSet(406, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(406)) {
            source._postSetFirePropertyChange(406, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRestJersey2Integration() {
      return !this._isSet(407) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(407) ? this._getDelegateBean().getDebugRestJersey2Integration() : this._DebugRestJersey2Integration;
   }

   public boolean isDebugRestJersey2IntegrationInherited() {
      return !this._isSet(407) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(407);
   }

   public boolean isDebugRestJersey2IntegrationSet() {
      return this._isSet(407);
   }

   public void setDebugRestJersey2Integration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(407);
      boolean _oldVal = this._DebugRestJersey2Integration;
      this._DebugRestJersey2Integration = param0;
      this._postSet(407, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(407)) {
            source._postSetFirePropertyChange(407, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugNodeManagerRuntime() {
      return !this._isSet(408) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(408) ? this._getDelegateBean().getDebugNodeManagerRuntime() : this._DebugNodeManagerRuntime;
   }

   public boolean isDebugNodeManagerRuntimeInherited() {
      return !this._isSet(408) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(408);
   }

   public boolean isDebugNodeManagerRuntimeSet() {
      return this._isSet(408);
   }

   public void setDebugNodeManagerRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(408);
      boolean _oldVal = this._DebugNodeManagerRuntime;
      this._DebugNodeManagerRuntime = param0;
      this._postSet(408, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(408)) {
            source._postSetFirePropertyChange(408, wasSet, _oldVal, param0);
         }
      }

   }

   public void setDebugAbbrevs(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(409);
      boolean _oldVal = this._DebugAbbrevs;
      this._DebugAbbrevs = param0;
      this._postSet(409, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(409)) {
            source._postSetFirePropertyChange(409, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAbbrevs() {
      return !this._isSet(409) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(409) ? this._getDelegateBean().getDebugAbbrevs() : this._DebugAbbrevs;
   }

   public boolean isDebugAbbrevsInherited() {
      return !this._isSet(409) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(409);
   }

   public boolean isDebugAbbrevsSet() {
      return this._isSet(409);
   }

   public void setDebugAppClient(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(410);
      boolean _oldVal = this._DebugAppClient;
      this._DebugAppClient = param0;
      this._postSet(410, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(410)) {
            source._postSetFirePropertyChange(410, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAppClient() {
      return !this._isSet(410) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(410) ? this._getDelegateBean().getDebugAppClient() : this._DebugAppClient;
   }

   public boolean isDebugAppClientInherited() {
      return !this._isSet(410) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(410);
   }

   public boolean isDebugAppClientSet() {
      return this._isSet(410);
   }

   public void setDebugAppContainerTools(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(411);
      boolean _oldVal = this._DebugAppContainerTools;
      this._DebugAppContainerTools = param0;
      this._postSet(411, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(411)) {
            source._postSetFirePropertyChange(411, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAppContainerTools() {
      return !this._isSet(411) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(411) ? this._getDelegateBean().getDebugAppContainerTools() : this._DebugAppContainerTools;
   }

   public boolean isDebugAppContainerToolsInherited() {
      return !this._isSet(411) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(411);
   }

   public boolean isDebugAppContainerToolsSet() {
      return this._isSet(411);
   }

   public void setDebugAppTiming(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(412);
      boolean _oldVal = this._DebugAppTiming;
      this._DebugAppTiming = param0;
      this._postSet(412, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(412)) {
            source._postSetFirePropertyChange(412, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAppTiming() {
      return !this._isSet(412) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(412) ? this._getDelegateBean().getDebugAppTiming() : this._DebugAppTiming;
   }

   public boolean isDebugAppTimingInherited() {
      return !this._isSet(412) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(412);
   }

   public boolean isDebugAppTimingSet() {
      return this._isSet(412);
   }

   public void setDebugAttach(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(413);
      boolean _oldVal = this._DebugAttach;
      this._DebugAttach = param0;
      this._postSet(413, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(413)) {
            source._postSetFirePropertyChange(413, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugAttach() {
      return !this._isSet(413) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(413) ? this._getDelegateBean().getDebugAttach() : this._DebugAttach;
   }

   public boolean isDebugAttachInherited() {
      return !this._isSet(413) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(413);
   }

   public boolean isDebugAttachSet() {
      return this._isSet(413);
   }

   public void setDebugBackgroundDeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(414);
      boolean _oldVal = this._DebugBackgroundDeployment;
      this._DebugBackgroundDeployment = param0;
      this._postSet(414, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(414)) {
            source._postSetFirePropertyChange(414, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBackgroundDeployment() {
      return !this._isSet(414) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(414) ? this._getDelegateBean().getDebugBackgroundDeployment() : this._DebugBackgroundDeployment;
   }

   public boolean isDebugBackgroundDeploymentInherited() {
      return !this._isSet(414) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(414);
   }

   public boolean isDebugBackgroundDeploymentSet() {
      return this._isSet(414);
   }

   public void setDebugBatchConnector(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(415);
      boolean _oldVal = this._DebugBatchConnector;
      this._DebugBatchConnector = param0;
      this._postSet(415, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(415)) {
            source._postSetFirePropertyChange(415, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugBatchConnector() {
      return !this._isSet(415) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(415) ? this._getDelegateBean().getDebugBatchConnector() : this._DebugBatchConnector;
   }

   public boolean isDebugBatchConnectorInherited() {
      return !this._isSet(415) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(415);
   }

   public boolean isDebugBatchConnectorSet() {
      return this._isSet(415);
   }

   public void setDebugCAT(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(416);
      boolean _oldVal = this._DebugCAT;
      this._DebugCAT = param0;
      this._postSet(416, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(416)) {
            source._postSetFirePropertyChange(416, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugCAT() {
      return !this._isSet(416) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(416) ? this._getDelegateBean().getDebugCAT() : this._DebugCAT;
   }

   public boolean isDebugCATInherited() {
      return !this._isSet(416) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(416);
   }

   public boolean isDebugCATSet() {
      return this._isSet(416);
   }

   public void setDebugChannel(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(417);
      boolean _oldVal = this._DebugChannel;
      this._DebugChannel = param0;
      this._postSet(417, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(417)) {
            source._postSetFirePropertyChange(417, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugChannel() {
      return !this._isSet(417) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(417) ? this._getDelegateBean().getDebugChannel() : this._DebugChannel;
   }

   public boolean isDebugChannelInherited() {
      return !this._isSet(417) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(417);
   }

   public boolean isDebugChannelSet() {
      return this._isSet(417);
   }

   public void setDebugClassLoadingConsistencyChecker(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(418);
      boolean _oldVal = this._DebugClassLoadingConsistencyChecker;
      this._DebugClassLoadingConsistencyChecker = param0;
      this._postSet(418, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(418)) {
            source._postSetFirePropertyChange(418, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugClassLoadingConsistencyChecker() {
      return !this._isSet(418) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(418) ? this._getDelegateBean().getDebugClassLoadingConsistencyChecker() : this._DebugClassLoadingConsistencyChecker;
   }

   public boolean isDebugClassLoadingConsistencyCheckerInherited() {
      return !this._isSet(418) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(418);
   }

   public boolean isDebugClassLoadingConsistencyCheckerSet() {
      return this._isSet(418);
   }

   public void setDebugCoherence(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(419);
      boolean _oldVal = this._DebugCoherence;
      this._DebugCoherence = param0;
      this._postSet(419, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(419)) {
            source._postSetFirePropertyChange(419, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugCoherence() {
      return !this._isSet(419) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(419) ? this._getDelegateBean().getDebugCoherence() : this._DebugCoherence;
   }

   public boolean isDebugCoherenceInherited() {
      return !this._isSet(419) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(419);
   }

   public boolean isDebugCoherenceSet() {
      return this._isSet(419);
   }

   public void setDebugDataSourceInterceptor(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(420);
      boolean _oldVal = this._DebugDataSourceInterceptor;
      this._DebugDataSourceInterceptor = param0;
      this._postSet(420, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(420)) {
            source._postSetFirePropertyChange(420, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDataSourceInterceptor() {
      return !this._isSet(420) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(420) ? this._getDelegateBean().getDebugDataSourceInterceptor() : this._DebugDataSourceInterceptor;
   }

   public boolean isDebugDataSourceInterceptorInherited() {
      return !this._isSet(420) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(420);
   }

   public boolean isDebugDataSourceInterceptorSet() {
      return this._isSet(420);
   }

   public void setDebugDebugPatches(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(421);
      boolean _oldVal = this._DebugDebugPatches;
      this._DebugDebugPatches = param0;
      this._postSet(421, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(421)) {
            source._postSetFirePropertyChange(421, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDebugPatches() {
      return !this._isSet(421) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(421) ? this._getDelegateBean().getDebugDebugPatches() : this._DebugDebugPatches;
   }

   public boolean isDebugDebugPatchesInherited() {
      return !this._isSet(421) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(421);
   }

   public boolean isDebugDebugPatchesSet() {
      return this._isSet(421);
   }

   public void setDebugDefaultStoreVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(422);
      boolean _oldVal = this._DebugDefaultStoreVerbose;
      this._DebugDefaultStoreVerbose = param0;
      this._postSet(422, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(422)) {
            source._postSetFirePropertyChange(422, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDefaultStoreVerbose() {
      return !this._isSet(422) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(422) ? this._getDelegateBean().getDebugDefaultStoreVerbose() : this._DebugDefaultStoreVerbose;
   }

   public boolean isDebugDefaultStoreVerboseInherited() {
      return !this._isSet(422) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(422);
   }

   public boolean isDebugDefaultStoreVerboseSet() {
      return this._isSet(422);
   }

   public void setDebugDiagnosticInstrumentationClassInfo(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(423);
      boolean _oldVal = this._DebugDiagnosticInstrumentationClassInfo;
      this._DebugDiagnosticInstrumentationClassInfo = param0;
      this._postSet(423, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(423)) {
            source._postSetFirePropertyChange(423, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationClassInfo() {
      return !this._isSet(423) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(423) ? this._getDelegateBean().getDebugDiagnosticInstrumentationClassInfo() : this._DebugDiagnosticInstrumentationClassInfo;
   }

   public boolean isDebugDiagnosticInstrumentationClassInfoInherited() {
      return !this._isSet(423) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(423);
   }

   public boolean isDebugDiagnosticInstrumentationClassInfoSet() {
      return this._isSet(423);
   }

   public void setDebugDiagnosticInstrumentationResult(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(424);
      boolean _oldVal = this._DebugDiagnosticInstrumentationResult;
      this._DebugDiagnosticInstrumentationResult = param0;
      this._postSet(424, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(424)) {
            source._postSetFirePropertyChange(424, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticInstrumentationResult() {
      return !this._isSet(424) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(424) ? this._getDelegateBean().getDebugDiagnosticInstrumentationResult() : this._DebugDiagnosticInstrumentationResult;
   }

   public boolean isDebugDiagnosticInstrumentationResultInherited() {
      return !this._isSet(424) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(424);
   }

   public boolean isDebugDiagnosticInstrumentationResultSet() {
      return this._isSet(424);
   }

   public void setDebugDiagnosticNotifications(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(425);
      boolean _oldVal = this._DebugDiagnosticNotifications;
      this._DebugDiagnosticNotifications = param0;
      this._postSet(425, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(425)) {
            source._postSetFirePropertyChange(425, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticNotifications() {
      return !this._isSet(425) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(425) ? this._getDelegateBean().getDebugDiagnosticNotifications() : this._DebugDiagnosticNotifications;
   }

   public boolean isDebugDiagnosticNotificationsInherited() {
      return !this._isSet(425) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(425);
   }

   public boolean isDebugDiagnosticNotificationsSet() {
      return this._isSet(425);
   }

   public void setDebugDiagnosticsNotifications(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(426);
      boolean _oldVal = this._DebugDiagnosticsNotifications;
      this._DebugDiagnosticsNotifications = param0;
      this._postSet(426, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(426)) {
            source._postSetFirePropertyChange(426, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsNotifications() {
      return !this._isSet(426) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(426) ? this._getDelegateBean().getDebugDiagnosticsNotifications() : this._DebugDiagnosticsNotifications;
   }

   public boolean isDebugDiagnosticsNotificationsInherited() {
      return !this._isSet(426) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(426);
   }

   public boolean isDebugDiagnosticsNotificationsSet() {
      return this._isSet(426);
   }

   public void setDebugDiagnosticsTimer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(427);
      boolean _oldVal = this._DebugDiagnosticsTimer;
      this._DebugDiagnosticsTimer = param0;
      this._postSet(427, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(427)) {
            source._postSetFirePropertyChange(427, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDiagnosticsTimer() {
      return !this._isSet(427) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(427) ? this._getDelegateBean().getDebugDiagnosticsTimer() : this._DebugDiagnosticsTimer;
   }

   public boolean isDebugDiagnosticsTimerInherited() {
      return !this._isSet(427) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(427);
   }

   public boolean isDebugDiagnosticsTimerSet() {
      return this._isSet(427);
   }

   public void setDebugDomainUpgradeServerService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(428);
      boolean _oldVal = this._DebugDomainUpgradeServerService;
      this._DebugDomainUpgradeServerService = param0;
      this._postSet(428, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(428)) {
            source._postSetFirePropertyChange(428, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugDomainUpgradeServerService() {
      return !this._isSet(428) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(428) ? this._getDelegateBean().getDebugDomainUpgradeServerService() : this._DebugDomainUpgradeServerService;
   }

   public boolean isDebugDomainUpgradeServerServiceInherited() {
      return !this._isSet(428) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(428);
   }

   public boolean isDebugDomainUpgradeServerServiceSet() {
      return this._isSet(428);
   }

   public void setDebugEjbTimerStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(429);
      boolean _oldVal = this._DebugEjbTimerStore;
      this._DebugEjbTimerStore = param0;
      this._postSet(429, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(429)) {
            source._postSetFirePropertyChange(429, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugEjbTimerStore() {
      return !this._isSet(429) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(429) ? this._getDelegateBean().getDebugEjbTimerStore() : this._DebugEjbTimerStore;
   }

   public boolean isDebugEjbTimerStoreInherited() {
      return !this._isSet(429) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(429);
   }

   public boolean isDebugEjbTimerStoreSet() {
      return this._isSet(429);
   }

   public void setDebugExpressionPoller(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(430);
      boolean _oldVal = this._DebugExpressionPoller;
      this._DebugExpressionPoller = param0;
      this._postSet(430, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(430)) {
            source._postSetFirePropertyChange(430, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugExpressionPoller() {
      return !this._isSet(430) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(430) ? this._getDelegateBean().getDebugExpressionPoller() : this._DebugExpressionPoller;
   }

   public boolean isDebugExpressionPollerInherited() {
      return !this._isSet(430) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(430);
   }

   public boolean isDebugExpressionPollerSet() {
      return this._isSet(430);
   }

   public void setDebugFileOwnerFixer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(431);
      boolean _oldVal = this._DebugFileOwnerFixer;
      this._DebugFileOwnerFixer = param0;
      this._postSet(431, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(431)) {
            source._postSetFirePropertyChange(431, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugFileOwnerFixer() {
      return !this._isSet(431) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(431) ? this._getDelegateBean().getDebugFileOwnerFixer() : this._DebugFileOwnerFixer;
   }

   public boolean isDebugFileOwnerFixerInherited() {
      return !this._isSet(431) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(431);
   }

   public boolean isDebugFileOwnerFixerSet() {
      return this._isSet(431);
   }

   public void setDebugHarvesterTypeInfoCache(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(432);
      boolean _oldVal = this._DebugHarvesterTypeInfoCache;
      this._DebugHarvesterTypeInfoCache = param0;
      this._postSet(432, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(432)) {
            source._postSetFirePropertyChange(432, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugHarvesterTypeInfoCache() {
      return !this._isSet(432) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(432) ? this._getDelegateBean().getDebugHarvesterTypeInfoCache() : this._DebugHarvesterTypeInfoCache;
   }

   public boolean isDebugHarvesterTypeInfoCacheInherited() {
      return !this._isSet(432) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(432);
   }

   public boolean isDebugHarvesterTypeInfoCacheSet() {
      return this._isSet(432);
   }

   public void setDebugRestartInPlace(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(433);
      boolean _oldVal = this._DebugRestartInPlace;
      this._DebugRestartInPlace = param0;
      this._postSet(433, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(433)) {
            source._postSetFirePropertyChange(433, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRestartInPlace() {
      return !this._isSet(433) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(433) ? this._getDelegateBean().getDebugRestartInPlace() : this._DebugRestartInPlace;
   }

   public boolean isDebugRestartInPlaceInherited() {
      return !this._isSet(433) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(433);
   }

   public boolean isDebugRestartInPlaceSet() {
      return this._isSet(433);
   }

   public void setDebugIIOPDetail(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(434);
      boolean _oldVal = this._DebugIIOPDetail;
      this._DebugIIOPDetail = param0;
      this._postSet(434, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(434)) {
            source._postSetFirePropertyChange(434, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugIIOPDetail() {
      return !this._isSet(434) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(434) ? this._getDelegateBean().getDebugIIOPDetail() : this._DebugIIOPDetail;
   }

   public boolean isDebugIIOPDetailInherited() {
      return !this._isSet(434) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(434);
   }

   public boolean isDebugIIOPDetailSet() {
      return this._isSet(434);
   }

   public void setDebugIIOPRepalcer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(435);
      boolean _oldVal = this._DebugIIOPRepalcer;
      this._DebugIIOPRepalcer = param0;
      this._postSet(435, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(435)) {
            source._postSetFirePropertyChange(435, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugIIOPRepalcer() {
      return !this._isSet(435) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(435) ? this._getDelegateBean().getDebugIIOPRepalcer() : this._DebugIIOPRepalcer;
   }

   public boolean isDebugIIOPRepalcerInherited() {
      return !this._isSet(435) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(435);
   }

   public boolean isDebugIIOPRepalcerSet() {
      return this._isSet(435);
   }

   public void setDebugJMSCrossDomainSecurity(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(436);
      boolean _oldVal = this._DebugJMSCrossDomainSecurity;
      this._DebugJMSCrossDomainSecurity = param0;
      this._postSet(436, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(436)) {
            source._postSetFirePropertyChange(436, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSCrossDomainSecurity() {
      return !this._isSet(436) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(436) ? this._getDelegateBean().getDebugJMSCrossDomainSecurity() : this._DebugJMSCrossDomainSecurity;
   }

   public boolean isDebugJMSCrossDomainSecurityInherited() {
      return !this._isSet(436) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(436);
   }

   public boolean isDebugJMSCrossDomainSecuritySet() {
      return this._isSet(436);
   }

   public void setDebugJMSDispatcherUtilsVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(437);
      boolean _oldVal = this._DebugJMSDispatcherUtilsVerbose;
      this._DebugJMSDispatcherUtilsVerbose = param0;
      this._postSet(437, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(437)) {
            source._postSetFirePropertyChange(437, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDispatcherUtilsVerbose() {
      return !this._isSet(437) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(437) ? this._getDelegateBean().getDebugJMSDispatcherUtilsVerbose() : this._DebugJMSDispatcherUtilsVerbose;
   }

   public boolean isDebugJMSDispatcherUtilsVerboseInherited() {
      return !this._isSet(437) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(437);
   }

   public boolean isDebugJMSDispatcherUtilsVerboseSet() {
      return this._isSet(437);
   }

   public void setDebugJMSDispatcherVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(438);
      boolean _oldVal = this._DebugJMSDispatcherVerbose;
      this._DebugJMSDispatcherVerbose = param0;
      this._postSet(438, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(438)) {
            source._postSetFirePropertyChange(438, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDispatcherVerbose() {
      return !this._isSet(438) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(438) ? this._getDelegateBean().getDebugJMSDispatcherVerbose() : this._DebugJMSDispatcherVerbose;
   }

   public boolean isDebugJMSDispatcherVerboseInherited() {
      return !this._isSet(438) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(438);
   }

   public boolean isDebugJMSDispatcherVerboseSet() {
      return this._isSet(438);
   }

   public void setDebugJMSDotNetProxy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(439);
      boolean _oldVal = this._DebugJMSDotNetProxy;
      this._DebugJMSDotNetProxy = param0;
      this._postSet(439, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(439)) {
            source._postSetFirePropertyChange(439, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDotNetProxy() {
      return !this._isSet(439) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(439) ? this._getDelegateBean().getDebugJMSDotNetProxy() : this._DebugJMSDotNetProxy;
   }

   public boolean isDebugJMSDotNetProxyInherited() {
      return !this._isSet(439) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(439);
   }

   public boolean isDebugJMSDotNetProxySet() {
      return this._isSet(439);
   }

   public void setDebugJMSDotNetT3Server(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(440);
      boolean _oldVal = this._DebugJMSDotNetT3Server;
      this._DebugJMSDotNetT3Server = param0;
      this._postSet(440, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(440)) {
            source._postSetFirePropertyChange(440, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDotNetT3Server() {
      return !this._isSet(440) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(440) ? this._getDelegateBean().getDebugJMSDotNetT3Server() : this._DebugJMSDotNetT3Server;
   }

   public boolean isDebugJMSDotNetT3ServerInherited() {
      return !this._isSet(440) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(440);
   }

   public boolean isDebugJMSDotNetT3ServerSet() {
      return this._isSet(440);
   }

   public void setDebugJMSDotNetTransport(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(441);
      boolean _oldVal = this._DebugJMSDotNetTransport;
      this._DebugJMSDotNetTransport = param0;
      this._postSet(441, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(441)) {
            source._postSetFirePropertyChange(441, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDotNetTransport() {
      return !this._isSet(441) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(441) ? this._getDelegateBean().getDebugJMSDotNetTransport() : this._DebugJMSDotNetTransport;
   }

   public boolean isDebugJMSDotNetTransportInherited() {
      return !this._isSet(441) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(441);
   }

   public boolean isDebugJMSDotNetTransportSet() {
      return this._isSet(441);
   }

   public void setDebugJMSDurSub(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(442);
      boolean _oldVal = this._DebugJMSDurSub;
      this._DebugJMSDurSub = param0;
      this._postSet(442, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(442)) {
            source._postSetFirePropertyChange(442, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSDurSub() {
      return !this._isSet(442) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(442) ? this._getDelegateBean().getDebugJMSDurSub() : this._DebugJMSDurSub;
   }

   public boolean isDebugJMSDurSubInherited() {
      return !this._isSet(442) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(442);
   }

   public boolean isDebugJMSDurSubSet() {
      return this._isSet(442);
   }

   public void setDebugJMSJNDI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(443);
      boolean _oldVal = this._DebugJMSJNDI;
      this._DebugJMSJNDI = param0;
      this._postSet(443, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(443)) {
            source._postSetFirePropertyChange(443, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSJNDI() {
      return !this._isSet(443) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(443) ? this._getDelegateBean().getDebugJMSJNDI() : this._DebugJMSJNDI;
   }

   public boolean isDebugJMSJNDIInherited() {
      return !this._isSet(443) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(443);
   }

   public boolean isDebugJMSJNDISet() {
      return this._isSet(443);
   }

   public void setDebugJMSOBS(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(444);
      boolean _oldVal = this._DebugJMSOBS;
      this._DebugJMSOBS = param0;
      this._postSet(444, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(444)) {
            source._postSetFirePropertyChange(444, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMSOBS() {
      return !this._isSet(444) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(444) ? this._getDelegateBean().getDebugJMSOBS() : this._DebugJMSOBS;
   }

   public boolean isDebugJMSOBSInherited() {
      return !this._isSet(444) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(444);
   }

   public boolean isDebugJMSOBSSet() {
      return this._isSet(444);
   }

   public void setDebugJMXContext(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(445);
      boolean _oldVal = this._DebugJMXContext;
      this._DebugJMXContext = param0;
      this._postSet(445, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(445)) {
            source._postSetFirePropertyChange(445, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJMXContext() {
      return !this._isSet(445) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(445) ? this._getDelegateBean().getDebugJMXContext() : this._DebugJMXContext;
   }

   public boolean isDebugJMXContextInherited() {
      return !this._isSet(445) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(445);
   }

   public boolean isDebugJMXContextSet() {
      return this._isSet(445);
   }

   public void setDebugJPA(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(446);
      boolean _oldVal = this._DebugJPA;
      this._DebugJPA = param0;
      this._postSet(446, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(446)) {
            source._postSetFirePropertyChange(446, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJPA() {
      return !this._isSet(446) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(446) ? this._getDelegateBean().getDebugJPA() : this._DebugJPA;
   }

   public boolean isDebugJPAInherited() {
      return !this._isSet(446) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(446);
   }

   public boolean isDebugJPASet() {
      return this._isSet(446);
   }

   public void setDebugJTA2PCDetail(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(447);
      boolean _oldVal = this._DebugJTA2PCDetail;
      this._DebugJTA2PCDetail = param0;
      this._postSet(447, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(447)) {
            source._postSetFirePropertyChange(447, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugJTA2PCDetail() {
      return !this._isSet(447) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(447) ? this._getDelegateBean().getDebugJTA2PCDetail() : this._DebugJTA2PCDetail;
   }

   public boolean isDebugJTA2PCDetailInherited() {
      return !this._isSet(447) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(447);
   }

   public boolean isDebugJTA2PCDetailSet() {
      return this._isSet(447);
   }

   public void setDebugKodoWeblogic(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(448);
      boolean _oldVal = this._DebugKodoWeblogic;
      this._DebugKodoWeblogic = param0;
      this._postSet(448, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(448)) {
            source._postSetFirePropertyChange(448, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugKodoWeblogic() {
      return !this._isSet(448) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(448) ? this._getDelegateBean().getDebugKodoWeblogic() : this._DebugKodoWeblogic;
   }

   public boolean isDebugKodoWeblogicInherited() {
      return !this._isSet(448) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(448);
   }

   public boolean isDebugKodoWeblogicSet() {
      return this._isSet(448);
   }

   public void setDebugLegacy(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(449);
      boolean _oldVal = this._DebugLegacy;
      this._DebugLegacy = param0;
      this._postSet(449, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(449)) {
            source._postSetFirePropertyChange(449, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugLegacy() {
      return !this._isSet(449) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(449) ? this._getDelegateBean().getDebugLegacy() : this._DebugLegacy;
   }

   public boolean isDebugLegacyInherited() {
      return !this._isSet(449) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(449);
   }

   public boolean isDebugLegacySet() {
      return this._isSet(449);
   }

   public void setDebugMBeanCIC(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(450);
      boolean _oldVal = this._DebugMBeanCIC;
      this._DebugMBeanCIC = param0;
      this._postSet(450, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(450)) {
            source._postSetFirePropertyChange(450, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanCIC() {
      return !this._isSet(450) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(450) ? this._getDelegateBean().getDebugMBeanCIC() : this._DebugMBeanCIC;
   }

   public boolean isDebugMBeanCICInherited() {
      return !this._isSet(450) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(450);
   }

   public boolean isDebugMBeanCICSet() {
      return this._isSet(450);
   }

   public void setDebugMBeanEventHandler(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(451);
      boolean _oldVal = this._DebugMBeanEventHandler;
      this._DebugMBeanEventHandler = param0;
      this._postSet(451, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(451)) {
            source._postSetFirePropertyChange(451, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanEventHandler() {
      return !this._isSet(451) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(451) ? this._getDelegateBean().getDebugMBeanEventHandler() : this._DebugMBeanEventHandler;
   }

   public boolean isDebugMBeanEventHandlerInherited() {
      return !this._isSet(451) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(451);
   }

   public boolean isDebugMBeanEventHandlerSet() {
      return this._isSet(451);
   }

   public void setDebugMBeanEventHandlerSummary(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(452);
      boolean _oldVal = this._DebugMBeanEventHandlerSummary;
      this._DebugMBeanEventHandlerSummary = param0;
      this._postSet(452, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(452)) {
            source._postSetFirePropertyChange(452, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanEventHandlerSummary() {
      return !this._isSet(452) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(452) ? this._getDelegateBean().getDebugMBeanEventHandlerSummary() : this._DebugMBeanEventHandlerSummary;
   }

   public boolean isDebugMBeanEventHandlerSummaryInherited() {
      return !this._isSet(452) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(452);
   }

   public boolean isDebugMBeanEventHandlerSummarySet() {
      return this._isSet(452);
   }

   public void setDebugMBeanEventHandlerWork(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(453);
      boolean _oldVal = this._DebugMBeanEventHandlerWork;
      this._DebugMBeanEventHandlerWork = param0;
      this._postSet(453, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(453)) {
            source._postSetFirePropertyChange(453, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanEventHandlerWork() {
      return !this._isSet(453) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(453) ? this._getDelegateBean().getDebugMBeanEventHandlerWork() : this._DebugMBeanEventHandlerWork;
   }

   public boolean isDebugMBeanEventHandlerWorkInherited() {
      return !this._isSet(453) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(453);
   }

   public boolean isDebugMBeanEventHandlerWorkSet() {
      return this._isSet(453);
   }

   public void setDebugMBeanLocalization(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(454);
      boolean _oldVal = this._DebugMBeanLocalization;
      this._DebugMBeanLocalization = param0;
      this._postSet(454, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(454)) {
            source._postSetFirePropertyChange(454, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMBeanLocalization() {
      return !this._isSet(454) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(454) ? this._getDelegateBean().getDebugMBeanLocalization() : this._DebugMBeanLocalization;
   }

   public boolean isDebugMBeanLocalizationInherited() {
      return !this._isSet(454) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(454);
   }

   public boolean isDebugMBeanLocalizationSet() {
      return this._isSet(454);
   }

   public void setDebugMailSessionDeployment(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(455);
      boolean _oldVal = this._DebugMailSessionDeployment;
      this._DebugMailSessionDeployment = param0;
      this._postSet(455, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(455)) {
            source._postSetFirePropertyChange(455, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMailSessionDeployment() {
      return !this._isSet(455) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(455) ? this._getDelegateBean().getDebugMailSessionDeployment() : this._DebugMailSessionDeployment;
   }

   public boolean isDebugMailSessionDeploymentInherited() {
      return !this._isSet(455) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(455);
   }

   public boolean isDebugMailSessionDeploymentSet() {
      return this._isSet(455);
   }

   public void setDebugManagedBean(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(456);
      boolean _oldVal = this._DebugManagedBean;
      this._DebugManagedBean = param0;
      this._postSet(456, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(456)) {
            source._postSetFirePropertyChange(456, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugManagedBean() {
      return !this._isSet(456) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(456) ? this._getDelegateBean().getDebugManagedBean() : this._DebugManagedBean;
   }

   public boolean isDebugManagedBeanInherited() {
      return !this._isSet(456) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(456);
   }

   public boolean isDebugManagedBeanSet() {
      return this._isSet(456);
   }

   public void setDebugMigrationInfo(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(457);
      boolean _oldVal = this._DebugMigrationInfo;
      this._DebugMigrationInfo = param0;
      this._postSet(457, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(457)) {
            source._postSetFirePropertyChange(457, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugMigrationInfo() {
      return !this._isSet(457) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(457) ? this._getDelegateBean().getDebugMigrationInfo() : this._DebugMigrationInfo;
   }

   public boolean isDebugMigrationInfoInherited() {
      return !this._isSet(457) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(457);
   }

   public boolean isDebugMigrationInfoSet() {
      return this._isSet(457);
   }

   public void setDebugNIO(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(458);
      boolean _oldVal = this._DebugNIO;
      this._DebugNIO = param0;
      this._postSet(458, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(458)) {
            source._postSetFirePropertyChange(458, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugNIO() {
      return !this._isSet(458) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(458) ? this._getDelegateBean().getDebugNIO() : this._DebugNIO;
   }

   public boolean isDebugNIOInherited() {
      return !this._isSet(458) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(458);
   }

   public boolean isDebugNIOSet() {
      return this._isSet(458);
   }

   public void setDebugPageFlowMonitoring(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(459);
      boolean _oldVal = this._DebugPageFlowMonitoring;
      this._DebugPageFlowMonitoring = param0;
      this._postSet(459, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(459)) {
            source._postSetFirePropertyChange(459, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPageFlowMonitoring() {
      return !this._isSet(459) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(459) ? this._getDelegateBean().getDebugPageFlowMonitoring() : this._DebugPageFlowMonitoring;
   }

   public boolean isDebugPageFlowMonitoringInherited() {
      return !this._isSet(459) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(459);
   }

   public boolean isDebugPageFlowMonitoringSet() {
      return this._isSet(459);
   }

   public void setDebugPartitionJMX(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(460);
      boolean _oldVal = this._DebugPartitionJMX;
      this._DebugPartitionJMX = param0;
      this._postSet(460, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(460)) {
            source._postSetFirePropertyChange(460, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPartitionJMX() {
      return !this._isSet(460) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(460) ? this._getDelegateBean().getDebugPartitionJMX() : this._DebugPartitionJMX;
   }

   public boolean isDebugPartitionJMXInherited() {
      return !this._isSet(460) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(460);
   }

   public boolean isDebugPartitionJMXSet() {
      return this._isSet(460);
   }

   public void setDebugPartitionLifecycle(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(461);
      boolean _oldVal = this._DebugPartitionLifecycle;
      this._DebugPartitionLifecycle = param0;
      this._postSet(461, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(461)) {
            source._postSetFirePropertyChange(461, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPartitionLifecycle() {
      return !this._isSet(461) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(461) ? this._getDelegateBean().getDebugPartitionLifecycle() : this._DebugPartitionLifecycle;
   }

   public boolean isDebugPartitionLifecycleInherited() {
      return !this._isSet(461) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(461);
   }

   public boolean isDebugPartitionLifecycleSet() {
      return this._isSet(461);
   }

   public void setDebugPartitionPortability(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(462);
      boolean _oldVal = this._DebugPartitionPortability;
      this._DebugPartitionPortability = param0;
      this._postSet(462, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(462)) {
            source._postSetFirePropertyChange(462, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPartitionPortability() {
      return !this._isSet(462) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(462) ? this._getDelegateBean().getDebugPartitionPortability() : this._DebugPartitionPortability;
   }

   public boolean isDebugPartitionPortabilityInherited() {
      return !this._isSet(462) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(462);
   }

   public boolean isDebugPartitionPortabilitySet() {
      return this._isSet(462);
   }

   public void setDebugPersistentStoreManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(463);
      boolean _oldVal = this._DebugPersistentStoreManager;
      this._DebugPersistentStoreManager = param0;
      this._postSet(463, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(463)) {
            source._postSetFirePropertyChange(463, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPersistentStoreManager() {
      return !this._isSet(463) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(463) ? this._getDelegateBean().getDebugPersistentStoreManager() : this._DebugPersistentStoreManager;
   }

   public boolean isDebugPersistentStoreManagerInherited() {
      return !this._isSet(463) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(463);
   }

   public boolean isDebugPersistentStoreManagerSet() {
      return this._isSet(463);
   }

   public void setDebugPubSubBayeux(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(464);
      boolean _oldVal = this._DebugPubSubBayeux;
      this._DebugPubSubBayeux = param0;
      this._postSet(464, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(464)) {
            source._postSetFirePropertyChange(464, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPubSubBayeux() {
      return !this._isSet(464) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(464) ? this._getDelegateBean().getDebugPubSubBayeux() : this._DebugPubSubBayeux;
   }

   public boolean isDebugPubSubBayeuxInherited() {
      return !this._isSet(464) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(464);
   }

   public boolean isDebugPubSubBayeuxSet() {
      return this._isSet(464);
   }

   public void setDebugPubSubChannel(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(465);
      boolean _oldVal = this._DebugPubSubChannel;
      this._DebugPubSubChannel = param0;
      this._postSet(465, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(465)) {
            source._postSetFirePropertyChange(465, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPubSubChannel() {
      return !this._isSet(465) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(465) ? this._getDelegateBean().getDebugPubSubChannel() : this._DebugPubSubChannel;
   }

   public boolean isDebugPubSubChannelInherited() {
      return !this._isSet(465) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(465);
   }

   public boolean isDebugPubSubChannelSet() {
      return this._isSet(465);
   }

   public void setDebugPubSubClient(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(466);
      boolean _oldVal = this._DebugPubSubClient;
      this._DebugPubSubClient = param0;
      this._postSet(466, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(466)) {
            source._postSetFirePropertyChange(466, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPubSubClient() {
      return !this._isSet(466) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(466) ? this._getDelegateBean().getDebugPubSubClient() : this._DebugPubSubClient;
   }

   public boolean isDebugPubSubClientInherited() {
      return !this._isSet(466) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(466);
   }

   public boolean isDebugPubSubClientSet() {
      return this._isSet(466);
   }

   public void setDebugPubSubSecurity(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(467);
      boolean _oldVal = this._DebugPubSubSecurity;
      this._DebugPubSubSecurity = param0;
      this._postSet(467, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(467)) {
            source._postSetFirePropertyChange(467, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPubSubSecurity() {
      return !this._isSet(467) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(467) ? this._getDelegateBean().getDebugPubSubSecurity() : this._DebugPubSubSecurity;
   }

   public boolean isDebugPubSubSecurityInherited() {
      return !this._isSet(467) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(467);
   }

   public boolean isDebugPubSubSecuritySet() {
      return this._isSet(467);
   }

   public void setDebugPubSubServer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(468);
      boolean _oldVal = this._DebugPubSubServer;
      this._DebugPubSubServer = param0;
      this._postSet(468, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(468)) {
            source._postSetFirePropertyChange(468, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugPubSubServer() {
      return !this._isSet(468) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(468) ? this._getDelegateBean().getDebugPubSubServer() : this._DebugPubSubServer;
   }

   public boolean isDebugPubSubServerInherited() {
      return !this._isSet(468) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(468);
   }

   public boolean isDebugPubSubServerSet() {
      return this._isSet(468);
   }

   public void setDebugRMIDetailed(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(469);
      boolean _oldVal = this._DebugRMIDetailed;
      this._DebugRMIDetailed = param0;
      this._postSet(469, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(469)) {
            source._postSetFirePropertyChange(469, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRMIDetailed() {
      return !this._isSet(469) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(469) ? this._getDelegateBean().getDebugRMIDetailed() : this._DebugRMIDetailed;
   }

   public boolean isDebugRMIDetailedInherited() {
      return !this._isSet(469) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(469);
   }

   public boolean isDebugRMIDetailedSet() {
      return this._isSet(469);
   }

   public void setDebugRedefAttach(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(470);
      boolean _oldVal = this._DebugRedefAttach;
      this._DebugRedefAttach = param0;
      this._postSet(470, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(470)) {
            source._postSetFirePropertyChange(470, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRedefAttach() {
      return !this._isSet(470) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(470) ? this._getDelegateBean().getDebugRedefAttach() : this._DebugRedefAttach;
   }

   public boolean isDebugRedefAttachInherited() {
      return !this._isSet(470) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(470);
   }

   public boolean isDebugRedefAttachSet() {
      return this._isSet(470);
   }

   public void setDebugRequestManager(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(471);
      boolean _oldVal = this._DebugRequestManager;
      this._DebugRequestManager = param0;
      this._postSet(471, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(471)) {
            source._postSetFirePropertyChange(471, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugRequestManager() {
      return !this._isSet(471) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(471) ? this._getDelegateBean().getDebugRequestManager() : this._DebugRequestManager;
   }

   public boolean isDebugRequestManagerInherited() {
      return !this._isSet(471) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(471);
   }

   public boolean isDebugRequestManagerSet() {
      return this._isSet(471);
   }

   public void setDebugResourceGroupMigration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(472);
      boolean _oldVal = this._DebugResourceGroupMigration;
      this._DebugResourceGroupMigration = param0;
      this._postSet(472, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(472)) {
            source._postSetFirePropertyChange(472, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugResourceGroupMigration() {
      return !this._isSet(472) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(472) ? this._getDelegateBean().getDebugResourceGroupMigration() : this._DebugResourceGroupMigration;
   }

   public boolean isDebugResourceGroupMigrationInherited() {
      return !this._isSet(472) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(472);
   }

   public boolean isDebugResourceGroupMigrationSet() {
      return this._isSet(472);
   }

   public void setDebugSNMPMib(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(473);
      boolean _oldVal = this._DebugSNMPMib;
      this._DebugSNMPMib = param0;
      this._postSet(473, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(473)) {
            source._postSetFirePropertyChange(473, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSNMPMib() {
      return !this._isSet(473) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(473) ? this._getDelegateBean().getDebugSNMPMib() : this._DebugSNMPMib;
   }

   public boolean isDebugSNMPMibInherited() {
      return !this._isSet(473) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(473);
   }

   public boolean isDebugSNMPMibSet() {
      return this._isSet(473);
   }

   public void setDebugScrubberStartService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(474);
      boolean _oldVal = this._DebugScrubberStartService;
      this._DebugScrubberStartService = param0;
      this._postSet(474, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(474)) {
            source._postSetFirePropertyChange(474, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugScrubberStartService() {
      return !this._isSet(474) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(474) ? this._getDelegateBean().getDebugScrubberStartService() : this._DebugScrubberStartService;
   }

   public boolean isDebugScrubberStartServiceInherited() {
      return !this._isSet(474) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(474);
   }

   public boolean isDebugScrubberStartServiceSet() {
      return this._isSet(474);
   }

   public void setDebugServerRuntime(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(475);
      boolean _oldVal = this._DebugServerRuntime;
      this._DebugServerRuntime = param0;
      this._postSet(475, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(475)) {
            source._postSetFirePropertyChange(475, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerRuntime() {
      return !this._isSet(475) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(475) ? this._getDelegateBean().getDebugServerRuntime() : this._DebugServerRuntime;
   }

   public boolean isDebugServerRuntimeInherited() {
      return !this._isSet(475) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(475);
   }

   public boolean isDebugServerRuntimeSet() {
      return this._isSet(475);
   }

   public void setDebugServerShutdownStatistics(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(476);
      boolean _oldVal = this._DebugServerShutdownStatistics;
      this._DebugServerShutdownStatistics = param0;
      this._postSet(476, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(476)) {
            source._postSetFirePropertyChange(476, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerShutdownStatistics() {
      return !this._isSet(476) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(476) ? this._getDelegateBean().getDebugServerShutdownStatistics() : this._DebugServerShutdownStatistics;
   }

   public boolean isDebugServerShutdownStatisticsInherited() {
      return !this._isSet(476) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(476);
   }

   public boolean isDebugServerShutdownStatisticsSet() {
      return this._isSet(476);
   }

   public void setDebugServerShutdownTimer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(477);
      boolean _oldVal = this._DebugServerShutdownTimer;
      this._DebugServerShutdownTimer = param0;
      this._postSet(477, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(477)) {
            source._postSetFirePropertyChange(477, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerShutdownTimer() {
      return !this._isSet(477) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(477) ? this._getDelegateBean().getDebugServerShutdownTimer() : this._DebugServerShutdownTimer;
   }

   public boolean isDebugServerShutdownTimerInherited() {
      return !this._isSet(477) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(477);
   }

   public boolean isDebugServerShutdownTimerSet() {
      return this._isSet(477);
   }

   public void setDebugServerStartupTimer(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(478);
      boolean _oldVal = this._DebugServerStartupTimer;
      this._DebugServerStartupTimer = param0;
      this._postSet(478, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(478)) {
            source._postSetFirePropertyChange(478, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugServerStartupTimer() {
      return !this._isSet(478) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(478) ? this._getDelegateBean().getDebugServerStartupTimer() : this._DebugServerStartupTimer;
   }

   public boolean isDebugServerStartupTimerInherited() {
      return !this._isSet(478) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(478);
   }

   public boolean isDebugServerStartupTimerSet() {
      return this._isSet(478);
   }

   public void setDebugSingletonServices(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(479);
      boolean _oldVal = this._DebugSingletonServices;
      this._DebugSingletonServices = param0;
      this._postSet(479, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(479)) {
            source._postSetFirePropertyChange(479, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSingletonServices() {
      return !this._isSet(479) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(479) ? this._getDelegateBean().getDebugSingletonServices() : this._DebugSingletonServices;
   }

   public boolean isDebugSingletonServicesInherited() {
      return !this._isSet(479) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(479);
   }

   public boolean isDebugSingletonServicesSet() {
      return this._isSet(479);
   }

   public void setDebugSpringStatistics(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(480);
      boolean _oldVal = this._DebugSpringStatistics;
      this._DebugSpringStatistics = param0;
      this._postSet(480, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(480)) {
            source._postSetFirePropertyChange(480, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugSpringStatistics() {
      return !this._isSet(480) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(480) ? this._getDelegateBean().getDebugSpringStatistics() : this._DebugSpringStatistics;
   }

   public boolean isDebugSpringStatisticsInherited() {
      return !this._isSet(480) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(480);
   }

   public boolean isDebugSpringStatisticsSet() {
      return this._isSet(480);
   }

   public void setDebugStore(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(481);
      boolean _oldVal = this._DebugStore;
      this._DebugStore = param0;
      this._postSet(481, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(481)) {
            source._postSetFirePropertyChange(481, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStore() {
      return !this._isSet(481) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(481) ? this._getDelegateBean().getDebugStore() : this._DebugStore;
   }

   public boolean isDebugStoreInherited() {
      return !this._isSet(481) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(481);
   }

   public boolean isDebugStoreSet() {
      return this._isSet(481);
   }

   public void setDebugStoreCache(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(482);
      boolean _oldVal = this._DebugStoreCache;
      this._DebugStoreCache = param0;
      this._postSet(482, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(482)) {
            source._postSetFirePropertyChange(482, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreCache() {
      return !this._isSet(482) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(482) ? this._getDelegateBean().getDebugStoreCache() : this._DebugStoreCache;
   }

   public boolean isDebugStoreCacheInherited() {
      return !this._isSet(482) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(482);
   }

   public boolean isDebugStoreCacheSet() {
      return this._isSet(482);
   }

   public void setDebugStoreRCM(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(483);
      boolean _oldVal = this._DebugStoreRCM;
      this._DebugStoreRCM = param0;
      this._postSet(483, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(483)) {
            source._postSetFirePropertyChange(483, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreRCM() {
      return !this._isSet(483) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(483) ? this._getDelegateBean().getDebugStoreRCM() : this._DebugStoreRCM;
   }

   public boolean isDebugStoreRCMInherited() {
      return !this._isSet(483) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(483);
   }

   public boolean isDebugStoreRCMSet() {
      return this._isSet(483);
   }

   public void setDebugStoreRCMVerbose(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(484);
      boolean _oldVal = this._DebugStoreRCMVerbose;
      this._DebugStoreRCMVerbose = param0;
      this._postSet(484, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(484)) {
            source._postSetFirePropertyChange(484, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStoreRCMVerbose() {
      return !this._isSet(484) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(484) ? this._getDelegateBean().getDebugStoreRCMVerbose() : this._DebugStoreRCMVerbose;
   }

   public boolean isDebugStoreRCMVerboseInherited() {
      return !this._isSet(484) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(484);
   }

   public boolean isDebugStoreRCMVerboseSet() {
      return this._isSet(484);
   }

   public void setDebugStubGeneration(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(485);
      boolean _oldVal = this._DebugStubGeneration;
      this._DebugStubGeneration = param0;
      this._postSet(485, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(485)) {
            source._postSetFirePropertyChange(485, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugStubGeneration() {
      return !this._isSet(485) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(485) ? this._getDelegateBean().getDebugStubGeneration() : this._DebugStubGeneration;
   }

   public boolean isDebugStubGenerationInherited() {
      return !this._isSet(485) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(485);
   }

   public boolean isDebugStubGenerationSet() {
      return this._isSet(485);
   }

   public void setDebugUnicastMessaging(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(486);
      boolean _oldVal = this._DebugUnicastMessaging;
      this._DebugUnicastMessaging = param0;
      this._postSet(486, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(486)) {
            source._postSetFirePropertyChange(486, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugUnicastMessaging() {
      return !this._isSet(486) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(486) ? this._getDelegateBean().getDebugUnicastMessaging() : this._DebugUnicastMessaging;
   }

   public boolean isDebugUnicastMessagingInherited() {
      return !this._isSet(486) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(486);
   }

   public boolean isDebugUnicastMessagingSet() {
      return this._isSet(486);
   }

   public void setDebugValidation(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(487);
      boolean _oldVal = this._DebugValidation;
      this._DebugValidation = param0;
      this._postSet(487, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(487)) {
            source._postSetFirePropertyChange(487, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugValidation() {
      return !this._isSet(487) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(487) ? this._getDelegateBean().getDebugValidation() : this._DebugValidation;
   }

   public boolean isDebugValidationInherited() {
      return !this._isSet(487) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(487);
   }

   public boolean isDebugValidationSet() {
      return this._isSet(487);
   }

   public void setDebugValidationClassLoading(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(488);
      boolean _oldVal = this._DebugValidationClassLoading;
      this._DebugValidationClassLoading = param0;
      this._postSet(488, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(488)) {
            source._postSetFirePropertyChange(488, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugValidationClassLoading() {
      return !this._isSet(488) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(488) ? this._getDelegateBean().getDebugValidationClassLoading() : this._DebugValidationClassLoading;
   }

   public boolean isDebugValidationClassLoadingInherited() {
      return !this._isSet(488) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(488);
   }

   public boolean isDebugValidationClassLoadingSet() {
      return this._isSet(488);
   }

   public void setDebugWTCTdomPdu(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(489);
      boolean _oldVal = this._DebugWTCTdomPdu;
      this._DebugWTCTdomPdu = param0;
      this._postSet(489, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(489)) {
            source._postSetFirePropertyChange(489, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWTCTdomPdu() {
      return !this._isSet(489) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(489) ? this._getDelegateBean().getDebugWTCTdomPdu() : this._DebugWTCTdomPdu;
   }

   public boolean isDebugWTCTdomPduInherited() {
      return !this._isSet(489) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(489);
   }

   public boolean isDebugWTCTdomPduSet() {
      return this._isSet(489);
   }

   public void setDebugWatchScalingActions(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(490);
      boolean _oldVal = this._DebugWatchScalingActions;
      this._DebugWatchScalingActions = param0;
      this._postSet(490, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(490)) {
            source._postSetFirePropertyChange(490, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWatchScalingActions() {
      return !this._isSet(490) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(490) ? this._getDelegateBean().getDebugWatchScalingActions() : this._DebugWatchScalingActions;
   }

   public boolean isDebugWatchScalingActionsInherited() {
      return !this._isSet(490) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(490);
   }

   public boolean isDebugWatchScalingActionsSet() {
      return this._isSet(490);
   }

   public void setDebugWebAppDI(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(491);
      boolean _oldVal = this._DebugWebAppDI;
      this._DebugWebAppDI = param0;
      this._postSet(491, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(491)) {
            source._postSetFirePropertyChange(491, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWebAppDI() {
      return !this._isSet(491) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(491) ? this._getDelegateBean().getDebugWebAppDI() : this._DebugWebAppDI;
   }

   public boolean isDebugWebAppDIInherited() {
      return !this._isSet(491) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(491);
   }

   public boolean isDebugWebAppDISet() {
      return this._isSet(491);
   }

   public void setDebugWebSocket(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(492);
      boolean _oldVal = this._DebugWebSocket;
      this._DebugWebSocket = param0;
      this._postSet(492, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(492)) {
            source._postSetFirePropertyChange(492, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getDebugWebSocket() {
      return !this._isSet(492) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(492) ? this._getDelegateBean().getDebugWebSocket() : this._DebugWebSocket;
   }

   public boolean isDebugWebSocketInherited() {
      return !this._isSet(492) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(492);
   }

   public boolean isDebugWebSocketSet() {
      return this._isSet(492);
   }

   public void setGlassFishWebAppParser(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(493);
      boolean _oldVal = this._GlassFishWebAppParser;
      this._GlassFishWebAppParser = param0;
      this._postSet(493, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(493)) {
            source._postSetFirePropertyChange(493, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getGlassFishWebAppParser() {
      return !this._isSet(493) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(493) ? this._getDelegateBean().getGlassFishWebAppParser() : this._GlassFishWebAppParser;
   }

   public boolean isGlassFishWebAppParserInherited() {
      return !this._isSet(493) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(493);
   }

   public boolean isGlassFishWebAppParserSet() {
      return this._isSet(493);
   }

   public void setOSGiForApps(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(494);
      boolean _oldVal = this._OSGiForApps;
      this._OSGiForApps = param0;
      this._postSet(494, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(494)) {
            source._postSetFirePropertyChange(494, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getOSGiForApps() {
      return !this._isSet(494) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(494) ? this._getDelegateBean().getOSGiForApps() : this._OSGiForApps;
   }

   public boolean isOSGiForAppsInherited() {
      return !this._isSet(494) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(494);
   }

   public boolean isOSGiForAppsSet() {
      return this._isSet(494);
   }

   public void setPartitionEvenInterceptor(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(495);
      boolean _oldVal = this._PartitionEvenInterceptor;
      this._PartitionEvenInterceptor = param0;
      this._postSet(495, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(495)) {
            source._postSetFirePropertyChange(495, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getPartitionEvenInterceptor() {
      return !this._isSet(495) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(495) ? this._getDelegateBean().getPartitionEvenInterceptor() : this._PartitionEvenInterceptor;
   }

   public boolean isPartitionEvenInterceptorInherited() {
      return !this._isSet(495) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(495);
   }

   public boolean isPartitionEvenInterceptorSet() {
      return this._isSet(495);
   }

   public void setPortablePartitionHelper(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(496);
      boolean _oldVal = this._PortablePartitionHelper;
      this._PortablePartitionHelper = param0;
      this._postSet(496, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(496)) {
            source._postSetFirePropertyChange(496, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getPortablePartitionHelper() {
      return !this._isSet(496) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(496) ? this._getDelegateBean().getPortablePartitionHelper() : this._PortablePartitionHelper;
   }

   public boolean isPortablePartitionHelperInherited() {
      return !this._isSet(496) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(496);
   }

   public boolean isPortablePartitionHelperSet() {
      return this._isSet(496);
   }

   public void setScriptExecutorCommand(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(497);
      boolean _oldVal = this._ScriptExecutorCommand;
      this._ScriptExecutorCommand = param0;
      this._postSet(497, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(497)) {
            source._postSetFirePropertyChange(497, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getScriptExecutorCommand() {
      return !this._isSet(497) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(497) ? this._getDelegateBean().getScriptExecutorCommand() : this._ScriptExecutorCommand;
   }

   public boolean isScriptExecutorCommandInherited() {
      return !this._isSet(497) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(497);
   }

   public boolean isScriptExecutorCommandSet() {
      return this._isSet(497);
   }

   public void setSecurityEncryptionService(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(498);
      boolean _oldVal = this._SecurityEncryptionService;
      this._SecurityEncryptionService = param0;
      this._postSet(498, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(498)) {
            source._postSetFirePropertyChange(498, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getSecurityEncryptionService() {
      return !this._isSet(498) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(498) ? this._getDelegateBean().getSecurityEncryptionService() : this._SecurityEncryptionService;
   }

   public boolean isSecurityEncryptionServiceInherited() {
      return !this._isSet(498) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(498);
   }

   public boolean isSecurityEncryptionServiceSet() {
      return this._isSet(498);
   }

   public void setT3HttpUpgradeHandler(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(499);
      boolean _oldVal = this._T3HttpUpgradeHandler;
      this._T3HttpUpgradeHandler = param0;
      this._postSet(499, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(499)) {
            source._postSetFirePropertyChange(499, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getT3HttpUpgradeHandler() {
      return !this._isSet(499) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(499) ? this._getDelegateBean().getT3HttpUpgradeHandler() : this._T3HttpUpgradeHandler;
   }

   public boolean isT3HttpUpgradeHandlerInherited() {
      return !this._isSet(499) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(499);
   }

   public boolean isT3HttpUpgradeHandlerSet() {
      return this._isSet(499);
   }

   public void setWarExtraction(boolean param0) {
      if (this._isTransient() && this._isSynthetic() && this._getDelegateBean() != null) {
         this._untransient();
      }

      boolean wasSet = this._isSet(500);
      boolean _oldVal = this._WarExtraction;
      this._WarExtraction = param0;
      this._postSet(500, _oldVal, param0);
      Iterator var4 = this._DelegateSources.iterator();

      while(var4.hasNext()) {
         ServerDebugMBeanImpl source = (ServerDebugMBeanImpl)var4.next();
         if (source != null && !source._isSet(500)) {
            source._postSetFirePropertyChange(500, wasSet, _oldVal, param0);
         }
      }

   }

   public boolean getWarExtraction() {
      return !this._isSet(500) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(500) ? this._getDelegateBean().getWarExtraction() : this._WarExtraction;
   }

   public boolean isWarExtractionInherited() {
      return !this._isSet(500) && this._getDelegateBean() != null && this._getDelegateBean()._isSet(500);
   }

   public boolean isWarExtractionSet() {
      return this._isSet(500);
   }

   protected void _unSet(int idx) {
      if (!this._initializeProperty(idx)) {
         super._unSet(idx);
      } else {
         this._markSet(idx, false);
      }

   }

   protected AbstractDescriptorBeanHelper _createHelper() {
      return new Helper(this);
   }

   public boolean _isAnythingSet() {
      return super._isAnythingSet();
   }

   private boolean _initializeProperty(int idx) {
      boolean initOne = idx > -1;
      if (!initOne) {
         idx = 257;
      }

      try {
         switch (idx) {
            case 257:
               this._ApplicationContainer = false;
               if (initOne) {
                  break;
               }
            case 49:
               this._BugReportServiceWsdlUrl = null;
               if (initOne) {
                  break;
               }
            case 64:
               this._ClassChangeNotifier = false;
               if (initOne) {
                  break;
               }
            case 258:
               this._ClassFinder = false;
               if (initOne) {
                  break;
               }
            case 263:
               this._ClassLoader = false;
               if (initOne) {
                  break;
               }
            case 264:
               this._ClassLoaderVerbose = false;
               if (initOne) {
                  break;
               }
            case 265:
               this._ClassloaderWebApp = false;
               if (initOne) {
                  break;
               }
            case 259:
               this._ClasspathServlet = false;
               if (initOne) {
                  break;
               }
            case 409:
               this._DebugAbbrevs = false;
               if (initOne) {
                  break;
               }
            case 59:
               this._DebugAppAnnotations = false;
               if (initOne) {
                  break;
               }
            case 410:
               this._DebugAppClient = false;
               if (initOne) {
                  break;
               }
            case 57:
               this._DebugAppContainer = false;
               if (initOne) {
                  break;
               }
            case 411:
               this._DebugAppContainerTools = false;
               if (initOne) {
                  break;
               }
            case 412:
               this._DebugAppTiming = false;
               if (initOne) {
                  break;
               }
            case 94:
               this._DebugAsyncQueue = false;
               if (initOne) {
                  break;
               }
            case 413:
               this._DebugAttach = false;
               if (initOne) {
                  break;
               }
            case 414:
               this._DebugBackgroundDeployment = false;
               if (initOne) {
                  break;
               }
            case 415:
               this._DebugBatchConnector = false;
               if (initOne) {
                  break;
               }
            case 289:
               this._DebugBeanTreeHarvesterControl = false;
               if (initOne) {
                  break;
               }
            case 291:
               this._DebugBeanTreeHarvesterDataCollection = false;
               if (initOne) {
                  break;
               }
            case 290:
               this._DebugBeanTreeHarvesterResolution = false;
               if (initOne) {
                  break;
               }
            case 292:
               this._DebugBeanTreeHarvesterThreading = false;
               if (initOne) {
                  break;
               }
            case 266:
               this._DebugBootstrapServlet = false;
               if (initOne) {
                  break;
               }
            case 392:
               this._DebugBuzzProtocol = false;
               if (initOne) {
                  break;
               }
            case 393:
               this._DebugBuzzProtocolDetails = false;
               if (initOne) {
                  break;
               }
            case 394:
               this._DebugBuzzProtocolHttp = false;
               if (initOne) {
                  break;
               }
            case 416:
               this._DebugCAT = false;
               if (initOne) {
                  break;
               }
            case 175:
               this._DebugCertRevocCheck = false;
               if (initOne) {
                  break;
               }
            case 417:
               this._DebugChannel = false;
               if (initOne) {
                  break;
               }
            case 418:
               this._DebugClassLoadingConsistencyChecker = false;
               if (initOne) {
                  break;
               }
            case 262:
               this._DebugClassLoadingContextualTrace = false;
               if (initOne) {
                  break;
               }
            case 261:
               this._DebugClassLoadingVerbose = false;
               if (initOne) {
                  break;
               }
            case 60:
               this._DebugClassRedef = false;
               if (initOne) {
                  break;
               }
            case 62:
               this._DebugClassSize = false;
               if (initOne) {
                  break;
               }
            case 89:
               this._DebugCluster = false;
               if (initOne) {
                  break;
               }
            case 91:
               this._DebugClusterAnnouncements = false;
               if (initOne) {
                  break;
               }
            case 88:
               this._DebugClusterFragments = false;
               if (initOne) {
                  break;
               }
            case 90:
               this._DebugClusterHeartbeats = false;
               if (initOne) {
                  break;
               }
            case 419:
               this._DebugCoherence = false;
               if (initOne) {
                  break;
               }
            case 395:
               this._DebugConcurrent = false;
               if (initOne) {
                  break;
               }
            case 396:
               this._DebugConcurrentContext = false;
               if (initOne) {
                  break;
               }
            case 398:
               this._DebugConcurrentMES = false;
               if (initOne) {
                  break;
               }
            case 399:
               this._DebugConcurrentMSES = false;
               if (initOne) {
                  break;
               }
            case 400:
               this._DebugConcurrentMTF = false;
               if (initOne) {
                  break;
               }
            case 397:
               this._DebugConcurrentTransaction = false;
               if (initOne) {
                  break;
               }
            case 359:
               this._DebugConfigurationEdit = false;
               if (initOne) {
                  break;
               }
            case 360:
               this._DebugConfigurationRuntime = false;
               if (initOne) {
                  break;
               }
            case 341:
               this._DebugConnectorService = false;
               if (initOne) {
                  break;
               }
            case 366:
               this._DebugConsensusLeasing = false;
               if (initOne) {
                  break;
               }
            case 96:
               this._DebugDRSCalls = false;
               if (initOne) {
                  break;
               }
            case 97:
               this._DebugDRSHeartbeats = false;
               if (initOne) {
                  break;
               }
            case 98:
               this._DebugDRSMessages = false;
               if (initOne) {
                  break;
               }
            case 101:
               this._DebugDRSQueues = false;
               if (initOne) {
                  break;
               }
            case 100:
               this._DebugDRSStateTransitions = false;
               if (initOne) {
                  break;
               }
            case 99:
               this._DebugDRSUpdateStatus = false;
               if (initOne) {
                  break;
               }
            case 420:
               this._DebugDataSourceInterceptor = false;
               if (initOne) {
                  break;
               }
            case 421:
               this._DebugDebugPatches = false;
               if (initOne) {
                  break;
               }
            case 422:
               this._DebugDefaultStoreVerbose = false;
               if (initOne) {
                  break;
               }
            case 247:
               this._DebugDeploy = false;
               if (initOne) {
                  break;
               }
            case 248:
               this._DebugDeployment = false;
               if (initOne) {
                  break;
               }
            case 249:
               this._DebugDeploymentConcise = false;
               if (initOne) {
                  break;
               }
            case 390:
               this._DebugDeploymentPlan = false;
               if (initOne) {
                  break;
               }
            case 250:
               this._DebugDeploymentService = false;
               if (initOne) {
                  break;
               }
            case 252:
               this._DebugDeploymentServiceInternal = false;
               if (initOne) {
                  break;
               }
            case 251:
               this._DebugDeploymentServiceStatusUpdates = false;
               if (initOne) {
                  break;
               }
            case 253:
               this._DebugDeploymentServiceTransport = false;
               if (initOne) {
                  break;
               }
            case 254:
               this._DebugDeploymentServiceTransportHttp = false;
               if (initOne) {
                  break;
               }
            case 387:
               this._DebugDescriptor = false;
               if (initOne) {
                  break;
               }
            case 321:
               this._DebugDiagnosticAccessor = false;
               if (initOne) {
                  break;
               }
            case 276:
               this._DebugDiagnosticArchive = false;
               if (initOne) {
                  break;
               }
            case 280:
               this._DebugDiagnosticArchiveRetirement = false;
               if (initOne) {
                  break;
               }
            case 322:
               this._DebugDiagnosticCollections = false;
               if (initOne) {
                  break;
               }
            case 323:
               this._DebugDiagnosticContext = false;
               if (initOne) {
                  break;
               }
            case 269:
               this._DebugDiagnosticDataGathering = false;
               if (initOne) {
                  break;
               }
            case 277:
               this._DebugDiagnosticFileArchive = false;
               if (initOne) {
                  break;
               }
            case 319:
               this._DebugDiagnosticImage = false;
               if (initOne) {
                  break;
               }
            case 270:
               this._DebugDiagnosticInstrumentation = false;
               if (initOne) {
                  break;
               }
            case 273:
               this._DebugDiagnosticInstrumentationActions = false;
               if (initOne) {
                  break;
               }
            case 423:
               this._DebugDiagnosticInstrumentationClassInfo = false;
               if (initOne) {
                  break;
               }
            case 275:
               this._DebugDiagnosticInstrumentationConfig = false;
               if (initOne) {
                  break;
               }
            case 274:
               this._DebugDiagnosticInstrumentationEvents = false;
               if (initOne) {
                  break;
               }
            case 424:
               this._DebugDiagnosticInstrumentationResult = false;
               if (initOne) {
                  break;
               }
            case 271:
               this._DebugDiagnosticInstrumentationWeaving = false;
               if (initOne) {
                  break;
               }
            case 272:
               this._DebugDiagnosticInstrumentationWeavingMatches = false;
               if (initOne) {
                  break;
               }
            case 279:
               this._DebugDiagnosticJdbcArchive = false;
               if (initOne) {
                  break;
               }
            case 268:
               this._DebugDiagnosticLifecycleHandlers = false;
               if (initOne) {
                  break;
               }
            case 425:
               this._DebugDiagnosticNotifications = false;
               if (initOne) {
                  break;
               }
            case 320:
               this._DebugDiagnosticQuery = false;
               if (initOne) {
                  break;
               }
            case 282:
               this._DebugDiagnosticRuntimeControlDriver = false;
               if (initOne) {
                  break;
               }
            case 283:
               this._DebugDiagnosticRuntimeControlService = false;
               if (initOne) {
                  break;
               }
            case 330:
               this._DebugDiagnosticWatch = false;
               if (initOne) {
                  break;
               }
            case 331:
               this._DebugDiagnosticWatchEvents = false;
               if (initOne) {
                  break;
               }
            case 332:
               this._DebugDiagnosticWatchEventsDetails = false;
               if (initOne) {
                  break;
               }
            case 278:
               this._DebugDiagnosticWlstoreArchive = false;
               if (initOne) {
                  break;
               }
            case 304:
               this._DebugDiagnosticsBeanExtensionResolver = false;
               if (initOne) {
                  break;
               }
            case 302:
               this._DebugDiagnosticsBeanInfoProviders = false;
               if (initOne) {
                  break;
               }
            case 307:
               this._DebugDiagnosticsELContext = false;
               if (initOne) {
                  break;
               }
            case 303:
               this._DebugDiagnosticsELResolver = false;
               if (initOne) {
                  break;
               }
            case 300:
               this._DebugDiagnosticsExpressionEvaluators = false;
               if (initOne) {
                  break;
               }
            case 310:
               this._DebugDiagnosticsExpressionFunctionMapper = false;
               if (initOne) {
                  break;
               }
            case 309:
               this._DebugDiagnosticsExpressionFunctions = false;
               if (initOne) {
                  break;
               }
            case 301:
               this._DebugDiagnosticsExpressionMetrics = false;
               if (initOne) {
                  break;
               }
            case 308:
               this._DebugDiagnosticsExpressionPoller = false;
               if (initOne) {
                  break;
               }
            case 314:
               this._DebugDiagnosticsExpressionPollerBuffer = false;
               if (initOne) {
                  break;
               }
            case 284:
               this._DebugDiagnosticsHarvester = false;
               if (initOne) {
                  break;
               }
            case 297:
               this._DebugDiagnosticsHarvesterData = false;
               if (initOne) {
                  break;
               }
            case 298:
               this._DebugDiagnosticsHarvesterMBeanPlugin = false;
               if (initOne) {
                  break;
               }
            case 299:
               this._DebugDiagnosticsHarvesterTreeBeanPlugin = false;
               if (initOne) {
                  break;
               }
            case 306:
               this._DebugDiagnosticsMBeanELResolver = false;
               if (initOne) {
                  break;
               }
            case 281:
               this._DebugDiagnosticsModule = false;
               if (initOne) {
                  break;
               }
            case 426:
               this._DebugDiagnosticsNotifications = false;
               if (initOne) {
                  break;
               }
            case 316:
               this._DebugDiagnosticsScriptAction = false;
               if (initOne) {
                  break;
               }
            case 427:
               this._DebugDiagnosticsTimer = false;
               if (initOne) {
                  break;
               }
            case 313:
               this._DebugDiagnosticsUtils = false;
               if (initOne) {
                  break;
               }
            case 305:
               this._DebugDiagnosticsValueTracingELResolver = false;
               if (initOne) {
                  break;
               }
            case 328:
               this._DebugDomainLogHandler = false;
               if (initOne) {
                  break;
               }
            case 428:
               this._DebugDomainUpgradeServerService = false;
               if (initOne) {
                  break;
               }
            case 403:
               this._DebugDynamicSingletonServices = false;
               if (initOne) {
                  break;
               }
            case 76:
               this._DebugEjbCaching = false;
               if (initOne) {
                  break;
               }
            case 83:
               this._DebugEjbCmpDeployment = false;
               if (initOne) {
                  break;
               }
            case 84:
               this._DebugEjbCmpRuntime = false;
               if (initOne) {
                  break;
               }
            case 73:
               this._DebugEjbCompilation = false;
               if (initOne) {
                  break;
               }
            case 74:
               this._DebugEjbDeployment = false;
               if (initOne) {
                  break;
               }
            case 81:
               this._DebugEjbInvoke = false;
               if (initOne) {
                  break;
               }
            case 78:
               this._DebugEjbLocking = false;
               if (initOne) {
                  break;
               }
            case 75:
               this._DebugEjbMdbConnection = false;
               if (initOne) {
                  break;
               }
            case 85:
               this._DebugEjbMetadata = false;
               if (initOne) {
                  break;
               }
            case 79:
               this._DebugEjbPooling = false;
               if (initOne) {
                  break;
               }
            case 82:
               this._DebugEjbSecurity = false;
               if (initOne) {
                  break;
               }
            case 77:
               this._DebugEjbSwapping = false;
               if (initOne) {
                  break;
               }
            case 429:
               this._DebugEjbTimerStore = false;
               if (initOne) {
                  break;
               }
            case 80:
               this._DebugEjbTimers = false;
               if (initOne) {
                  break;
               }
            case 317:
               this._DebugElasticActions = false;
               if (initOne) {
                  break;
               }
            case 318:
               this._DebugElasticServices = false;
               if (initOne) {
                  break;
               }
            case 176:
               this._DebugEmbeddedLDAP = false;
               if (initOne) {
                  break;
               }
            case 178:
               this._DebugEmbeddedLDAPLogLevel = 0;
               if (initOne) {
                  break;
               }
            case 177:
               this._DebugEmbeddedLDAPLogToConsole = false;
               if (initOne) {
                  break;
               }
            case 179:
               this._DebugEmbeddedLDAPWriteOverrideProps = false;
               if (initOne) {
                  break;
               }
            case 86:
               this._DebugEventManager = false;
               if (initOne) {
                  break;
               }
            case 311:
               this._DebugExpressionBeanLocalizer = false;
               if (initOne) {
                  break;
               }
            case 312:
               this._DebugExpressionExtensionsManager = false;
               if (initOne) {
                  break;
               }
            case 430:
               this._DebugExpressionPoller = false;
               if (initOne) {
                  break;
               }
            case 267:
               this._DebugFileDistributionServlet = false;
               if (initOne) {
                  break;
               }
            case 431:
               this._DebugFileOwnerFixer = false;
               if (initOne) {
                  break;
               }
            case 432:
               this._DebugHarvesterTypeInfoCache = false;
               if (initOne) {
                  break;
               }
            case 65:
               this._DebugHttp = false;
               if (initOne) {
                  break;
               }
            case 66:
               this._DebugHttpConcise = false;
               if (initOne) {
                  break;
               }
            case 69:
               this._DebugHttpLogging = false;
               if (initOne) {
                  break;
               }
            case 68:
               this._DebugHttpSessions = false;
               if (initOne) {
                  break;
               }
            case 434:
               this._DebugIIOPDetail = false;
               if (initOne) {
                  break;
               }
            case 364:
               this._DebugIIOPNaming = false;
               if (initOne) {
                  break;
               }
            case 435:
               this._DebugIIOPRepalcer = false;
               if (initOne) {
                  break;
               }
            case 365:
               this._DebugIIOPTunneling = false;
               if (initOne) {
                  break;
               }
            case 402:
               this._DebugInterceptors = false;
               if (initOne) {
                  break;
               }
            case 363:
               this._DebugJ2EEManagement = false;
               if (initOne) {
                  break;
               }
            case 231:
               this._DebugJAXPDebugLevel = 0;
               if (initOne) {
                  break;
               }
            case 232:
               this._DebugJAXPDebugName = null;
               if (initOne) {
                  break;
               }
            case 236:
               this._DebugJAXPIncludeClass = false;
               if (initOne) {
                  break;
               }
            case 237:
               this._DebugJAXPIncludeLocation = false;
               if (initOne) {
                  break;
               }
            case 235:
               this._DebugJAXPIncludeName = false;
               if (initOne) {
                  break;
               }
            case 234:
               this._DebugJAXPIncludeTime = false;
               if (initOne) {
                  break;
               }
            case 233:
               this._DebugJAXPOutputStream = null;
               if (initOne) {
                  break;
               }
            case 238:
               this._DebugJAXPUseShortClass = false;
               if (initOne) {
                  break;
               }
            case 202:
               this._DebugJDBCConn = false;
               if (initOne) {
                  break;
               }
            case 205:
               this._DebugJDBCDriverLogging = false;
               if (initOne) {
                  break;
               }
            case 206:
               this._DebugJDBCInternal = false;
               if (initOne) {
                  break;
               }
            case 208:
               this._DebugJDBCONS = false;
               if (initOne) {
                  break;
               }
            case 207:
               this._DebugJDBCRAC = false;
               if (initOne) {
                  break;
               }
            case 204:
               this._DebugJDBCRMI = false;
               if (initOne) {
                  break;
               }
            case 210:
               this._DebugJDBCReplay = false;
               if (initOne) {
                  break;
               }
            case 203:
               this._DebugJDBCSQL = false;
               if (initOne) {
                  break;
               }
            case 209:
               this._DebugJDBCUCP = false;
               if (initOne) {
                  break;
               }
            case 120:
               this._DebugJMSAME = false;
               if (initOne) {
                  break;
               }
            case 107:
               this._DebugJMSBackEnd = false;
               if (initOne) {
                  break;
               }
            case 117:
               this._DebugJMSBoot = false;
               if (initOne) {
                  break;
               }
            case 126:
               this._DebugJMSCDS = false;
               if (initOne) {
                  break;
               }
            case 109:
               this._DebugJMSCommon = false;
               if (initOne) {
                  break;
               }
            case 110:
               this._DebugJMSConfig = false;
               if (initOne) {
                  break;
               }
            case 436:
               this._DebugJMSCrossDomainSecurity = false;
               if (initOne) {
                  break;
               }
            case 114:
               this._DebugJMSDispatcher = false;
               if (initOne) {
                  break;
               }
            case 115:
               this._DebugJMSDispatcherProxy = false;
               if (initOne) {
                  break;
               }
            case 437:
               this._DebugJMSDispatcherUtilsVerbose = false;
               if (initOne) {
                  break;
               }
            case 438:
               this._DebugJMSDispatcherVerbose = false;
               if (initOne) {
                  break;
               }
            case 111:
               this._DebugJMSDistTopic = false;
               if (initOne) {
                  break;
               }
            case 439:
               this._DebugJMSDotNetProxy = false;
               if (initOne) {
                  break;
               }
            case 440:
               this._DebugJMSDotNetT3Server = false;
               if (initOne) {
                  break;
               }
            case 441:
               this._DebugJMSDotNetTransport = false;
               if (initOne) {
                  break;
               }
            case 442:
               this._DebugJMSDurSub = false;
               if (initOne) {
                  break;
               }
            case 118:
               this._DebugJMSDurableSubscribers = false;
               if (initOne) {
                  break;
               }
            case 108:
               this._DebugJMSFrontEnd = false;
               if (initOne) {
                  break;
               }
            case 119:
               this._DebugJMSJDBCScavengeOnFlush = false;
               if (initOne) {
                  break;
               }
            case 443:
               this._DebugJMSJNDI = false;
               if (initOne) {
                  break;
               }
            case 112:
               this._DebugJMSLocking = false;
               if (initOne) {
                  break;
               }
            case 123:
               this._DebugJMSMessagePath = false;
               if (initOne) {
                  break;
               }
            case 122:
               this._DebugJMSModule = false;
               if (initOne) {
                  break;
               }
            case 444:
               this._DebugJMSOBS = false;
               if (initOne) {
                  break;
               }
            case 121:
               this._DebugJMSPauseResume = false;
               if (initOne) {
                  break;
               }
            case 124:
               this._DebugJMSSAF = false;
               if (initOne) {
                  break;
               }
            case 116:
               this._DebugJMSStore = false;
               if (initOne) {
                  break;
               }
            case 386:
               this._DebugJMST3Server = false;
               if (initOne) {
                  break;
               }
            case 125:
               this._DebugJMSWrappers = false;
               if (initOne) {
                  break;
               }
            case 113:
               this._DebugJMSXA = false;
               if (initOne) {
                  break;
               }
            case 352:
               this._DebugJMX = false;
               if (initOne) {
                  break;
               }
            case 358:
               this._DebugJMXCompatibility = false;
               if (initOne) {
                  break;
               }
            case 445:
               this._DebugJMXContext = false;
               if (initOne) {
                  break;
               }
            case 353:
               this._DebugJMXCore = false;
               if (initOne) {
                  break;
               }
            case 354:
               this._DebugJMXCoreConcise = false;
               if (initOne) {
                  break;
               }
            case 356:
               this._DebugJMXDomain = false;
               if (initOne) {
                  break;
               }
            case 357:
               this._DebugJMXEdit = false;
               if (initOne) {
                  break;
               }
            case 355:
               this._DebugJMXRuntime = false;
               if (initOne) {
                  break;
               }
            case 102:
               this._DebugJNDI = false;
               if (initOne) {
                  break;
               }
            case 104:
               this._DebugJNDIFactories = false;
               if (initOne) {
                  break;
               }
            case 103:
               this._DebugJNDIResolution = false;
               if (initOne) {
                  break;
               }
            case 446:
               this._DebugJPA = false;
               if (initOne) {
                  break;
               }
            case 131:
               this._DebugJTA2PC = false;
               if (initOne) {
                  break;
               }
            case 447:
               this._DebugJTA2PCDetail = false;
               if (initOne) {
                  break;
               }
            case 132:
               this._DebugJTA2PCStackTrace = false;
               if (initOne) {
                  break;
               }
            case 137:
               this._DebugJTAAPI = false;
               if (initOne) {
                  break;
               }
            case 150:
               this._DebugJTACDI = false;
               if (initOne) {
                  break;
               }
            case 139:
               this._DebugJTAGateway = false;
               if (initOne) {
                  break;
               }
            case 140:
               this._DebugJTAGatewayStackTrace = false;
               if (initOne) {
                  break;
               }
            case 147:
               this._DebugJTAHealth = false;
               if (initOne) {
                  break;
               }
            case 134:
               this._DebugJTAJDBC = false;
               if (initOne) {
                  break;
               }
            case 146:
               this._DebugJTALLR = false;
               if (initOne) {
                  break;
               }
            case 145:
               this._DebugJTALifecycle = false;
               if (initOne) {
                  break;
               }
            case 144:
               this._DebugJTAMigration = false;
               if (initOne) {
                  break;
               }
            case 141:
               this._DebugJTANaming = false;
               if (initOne) {
                  break;
               }
            case 142:
               this._DebugJTANamingStackTrace = false;
               if (initOne) {
                  break;
               }
            case 128:
               this._DebugJTANonXA = false;
               if (initOne) {
                  break;
               }
            case 138:
               this._DebugJTAPropagate = false;
               if (initOne) {
                  break;
               }
            case 130:
               this._DebugJTARMI = false;
               if (initOne) {
                  break;
               }
            case 135:
               this._DebugJTARecovery = false;
               if (initOne) {
                  break;
               }
            case 136:
               this._DebugJTARecoveryStackTrace = false;
               if (initOne) {
                  break;
               }
            case 143:
               this._DebugJTAResourceHealth = false;
               if (initOne) {
                  break;
               }
            case 149:
               this._DebugJTAResourceName = null;
               if (initOne) {
                  break;
               }
            case 133:
               this._DebugJTATLOG = false;
               if (initOne) {
                  break;
               }
            case 148:
               this._DebugJTATransactionName = null;
               if (initOne) {
                  break;
               }
            case 127:
               this._DebugJTAXA = false;
               if (initOne) {
                  break;
               }
            case 129:
               this._DebugJTAXAStackTrace = false;
               if (initOne) {
                  break;
               }
            case 379:
               this._DebugJpaDataCache = false;
               if (initOne) {
                  break;
               }
            case 376:
               this._DebugJpaEnhance = false;
               if (initOne) {
                  break;
               }
            case 384:
               this._DebugJpaJdbcJdbc = false;
               if (initOne) {
                  break;
               }
            case 385:
               this._DebugJpaJdbcSchema = false;
               if (initOne) {
                  break;
               }
            case 383:
               this._DebugJpaJdbcSql = false;
               if (initOne) {
                  break;
               }
            case 381:
               this._DebugJpaManage = false;
               if (initOne) {
                  break;
               }
            case 375:
               this._DebugJpaMetaData = false;
               if (initOne) {
                  break;
               }
            case 382:
               this._DebugJpaProfile = false;
               if (initOne) {
                  break;
               }
            case 378:
               this._DebugJpaQuery = false;
               if (initOne) {
                  break;
               }
            case 377:
               this._DebugJpaRuntime = false;
               if (initOne) {
                  break;
               }
            case 380:
               this._DebugJpaTool = false;
               if (initOne) {
                  break;
               }
            case 448:
               this._DebugKodoWeblogic = false;
               if (initOne) {
                  break;
               }
            case 95:
               this._DebugLeaderElection = false;
               if (initOne) {
                  break;
               }
            case 449:
               this._DebugLegacy = false;
               if (initOne) {
                  break;
               }
            case 58:
               this._DebugLibraries = false;
               if (initOne) {
                  break;
               }
            case 151:
               this._DebugLifecycleManager = false;
               if (initOne) {
                  break;
               }
            case 329:
               this._DebugLoggingConfiguration = false;
               if (initOne) {
                  break;
               }
            case 450:
               this._DebugMBeanCIC = false;
               if (initOne) {
                  break;
               }
            case 451:
               this._DebugMBeanEventHandler = false;
               if (initOne) {
                  break;
               }
            case 452:
               this._DebugMBeanEventHandlerSummary = false;
               if (initOne) {
                  break;
               }
            case 453:
               this._DebugMBeanEventHandlerWork = false;
               if (initOne) {
                  break;
               }
            case 285:
               this._DebugMBeanHarvesterControl = false;
               if (initOne) {
                  break;
               }
            case 287:
               this._DebugMBeanHarvesterDataCollection = false;
               if (initOne) {
                  break;
               }
            case 286:
               this._DebugMBeanHarvesterResolution = false;
               if (initOne) {
                  break;
               }
            case 288:
               this._DebugMBeanHarvesterThreading = false;
               if (initOne) {
                  break;
               }
            case 454:
               this._DebugMBeanLocalization = false;
               if (initOne) {
                  break;
               }
            case 294:
               this._DebugMBeanTypeUtilQueue = false;
               if (initOne) {
                  break;
               }
            case 295:
               this._DebugMBeanTypeUtilQueuePriority = false;
               if (initOne) {
                  break;
               }
            case 293:
               this._DebugMBeanTypeUtilityListener = false;
               if (initOne) {
                  break;
               }
            case 296:
               this._DebugMBeanTypingUtility = false;
               if (initOne) {
                  break;
               }
            case 455:
               this._DebugMailSessionDeployment = false;
               if (initOne) {
                  break;
               }
            case 456:
               this._DebugManagedBean = false;
               if (initOne) {
                  break;
               }
            case 389:
               this._DebugManagementServicesResource = false;
               if (initOne) {
                  break;
               }
            case 42:
               this._DebugMaskCriterias = new String[0];
               if (initOne) {
                  break;
               }
            case 215:
               this._DebugMessagingBridgeDumpToConsole = false;
               if (initOne) {
                  break;
               }
            case 214:
               this._DebugMessagingBridgeDumpToLog = false;
               if (initOne) {
                  break;
               }
            case 212:
               this._DebugMessagingBridgeRuntime = false;
               if (initOne) {
                  break;
               }
            case 213:
               this._DebugMessagingBridgeRuntimeVerbose = false;
               if (initOne) {
                  break;
               }
            case 211:
               this._DebugMessagingBridgeStartup = false;
               if (initOne) {
                  break;
               }
            case 152:
               this._DebugMessagingKernel = false;
               if (initOne) {
                  break;
               }
            case 153:
               this._DebugMessagingKernelBoot = false;
               if (initOne) {
                  break;
               }
            case 154:
               this._DebugMessagingOwnableLock = false;
               if (initOne) {
                  break;
               }
            case 457:
               this._DebugMigrationInfo = false;
               if (initOne) {
                  break;
               }
            case 458:
               this._DebugNIO = false;
               if (initOne) {
                  break;
               }
            case 408:
               this._DebugNodeManagerRuntime = false;
               if (initOne) {
                  break;
               }
            case 459:
               this._DebugPageFlowMonitoring = false;
               if (initOne) {
                  break;
               }
            case 460:
               this._DebugPartitionJMX = false;
               if (initOne) {
                  break;
               }
            case 461:
               this._DebugPartitionLifecycle = false;
               if (initOne) {
                  break;
               }
            case 462:
               this._DebugPartitionPortability = false;
               if (initOne) {
                  break;
               }
            case 333:
               this._DebugPartitionResourceMetricsRuntime = false;
               if (initOne) {
                  break;
               }
            case 362:
               this._DebugPatchingRuntime = false;
               if (initOne) {
                  break;
               }
            case 164:
               this._DebugPathSvc = false;
               if (initOne) {
                  break;
               }
            case 165:
               this._DebugPathSvcVerbose = false;
               if (initOne) {
                  break;
               }
            case 463:
               this._DebugPersistentStoreManager = false;
               if (initOne) {
                  break;
               }
            case 464:
               this._DebugPubSubBayeux = false;
               if (initOne) {
                  break;
               }
            case 465:
               this._DebugPubSubChannel = false;
               if (initOne) {
                  break;
               }
            case 466:
               this._DebugPubSubClient = false;
               if (initOne) {
                  break;
               }
            case 467:
               this._DebugPubSubSecurity = false;
               if (initOne) {
                  break;
               }
            case 468:
               this._DebugPubSubServer = false;
               if (initOne) {
                  break;
               }
            case 335:
               this._DebugRA = false;
               if (initOne) {
                  break;
               }
            case 350:
               this._DebugRAClassloader = false;
               if (initOne) {
                  break;
               }
            case 347:
               this._DebugRAConnEvents = false;
               if (initOne) {
                  break;
               }
            case 346:
               this._DebugRAConnections = false;
               if (initOne) {
                  break;
               }
            case 342:
               this._DebugRADeployment = false;
               if (initOne) {
                  break;
               }
            case 340:
               this._DebugRALifecycle = false;
               if (initOne) {
                  break;
               }
            case 339:
               this._DebugRALocalOut = false;
               if (initOne) {
                  break;
               }
            case 343:
               this._DebugRAParsing = false;
               if (initOne) {
                  break;
               }
            case 334:
               this._DebugRAPoolVerbose = false;
               if (initOne) {
                  break;
               }
            case 345:
               this._DebugRAPooling = false;
               if (initOne) {
                  break;
               }
            case 344:
               this._DebugRASecurityCtx = false;
               if (initOne) {
                  break;
               }
            case 348:
               this._DebugRAWork = false;
               if (initOne) {
                  break;
               }
            case 349:
               this._DebugRAWorkEvents = false;
               if (initOne) {
                  break;
               }
            case 336:
               this._DebugRAXAin = false;
               if (initOne) {
                  break;
               }
            case 337:
               this._DebugRAXAout = false;
               if (initOne) {
                  break;
               }
            case 338:
               this._DebugRAXAwork = false;
               if (initOne) {
                  break;
               }
            case 404:
               this._DebugRCM = false;
               if (initOne) {
                  break;
               }
            case 315:
               this._DebugRESTNotifications = false;
               if (initOne) {
                  break;
               }
            case 469:
               this._DebugRMIDetailed = false;
               if (initOne) {
                  break;
               }
            case 56:
               this._DebugRMIRequestPerf = false;
               if (initOne) {
                  break;
               }
            case 401:
               this._DebugReadyApp = false;
               if (initOne) {
                  break;
               }
            case 470:
               this._DebugRedefAttach = false;
               if (initOne) {
                  break;
               }
            case 92:
               this._DebugReplication = false;
               if (initOne) {
                  break;
               }
            case 93:
               this._DebugReplicationDetails = false;
               if (initOne) {
                  break;
               }
            case 391:
               this._DebugReplicationSize = false;
               if (initOne) {
                  break;
               }
            case 471:
               this._DebugRequestManager = false;
               if (initOne) {
                  break;
               }
            case 472:
               this._DebugResourceGroupMigration = false;
               if (initOne) {
                  break;
               }
            case 406:
               this._DebugRestJersey1Integration = false;
               if (initOne) {
                  break;
               }
            case 407:
               this._DebugRestJersey2Integration = false;
               if (initOne) {
                  break;
               }
            case 433:
               this._DebugRestartInPlace = false;
               if (initOne) {
                  break;
               }
            case 156:
               this._DebugSAFAdmin = false;
               if (initOne) {
                  break;
               }
            case 155:
               this._DebugSAFLifeCycle = false;
               if (initOne) {
                  break;
               }
            case 157:
               this._DebugSAFManager = false;
               if (initOne) {
                  break;
               }
            case 161:
               this._DebugSAFMessagePath = false;
               if (initOne) {
                  break;
               }
            case 159:
               this._DebugSAFReceivingAgent = false;
               if (initOne) {
                  break;
               }
            case 158:
               this._DebugSAFSendingAgent = false;
               if (initOne) {
                  break;
               }
            case 162:
               this._DebugSAFStore = false;
               if (initOne) {
                  break;
               }
            case 160:
               this._DebugSAFTransport = false;
               if (initOne) {
                  break;
               }
            case 163:
               this._DebugSAFVerbose = false;
               if (initOne) {
                  break;
               }
            case 325:
               this._DebugSNMPAgent = false;
               if (initOne) {
                  break;
               }
            case 327:
               this._DebugSNMPExtensionProvider = false;
               if (initOne) {
                  break;
               }
            case 473:
               this._DebugSNMPMib = false;
               if (initOne) {
                  break;
               }
            case 326:
               this._DebugSNMPProtocolTCP = false;
               if (initOne) {
                  break;
               }
            case 324:
               this._DebugSNMPToolkit = false;
               if (initOne) {
                  break;
               }
            case 166:
               this._DebugScaContainer = false;
               if (initOne) {
                  break;
               }
            case 474:
               this._DebugScrubberStartService = false;
               if (initOne) {
                  break;
               }
            case 168:
               this._DebugSecurity = false;
               if (initOne) {
                  break;
               }
            case 180:
               this._DebugSecurityAdjudicator = false;
               if (initOne) {
                  break;
               }
            case 181:
               this._DebugSecurityAtn = false;
               if (initOne) {
                  break;
               }
            case 182:
               this._DebugSecurityAtz = false;
               if (initOne) {
                  break;
               }
            case 183:
               this._DebugSecurityAuditor = false;
               if (initOne) {
                  break;
               }
            case 187:
               this._DebugSecurityCertPath = false;
               if (initOne) {
                  break;
               }
            case 184:
               this._DebugSecurityCredMap = false;
               if (initOne) {
                  break;
               }
            case 190:
               this._DebugSecurityEEngine = false;
               if (initOne) {
                  break;
               }
            case 185:
               this._DebugSecurityEncryptionService = false;
               if (initOne) {
                  break;
               }
            case 191:
               this._DebugSecurityJACC = false;
               if (initOne) {
                  break;
               }
            case 192:
               this._DebugSecurityJACCNonPolicy = false;
               if (initOne) {
                  break;
               }
            case 193:
               this._DebugSecurityJACCPolicy = false;
               if (initOne) {
                  break;
               }
            case 186:
               this._DebugSecurityKeyStore = false;
               if (initOne) {
                  break;
               }
            case 169:
               this._DebugSecurityPasswordPolicy = false;
               if (initOne) {
                  break;
               }
            case 172:
               this._DebugSecurityPredicate = false;
               if (initOne) {
                  break;
               }
            case 188:
               this._DebugSecurityProfiler = false;
               if (initOne) {
                  break;
               }
            case 167:
               this._DebugSecurityRealm = false;
               if (initOne) {
                  break;
               }
            case 189:
               this._DebugSecurityRoleMap = false;
               if (initOne) {
                  break;
               }
            case 199:
               this._DebugSecuritySAML2Atn = false;
               if (initOne) {
                  break;
               }
            case 200:
               this._DebugSecuritySAML2CredMap = false;
               if (initOne) {
                  break;
               }
            case 198:
               this._DebugSecuritySAML2Lib = false;
               if (initOne) {
                  break;
               }
            case 201:
               this._DebugSecuritySAML2Service = false;
               if (initOne) {
                  break;
               }
            case 195:
               this._DebugSecuritySAMLAtn = false;
               if (initOne) {
                  break;
               }
            case 196:
               this._DebugSecuritySAMLCredMap = false;
               if (initOne) {
                  break;
               }
            case 194:
               this._DebugSecuritySAMLLib = false;
               if (initOne) {
                  break;
               }
            case 197:
               this._DebugSecuritySAMLService = false;
               if (initOne) {
                  break;
               }
            case 173:
               this._DebugSecuritySSL = false;
               if (initOne) {
                  break;
               }
            case 174:
               this._DebugSecuritySSLEaten = false;
               if (initOne) {
                  break;
               }
            case 171:
               this._DebugSecurityService = false;
               if (initOne) {
                  break;
               }
            case 170:
               this._DebugSecurityUserLockout = false;
               if (initOne) {
                  break;
               }
            case 38:
               this._DebugSelfTuning = false;
               if (initOne) {
                  break;
               }
            case 367:
               this._DebugServerLifeCycle = false;
               if (initOne) {
                  break;
               }
            case 87:
               this._DebugServerMigration = false;
               if (initOne) {
                  break;
               }
            case 475:
               this._DebugServerRuntime = false;
               if (initOne) {
                  break;
               }
            case 476:
               this._DebugServerShutdownStatistics = false;
               if (initOne) {
                  break;
               }
            case 477:
               this._DebugServerShutdownTimer = false;
               if (initOne) {
                  break;
               }
            case 388:
               this._DebugServerStartStatistics = false;
               if (initOne) {
                  break;
               }
            case 478:
               this._DebugServerStartupTimer = false;
               if (initOne) {
                  break;
               }
            case 479:
               this._DebugSingletonServices = false;
               if (initOne) {
                  break;
               }
            case 361:
               this._DebugSituationalConfig = false;
               if (initOne) {
                  break;
               }
            case 480:
               this._DebugSpringStatistics = false;
               if (initOne) {
                  break;
               }
            case 481:
               this._DebugStore = false;
               if (initOne) {
                  break;
               }
            case 222:
               this._DebugStoreAdmin = false;
               if (initOne) {
                  break;
               }
            case 482:
               this._DebugStoreCache = false;
               if (initOne) {
                  break;
               }
            case 216:
               this._DebugStoreIOLogical = false;
               if (initOne) {
                  break;
               }
            case 217:
               this._DebugStoreIOLogicalBoot = false;
               if (initOne) {
                  break;
               }
            case 218:
               this._DebugStoreIOPhysical = false;
               if (initOne) {
                  break;
               }
            case 219:
               this._DebugStoreIOPhysicalVerbose = false;
               if (initOne) {
                  break;
               }
            case 483:
               this._DebugStoreRCM = false;
               if (initOne) {
                  break;
               }
            case 484:
               this._DebugStoreRCMVerbose = false;
               if (initOne) {
                  break;
               }
            case 220:
               this._DebugStoreXA = false;
               if (initOne) {
                  break;
               }
            case 221:
               this._DebugStoreXAVerbose = false;
               if (initOne) {
                  break;
               }
            case 485:
               this._DebugStubGeneration = false;
               if (initOne) {
                  break;
               }
            case 106:
               this._DebugTunnelingConnection = false;
               if (initOne) {
                  break;
               }
            case 105:
               this._DebugTunnelingConnectionTimeout = false;
               if (initOne) {
                  break;
               }
            case 67:
               this._DebugURLResolution = false;
               if (initOne) {
                  break;
               }
            case 486:
               this._DebugUnicastMessaging = false;
               if (initOne) {
                  break;
               }
            case 487:
               this._DebugValidation = false;
               if (initOne) {
                  break;
               }
            case 488:
               this._DebugValidationClassLoading = false;
               if (initOne) {
                  break;
               }
            case 405:
               this._DebugVerboseRCM = false;
               if (initOne) {
                  break;
               }
            case 351:
               this._DebugWANReplicationDetails = false;
               if (initOne) {
                  break;
               }
            case 368:
               this._DebugWTCConfig = false;
               if (initOne) {
                  break;
               }
            case 373:
               this._DebugWTCCorbaEx = false;
               if (initOne) {
                  break;
               }
            case 371:
               this._DebugWTCGwtEx = false;
               if (initOne) {
                  break;
               }
            case 372:
               this._DebugWTCJatmiEx = false;
               if (initOne) {
                  break;
               }
            case 369:
               this._DebugWTCTDomPdu = false;
               if (initOne) {
                  break;
               }
            case 489:
               this._DebugWTCTdomPdu = false;
               if (initOne) {
                  break;
               }
            case 370:
               this._DebugWTCUData = false;
               if (initOne) {
                  break;
               }
            case 374:
               this._DebugWTCtBridgeEx = false;
               if (initOne) {
                  break;
               }
            case 490:
               this._DebugWatchScalingActions = false;
               if (initOne) {
                  break;
               }
            case 491:
               this._DebugWebAppDI = false;
               if (initOne) {
                  break;
               }
            case 70:
               this._DebugWebAppIdentityAssertion = false;
               if (initOne) {
                  break;
               }
            case 72:
               this._DebugWebAppModule = false;
               if (initOne) {
                  break;
               }
            case 71:
               this._DebugWebAppSecurity = false;
               if (initOne) {
                  break;
               }
            case 492:
               this._DebugWebSocket = false;
               if (initOne) {
                  break;
               }
            case 239:
               this._DebugXMLEntityCacheDebugLevel = 0;
               if (initOne) {
                  break;
               }
            case 240:
               this._DebugXMLEntityCacheDebugName = null;
               if (initOne) {
                  break;
               }
            case 244:
               this._DebugXMLEntityCacheIncludeClass = false;
               if (initOne) {
                  break;
               }
            case 245:
               this._DebugXMLEntityCacheIncludeLocation = false;
               if (initOne) {
                  break;
               }
            case 243:
               this._DebugXMLEntityCacheIncludeName = false;
               if (initOne) {
                  break;
               }
            case 242:
               this._DebugXMLEntityCacheIncludeTime = false;
               if (initOne) {
                  break;
               }
            case 241:
               this._DebugXMLEntityCacheOutputStream = null;
               if (initOne) {
                  break;
               }
            case 246:
               this._DebugXMLEntityCacheUseShortClass = false;
               if (initOne) {
                  break;
               }
            case 223:
               this._DebugXMLRegistryDebugLevel = 0;
               if (initOne) {
                  break;
               }
            case 224:
               this._DebugXMLRegistryDebugName = null;
               if (initOne) {
                  break;
               }
            case 228:
               this._DebugXMLRegistryIncludeClass = false;
               if (initOne) {
                  break;
               }
            case 229:
               this._DebugXMLRegistryIncludeLocation = false;
               if (initOne) {
                  break;
               }
            case 227:
               this._DebugXMLRegistryIncludeName = false;
               if (initOne) {
                  break;
               }
            case 226:
               this._DebugXMLRegistryIncludeTime = false;
               if (initOne) {
                  break;
               }
            case 225:
               this._DebugXMLRegistryOutputStream = null;
               if (initOne) {
                  break;
               }
            case 230:
               this._DebugXMLRegistryUseShortClass = false;
               if (initOne) {
                  break;
               }
            case 63:
               this._DefaultStore = false;
               if (initOne) {
                  break;
               }
            case 41:
               this._DiagnosticContextDebugMode = "Off";
               if (initOne) {
                  break;
               }
            case 54:
               this._ForceShutdownTimeoutNumOfThreadDump = 0;
               if (initOne) {
                  break;
               }
            case 55:
               this._ForceShutdownTimeoutThreadDumpInterval = 60000;
               if (initOne) {
                  break;
               }
            case 493:
               this._GlassFishWebAppParser = false;
               if (initOne) {
                  break;
               }
            case 52:
               this._GracefulShutdownTimeoutNumOfThreadDump = 0;
               if (initOne) {
                  break;
               }
            case 53:
               this._GracefulShutdownTimeoutThreadDumpInterval = 60000;
               if (initOne) {
                  break;
               }
            case 44:
               this._ListenThreadDebug = false;
               if (initOne) {
                  break;
               }
            case 48:
               this._MagicThreadDumpBackToSocket = false;
               if (initOne) {
                  break;
               }
            case 47:
               this._MagicThreadDumpFile = "debugMagicThreadDumpFile";
               if (initOne) {
                  break;
               }
            case 46:
               this._MagicThreadDumpHost = "localhost";
               if (initOne) {
                  break;
               }
            case 255:
               this._MasterDeployer = false;
               if (initOne) {
                  break;
               }
            case 494:
               this._OSGiForApps = false;
               if (initOne) {
                  break;
               }
            case 495:
               this._PartitionEvenInterceptor = false;
               if (initOne) {
                  break;
               }
            case 496:
               this._PortablePartitionHelper = false;
               if (initOne) {
                  break;
               }
            case 61:
               this._RedefiningClassLoader = false;
               if (initOne) {
                  break;
               }
            case 497:
               this._ScriptExecutorCommand = false;
               if (initOne) {
                  break;
               }
            case 498:
               this._SecurityEncryptionService = false;
               if (initOne) {
                  break;
               }
            case 43:
               this._Server = null;
               if (initOne) {
                  break;
               }
            case 256:
               this._SlaveDeployer = false;
               if (initOne) {
                  break;
               }
            case 50:
               this._StartupTimeoutNumOfThreadDump = 0;
               if (initOne) {
                  break;
               }
            case 51:
               this._StartupTimeoutThreadDumpInterval = 60000;
               if (initOne) {
                  break;
               }
            case 499:
               this._T3HttpUpgradeHandler = false;
               if (initOne) {
                  break;
               }
            case 500:
               this._WarExtraction = false;
               if (initOne) {
                  break;
               }
            case 260:
               this._WebModule = false;
               if (initOne) {
                  break;
               }
            case 45:
               this._MagicThreadDumpEnabled = false;
               if (initOne) {
                  break;
               }
            case 40:
               this._PartitionDebugLoggingEnabled = false;
               if (initOne) {
                  break;
               }
            case 39:
            default:
               if (initOne) {
                  return false;
               }
         }

         return true;
      } catch (RuntimeException var4) {
         throw var4;
      } catch (Exception var5) {
         throw (Error)(new AssertionError("Impossible Exception")).initCause(var5);
      }
   }

   public Munger.SchemaHelper _getSchemaHelper() {
      return null;
   }

   public String _getElementName(int propIndex) {
      return this._getSchemaHelper2().getElementName(propIndex);
   }

   protected String getSchemaLocation() {
      return "http://xmlns.oracle.com/weblogic/1.0/domain.xsd";
   }

   protected String getTargetNamespace() {
      return "http://xmlns.oracle.com/weblogic/domain";
   }

   public SchemaHelper _getSchemaHelper2() {
      if (_schemaHelper == null) {
         _schemaHelper = new SchemaHelper2();
      }

      return _schemaHelper;
   }

   public String getType() {
      return "ServerDebug";
   }

   public void putValue(String name, Object v) {
      boolean oldVal;
      if (name.equals("ApplicationContainer")) {
         oldVal = this._ApplicationContainer;
         this._ApplicationContainer = (Boolean)v;
         this._postSet(257, oldVal, this._ApplicationContainer);
      } else {
         String oldVal;
         if (name.equals("BugReportServiceWsdlUrl")) {
            oldVal = this._BugReportServiceWsdlUrl;
            this._BugReportServiceWsdlUrl = (String)v;
            this._postSet(49, oldVal, this._BugReportServiceWsdlUrl);
         } else if (name.equals("ClassChangeNotifier")) {
            oldVal = this._ClassChangeNotifier;
            this._ClassChangeNotifier = (Boolean)v;
            this._postSet(64, oldVal, this._ClassChangeNotifier);
         } else if (name.equals("ClassFinder")) {
            oldVal = this._ClassFinder;
            this._ClassFinder = (Boolean)v;
            this._postSet(258, oldVal, this._ClassFinder);
         } else if (name.equals("ClassLoader")) {
            oldVal = this._ClassLoader;
            this._ClassLoader = (Boolean)v;
            this._postSet(263, oldVal, this._ClassLoader);
         } else if (name.equals("ClassLoaderVerbose")) {
            oldVal = this._ClassLoaderVerbose;
            this._ClassLoaderVerbose = (Boolean)v;
            this._postSet(264, oldVal, this._ClassLoaderVerbose);
         } else if (name.equals("ClassloaderWebApp")) {
            oldVal = this._ClassloaderWebApp;
            this._ClassloaderWebApp = (Boolean)v;
            this._postSet(265, oldVal, this._ClassloaderWebApp);
         } else if (name.equals("ClasspathServlet")) {
            oldVal = this._ClasspathServlet;
            this._ClasspathServlet = (Boolean)v;
            this._postSet(259, oldVal, this._ClasspathServlet);
         } else if (name.equals("DebugAbbrevs")) {
            oldVal = this._DebugAbbrevs;
            this._DebugAbbrevs = (Boolean)v;
            this._postSet(409, oldVal, this._DebugAbbrevs);
         } else if (name.equals("DebugAppAnnotations")) {
            oldVal = this._DebugAppAnnotations;
            this._DebugAppAnnotations = (Boolean)v;
            this._postSet(59, oldVal, this._DebugAppAnnotations);
         } else if (name.equals("DebugAppClient")) {
            oldVal = this._DebugAppClient;
            this._DebugAppClient = (Boolean)v;
            this._postSet(410, oldVal, this._DebugAppClient);
         } else if (name.equals("DebugAppContainer")) {
            oldVal = this._DebugAppContainer;
            this._DebugAppContainer = (Boolean)v;
            this._postSet(57, oldVal, this._DebugAppContainer);
         } else if (name.equals("DebugAppContainerTools")) {
            oldVal = this._DebugAppContainerTools;
            this._DebugAppContainerTools = (Boolean)v;
            this._postSet(411, oldVal, this._DebugAppContainerTools);
         } else if (name.equals("DebugAppTiming")) {
            oldVal = this._DebugAppTiming;
            this._DebugAppTiming = (Boolean)v;
            this._postSet(412, oldVal, this._DebugAppTiming);
         } else if (name.equals("DebugAsyncQueue")) {
            oldVal = this._DebugAsyncQueue;
            this._DebugAsyncQueue = (Boolean)v;
            this._postSet(94, oldVal, this._DebugAsyncQueue);
         } else if (name.equals("DebugAttach")) {
            oldVal = this._DebugAttach;
            this._DebugAttach = (Boolean)v;
            this._postSet(413, oldVal, this._DebugAttach);
         } else if (name.equals("DebugBackgroundDeployment")) {
            oldVal = this._DebugBackgroundDeployment;
            this._DebugBackgroundDeployment = (Boolean)v;
            this._postSet(414, oldVal, this._DebugBackgroundDeployment);
         } else if (name.equals("DebugBatchConnector")) {
            oldVal = this._DebugBatchConnector;
            this._DebugBatchConnector = (Boolean)v;
            this._postSet(415, oldVal, this._DebugBatchConnector);
         } else if (name.equals("DebugBeanTreeHarvesterControl")) {
            oldVal = this._DebugBeanTreeHarvesterControl;
            this._DebugBeanTreeHarvesterControl = (Boolean)v;
            this._postSet(289, oldVal, this._DebugBeanTreeHarvesterControl);
         } else if (name.equals("DebugBeanTreeHarvesterDataCollection")) {
            oldVal = this._DebugBeanTreeHarvesterDataCollection;
            this._DebugBeanTreeHarvesterDataCollection = (Boolean)v;
            this._postSet(291, oldVal, this._DebugBeanTreeHarvesterDataCollection);
         } else if (name.equals("DebugBeanTreeHarvesterResolution")) {
            oldVal = this._DebugBeanTreeHarvesterResolution;
            this._DebugBeanTreeHarvesterResolution = (Boolean)v;
            this._postSet(290, oldVal, this._DebugBeanTreeHarvesterResolution);
         } else if (name.equals("DebugBeanTreeHarvesterThreading")) {
            oldVal = this._DebugBeanTreeHarvesterThreading;
            this._DebugBeanTreeHarvesterThreading = (Boolean)v;
            this._postSet(292, oldVal, this._DebugBeanTreeHarvesterThreading);
         } else if (name.equals("DebugBootstrapServlet")) {
            oldVal = this._DebugBootstrapServlet;
            this._DebugBootstrapServlet = (Boolean)v;
            this._postSet(266, oldVal, this._DebugBootstrapServlet);
         } else if (name.equals("DebugBuzzProtocol")) {
            oldVal = this._DebugBuzzProtocol;
            this._DebugBuzzProtocol = (Boolean)v;
            this._postSet(392, oldVal, this._DebugBuzzProtocol);
         } else if (name.equals("DebugBuzzProtocolDetails")) {
            oldVal = this._DebugBuzzProtocolDetails;
            this._DebugBuzzProtocolDetails = (Boolean)v;
            this._postSet(393, oldVal, this._DebugBuzzProtocolDetails);
         } else if (name.equals("DebugBuzzProtocolHttp")) {
            oldVal = this._DebugBuzzProtocolHttp;
            this._DebugBuzzProtocolHttp = (Boolean)v;
            this._postSet(394, oldVal, this._DebugBuzzProtocolHttp);
         } else if (name.equals("DebugCAT")) {
            oldVal = this._DebugCAT;
            this._DebugCAT = (Boolean)v;
            this._postSet(416, oldVal, this._DebugCAT);
         } else if (name.equals("DebugCertRevocCheck")) {
            oldVal = this._DebugCertRevocCheck;
            this._DebugCertRevocCheck = (Boolean)v;
            this._postSet(175, oldVal, this._DebugCertRevocCheck);
         } else if (name.equals("DebugChannel")) {
            oldVal = this._DebugChannel;
            this._DebugChannel = (Boolean)v;
            this._postSet(417, oldVal, this._DebugChannel);
         } else if (name.equals("DebugClassLoadingConsistencyChecker")) {
            oldVal = this._DebugClassLoadingConsistencyChecker;
            this._DebugClassLoadingConsistencyChecker = (Boolean)v;
            this._postSet(418, oldVal, this._DebugClassLoadingConsistencyChecker);
         } else if (name.equals("DebugClassLoadingContextualTrace")) {
            oldVal = this._DebugClassLoadingContextualTrace;
            this._DebugClassLoadingContextualTrace = (Boolean)v;
            this._postSet(262, oldVal, this._DebugClassLoadingContextualTrace);
         } else if (name.equals("DebugClassLoadingVerbose")) {
            oldVal = this._DebugClassLoadingVerbose;
            this._DebugClassLoadingVerbose = (Boolean)v;
            this._postSet(261, oldVal, this._DebugClassLoadingVerbose);
         } else if (name.equals("DebugClassRedef")) {
            oldVal = this._DebugClassRedef;
            this._DebugClassRedef = (Boolean)v;
            this._postSet(60, oldVal, this._DebugClassRedef);
         } else if (name.equals("DebugClassSize")) {
            oldVal = this._DebugClassSize;
            this._DebugClassSize = (Boolean)v;
            this._postSet(62, oldVal, this._DebugClassSize);
         } else if (name.equals("DebugCluster")) {
            oldVal = this._DebugCluster;
            this._DebugCluster = (Boolean)v;
            this._postSet(89, oldVal, this._DebugCluster);
         } else if (name.equals("DebugClusterAnnouncements")) {
            oldVal = this._DebugClusterAnnouncements;
            this._DebugClusterAnnouncements = (Boolean)v;
            this._postSet(91, oldVal, this._DebugClusterAnnouncements);
         } else if (name.equals("DebugClusterFragments")) {
            oldVal = this._DebugClusterFragments;
            this._DebugClusterFragments = (Boolean)v;
            this._postSet(88, oldVal, this._DebugClusterFragments);
         } else if (name.equals("DebugClusterHeartbeats")) {
            oldVal = this._DebugClusterHeartbeats;
            this._DebugClusterHeartbeats = (Boolean)v;
            this._postSet(90, oldVal, this._DebugClusterHeartbeats);
         } else if (name.equals("DebugCoherence")) {
            oldVal = this._DebugCoherence;
            this._DebugCoherence = (Boolean)v;
            this._postSet(419, oldVal, this._DebugCoherence);
         } else if (name.equals("DebugConcurrent")) {
            oldVal = this._DebugConcurrent;
            this._DebugConcurrent = (Boolean)v;
            this._postSet(395, oldVal, this._DebugConcurrent);
         } else if (name.equals("DebugConcurrentContext")) {
            oldVal = this._DebugConcurrentContext;
            this._DebugConcurrentContext = (Boolean)v;
            this._postSet(396, oldVal, this._DebugConcurrentContext);
         } else if (name.equals("DebugConcurrentMES")) {
            oldVal = this._DebugConcurrentMES;
            this._DebugConcurrentMES = (Boolean)v;
            this._postSet(398, oldVal, this._DebugConcurrentMES);
         } else if (name.equals("DebugConcurrentMSES")) {
            oldVal = this._DebugConcurrentMSES;
            this._DebugConcurrentMSES = (Boolean)v;
            this._postSet(399, oldVal, this._DebugConcurrentMSES);
         } else if (name.equals("DebugConcurrentMTF")) {
            oldVal = this._DebugConcurrentMTF;
            this._DebugConcurrentMTF = (Boolean)v;
            this._postSet(400, oldVal, this._DebugConcurrentMTF);
         } else if (name.equals("DebugConcurrentTransaction")) {
            oldVal = this._DebugConcurrentTransaction;
            this._DebugConcurrentTransaction = (Boolean)v;
            this._postSet(397, oldVal, this._DebugConcurrentTransaction);
         } else if (name.equals("DebugConfigurationEdit")) {
            oldVal = this._DebugConfigurationEdit;
            this._DebugConfigurationEdit = (Boolean)v;
            this._postSet(359, oldVal, this._DebugConfigurationEdit);
         } else if (name.equals("DebugConfigurationRuntime")) {
            oldVal = this._DebugConfigurationRuntime;
            this._DebugConfigurationRuntime = (Boolean)v;
            this._postSet(360, oldVal, this._DebugConfigurationRuntime);
         } else if (name.equals("DebugConnectorService")) {
            oldVal = this._DebugConnectorService;
            this._DebugConnectorService = (Boolean)v;
            this._postSet(341, oldVal, this._DebugConnectorService);
         } else if (name.equals("DebugConsensusLeasing")) {
            oldVal = this._DebugConsensusLeasing;
            this._DebugConsensusLeasing = (Boolean)v;
            this._postSet(366, oldVal, this._DebugConsensusLeasing);
         } else if (name.equals("DebugDRSCalls")) {
            oldVal = this._DebugDRSCalls;
            this._DebugDRSCalls = (Boolean)v;
            this._postSet(96, oldVal, this._DebugDRSCalls);
         } else if (name.equals("DebugDRSHeartbeats")) {
            oldVal = this._DebugDRSHeartbeats;
            this._DebugDRSHeartbeats = (Boolean)v;
            this._postSet(97, oldVal, this._DebugDRSHeartbeats);
         } else if (name.equals("DebugDRSMessages")) {
            oldVal = this._DebugDRSMessages;
            this._DebugDRSMessages = (Boolean)v;
            this._postSet(98, oldVal, this._DebugDRSMessages);
         } else if (name.equals("DebugDRSQueues")) {
            oldVal = this._DebugDRSQueues;
            this._DebugDRSQueues = (Boolean)v;
            this._postSet(101, oldVal, this._DebugDRSQueues);
         } else if (name.equals("DebugDRSStateTransitions")) {
            oldVal = this._DebugDRSStateTransitions;
            this._DebugDRSStateTransitions = (Boolean)v;
            this._postSet(100, oldVal, this._DebugDRSStateTransitions);
         } else if (name.equals("DebugDRSUpdateStatus")) {
            oldVal = this._DebugDRSUpdateStatus;
            this._DebugDRSUpdateStatus = (Boolean)v;
            this._postSet(99, oldVal, this._DebugDRSUpdateStatus);
         } else if (name.equals("DebugDataSourceInterceptor")) {
            oldVal = this._DebugDataSourceInterceptor;
            this._DebugDataSourceInterceptor = (Boolean)v;
            this._postSet(420, oldVal, this._DebugDataSourceInterceptor);
         } else if (name.equals("DebugDebugPatches")) {
            oldVal = this._DebugDebugPatches;
            this._DebugDebugPatches = (Boolean)v;
            this._postSet(421, oldVal, this._DebugDebugPatches);
         } else if (name.equals("DebugDefaultStoreVerbose")) {
            oldVal = this._DebugDefaultStoreVerbose;
            this._DebugDefaultStoreVerbose = (Boolean)v;
            this._postSet(422, oldVal, this._DebugDefaultStoreVerbose);
         } else if (name.equals("DebugDeploy")) {
            oldVal = this._DebugDeploy;
            this._DebugDeploy = (Boolean)v;
            this._postSet(247, oldVal, this._DebugDeploy);
         } else if (name.equals("DebugDeployment")) {
            oldVal = this._DebugDeployment;
            this._DebugDeployment = (Boolean)v;
            this._postSet(248, oldVal, this._DebugDeployment);
         } else if (name.equals("DebugDeploymentConcise")) {
            oldVal = this._DebugDeploymentConcise;
            this._DebugDeploymentConcise = (Boolean)v;
            this._postSet(249, oldVal, this._DebugDeploymentConcise);
         } else if (name.equals("DebugDeploymentPlan")) {
            oldVal = this._DebugDeploymentPlan;
            this._DebugDeploymentPlan = (Boolean)v;
            this._postSet(390, oldVal, this._DebugDeploymentPlan);
         } else if (name.equals("DebugDeploymentService")) {
            oldVal = this._DebugDeploymentService;
            this._DebugDeploymentService = (Boolean)v;
            this._postSet(250, oldVal, this._DebugDeploymentService);
         } else if (name.equals("DebugDeploymentServiceInternal")) {
            oldVal = this._DebugDeploymentServiceInternal;
            this._DebugDeploymentServiceInternal = (Boolean)v;
            this._postSet(252, oldVal, this._DebugDeploymentServiceInternal);
         } else if (name.equals("DebugDeploymentServiceStatusUpdates")) {
            oldVal = this._DebugDeploymentServiceStatusUpdates;
            this._DebugDeploymentServiceStatusUpdates = (Boolean)v;
            this._postSet(251, oldVal, this._DebugDeploymentServiceStatusUpdates);
         } else if (name.equals("DebugDeploymentServiceTransport")) {
            oldVal = this._DebugDeploymentServiceTransport;
            this._DebugDeploymentServiceTransport = (Boolean)v;
            this._postSet(253, oldVal, this._DebugDeploymentServiceTransport);
         } else if (name.equals("DebugDeploymentServiceTransportHttp")) {
            oldVal = this._DebugDeploymentServiceTransportHttp;
            this._DebugDeploymentServiceTransportHttp = (Boolean)v;
            this._postSet(254, oldVal, this._DebugDeploymentServiceTransportHttp);
         } else if (name.equals("DebugDescriptor")) {
            oldVal = this._DebugDescriptor;
            this._DebugDescriptor = (Boolean)v;
            this._postSet(387, oldVal, this._DebugDescriptor);
         } else if (name.equals("DebugDiagnosticAccessor")) {
            oldVal = this._DebugDiagnosticAccessor;
            this._DebugDiagnosticAccessor = (Boolean)v;
            this._postSet(321, oldVal, this._DebugDiagnosticAccessor);
         } else if (name.equals("DebugDiagnosticArchive")) {
            oldVal = this._DebugDiagnosticArchive;
            this._DebugDiagnosticArchive = (Boolean)v;
            this._postSet(276, oldVal, this._DebugDiagnosticArchive);
         } else if (name.equals("DebugDiagnosticArchiveRetirement")) {
            oldVal = this._DebugDiagnosticArchiveRetirement;
            this._DebugDiagnosticArchiveRetirement = (Boolean)v;
            this._postSet(280, oldVal, this._DebugDiagnosticArchiveRetirement);
         } else if (name.equals("DebugDiagnosticCollections")) {
            oldVal = this._DebugDiagnosticCollections;
            this._DebugDiagnosticCollections = (Boolean)v;
            this._postSet(322, oldVal, this._DebugDiagnosticCollections);
         } else if (name.equals("DebugDiagnosticContext")) {
            oldVal = this._DebugDiagnosticContext;
            this._DebugDiagnosticContext = (Boolean)v;
            this._postSet(323, oldVal, this._DebugDiagnosticContext);
         } else if (name.equals("DebugDiagnosticDataGathering")) {
            oldVal = this._DebugDiagnosticDataGathering;
            this._DebugDiagnosticDataGathering = (Boolean)v;
            this._postSet(269, oldVal, this._DebugDiagnosticDataGathering);
         } else if (name.equals("DebugDiagnosticFileArchive")) {
            oldVal = this._DebugDiagnosticFileArchive;
            this._DebugDiagnosticFileArchive = (Boolean)v;
            this._postSet(277, oldVal, this._DebugDiagnosticFileArchive);
         } else if (name.equals("DebugDiagnosticImage")) {
            oldVal = this._DebugDiagnosticImage;
            this._DebugDiagnosticImage = (Boolean)v;
            this._postSet(319, oldVal, this._DebugDiagnosticImage);
         } else if (name.equals("DebugDiagnosticInstrumentation")) {
            oldVal = this._DebugDiagnosticInstrumentation;
            this._DebugDiagnosticInstrumentation = (Boolean)v;
            this._postSet(270, oldVal, this._DebugDiagnosticInstrumentation);
         } else if (name.equals("DebugDiagnosticInstrumentationActions")) {
            oldVal = this._DebugDiagnosticInstrumentationActions;
            this._DebugDiagnosticInstrumentationActions = (Boolean)v;
            this._postSet(273, oldVal, this._DebugDiagnosticInstrumentationActions);
         } else if (name.equals("DebugDiagnosticInstrumentationClassInfo")) {
            oldVal = this._DebugDiagnosticInstrumentationClassInfo;
            this._DebugDiagnosticInstrumentationClassInfo = (Boolean)v;
            this._postSet(423, oldVal, this._DebugDiagnosticInstrumentationClassInfo);
         } else if (name.equals("DebugDiagnosticInstrumentationConfig")) {
            oldVal = this._DebugDiagnosticInstrumentationConfig;
            this._DebugDiagnosticInstrumentationConfig = (Boolean)v;
            this._postSet(275, oldVal, this._DebugDiagnosticInstrumentationConfig);
         } else if (name.equals("DebugDiagnosticInstrumentationEvents")) {
            oldVal = this._DebugDiagnosticInstrumentationEvents;
            this._DebugDiagnosticInstrumentationEvents = (Boolean)v;
            this._postSet(274, oldVal, this._DebugDiagnosticInstrumentationEvents);
         } else if (name.equals("DebugDiagnosticInstrumentationResult")) {
            oldVal = this._DebugDiagnosticInstrumentationResult;
            this._DebugDiagnosticInstrumentationResult = (Boolean)v;
            this._postSet(424, oldVal, this._DebugDiagnosticInstrumentationResult);
         } else if (name.equals("DebugDiagnosticInstrumentationWeaving")) {
            oldVal = this._DebugDiagnosticInstrumentationWeaving;
            this._DebugDiagnosticInstrumentationWeaving = (Boolean)v;
            this._postSet(271, oldVal, this._DebugDiagnosticInstrumentationWeaving);
         } else if (name.equals("DebugDiagnosticInstrumentationWeavingMatches")) {
            oldVal = this._DebugDiagnosticInstrumentationWeavingMatches;
            this._DebugDiagnosticInstrumentationWeavingMatches = (Boolean)v;
            this._postSet(272, oldVal, this._DebugDiagnosticInstrumentationWeavingMatches);
         } else if (name.equals("DebugDiagnosticJdbcArchive")) {
            oldVal = this._DebugDiagnosticJdbcArchive;
            this._DebugDiagnosticJdbcArchive = (Boolean)v;
            this._postSet(279, oldVal, this._DebugDiagnosticJdbcArchive);
         } else if (name.equals("DebugDiagnosticLifecycleHandlers")) {
            oldVal = this._DebugDiagnosticLifecycleHandlers;
            this._DebugDiagnosticLifecycleHandlers = (Boolean)v;
            this._postSet(268, oldVal, this._DebugDiagnosticLifecycleHandlers);
         } else if (name.equals("DebugDiagnosticNotifications")) {
            oldVal = this._DebugDiagnosticNotifications;
            this._DebugDiagnosticNotifications = (Boolean)v;
            this._postSet(425, oldVal, this._DebugDiagnosticNotifications);
         } else if (name.equals("DebugDiagnosticQuery")) {
            oldVal = this._DebugDiagnosticQuery;
            this._DebugDiagnosticQuery = (Boolean)v;
            this._postSet(320, oldVal, this._DebugDiagnosticQuery);
         } else if (name.equals("DebugDiagnosticRuntimeControlDriver")) {
            oldVal = this._DebugDiagnosticRuntimeControlDriver;
            this._DebugDiagnosticRuntimeControlDriver = (Boolean)v;
            this._postSet(282, oldVal, this._DebugDiagnosticRuntimeControlDriver);
         } else if (name.equals("DebugDiagnosticRuntimeControlService")) {
            oldVal = this._DebugDiagnosticRuntimeControlService;
            this._DebugDiagnosticRuntimeControlService = (Boolean)v;
            this._postSet(283, oldVal, this._DebugDiagnosticRuntimeControlService);
         } else if (name.equals("DebugDiagnosticWatch")) {
            oldVal = this._DebugDiagnosticWatch;
            this._DebugDiagnosticWatch = (Boolean)v;
            this._postSet(330, oldVal, this._DebugDiagnosticWatch);
         } else if (name.equals("DebugDiagnosticWatchEvents")) {
            oldVal = this._DebugDiagnosticWatchEvents;
            this._DebugDiagnosticWatchEvents = (Boolean)v;
            this._postSet(331, oldVal, this._DebugDiagnosticWatchEvents);
         } else if (name.equals("DebugDiagnosticWatchEventsDetails")) {
            oldVal = this._DebugDiagnosticWatchEventsDetails;
            this._DebugDiagnosticWatchEventsDetails = (Boolean)v;
            this._postSet(332, oldVal, this._DebugDiagnosticWatchEventsDetails);
         } else if (name.equals("DebugDiagnosticWlstoreArchive")) {
            oldVal = this._DebugDiagnosticWlstoreArchive;
            this._DebugDiagnosticWlstoreArchive = (Boolean)v;
            this._postSet(278, oldVal, this._DebugDiagnosticWlstoreArchive);
         } else if (name.equals("DebugDiagnosticsBeanExtensionResolver")) {
            oldVal = this._DebugDiagnosticsBeanExtensionResolver;
            this._DebugDiagnosticsBeanExtensionResolver = (Boolean)v;
            this._postSet(304, oldVal, this._DebugDiagnosticsBeanExtensionResolver);
         } else if (name.equals("DebugDiagnosticsBeanInfoProviders")) {
            oldVal = this._DebugDiagnosticsBeanInfoProviders;
            this._DebugDiagnosticsBeanInfoProviders = (Boolean)v;
            this._postSet(302, oldVal, this._DebugDiagnosticsBeanInfoProviders);
         } else if (name.equals("DebugDiagnosticsELContext")) {
            oldVal = this._DebugDiagnosticsELContext;
            this._DebugDiagnosticsELContext = (Boolean)v;
            this._postSet(307, oldVal, this._DebugDiagnosticsELContext);
         } else if (name.equals("DebugDiagnosticsELResolver")) {
            oldVal = this._DebugDiagnosticsELResolver;
            this._DebugDiagnosticsELResolver = (Boolean)v;
            this._postSet(303, oldVal, this._DebugDiagnosticsELResolver);
         } else if (name.equals("DebugDiagnosticsExpressionEvaluators")) {
            oldVal = this._DebugDiagnosticsExpressionEvaluators;
            this._DebugDiagnosticsExpressionEvaluators = (Boolean)v;
            this._postSet(300, oldVal, this._DebugDiagnosticsExpressionEvaluators);
         } else if (name.equals("DebugDiagnosticsExpressionFunctionMapper")) {
            oldVal = this._DebugDiagnosticsExpressionFunctionMapper;
            this._DebugDiagnosticsExpressionFunctionMapper = (Boolean)v;
            this._postSet(310, oldVal, this._DebugDiagnosticsExpressionFunctionMapper);
         } else if (name.equals("DebugDiagnosticsExpressionFunctions")) {
            oldVal = this._DebugDiagnosticsExpressionFunctions;
            this._DebugDiagnosticsExpressionFunctions = (Boolean)v;
            this._postSet(309, oldVal, this._DebugDiagnosticsExpressionFunctions);
         } else if (name.equals("DebugDiagnosticsExpressionMetrics")) {
            oldVal = this._DebugDiagnosticsExpressionMetrics;
            this._DebugDiagnosticsExpressionMetrics = (Boolean)v;
            this._postSet(301, oldVal, this._DebugDiagnosticsExpressionMetrics);
         } else if (name.equals("DebugDiagnosticsExpressionPoller")) {
            oldVal = this._DebugDiagnosticsExpressionPoller;
            this._DebugDiagnosticsExpressionPoller = (Boolean)v;
            this._postSet(308, oldVal, this._DebugDiagnosticsExpressionPoller);
         } else if (name.equals("DebugDiagnosticsExpressionPollerBuffer")) {
            oldVal = this._DebugDiagnosticsExpressionPollerBuffer;
            this._DebugDiagnosticsExpressionPollerBuffer = (Boolean)v;
            this._postSet(314, oldVal, this._DebugDiagnosticsExpressionPollerBuffer);
         } else if (name.equals("DebugDiagnosticsHarvester")) {
            oldVal = this._DebugDiagnosticsHarvester;
            this._DebugDiagnosticsHarvester = (Boolean)v;
            this._postSet(284, oldVal, this._DebugDiagnosticsHarvester);
         } else if (name.equals("DebugDiagnosticsHarvesterData")) {
            oldVal = this._DebugDiagnosticsHarvesterData;
            this._DebugDiagnosticsHarvesterData = (Boolean)v;
            this._postSet(297, oldVal, this._DebugDiagnosticsHarvesterData);
         } else if (name.equals("DebugDiagnosticsHarvesterMBeanPlugin")) {
            oldVal = this._DebugDiagnosticsHarvesterMBeanPlugin;
            this._DebugDiagnosticsHarvesterMBeanPlugin = (Boolean)v;
            this._postSet(298, oldVal, this._DebugDiagnosticsHarvesterMBeanPlugin);
         } else if (name.equals("DebugDiagnosticsHarvesterTreeBeanPlugin")) {
            oldVal = this._DebugDiagnosticsHarvesterTreeBeanPlugin;
            this._DebugDiagnosticsHarvesterTreeBeanPlugin = (Boolean)v;
            this._postSet(299, oldVal, this._DebugDiagnosticsHarvesterTreeBeanPlugin);
         } else if (name.equals("DebugDiagnosticsMBeanELResolver")) {
            oldVal = this._DebugDiagnosticsMBeanELResolver;
            this._DebugDiagnosticsMBeanELResolver = (Boolean)v;
            this._postSet(306, oldVal, this._DebugDiagnosticsMBeanELResolver);
         } else if (name.equals("DebugDiagnosticsModule")) {
            oldVal = this._DebugDiagnosticsModule;
            this._DebugDiagnosticsModule = (Boolean)v;
            this._postSet(281, oldVal, this._DebugDiagnosticsModule);
         } else if (name.equals("DebugDiagnosticsNotifications")) {
            oldVal = this._DebugDiagnosticsNotifications;
            this._DebugDiagnosticsNotifications = (Boolean)v;
            this._postSet(426, oldVal, this._DebugDiagnosticsNotifications);
         } else if (name.equals("DebugDiagnosticsScriptAction")) {
            oldVal = this._DebugDiagnosticsScriptAction;
            this._DebugDiagnosticsScriptAction = (Boolean)v;
            this._postSet(316, oldVal, this._DebugDiagnosticsScriptAction);
         } else if (name.equals("DebugDiagnosticsTimer")) {
            oldVal = this._DebugDiagnosticsTimer;
            this._DebugDiagnosticsTimer = (Boolean)v;
            this._postSet(427, oldVal, this._DebugDiagnosticsTimer);
         } else if (name.equals("DebugDiagnosticsUtils")) {
            oldVal = this._DebugDiagnosticsUtils;
            this._DebugDiagnosticsUtils = (Boolean)v;
            this._postSet(313, oldVal, this._DebugDiagnosticsUtils);
         } else if (name.equals("DebugDiagnosticsValueTracingELResolver")) {
            oldVal = this._DebugDiagnosticsValueTracingELResolver;
            this._DebugDiagnosticsValueTracingELResolver = (Boolean)v;
            this._postSet(305, oldVal, this._DebugDiagnosticsValueTracingELResolver);
         } else if (name.equals("DebugDomainLogHandler")) {
            oldVal = this._DebugDomainLogHandler;
            this._DebugDomainLogHandler = (Boolean)v;
            this._postSet(328, oldVal, this._DebugDomainLogHandler);
         } else if (name.equals("DebugDomainUpgradeServerService")) {
            oldVal = this._DebugDomainUpgradeServerService;
            this._DebugDomainUpgradeServerService = (Boolean)v;
            this._postSet(428, oldVal, this._DebugDomainUpgradeServerService);
         } else if (name.equals("DebugDynamicSingletonServices")) {
            oldVal = this._DebugDynamicSingletonServices;
            this._DebugDynamicSingletonServices = (Boolean)v;
            this._postSet(403, oldVal, this._DebugDynamicSingletonServices);
         } else if (name.equals("DebugEjbCaching")) {
            oldVal = this._DebugEjbCaching;
            this._DebugEjbCaching = (Boolean)v;
            this._postSet(76, oldVal, this._DebugEjbCaching);
         } else if (name.equals("DebugEjbCmpDeployment")) {
            oldVal = this._DebugEjbCmpDeployment;
            this._DebugEjbCmpDeployment = (Boolean)v;
            this._postSet(83, oldVal, this._DebugEjbCmpDeployment);
         } else if (name.equals("DebugEjbCmpRuntime")) {
            oldVal = this._DebugEjbCmpRuntime;
            this._DebugEjbCmpRuntime = (Boolean)v;
            this._postSet(84, oldVal, this._DebugEjbCmpRuntime);
         } else if (name.equals("DebugEjbCompilation")) {
            oldVal = this._DebugEjbCompilation;
            this._DebugEjbCompilation = (Boolean)v;
            this._postSet(73, oldVal, this._DebugEjbCompilation);
         } else if (name.equals("DebugEjbDeployment")) {
            oldVal = this._DebugEjbDeployment;
            this._DebugEjbDeployment = (Boolean)v;
            this._postSet(74, oldVal, this._DebugEjbDeployment);
         } else if (name.equals("DebugEjbInvoke")) {
            oldVal = this._DebugEjbInvoke;
            this._DebugEjbInvoke = (Boolean)v;
            this._postSet(81, oldVal, this._DebugEjbInvoke);
         } else if (name.equals("DebugEjbLocking")) {
            oldVal = this._DebugEjbLocking;
            this._DebugEjbLocking = (Boolean)v;
            this._postSet(78, oldVal, this._DebugEjbLocking);
         } else if (name.equals("DebugEjbMdbConnection")) {
            oldVal = this._DebugEjbMdbConnection;
            this._DebugEjbMdbConnection = (Boolean)v;
            this._postSet(75, oldVal, this._DebugEjbMdbConnection);
         } else if (name.equals("DebugEjbMetadata")) {
            oldVal = this._DebugEjbMetadata;
            this._DebugEjbMetadata = (Boolean)v;
            this._postSet(85, oldVal, this._DebugEjbMetadata);
         } else if (name.equals("DebugEjbPooling")) {
            oldVal = this._DebugEjbPooling;
            this._DebugEjbPooling = (Boolean)v;
            this._postSet(79, oldVal, this._DebugEjbPooling);
         } else if (name.equals("DebugEjbSecurity")) {
            oldVal = this._DebugEjbSecurity;
            this._DebugEjbSecurity = (Boolean)v;
            this._postSet(82, oldVal, this._DebugEjbSecurity);
         } else if (name.equals("DebugEjbSwapping")) {
            oldVal = this._DebugEjbSwapping;
            this._DebugEjbSwapping = (Boolean)v;
            this._postSet(77, oldVal, this._DebugEjbSwapping);
         } else if (name.equals("DebugEjbTimerStore")) {
            oldVal = this._DebugEjbTimerStore;
            this._DebugEjbTimerStore = (Boolean)v;
            this._postSet(429, oldVal, this._DebugEjbTimerStore);
         } else if (name.equals("DebugEjbTimers")) {
            oldVal = this._DebugEjbTimers;
            this._DebugEjbTimers = (Boolean)v;
            this._postSet(80, oldVal, this._DebugEjbTimers);
         } else if (name.equals("DebugElasticActions")) {
            oldVal = this._DebugElasticActions;
            this._DebugElasticActions = (Boolean)v;
            this._postSet(317, oldVal, this._DebugElasticActions);
         } else if (name.equals("DebugElasticServices")) {
            oldVal = this._DebugElasticServices;
            this._DebugElasticServices = (Boolean)v;
            this._postSet(318, oldVal, this._DebugElasticServices);
         } else if (name.equals("DebugEmbeddedLDAP")) {
            oldVal = this._DebugEmbeddedLDAP;
            this._DebugEmbeddedLDAP = (Boolean)v;
            this._postSet(176, oldVal, this._DebugEmbeddedLDAP);
         } else {
            int oldVal;
            if (name.equals("DebugEmbeddedLDAPLogLevel")) {
               oldVal = this._DebugEmbeddedLDAPLogLevel;
               this._DebugEmbeddedLDAPLogLevel = (Integer)v;
               this._postSet(178, oldVal, this._DebugEmbeddedLDAPLogLevel);
            } else if (name.equals("DebugEmbeddedLDAPLogToConsole")) {
               oldVal = this._DebugEmbeddedLDAPLogToConsole;
               this._DebugEmbeddedLDAPLogToConsole = (Boolean)v;
               this._postSet(177, oldVal, this._DebugEmbeddedLDAPLogToConsole);
            } else if (name.equals("DebugEmbeddedLDAPWriteOverrideProps")) {
               oldVal = this._DebugEmbeddedLDAPWriteOverrideProps;
               this._DebugEmbeddedLDAPWriteOverrideProps = (Boolean)v;
               this._postSet(179, oldVal, this._DebugEmbeddedLDAPWriteOverrideProps);
            } else if (name.equals("DebugEventManager")) {
               oldVal = this._DebugEventManager;
               this._DebugEventManager = (Boolean)v;
               this._postSet(86, oldVal, this._DebugEventManager);
            } else if (name.equals("DebugExpressionBeanLocalizer")) {
               oldVal = this._DebugExpressionBeanLocalizer;
               this._DebugExpressionBeanLocalizer = (Boolean)v;
               this._postSet(311, oldVal, this._DebugExpressionBeanLocalizer);
            } else if (name.equals("DebugExpressionExtensionsManager")) {
               oldVal = this._DebugExpressionExtensionsManager;
               this._DebugExpressionExtensionsManager = (Boolean)v;
               this._postSet(312, oldVal, this._DebugExpressionExtensionsManager);
            } else if (name.equals("DebugExpressionPoller")) {
               oldVal = this._DebugExpressionPoller;
               this._DebugExpressionPoller = (Boolean)v;
               this._postSet(430, oldVal, this._DebugExpressionPoller);
            } else if (name.equals("DebugFileDistributionServlet")) {
               oldVal = this._DebugFileDistributionServlet;
               this._DebugFileDistributionServlet = (Boolean)v;
               this._postSet(267, oldVal, this._DebugFileDistributionServlet);
            } else if (name.equals("DebugFileOwnerFixer")) {
               oldVal = this._DebugFileOwnerFixer;
               this._DebugFileOwnerFixer = (Boolean)v;
               this._postSet(431, oldVal, this._DebugFileOwnerFixer);
            } else if (name.equals("DebugHarvesterTypeInfoCache")) {
               oldVal = this._DebugHarvesterTypeInfoCache;
               this._DebugHarvesterTypeInfoCache = (Boolean)v;
               this._postSet(432, oldVal, this._DebugHarvesterTypeInfoCache);
            } else if (name.equals("DebugHttp")) {
               oldVal = this._DebugHttp;
               this._DebugHttp = (Boolean)v;
               this._postSet(65, oldVal, this._DebugHttp);
            } else if (name.equals("DebugHttpConcise")) {
               oldVal = this._DebugHttpConcise;
               this._DebugHttpConcise = (Boolean)v;
               this._postSet(66, oldVal, this._DebugHttpConcise);
            } else if (name.equals("DebugHttpLogging")) {
               oldVal = this._DebugHttpLogging;
               this._DebugHttpLogging = (Boolean)v;
               this._postSet(69, oldVal, this._DebugHttpLogging);
            } else if (name.equals("DebugHttpSessions")) {
               oldVal = this._DebugHttpSessions;
               this._DebugHttpSessions = (Boolean)v;
               this._postSet(68, oldVal, this._DebugHttpSessions);
            } else if (name.equals("DebugIIOPDetail")) {
               oldVal = this._DebugIIOPDetail;
               this._DebugIIOPDetail = (Boolean)v;
               this._postSet(434, oldVal, this._DebugIIOPDetail);
            } else if (name.equals("DebugIIOPNaming")) {
               oldVal = this._DebugIIOPNaming;
               this._DebugIIOPNaming = (Boolean)v;
               this._postSet(364, oldVal, this._DebugIIOPNaming);
            } else if (name.equals("DebugIIOPRepalcer")) {
               oldVal = this._DebugIIOPRepalcer;
               this._DebugIIOPRepalcer = (Boolean)v;
               this._postSet(435, oldVal, this._DebugIIOPRepalcer);
            } else if (name.equals("DebugIIOPTunneling")) {
               oldVal = this._DebugIIOPTunneling;
               this._DebugIIOPTunneling = (Boolean)v;
               this._postSet(365, oldVal, this._DebugIIOPTunneling);
            } else if (name.equals("DebugInterceptors")) {
               oldVal = this._DebugInterceptors;
               this._DebugInterceptors = (Boolean)v;
               this._postSet(402, oldVal, this._DebugInterceptors);
            } else if (name.equals("DebugJ2EEManagement")) {
               oldVal = this._DebugJ2EEManagement;
               this._DebugJ2EEManagement = (Boolean)v;
               this._postSet(363, oldVal, this._DebugJ2EEManagement);
            } else if (name.equals("DebugJAXPDebugLevel")) {
               oldVal = this._DebugJAXPDebugLevel;
               this._DebugJAXPDebugLevel = (Integer)v;
               this._postSet(231, oldVal, this._DebugJAXPDebugLevel);
            } else if (name.equals("DebugJAXPDebugName")) {
               oldVal = this._DebugJAXPDebugName;
               this._DebugJAXPDebugName = (String)v;
               this._postSet(232, oldVal, this._DebugJAXPDebugName);
            } else if (name.equals("DebugJAXPIncludeClass")) {
               oldVal = this._DebugJAXPIncludeClass;
               this._DebugJAXPIncludeClass = (Boolean)v;
               this._postSet(236, oldVal, this._DebugJAXPIncludeClass);
            } else if (name.equals("DebugJAXPIncludeLocation")) {
               oldVal = this._DebugJAXPIncludeLocation;
               this._DebugJAXPIncludeLocation = (Boolean)v;
               this._postSet(237, oldVal, this._DebugJAXPIncludeLocation);
            } else if (name.equals("DebugJAXPIncludeName")) {
               oldVal = this._DebugJAXPIncludeName;
               this._DebugJAXPIncludeName = (Boolean)v;
               this._postSet(235, oldVal, this._DebugJAXPIncludeName);
            } else if (name.equals("DebugJAXPIncludeTime")) {
               oldVal = this._DebugJAXPIncludeTime;
               this._DebugJAXPIncludeTime = (Boolean)v;
               this._postSet(234, oldVal, this._DebugJAXPIncludeTime);
            } else {
               OutputStream oldVal;
               if (name.equals("DebugJAXPOutputStream")) {
                  oldVal = this._DebugJAXPOutputStream;
                  this._DebugJAXPOutputStream = (OutputStream)v;
                  this._postSet(233, oldVal, this._DebugJAXPOutputStream);
               } else if (name.equals("DebugJAXPUseShortClass")) {
                  oldVal = this._DebugJAXPUseShortClass;
                  this._DebugJAXPUseShortClass = (Boolean)v;
                  this._postSet(238, oldVal, this._DebugJAXPUseShortClass);
               } else if (name.equals("DebugJDBCConn")) {
                  oldVal = this._DebugJDBCConn;
                  this._DebugJDBCConn = (Boolean)v;
                  this._postSet(202, oldVal, this._DebugJDBCConn);
               } else if (name.equals("DebugJDBCDriverLogging")) {
                  oldVal = this._DebugJDBCDriverLogging;
                  this._DebugJDBCDriverLogging = (Boolean)v;
                  this._postSet(205, oldVal, this._DebugJDBCDriverLogging);
               } else if (name.equals("DebugJDBCInternal")) {
                  oldVal = this._DebugJDBCInternal;
                  this._DebugJDBCInternal = (Boolean)v;
                  this._postSet(206, oldVal, this._DebugJDBCInternal);
               } else if (name.equals("DebugJDBCONS")) {
                  oldVal = this._DebugJDBCONS;
                  this._DebugJDBCONS = (Boolean)v;
                  this._postSet(208, oldVal, this._DebugJDBCONS);
               } else if (name.equals("DebugJDBCRAC")) {
                  oldVal = this._DebugJDBCRAC;
                  this._DebugJDBCRAC = (Boolean)v;
                  this._postSet(207, oldVal, this._DebugJDBCRAC);
               } else if (name.equals("DebugJDBCRMI")) {
                  oldVal = this._DebugJDBCRMI;
                  this._DebugJDBCRMI = (Boolean)v;
                  this._postSet(204, oldVal, this._DebugJDBCRMI);
               } else if (name.equals("DebugJDBCReplay")) {
                  oldVal = this._DebugJDBCReplay;
                  this._DebugJDBCReplay = (Boolean)v;
                  this._postSet(210, oldVal, this._DebugJDBCReplay);
               } else if (name.equals("DebugJDBCSQL")) {
                  oldVal = this._DebugJDBCSQL;
                  this._DebugJDBCSQL = (Boolean)v;
                  this._postSet(203, oldVal, this._DebugJDBCSQL);
               } else if (name.equals("DebugJDBCUCP")) {
                  oldVal = this._DebugJDBCUCP;
                  this._DebugJDBCUCP = (Boolean)v;
                  this._postSet(209, oldVal, this._DebugJDBCUCP);
               } else if (name.equals("DebugJMSAME")) {
                  oldVal = this._DebugJMSAME;
                  this._DebugJMSAME = (Boolean)v;
                  this._postSet(120, oldVal, this._DebugJMSAME);
               } else if (name.equals("DebugJMSBackEnd")) {
                  oldVal = this._DebugJMSBackEnd;
                  this._DebugJMSBackEnd = (Boolean)v;
                  this._postSet(107, oldVal, this._DebugJMSBackEnd);
               } else if (name.equals("DebugJMSBoot")) {
                  oldVal = this._DebugJMSBoot;
                  this._DebugJMSBoot = (Boolean)v;
                  this._postSet(117, oldVal, this._DebugJMSBoot);
               } else if (name.equals("DebugJMSCDS")) {
                  oldVal = this._DebugJMSCDS;
                  this._DebugJMSCDS = (Boolean)v;
                  this._postSet(126, oldVal, this._DebugJMSCDS);
               } else if (name.equals("DebugJMSCommon")) {
                  oldVal = this._DebugJMSCommon;
                  this._DebugJMSCommon = (Boolean)v;
                  this._postSet(109, oldVal, this._DebugJMSCommon);
               } else if (name.equals("DebugJMSConfig")) {
                  oldVal = this._DebugJMSConfig;
                  this._DebugJMSConfig = (Boolean)v;
                  this._postSet(110, oldVal, this._DebugJMSConfig);
               } else if (name.equals("DebugJMSCrossDomainSecurity")) {
                  oldVal = this._DebugJMSCrossDomainSecurity;
                  this._DebugJMSCrossDomainSecurity = (Boolean)v;
                  this._postSet(436, oldVal, this._DebugJMSCrossDomainSecurity);
               } else if (name.equals("DebugJMSDispatcher")) {
                  oldVal = this._DebugJMSDispatcher;
                  this._DebugJMSDispatcher = (Boolean)v;
                  this._postSet(114, oldVal, this._DebugJMSDispatcher);
               } else if (name.equals("DebugJMSDispatcherProxy")) {
                  oldVal = this._DebugJMSDispatcherProxy;
                  this._DebugJMSDispatcherProxy = (Boolean)v;
                  this._postSet(115, oldVal, this._DebugJMSDispatcherProxy);
               } else if (name.equals("DebugJMSDispatcherUtilsVerbose")) {
                  oldVal = this._DebugJMSDispatcherUtilsVerbose;
                  this._DebugJMSDispatcherUtilsVerbose = (Boolean)v;
                  this._postSet(437, oldVal, this._DebugJMSDispatcherUtilsVerbose);
               } else if (name.equals("DebugJMSDispatcherVerbose")) {
                  oldVal = this._DebugJMSDispatcherVerbose;
                  this._DebugJMSDispatcherVerbose = (Boolean)v;
                  this._postSet(438, oldVal, this._DebugJMSDispatcherVerbose);
               } else if (name.equals("DebugJMSDistTopic")) {
                  oldVal = this._DebugJMSDistTopic;
                  this._DebugJMSDistTopic = (Boolean)v;
                  this._postSet(111, oldVal, this._DebugJMSDistTopic);
               } else if (name.equals("DebugJMSDotNetProxy")) {
                  oldVal = this._DebugJMSDotNetProxy;
                  this._DebugJMSDotNetProxy = (Boolean)v;
                  this._postSet(439, oldVal, this._DebugJMSDotNetProxy);
               } else if (name.equals("DebugJMSDotNetT3Server")) {
                  oldVal = this._DebugJMSDotNetT3Server;
                  this._DebugJMSDotNetT3Server = (Boolean)v;
                  this._postSet(440, oldVal, this._DebugJMSDotNetT3Server);
               } else if (name.equals("DebugJMSDotNetTransport")) {
                  oldVal = this._DebugJMSDotNetTransport;
                  this._DebugJMSDotNetTransport = (Boolean)v;
                  this._postSet(441, oldVal, this._DebugJMSDotNetTransport);
               } else if (name.equals("DebugJMSDurSub")) {
                  oldVal = this._DebugJMSDurSub;
                  this._DebugJMSDurSub = (Boolean)v;
                  this._postSet(442, oldVal, this._DebugJMSDurSub);
               } else if (name.equals("DebugJMSDurableSubscribers")) {
                  oldVal = this._DebugJMSDurableSubscribers;
                  this._DebugJMSDurableSubscribers = (Boolean)v;
                  this._postSet(118, oldVal, this._DebugJMSDurableSubscribers);
               } else if (name.equals("DebugJMSFrontEnd")) {
                  oldVal = this._DebugJMSFrontEnd;
                  this._DebugJMSFrontEnd = (Boolean)v;
                  this._postSet(108, oldVal, this._DebugJMSFrontEnd);
               } else if (name.equals("DebugJMSJDBCScavengeOnFlush")) {
                  oldVal = this._DebugJMSJDBCScavengeOnFlush;
                  this._DebugJMSJDBCScavengeOnFlush = (Boolean)v;
                  this._postSet(119, oldVal, this._DebugJMSJDBCScavengeOnFlush);
               } else if (name.equals("DebugJMSJNDI")) {
                  oldVal = this._DebugJMSJNDI;
                  this._DebugJMSJNDI = (Boolean)v;
                  this._postSet(443, oldVal, this._DebugJMSJNDI);
               } else if (name.equals("DebugJMSLocking")) {
                  oldVal = this._DebugJMSLocking;
                  this._DebugJMSLocking = (Boolean)v;
                  this._postSet(112, oldVal, this._DebugJMSLocking);
               } else if (name.equals("DebugJMSMessagePath")) {
                  oldVal = this._DebugJMSMessagePath;
                  this._DebugJMSMessagePath = (Boolean)v;
                  this._postSet(123, oldVal, this._DebugJMSMessagePath);
               } else if (name.equals("DebugJMSModule")) {
                  oldVal = this._DebugJMSModule;
                  this._DebugJMSModule = (Boolean)v;
                  this._postSet(122, oldVal, this._DebugJMSModule);
               } else if (name.equals("DebugJMSOBS")) {
                  oldVal = this._DebugJMSOBS;
                  this._DebugJMSOBS = (Boolean)v;
                  this._postSet(444, oldVal, this._DebugJMSOBS);
               } else if (name.equals("DebugJMSPauseResume")) {
                  oldVal = this._DebugJMSPauseResume;
                  this._DebugJMSPauseResume = (Boolean)v;
                  this._postSet(121, oldVal, this._DebugJMSPauseResume);
               } else if (name.equals("DebugJMSSAF")) {
                  oldVal = this._DebugJMSSAF;
                  this._DebugJMSSAF = (Boolean)v;
                  this._postSet(124, oldVal, this._DebugJMSSAF);
               } else if (name.equals("DebugJMSStore")) {
                  oldVal = this._DebugJMSStore;
                  this._DebugJMSStore = (Boolean)v;
                  this._postSet(116, oldVal, this._DebugJMSStore);
               } else if (name.equals("DebugJMST3Server")) {
                  oldVal = this._DebugJMST3Server;
                  this._DebugJMST3Server = (Boolean)v;
                  this._postSet(386, oldVal, this._DebugJMST3Server);
               } else if (name.equals("DebugJMSWrappers")) {
                  oldVal = this._DebugJMSWrappers;
                  this._DebugJMSWrappers = (Boolean)v;
                  this._postSet(125, oldVal, this._DebugJMSWrappers);
               } else if (name.equals("DebugJMSXA")) {
                  oldVal = this._DebugJMSXA;
                  this._DebugJMSXA = (Boolean)v;
                  this._postSet(113, oldVal, this._DebugJMSXA);
               } else if (name.equals("DebugJMX")) {
                  oldVal = this._DebugJMX;
                  this._DebugJMX = (Boolean)v;
                  this._postSet(352, oldVal, this._DebugJMX);
               } else if (name.equals("DebugJMXCompatibility")) {
                  oldVal = this._DebugJMXCompatibility;
                  this._DebugJMXCompatibility = (Boolean)v;
                  this._postSet(358, oldVal, this._DebugJMXCompatibility);
               } else if (name.equals("DebugJMXContext")) {
                  oldVal = this._DebugJMXContext;
                  this._DebugJMXContext = (Boolean)v;
                  this._postSet(445, oldVal, this._DebugJMXContext);
               } else if (name.equals("DebugJMXCore")) {
                  oldVal = this._DebugJMXCore;
                  this._DebugJMXCore = (Boolean)v;
                  this._postSet(353, oldVal, this._DebugJMXCore);
               } else if (name.equals("DebugJMXCoreConcise")) {
                  oldVal = this._DebugJMXCoreConcise;
                  this._DebugJMXCoreConcise = (Boolean)v;
                  this._postSet(354, oldVal, this._DebugJMXCoreConcise);
               } else if (name.equals("DebugJMXDomain")) {
                  oldVal = this._DebugJMXDomain;
                  this._DebugJMXDomain = (Boolean)v;
                  this._postSet(356, oldVal, this._DebugJMXDomain);
               } else if (name.equals("DebugJMXEdit")) {
                  oldVal = this._DebugJMXEdit;
                  this._DebugJMXEdit = (Boolean)v;
                  this._postSet(357, oldVal, this._DebugJMXEdit);
               } else if (name.equals("DebugJMXRuntime")) {
                  oldVal = this._DebugJMXRuntime;
                  this._DebugJMXRuntime = (Boolean)v;
                  this._postSet(355, oldVal, this._DebugJMXRuntime);
               } else if (name.equals("DebugJNDI")) {
                  oldVal = this._DebugJNDI;
                  this._DebugJNDI = (Boolean)v;
                  this._postSet(102, oldVal, this._DebugJNDI);
               } else if (name.equals("DebugJNDIFactories")) {
                  oldVal = this._DebugJNDIFactories;
                  this._DebugJNDIFactories = (Boolean)v;
                  this._postSet(104, oldVal, this._DebugJNDIFactories);
               } else if (name.equals("DebugJNDIResolution")) {
                  oldVal = this._DebugJNDIResolution;
                  this._DebugJNDIResolution = (Boolean)v;
                  this._postSet(103, oldVal, this._DebugJNDIResolution);
               } else if (name.equals("DebugJPA")) {
                  oldVal = this._DebugJPA;
                  this._DebugJPA = (Boolean)v;
                  this._postSet(446, oldVal, this._DebugJPA);
               } else if (name.equals("DebugJTA2PC")) {
                  oldVal = this._DebugJTA2PC;
                  this._DebugJTA2PC = (Boolean)v;
                  this._postSet(131, oldVal, this._DebugJTA2PC);
               } else if (name.equals("DebugJTA2PCDetail")) {
                  oldVal = this._DebugJTA2PCDetail;
                  this._DebugJTA2PCDetail = (Boolean)v;
                  this._postSet(447, oldVal, this._DebugJTA2PCDetail);
               } else if (name.equals("DebugJTA2PCStackTrace")) {
                  oldVal = this._DebugJTA2PCStackTrace;
                  this._DebugJTA2PCStackTrace = (Boolean)v;
                  this._postSet(132, oldVal, this._DebugJTA2PCStackTrace);
               } else if (name.equals("DebugJTAAPI")) {
                  oldVal = this._DebugJTAAPI;
                  this._DebugJTAAPI = (Boolean)v;
                  this._postSet(137, oldVal, this._DebugJTAAPI);
               } else if (name.equals("DebugJTACDI")) {
                  oldVal = this._DebugJTACDI;
                  this._DebugJTACDI = (Boolean)v;
                  this._postSet(150, oldVal, this._DebugJTACDI);
               } else if (name.equals("DebugJTAGateway")) {
                  oldVal = this._DebugJTAGateway;
                  this._DebugJTAGateway = (Boolean)v;
                  this._postSet(139, oldVal, this._DebugJTAGateway);
               } else if (name.equals("DebugJTAGatewayStackTrace")) {
                  oldVal = this._DebugJTAGatewayStackTrace;
                  this._DebugJTAGatewayStackTrace = (Boolean)v;
                  this._postSet(140, oldVal, this._DebugJTAGatewayStackTrace);
               } else if (name.equals("DebugJTAHealth")) {
                  oldVal = this._DebugJTAHealth;
                  this._DebugJTAHealth = (Boolean)v;
                  this._postSet(147, oldVal, this._DebugJTAHealth);
               } else if (name.equals("DebugJTAJDBC")) {
                  oldVal = this._DebugJTAJDBC;
                  this._DebugJTAJDBC = (Boolean)v;
                  this._postSet(134, oldVal, this._DebugJTAJDBC);
               } else if (name.equals("DebugJTALLR")) {
                  oldVal = this._DebugJTALLR;
                  this._DebugJTALLR = (Boolean)v;
                  this._postSet(146, oldVal, this._DebugJTALLR);
               } else if (name.equals("DebugJTALifecycle")) {
                  oldVal = this._DebugJTALifecycle;
                  this._DebugJTALifecycle = (Boolean)v;
                  this._postSet(145, oldVal, this._DebugJTALifecycle);
               } else if (name.equals("DebugJTAMigration")) {
                  oldVal = this._DebugJTAMigration;
                  this._DebugJTAMigration = (Boolean)v;
                  this._postSet(144, oldVal, this._DebugJTAMigration);
               } else if (name.equals("DebugJTANaming")) {
                  oldVal = this._DebugJTANaming;
                  this._DebugJTANaming = (Boolean)v;
                  this._postSet(141, oldVal, this._DebugJTANaming);
               } else if (name.equals("DebugJTANamingStackTrace")) {
                  oldVal = this._DebugJTANamingStackTrace;
                  this._DebugJTANamingStackTrace = (Boolean)v;
                  this._postSet(142, oldVal, this._DebugJTANamingStackTrace);
               } else if (name.equals("DebugJTANonXA")) {
                  oldVal = this._DebugJTANonXA;
                  this._DebugJTANonXA = (Boolean)v;
                  this._postSet(128, oldVal, this._DebugJTANonXA);
               } else if (name.equals("DebugJTAPropagate")) {
                  oldVal = this._DebugJTAPropagate;
                  this._DebugJTAPropagate = (Boolean)v;
                  this._postSet(138, oldVal, this._DebugJTAPropagate);
               } else if (name.equals("DebugJTARMI")) {
                  oldVal = this._DebugJTARMI;
                  this._DebugJTARMI = (Boolean)v;
                  this._postSet(130, oldVal, this._DebugJTARMI);
               } else if (name.equals("DebugJTARecovery")) {
                  oldVal = this._DebugJTARecovery;
                  this._DebugJTARecovery = (Boolean)v;
                  this._postSet(135, oldVal, this._DebugJTARecovery);
               } else if (name.equals("DebugJTARecoveryStackTrace")) {
                  oldVal = this._DebugJTARecoveryStackTrace;
                  this._DebugJTARecoveryStackTrace = (Boolean)v;
                  this._postSet(136, oldVal, this._DebugJTARecoveryStackTrace);
               } else if (name.equals("DebugJTAResourceHealth")) {
                  oldVal = this._DebugJTAResourceHealth;
                  this._DebugJTAResourceHealth = (Boolean)v;
                  this._postSet(143, oldVal, this._DebugJTAResourceHealth);
               } else if (name.equals("DebugJTAResourceName")) {
                  oldVal = this._DebugJTAResourceName;
                  this._DebugJTAResourceName = (String)v;
                  this._postSet(149, oldVal, this._DebugJTAResourceName);
               } else if (name.equals("DebugJTATLOG")) {
                  oldVal = this._DebugJTATLOG;
                  this._DebugJTATLOG = (Boolean)v;
                  this._postSet(133, oldVal, this._DebugJTATLOG);
               } else if (name.equals("DebugJTATransactionName")) {
                  oldVal = this._DebugJTATransactionName;
                  this._DebugJTATransactionName = (String)v;
                  this._postSet(148, oldVal, this._DebugJTATransactionName);
               } else if (name.equals("DebugJTAXA")) {
                  oldVal = this._DebugJTAXA;
                  this._DebugJTAXA = (Boolean)v;
                  this._postSet(127, oldVal, this._DebugJTAXA);
               } else if (name.equals("DebugJTAXAStackTrace")) {
                  oldVal = this._DebugJTAXAStackTrace;
                  this._DebugJTAXAStackTrace = (Boolean)v;
                  this._postSet(129, oldVal, this._DebugJTAXAStackTrace);
               } else if (name.equals("DebugJpaDataCache")) {
                  oldVal = this._DebugJpaDataCache;
                  this._DebugJpaDataCache = (Boolean)v;
                  this._postSet(379, oldVal, this._DebugJpaDataCache);
               } else if (name.equals("DebugJpaEnhance")) {
                  oldVal = this._DebugJpaEnhance;
                  this._DebugJpaEnhance = (Boolean)v;
                  this._postSet(376, oldVal, this._DebugJpaEnhance);
               } else if (name.equals("DebugJpaJdbcJdbc")) {
                  oldVal = this._DebugJpaJdbcJdbc;
                  this._DebugJpaJdbcJdbc = (Boolean)v;
                  this._postSet(384, oldVal, this._DebugJpaJdbcJdbc);
               } else if (name.equals("DebugJpaJdbcSchema")) {
                  oldVal = this._DebugJpaJdbcSchema;
                  this._DebugJpaJdbcSchema = (Boolean)v;
                  this._postSet(385, oldVal, this._DebugJpaJdbcSchema);
               } else if (name.equals("DebugJpaJdbcSql")) {
                  oldVal = this._DebugJpaJdbcSql;
                  this._DebugJpaJdbcSql = (Boolean)v;
                  this._postSet(383, oldVal, this._DebugJpaJdbcSql);
               } else if (name.equals("DebugJpaManage")) {
                  oldVal = this._DebugJpaManage;
                  this._DebugJpaManage = (Boolean)v;
                  this._postSet(381, oldVal, this._DebugJpaManage);
               } else if (name.equals("DebugJpaMetaData")) {
                  oldVal = this._DebugJpaMetaData;
                  this._DebugJpaMetaData = (Boolean)v;
                  this._postSet(375, oldVal, this._DebugJpaMetaData);
               } else if (name.equals("DebugJpaProfile")) {
                  oldVal = this._DebugJpaProfile;
                  this._DebugJpaProfile = (Boolean)v;
                  this._postSet(382, oldVal, this._DebugJpaProfile);
               } else if (name.equals("DebugJpaQuery")) {
                  oldVal = this._DebugJpaQuery;
                  this._DebugJpaQuery = (Boolean)v;
                  this._postSet(378, oldVal, this._DebugJpaQuery);
               } else if (name.equals("DebugJpaRuntime")) {
                  oldVal = this._DebugJpaRuntime;
                  this._DebugJpaRuntime = (Boolean)v;
                  this._postSet(377, oldVal, this._DebugJpaRuntime);
               } else if (name.equals("DebugJpaTool")) {
                  oldVal = this._DebugJpaTool;
                  this._DebugJpaTool = (Boolean)v;
                  this._postSet(380, oldVal, this._DebugJpaTool);
               } else if (name.equals("DebugKodoWeblogic")) {
                  oldVal = this._DebugKodoWeblogic;
                  this._DebugKodoWeblogic = (Boolean)v;
                  this._postSet(448, oldVal, this._DebugKodoWeblogic);
               } else if (name.equals("DebugLeaderElection")) {
                  oldVal = this._DebugLeaderElection;
                  this._DebugLeaderElection = (Boolean)v;
                  this._postSet(95, oldVal, this._DebugLeaderElection);
               } else if (name.equals("DebugLegacy")) {
                  oldVal = this._DebugLegacy;
                  this._DebugLegacy = (Boolean)v;
                  this._postSet(449, oldVal, this._DebugLegacy);
               } else if (name.equals("DebugLibraries")) {
                  oldVal = this._DebugLibraries;
                  this._DebugLibraries = (Boolean)v;
                  this._postSet(58, oldVal, this._DebugLibraries);
               } else if (name.equals("DebugLifecycleManager")) {
                  oldVal = this._DebugLifecycleManager;
                  this._DebugLifecycleManager = (Boolean)v;
                  this._postSet(151, oldVal, this._DebugLifecycleManager);
               } else if (name.equals("DebugLoggingConfiguration")) {
                  oldVal = this._DebugLoggingConfiguration;
                  this._DebugLoggingConfiguration = (Boolean)v;
                  this._postSet(329, oldVal, this._DebugLoggingConfiguration);
               } else if (name.equals("DebugMBeanCIC")) {
                  oldVal = this._DebugMBeanCIC;
                  this._DebugMBeanCIC = (Boolean)v;
                  this._postSet(450, oldVal, this._DebugMBeanCIC);
               } else if (name.equals("DebugMBeanEventHandler")) {
                  oldVal = this._DebugMBeanEventHandler;
                  this._DebugMBeanEventHandler = (Boolean)v;
                  this._postSet(451, oldVal, this._DebugMBeanEventHandler);
               } else if (name.equals("DebugMBeanEventHandlerSummary")) {
                  oldVal = this._DebugMBeanEventHandlerSummary;
                  this._DebugMBeanEventHandlerSummary = (Boolean)v;
                  this._postSet(452, oldVal, this._DebugMBeanEventHandlerSummary);
               } else if (name.equals("DebugMBeanEventHandlerWork")) {
                  oldVal = this._DebugMBeanEventHandlerWork;
                  this._DebugMBeanEventHandlerWork = (Boolean)v;
                  this._postSet(453, oldVal, this._DebugMBeanEventHandlerWork);
               } else if (name.equals("DebugMBeanHarvesterControl")) {
                  oldVal = this._DebugMBeanHarvesterControl;
                  this._DebugMBeanHarvesterControl = (Boolean)v;
                  this._postSet(285, oldVal, this._DebugMBeanHarvesterControl);
               } else if (name.equals("DebugMBeanHarvesterDataCollection")) {
                  oldVal = this._DebugMBeanHarvesterDataCollection;
                  this._DebugMBeanHarvesterDataCollection = (Boolean)v;
                  this._postSet(287, oldVal, this._DebugMBeanHarvesterDataCollection);
               } else if (name.equals("DebugMBeanHarvesterResolution")) {
                  oldVal = this._DebugMBeanHarvesterResolution;
                  this._DebugMBeanHarvesterResolution = (Boolean)v;
                  this._postSet(286, oldVal, this._DebugMBeanHarvesterResolution);
               } else if (name.equals("DebugMBeanHarvesterThreading")) {
                  oldVal = this._DebugMBeanHarvesterThreading;
                  this._DebugMBeanHarvesterThreading = (Boolean)v;
                  this._postSet(288, oldVal, this._DebugMBeanHarvesterThreading);
               } else if (name.equals("DebugMBeanLocalization")) {
                  oldVal = this._DebugMBeanLocalization;
                  this._DebugMBeanLocalization = (Boolean)v;
                  this._postSet(454, oldVal, this._DebugMBeanLocalization);
               } else if (name.equals("DebugMBeanTypeUtilQueue")) {
                  oldVal = this._DebugMBeanTypeUtilQueue;
                  this._DebugMBeanTypeUtilQueue = (Boolean)v;
                  this._postSet(294, oldVal, this._DebugMBeanTypeUtilQueue);
               } else if (name.equals("DebugMBeanTypeUtilQueuePriority")) {
                  oldVal = this._DebugMBeanTypeUtilQueuePriority;
                  this._DebugMBeanTypeUtilQueuePriority = (Boolean)v;
                  this._postSet(295, oldVal, this._DebugMBeanTypeUtilQueuePriority);
               } else if (name.equals("DebugMBeanTypeUtilityListener")) {
                  oldVal = this._DebugMBeanTypeUtilityListener;
                  this._DebugMBeanTypeUtilityListener = (Boolean)v;
                  this._postSet(293, oldVal, this._DebugMBeanTypeUtilityListener);
               } else if (name.equals("DebugMBeanTypingUtility")) {
                  oldVal = this._DebugMBeanTypingUtility;
                  this._DebugMBeanTypingUtility = (Boolean)v;
                  this._postSet(296, oldVal, this._DebugMBeanTypingUtility);
               } else if (name.equals("DebugMailSessionDeployment")) {
                  oldVal = this._DebugMailSessionDeployment;
                  this._DebugMailSessionDeployment = (Boolean)v;
                  this._postSet(455, oldVal, this._DebugMailSessionDeployment);
               } else if (name.equals("DebugManagedBean")) {
                  oldVal = this._DebugManagedBean;
                  this._DebugManagedBean = (Boolean)v;
                  this._postSet(456, oldVal, this._DebugManagedBean);
               } else if (name.equals("DebugManagementServicesResource")) {
                  oldVal = this._DebugManagementServicesResource;
                  this._DebugManagementServicesResource = (Boolean)v;
                  this._postSet(389, oldVal, this._DebugManagementServicesResource);
               } else if (name.equals("DebugMaskCriterias")) {
                  String[] oldVal = this._DebugMaskCriterias;
                  this._DebugMaskCriterias = (String[])((String[])v);
                  this._postSet(42, oldVal, this._DebugMaskCriterias);
               } else if (name.equals("DebugMessagingBridgeDumpToConsole")) {
                  oldVal = this._DebugMessagingBridgeDumpToConsole;
                  this._DebugMessagingBridgeDumpToConsole = (Boolean)v;
                  this._postSet(215, oldVal, this._DebugMessagingBridgeDumpToConsole);
               } else if (name.equals("DebugMessagingBridgeDumpToLog")) {
                  oldVal = this._DebugMessagingBridgeDumpToLog;
                  this._DebugMessagingBridgeDumpToLog = (Boolean)v;
                  this._postSet(214, oldVal, this._DebugMessagingBridgeDumpToLog);
               } else if (name.equals("DebugMessagingBridgeRuntime")) {
                  oldVal = this._DebugMessagingBridgeRuntime;
                  this._DebugMessagingBridgeRuntime = (Boolean)v;
                  this._postSet(212, oldVal, this._DebugMessagingBridgeRuntime);
               } else if (name.equals("DebugMessagingBridgeRuntimeVerbose")) {
                  oldVal = this._DebugMessagingBridgeRuntimeVerbose;
                  this._DebugMessagingBridgeRuntimeVerbose = (Boolean)v;
                  this._postSet(213, oldVal, this._DebugMessagingBridgeRuntimeVerbose);
               } else if (name.equals("DebugMessagingBridgeStartup")) {
                  oldVal = this._DebugMessagingBridgeStartup;
                  this._DebugMessagingBridgeStartup = (Boolean)v;
                  this._postSet(211, oldVal, this._DebugMessagingBridgeStartup);
               } else if (name.equals("DebugMessagingKernel")) {
                  oldVal = this._DebugMessagingKernel;
                  this._DebugMessagingKernel = (Boolean)v;
                  this._postSet(152, oldVal, this._DebugMessagingKernel);
               } else if (name.equals("DebugMessagingKernelBoot")) {
                  oldVal = this._DebugMessagingKernelBoot;
                  this._DebugMessagingKernelBoot = (Boolean)v;
                  this._postSet(153, oldVal, this._DebugMessagingKernelBoot);
               } else if (name.equals("DebugMessagingOwnableLock")) {
                  oldVal = this._DebugMessagingOwnableLock;
                  this._DebugMessagingOwnableLock = (Boolean)v;
                  this._postSet(154, oldVal, this._DebugMessagingOwnableLock);
               } else if (name.equals("DebugMigrationInfo")) {
                  oldVal = this._DebugMigrationInfo;
                  this._DebugMigrationInfo = (Boolean)v;
                  this._postSet(457, oldVal, this._DebugMigrationInfo);
               } else if (name.equals("DebugNIO")) {
                  oldVal = this._DebugNIO;
                  this._DebugNIO = (Boolean)v;
                  this._postSet(458, oldVal, this._DebugNIO);
               } else if (name.equals("DebugNodeManagerRuntime")) {
                  oldVal = this._DebugNodeManagerRuntime;
                  this._DebugNodeManagerRuntime = (Boolean)v;
                  this._postSet(408, oldVal, this._DebugNodeManagerRuntime);
               } else if (name.equals("DebugPageFlowMonitoring")) {
                  oldVal = this._DebugPageFlowMonitoring;
                  this._DebugPageFlowMonitoring = (Boolean)v;
                  this._postSet(459, oldVal, this._DebugPageFlowMonitoring);
               } else if (name.equals("DebugPartitionJMX")) {
                  oldVal = this._DebugPartitionJMX;
                  this._DebugPartitionJMX = (Boolean)v;
                  this._postSet(460, oldVal, this._DebugPartitionJMX);
               } else if (name.equals("DebugPartitionLifecycle")) {
                  oldVal = this._DebugPartitionLifecycle;
                  this._DebugPartitionLifecycle = (Boolean)v;
                  this._postSet(461, oldVal, this._DebugPartitionLifecycle);
               } else if (name.equals("DebugPartitionPortability")) {
                  oldVal = this._DebugPartitionPortability;
                  this._DebugPartitionPortability = (Boolean)v;
                  this._postSet(462, oldVal, this._DebugPartitionPortability);
               } else if (name.equals("DebugPartitionResourceMetricsRuntime")) {
                  oldVal = this._DebugPartitionResourceMetricsRuntime;
                  this._DebugPartitionResourceMetricsRuntime = (Boolean)v;
                  this._postSet(333, oldVal, this._DebugPartitionResourceMetricsRuntime);
               } else if (name.equals("DebugPatchingRuntime")) {
                  oldVal = this._DebugPatchingRuntime;
                  this._DebugPatchingRuntime = (Boolean)v;
                  this._postSet(362, oldVal, this._DebugPatchingRuntime);
               } else if (name.equals("DebugPathSvc")) {
                  oldVal = this._DebugPathSvc;
                  this._DebugPathSvc = (Boolean)v;
                  this._postSet(164, oldVal, this._DebugPathSvc);
               } else if (name.equals("DebugPathSvcVerbose")) {
                  oldVal = this._DebugPathSvcVerbose;
                  this._DebugPathSvcVerbose = (Boolean)v;
                  this._postSet(165, oldVal, this._DebugPathSvcVerbose);
               } else if (name.equals("DebugPersistentStoreManager")) {
                  oldVal = this._DebugPersistentStoreManager;
                  this._DebugPersistentStoreManager = (Boolean)v;
                  this._postSet(463, oldVal, this._DebugPersistentStoreManager);
               } else if (name.equals("DebugPubSubBayeux")) {
                  oldVal = this._DebugPubSubBayeux;
                  this._DebugPubSubBayeux = (Boolean)v;
                  this._postSet(464, oldVal, this._DebugPubSubBayeux);
               } else if (name.equals("DebugPubSubChannel")) {
                  oldVal = this._DebugPubSubChannel;
                  this._DebugPubSubChannel = (Boolean)v;
                  this._postSet(465, oldVal, this._DebugPubSubChannel);
               } else if (name.equals("DebugPubSubClient")) {
                  oldVal = this._DebugPubSubClient;
                  this._DebugPubSubClient = (Boolean)v;
                  this._postSet(466, oldVal, this._DebugPubSubClient);
               } else if (name.equals("DebugPubSubSecurity")) {
                  oldVal = this._DebugPubSubSecurity;
                  this._DebugPubSubSecurity = (Boolean)v;
                  this._postSet(467, oldVal, this._DebugPubSubSecurity);
               } else if (name.equals("DebugPubSubServer")) {
                  oldVal = this._DebugPubSubServer;
                  this._DebugPubSubServer = (Boolean)v;
                  this._postSet(468, oldVal, this._DebugPubSubServer);
               } else if (name.equals("DebugRA")) {
                  oldVal = this._DebugRA;
                  this._DebugRA = (Boolean)v;
                  this._postSet(335, oldVal, this._DebugRA);
               } else if (name.equals("DebugRAClassloader")) {
                  oldVal = this._DebugRAClassloader;
                  this._DebugRAClassloader = (Boolean)v;
                  this._postSet(350, oldVal, this._DebugRAClassloader);
               } else if (name.equals("DebugRAConnEvents")) {
                  oldVal = this._DebugRAConnEvents;
                  this._DebugRAConnEvents = (Boolean)v;
                  this._postSet(347, oldVal, this._DebugRAConnEvents);
               } else if (name.equals("DebugRAConnections")) {
                  oldVal = this._DebugRAConnections;
                  this._DebugRAConnections = (Boolean)v;
                  this._postSet(346, oldVal, this._DebugRAConnections);
               } else if (name.equals("DebugRADeployment")) {
                  oldVal = this._DebugRADeployment;
                  this._DebugRADeployment = (Boolean)v;
                  this._postSet(342, oldVal, this._DebugRADeployment);
               } else if (name.equals("DebugRALifecycle")) {
                  oldVal = this._DebugRALifecycle;
                  this._DebugRALifecycle = (Boolean)v;
                  this._postSet(340, oldVal, this._DebugRALifecycle);
               } else if (name.equals("DebugRALocalOut")) {
                  oldVal = this._DebugRALocalOut;
                  this._DebugRALocalOut = (Boolean)v;
                  this._postSet(339, oldVal, this._DebugRALocalOut);
               } else if (name.equals("DebugRAParsing")) {
                  oldVal = this._DebugRAParsing;
                  this._DebugRAParsing = (Boolean)v;
                  this._postSet(343, oldVal, this._DebugRAParsing);
               } else if (name.equals("DebugRAPoolVerbose")) {
                  oldVal = this._DebugRAPoolVerbose;
                  this._DebugRAPoolVerbose = (Boolean)v;
                  this._postSet(334, oldVal, this._DebugRAPoolVerbose);
               } else if (name.equals("DebugRAPooling")) {
                  oldVal = this._DebugRAPooling;
                  this._DebugRAPooling = (Boolean)v;
                  this._postSet(345, oldVal, this._DebugRAPooling);
               } else if (name.equals("DebugRASecurityCtx")) {
                  oldVal = this._DebugRASecurityCtx;
                  this._DebugRASecurityCtx = (Boolean)v;
                  this._postSet(344, oldVal, this._DebugRASecurityCtx);
               } else if (name.equals("DebugRAWork")) {
                  oldVal = this._DebugRAWork;
                  this._DebugRAWork = (Boolean)v;
                  this._postSet(348, oldVal, this._DebugRAWork);
               } else if (name.equals("DebugRAWorkEvents")) {
                  oldVal = this._DebugRAWorkEvents;
                  this._DebugRAWorkEvents = (Boolean)v;
                  this._postSet(349, oldVal, this._DebugRAWorkEvents);
               } else if (name.equals("DebugRAXAin")) {
                  oldVal = this._DebugRAXAin;
                  this._DebugRAXAin = (Boolean)v;
                  this._postSet(336, oldVal, this._DebugRAXAin);
               } else if (name.equals("DebugRAXAout")) {
                  oldVal = this._DebugRAXAout;
                  this._DebugRAXAout = (Boolean)v;
                  this._postSet(337, oldVal, this._DebugRAXAout);
               } else if (name.equals("DebugRAXAwork")) {
                  oldVal = this._DebugRAXAwork;
                  this._DebugRAXAwork = (Boolean)v;
                  this._postSet(338, oldVal, this._DebugRAXAwork);
               } else if (name.equals("DebugRCM")) {
                  oldVal = this._DebugRCM;
                  this._DebugRCM = (Boolean)v;
                  this._postSet(404, oldVal, this._DebugRCM);
               } else if (name.equals("DebugRESTNotifications")) {
                  oldVal = this._DebugRESTNotifications;
                  this._DebugRESTNotifications = (Boolean)v;
                  this._postSet(315, oldVal, this._DebugRESTNotifications);
               } else if (name.equals("DebugRMIDetailed")) {
                  oldVal = this._DebugRMIDetailed;
                  this._DebugRMIDetailed = (Boolean)v;
                  this._postSet(469, oldVal, this._DebugRMIDetailed);
               } else if (name.equals("DebugRMIRequestPerf")) {
                  oldVal = this._DebugRMIRequestPerf;
                  this._DebugRMIRequestPerf = (Boolean)v;
                  this._postSet(56, oldVal, this._DebugRMIRequestPerf);
               } else if (name.equals("DebugReadyApp")) {
                  oldVal = this._DebugReadyApp;
                  this._DebugReadyApp = (Boolean)v;
                  this._postSet(401, oldVal, this._DebugReadyApp);
               } else if (name.equals("DebugRedefAttach")) {
                  oldVal = this._DebugRedefAttach;
                  this._DebugRedefAttach = (Boolean)v;
                  this._postSet(470, oldVal, this._DebugRedefAttach);
               } else if (name.equals("DebugReplication")) {
                  oldVal = this._DebugReplication;
                  this._DebugReplication = (Boolean)v;
                  this._postSet(92, oldVal, this._DebugReplication);
               } else if (name.equals("DebugReplicationDetails")) {
                  oldVal = this._DebugReplicationDetails;
                  this._DebugReplicationDetails = (Boolean)v;
                  this._postSet(93, oldVal, this._DebugReplicationDetails);
               } else if (name.equals("DebugReplicationSize")) {
                  oldVal = this._DebugReplicationSize;
                  this._DebugReplicationSize = (Boolean)v;
                  this._postSet(391, oldVal, this._DebugReplicationSize);
               } else if (name.equals("DebugRequestManager")) {
                  oldVal = this._DebugRequestManager;
                  this._DebugRequestManager = (Boolean)v;
                  this._postSet(471, oldVal, this._DebugRequestManager);
               } else if (name.equals("DebugResourceGroupMigration")) {
                  oldVal = this._DebugResourceGroupMigration;
                  this._DebugResourceGroupMigration = (Boolean)v;
                  this._postSet(472, oldVal, this._DebugResourceGroupMigration);
               } else if (name.equals("DebugRestJersey1Integration")) {
                  oldVal = this._DebugRestJersey1Integration;
                  this._DebugRestJersey1Integration = (Boolean)v;
                  this._postSet(406, oldVal, this._DebugRestJersey1Integration);
               } else if (name.equals("DebugRestJersey2Integration")) {
                  oldVal = this._DebugRestJersey2Integration;
                  this._DebugRestJersey2Integration = (Boolean)v;
                  this._postSet(407, oldVal, this._DebugRestJersey2Integration);
               } else if (name.equals("DebugRestartInPlace")) {
                  oldVal = this._DebugRestartInPlace;
                  this._DebugRestartInPlace = (Boolean)v;
                  this._postSet(433, oldVal, this._DebugRestartInPlace);
               } else if (name.equals("DebugSAFAdmin")) {
                  oldVal = this._DebugSAFAdmin;
                  this._DebugSAFAdmin = (Boolean)v;
                  this._postSet(156, oldVal, this._DebugSAFAdmin);
               } else if (name.equals("DebugSAFLifeCycle")) {
                  oldVal = this._DebugSAFLifeCycle;
                  this._DebugSAFLifeCycle = (Boolean)v;
                  this._postSet(155, oldVal, this._DebugSAFLifeCycle);
               } else if (name.equals("DebugSAFManager")) {
                  oldVal = this._DebugSAFManager;
                  this._DebugSAFManager = (Boolean)v;
                  this._postSet(157, oldVal, this._DebugSAFManager);
               } else if (name.equals("DebugSAFMessagePath")) {
                  oldVal = this._DebugSAFMessagePath;
                  this._DebugSAFMessagePath = (Boolean)v;
                  this._postSet(161, oldVal, this._DebugSAFMessagePath);
               } else if (name.equals("DebugSAFReceivingAgent")) {
                  oldVal = this._DebugSAFReceivingAgent;
                  this._DebugSAFReceivingAgent = (Boolean)v;
                  this._postSet(159, oldVal, this._DebugSAFReceivingAgent);
               } else if (name.equals("DebugSAFSendingAgent")) {
                  oldVal = this._DebugSAFSendingAgent;
                  this._DebugSAFSendingAgent = (Boolean)v;
                  this._postSet(158, oldVal, this._DebugSAFSendingAgent);
               } else if (name.equals("DebugSAFStore")) {
                  oldVal = this._DebugSAFStore;
                  this._DebugSAFStore = (Boolean)v;
                  this._postSet(162, oldVal, this._DebugSAFStore);
               } else if (name.equals("DebugSAFTransport")) {
                  oldVal = this._DebugSAFTransport;
                  this._DebugSAFTransport = (Boolean)v;
                  this._postSet(160, oldVal, this._DebugSAFTransport);
               } else if (name.equals("DebugSAFVerbose")) {
                  oldVal = this._DebugSAFVerbose;
                  this._DebugSAFVerbose = (Boolean)v;
                  this._postSet(163, oldVal, this._DebugSAFVerbose);
               } else if (name.equals("DebugSNMPAgent")) {
                  oldVal = this._DebugSNMPAgent;
                  this._DebugSNMPAgent = (Boolean)v;
                  this._postSet(325, oldVal, this._DebugSNMPAgent);
               } else if (name.equals("DebugSNMPExtensionProvider")) {
                  oldVal = this._DebugSNMPExtensionProvider;
                  this._DebugSNMPExtensionProvider = (Boolean)v;
                  this._postSet(327, oldVal, this._DebugSNMPExtensionProvider);
               } else if (name.equals("DebugSNMPMib")) {
                  oldVal = this._DebugSNMPMib;
                  this._DebugSNMPMib = (Boolean)v;
                  this._postSet(473, oldVal, this._DebugSNMPMib);
               } else if (name.equals("DebugSNMPProtocolTCP")) {
                  oldVal = this._DebugSNMPProtocolTCP;
                  this._DebugSNMPProtocolTCP = (Boolean)v;
                  this._postSet(326, oldVal, this._DebugSNMPProtocolTCP);
               } else if (name.equals("DebugSNMPToolkit")) {
                  oldVal = this._DebugSNMPToolkit;
                  this._DebugSNMPToolkit = (Boolean)v;
                  this._postSet(324, oldVal, this._DebugSNMPToolkit);
               } else if (name.equals("DebugScaContainer")) {
                  oldVal = this._DebugScaContainer;
                  this._DebugScaContainer = (Boolean)v;
                  this._postSet(166, oldVal, this._DebugScaContainer);
               } else if (name.equals("DebugScrubberStartService")) {
                  oldVal = this._DebugScrubberStartService;
                  this._DebugScrubberStartService = (Boolean)v;
                  this._postSet(474, oldVal, this._DebugScrubberStartService);
               } else if (name.equals("DebugSecurity")) {
                  oldVal = this._DebugSecurity;
                  this._DebugSecurity = (Boolean)v;
                  this._postSet(168, oldVal, this._DebugSecurity);
               } else if (name.equals("DebugSecurityAdjudicator")) {
                  oldVal = this._DebugSecurityAdjudicator;
                  this._DebugSecurityAdjudicator = (Boolean)v;
                  this._postSet(180, oldVal, this._DebugSecurityAdjudicator);
               } else if (name.equals("DebugSecurityAtn")) {
                  oldVal = this._DebugSecurityAtn;
                  this._DebugSecurityAtn = (Boolean)v;
                  this._postSet(181, oldVal, this._DebugSecurityAtn);
               } else if (name.equals("DebugSecurityAtz")) {
                  oldVal = this._DebugSecurityAtz;
                  this._DebugSecurityAtz = (Boolean)v;
                  this._postSet(182, oldVal, this._DebugSecurityAtz);
               } else if (name.equals("DebugSecurityAuditor")) {
                  oldVal = this._DebugSecurityAuditor;
                  this._DebugSecurityAuditor = (Boolean)v;
                  this._postSet(183, oldVal, this._DebugSecurityAuditor);
               } else if (name.equals("DebugSecurityCertPath")) {
                  oldVal = this._DebugSecurityCertPath;
                  this._DebugSecurityCertPath = (Boolean)v;
                  this._postSet(187, oldVal, this._DebugSecurityCertPath);
               } else if (name.equals("DebugSecurityCredMap")) {
                  oldVal = this._DebugSecurityCredMap;
                  this._DebugSecurityCredMap = (Boolean)v;
                  this._postSet(184, oldVal, this._DebugSecurityCredMap);
               } else if (name.equals("DebugSecurityEEngine")) {
                  oldVal = this._DebugSecurityEEngine;
                  this._DebugSecurityEEngine = (Boolean)v;
                  this._postSet(190, oldVal, this._DebugSecurityEEngine);
               } else if (name.equals("DebugSecurityEncryptionService")) {
                  oldVal = this._DebugSecurityEncryptionService;
                  this._DebugSecurityEncryptionService = (Boolean)v;
                  this._postSet(185, oldVal, this._DebugSecurityEncryptionService);
               } else if (name.equals("DebugSecurityJACC")) {
                  oldVal = this._DebugSecurityJACC;
                  this._DebugSecurityJACC = (Boolean)v;
                  this._postSet(191, oldVal, this._DebugSecurityJACC);
               } else if (name.equals("DebugSecurityJACCNonPolicy")) {
                  oldVal = this._DebugSecurityJACCNonPolicy;
                  this._DebugSecurityJACCNonPolicy = (Boolean)v;
                  this._postSet(192, oldVal, this._DebugSecurityJACCNonPolicy);
               } else if (name.equals("DebugSecurityJACCPolicy")) {
                  oldVal = this._DebugSecurityJACCPolicy;
                  this._DebugSecurityJACCPolicy = (Boolean)v;
                  this._postSet(193, oldVal, this._DebugSecurityJACCPolicy);
               } else if (name.equals("DebugSecurityKeyStore")) {
                  oldVal = this._DebugSecurityKeyStore;
                  this._DebugSecurityKeyStore = (Boolean)v;
                  this._postSet(186, oldVal, this._DebugSecurityKeyStore);
               } else if (name.equals("DebugSecurityPasswordPolicy")) {
                  oldVal = this._DebugSecurityPasswordPolicy;
                  this._DebugSecurityPasswordPolicy = (Boolean)v;
                  this._postSet(169, oldVal, this._DebugSecurityPasswordPolicy);
               } else if (name.equals("DebugSecurityPredicate")) {
                  oldVal = this._DebugSecurityPredicate;
                  this._DebugSecurityPredicate = (Boolean)v;
                  this._postSet(172, oldVal, this._DebugSecurityPredicate);
               } else if (name.equals("DebugSecurityProfiler")) {
                  oldVal = this._DebugSecurityProfiler;
                  this._DebugSecurityProfiler = (Boolean)v;
                  this._postSet(188, oldVal, this._DebugSecurityProfiler);
               } else if (name.equals("DebugSecurityRealm")) {
                  oldVal = this._DebugSecurityRealm;
                  this._DebugSecurityRealm = (Boolean)v;
                  this._postSet(167, oldVal, this._DebugSecurityRealm);
               } else if (name.equals("DebugSecurityRoleMap")) {
                  oldVal = this._DebugSecurityRoleMap;
                  this._DebugSecurityRoleMap = (Boolean)v;
                  this._postSet(189, oldVal, this._DebugSecurityRoleMap);
               } else if (name.equals("DebugSecuritySAML2Atn")) {
                  oldVal = this._DebugSecuritySAML2Atn;
                  this._DebugSecuritySAML2Atn = (Boolean)v;
                  this._postSet(199, oldVal, this._DebugSecuritySAML2Atn);
               } else if (name.equals("DebugSecuritySAML2CredMap")) {
                  oldVal = this._DebugSecuritySAML2CredMap;
                  this._DebugSecuritySAML2CredMap = (Boolean)v;
                  this._postSet(200, oldVal, this._DebugSecuritySAML2CredMap);
               } else if (name.equals("DebugSecuritySAML2Lib")) {
                  oldVal = this._DebugSecuritySAML2Lib;
                  this._DebugSecuritySAML2Lib = (Boolean)v;
                  this._postSet(198, oldVal, this._DebugSecuritySAML2Lib);
               } else if (name.equals("DebugSecuritySAML2Service")) {
                  oldVal = this._DebugSecuritySAML2Service;
                  this._DebugSecuritySAML2Service = (Boolean)v;
                  this._postSet(201, oldVal, this._DebugSecuritySAML2Service);
               } else if (name.equals("DebugSecuritySAMLAtn")) {
                  oldVal = this._DebugSecuritySAMLAtn;
                  this._DebugSecuritySAMLAtn = (Boolean)v;
                  this._postSet(195, oldVal, this._DebugSecuritySAMLAtn);
               } else if (name.equals("DebugSecuritySAMLCredMap")) {
                  oldVal = this._DebugSecuritySAMLCredMap;
                  this._DebugSecuritySAMLCredMap = (Boolean)v;
                  this._postSet(196, oldVal, this._DebugSecuritySAMLCredMap);
               } else if (name.equals("DebugSecuritySAMLLib")) {
                  oldVal = this._DebugSecuritySAMLLib;
                  this._DebugSecuritySAMLLib = (Boolean)v;
                  this._postSet(194, oldVal, this._DebugSecuritySAMLLib);
               } else if (name.equals("DebugSecuritySAMLService")) {
                  oldVal = this._DebugSecuritySAMLService;
                  this._DebugSecuritySAMLService = (Boolean)v;
                  this._postSet(197, oldVal, this._DebugSecuritySAMLService);
               } else if (name.equals("DebugSecuritySSL")) {
                  oldVal = this._DebugSecuritySSL;
                  this._DebugSecuritySSL = (Boolean)v;
                  this._postSet(173, oldVal, this._DebugSecuritySSL);
               } else if (name.equals("DebugSecuritySSLEaten")) {
                  oldVal = this._DebugSecuritySSLEaten;
                  this._DebugSecuritySSLEaten = (Boolean)v;
                  this._postSet(174, oldVal, this._DebugSecuritySSLEaten);
               } else if (name.equals("DebugSecurityService")) {
                  oldVal = this._DebugSecurityService;
                  this._DebugSecurityService = (Boolean)v;
                  this._postSet(171, oldVal, this._DebugSecurityService);
               } else if (name.equals("DebugSecurityUserLockout")) {
                  oldVal = this._DebugSecurityUserLockout;
                  this._DebugSecurityUserLockout = (Boolean)v;
                  this._postSet(170, oldVal, this._DebugSecurityUserLockout);
               } else if (name.equals("DebugSelfTuning")) {
                  oldVal = this._DebugSelfTuning;
                  this._DebugSelfTuning = (Boolean)v;
                  this._postSet(38, oldVal, this._DebugSelfTuning);
               } else if (name.equals("DebugServerLifeCycle")) {
                  oldVal = this._DebugServerLifeCycle;
                  this._DebugServerLifeCycle = (Boolean)v;
                  this._postSet(367, oldVal, this._DebugServerLifeCycle);
               } else if (name.equals("DebugServerMigration")) {
                  oldVal = this._DebugServerMigration;
                  this._DebugServerMigration = (Boolean)v;
                  this._postSet(87, oldVal, this._DebugServerMigration);
               } else if (name.equals("DebugServerRuntime")) {
                  oldVal = this._DebugServerRuntime;
                  this._DebugServerRuntime = (Boolean)v;
                  this._postSet(475, oldVal, this._DebugServerRuntime);
               } else if (name.equals("DebugServerShutdownStatistics")) {
                  oldVal = this._DebugServerShutdownStatistics;
                  this._DebugServerShutdownStatistics = (Boolean)v;
                  this._postSet(476, oldVal, this._DebugServerShutdownStatistics);
               } else if (name.equals("DebugServerShutdownTimer")) {
                  oldVal = this._DebugServerShutdownTimer;
                  this._DebugServerShutdownTimer = (Boolean)v;
                  this._postSet(477, oldVal, this._DebugServerShutdownTimer);
               } else if (name.equals("DebugServerStartStatistics")) {
                  oldVal = this._DebugServerStartStatistics;
                  this._DebugServerStartStatistics = (Boolean)v;
                  this._postSet(388, oldVal, this._DebugServerStartStatistics);
               } else if (name.equals("DebugServerStartupTimer")) {
                  oldVal = this._DebugServerStartupTimer;
                  this._DebugServerStartupTimer = (Boolean)v;
                  this._postSet(478, oldVal, this._DebugServerStartupTimer);
               } else if (name.equals("DebugSingletonServices")) {
                  oldVal = this._DebugSingletonServices;
                  this._DebugSingletonServices = (Boolean)v;
                  this._postSet(479, oldVal, this._DebugSingletonServices);
               } else if (name.equals("DebugSituationalConfig")) {
                  oldVal = this._DebugSituationalConfig;
                  this._DebugSituationalConfig = (Boolean)v;
                  this._postSet(361, oldVal, this._DebugSituationalConfig);
               } else if (name.equals("DebugSpringStatistics")) {
                  oldVal = this._DebugSpringStatistics;
                  this._DebugSpringStatistics = (Boolean)v;
                  this._postSet(480, oldVal, this._DebugSpringStatistics);
               } else if (name.equals("DebugStore")) {
                  oldVal = this._DebugStore;
                  this._DebugStore = (Boolean)v;
                  this._postSet(481, oldVal, this._DebugStore);
               } else if (name.equals("DebugStoreAdmin")) {
                  oldVal = this._DebugStoreAdmin;
                  this._DebugStoreAdmin = (Boolean)v;
                  this._postSet(222, oldVal, this._DebugStoreAdmin);
               } else if (name.equals("DebugStoreCache")) {
                  oldVal = this._DebugStoreCache;
                  this._DebugStoreCache = (Boolean)v;
                  this._postSet(482, oldVal, this._DebugStoreCache);
               } else if (name.equals("DebugStoreIOLogical")) {
                  oldVal = this._DebugStoreIOLogical;
                  this._DebugStoreIOLogical = (Boolean)v;
                  this._postSet(216, oldVal, this._DebugStoreIOLogical);
               } else if (name.equals("DebugStoreIOLogicalBoot")) {
                  oldVal = this._DebugStoreIOLogicalBoot;
                  this._DebugStoreIOLogicalBoot = (Boolean)v;
                  this._postSet(217, oldVal, this._DebugStoreIOLogicalBoot);
               } else if (name.equals("DebugStoreIOPhysical")) {
                  oldVal = this._DebugStoreIOPhysical;
                  this._DebugStoreIOPhysical = (Boolean)v;
                  this._postSet(218, oldVal, this._DebugStoreIOPhysical);
               } else if (name.equals("DebugStoreIOPhysicalVerbose")) {
                  oldVal = this._DebugStoreIOPhysicalVerbose;
                  this._DebugStoreIOPhysicalVerbose = (Boolean)v;
                  this._postSet(219, oldVal, this._DebugStoreIOPhysicalVerbose);
               } else if (name.equals("DebugStoreRCM")) {
                  oldVal = this._DebugStoreRCM;
                  this._DebugStoreRCM = (Boolean)v;
                  this._postSet(483, oldVal, this._DebugStoreRCM);
               } else if (name.equals("DebugStoreRCMVerbose")) {
                  oldVal = this._DebugStoreRCMVerbose;
                  this._DebugStoreRCMVerbose = (Boolean)v;
                  this._postSet(484, oldVal, this._DebugStoreRCMVerbose);
               } else if (name.equals("DebugStoreXA")) {
                  oldVal = this._DebugStoreXA;
                  this._DebugStoreXA = (Boolean)v;
                  this._postSet(220, oldVal, this._DebugStoreXA);
               } else if (name.equals("DebugStoreXAVerbose")) {
                  oldVal = this._DebugStoreXAVerbose;
                  this._DebugStoreXAVerbose = (Boolean)v;
                  this._postSet(221, oldVal, this._DebugStoreXAVerbose);
               } else if (name.equals("DebugStubGeneration")) {
                  oldVal = this._DebugStubGeneration;
                  this._DebugStubGeneration = (Boolean)v;
                  this._postSet(485, oldVal, this._DebugStubGeneration);
               } else if (name.equals("DebugTunnelingConnection")) {
                  oldVal = this._DebugTunnelingConnection;
                  this._DebugTunnelingConnection = (Boolean)v;
                  this._postSet(106, oldVal, this._DebugTunnelingConnection);
               } else if (name.equals("DebugTunnelingConnectionTimeout")) {
                  oldVal = this._DebugTunnelingConnectionTimeout;
                  this._DebugTunnelingConnectionTimeout = (Boolean)v;
                  this._postSet(105, oldVal, this._DebugTunnelingConnectionTimeout);
               } else if (name.equals("DebugURLResolution")) {
                  oldVal = this._DebugURLResolution;
                  this._DebugURLResolution = (Boolean)v;
                  this._postSet(67, oldVal, this._DebugURLResolution);
               } else if (name.equals("DebugUnicastMessaging")) {
                  oldVal = this._DebugUnicastMessaging;
                  this._DebugUnicastMessaging = (Boolean)v;
                  this._postSet(486, oldVal, this._DebugUnicastMessaging);
               } else if (name.equals("DebugValidation")) {
                  oldVal = this._DebugValidation;
                  this._DebugValidation = (Boolean)v;
                  this._postSet(487, oldVal, this._DebugValidation);
               } else if (name.equals("DebugValidationClassLoading")) {
                  oldVal = this._DebugValidationClassLoading;
                  this._DebugValidationClassLoading = (Boolean)v;
                  this._postSet(488, oldVal, this._DebugValidationClassLoading);
               } else if (name.equals("DebugVerboseRCM")) {
                  oldVal = this._DebugVerboseRCM;
                  this._DebugVerboseRCM = (Boolean)v;
                  this._postSet(405, oldVal, this._DebugVerboseRCM);
               } else if (name.equals("DebugWANReplicationDetails")) {
                  oldVal = this._DebugWANReplicationDetails;
                  this._DebugWANReplicationDetails = (Boolean)v;
                  this._postSet(351, oldVal, this._DebugWANReplicationDetails);
               } else if (name.equals("DebugWTCConfig")) {
                  oldVal = this._DebugWTCConfig;
                  this._DebugWTCConfig = (Boolean)v;
                  this._postSet(368, oldVal, this._DebugWTCConfig);
               } else if (name.equals("DebugWTCCorbaEx")) {
                  oldVal = this._DebugWTCCorbaEx;
                  this._DebugWTCCorbaEx = (Boolean)v;
                  this._postSet(373, oldVal, this._DebugWTCCorbaEx);
               } else if (name.equals("DebugWTCGwtEx")) {
                  oldVal = this._DebugWTCGwtEx;
                  this._DebugWTCGwtEx = (Boolean)v;
                  this._postSet(371, oldVal, this._DebugWTCGwtEx);
               } else if (name.equals("DebugWTCJatmiEx")) {
                  oldVal = this._DebugWTCJatmiEx;
                  this._DebugWTCJatmiEx = (Boolean)v;
                  this._postSet(372, oldVal, this._DebugWTCJatmiEx);
               } else if (name.equals("DebugWTCTDomPdu")) {
                  oldVal = this._DebugWTCTDomPdu;
                  this._DebugWTCTDomPdu = (Boolean)v;
                  this._postSet(369, oldVal, this._DebugWTCTDomPdu);
               } else if (name.equals("DebugWTCTdomPdu")) {
                  oldVal = this._DebugWTCTdomPdu;
                  this._DebugWTCTdomPdu = (Boolean)v;
                  this._postSet(489, oldVal, this._DebugWTCTdomPdu);
               } else if (name.equals("DebugWTCUData")) {
                  oldVal = this._DebugWTCUData;
                  this._DebugWTCUData = (Boolean)v;
                  this._postSet(370, oldVal, this._DebugWTCUData);
               } else if (name.equals("DebugWTCtBridgeEx")) {
                  oldVal = this._DebugWTCtBridgeEx;
                  this._DebugWTCtBridgeEx = (Boolean)v;
                  this._postSet(374, oldVal, this._DebugWTCtBridgeEx);
               } else if (name.equals("DebugWatchScalingActions")) {
                  oldVal = this._DebugWatchScalingActions;
                  this._DebugWatchScalingActions = (Boolean)v;
                  this._postSet(490, oldVal, this._DebugWatchScalingActions);
               } else if (name.equals("DebugWebAppDI")) {
                  oldVal = this._DebugWebAppDI;
                  this._DebugWebAppDI = (Boolean)v;
                  this._postSet(491, oldVal, this._DebugWebAppDI);
               } else if (name.equals("DebugWebAppIdentityAssertion")) {
                  oldVal = this._DebugWebAppIdentityAssertion;
                  this._DebugWebAppIdentityAssertion = (Boolean)v;
                  this._postSet(70, oldVal, this._DebugWebAppIdentityAssertion);
               } else if (name.equals("DebugWebAppModule")) {
                  oldVal = this._DebugWebAppModule;
                  this._DebugWebAppModule = (Boolean)v;
                  this._postSet(72, oldVal, this._DebugWebAppModule);
               } else if (name.equals("DebugWebAppSecurity")) {
                  oldVal = this._DebugWebAppSecurity;
                  this._DebugWebAppSecurity = (Boolean)v;
                  this._postSet(71, oldVal, this._DebugWebAppSecurity);
               } else if (name.equals("DebugWebSocket")) {
                  oldVal = this._DebugWebSocket;
                  this._DebugWebSocket = (Boolean)v;
                  this._postSet(492, oldVal, this._DebugWebSocket);
               } else if (name.equals("DebugXMLEntityCacheDebugLevel")) {
                  oldVal = this._DebugXMLEntityCacheDebugLevel;
                  this._DebugXMLEntityCacheDebugLevel = (Integer)v;
                  this._postSet(239, oldVal, this._DebugXMLEntityCacheDebugLevel);
               } else if (name.equals("DebugXMLEntityCacheDebugName")) {
                  oldVal = this._DebugXMLEntityCacheDebugName;
                  this._DebugXMLEntityCacheDebugName = (String)v;
                  this._postSet(240, oldVal, this._DebugXMLEntityCacheDebugName);
               } else if (name.equals("DebugXMLEntityCacheIncludeClass")) {
                  oldVal = this._DebugXMLEntityCacheIncludeClass;
                  this._DebugXMLEntityCacheIncludeClass = (Boolean)v;
                  this._postSet(244, oldVal, this._DebugXMLEntityCacheIncludeClass);
               } else if (name.equals("DebugXMLEntityCacheIncludeLocation")) {
                  oldVal = this._DebugXMLEntityCacheIncludeLocation;
                  this._DebugXMLEntityCacheIncludeLocation = (Boolean)v;
                  this._postSet(245, oldVal, this._DebugXMLEntityCacheIncludeLocation);
               } else if (name.equals("DebugXMLEntityCacheIncludeName")) {
                  oldVal = this._DebugXMLEntityCacheIncludeName;
                  this._DebugXMLEntityCacheIncludeName = (Boolean)v;
                  this._postSet(243, oldVal, this._DebugXMLEntityCacheIncludeName);
               } else if (name.equals("DebugXMLEntityCacheIncludeTime")) {
                  oldVal = this._DebugXMLEntityCacheIncludeTime;
                  this._DebugXMLEntityCacheIncludeTime = (Boolean)v;
                  this._postSet(242, oldVal, this._DebugXMLEntityCacheIncludeTime);
               } else if (name.equals("DebugXMLEntityCacheOutputStream")) {
                  oldVal = this._DebugXMLEntityCacheOutputStream;
                  this._DebugXMLEntityCacheOutputStream = (OutputStream)v;
                  this._postSet(241, oldVal, this._DebugXMLEntityCacheOutputStream);
               } else if (name.equals("DebugXMLEntityCacheUseShortClass")) {
                  oldVal = this._DebugXMLEntityCacheUseShortClass;
                  this._DebugXMLEntityCacheUseShortClass = (Boolean)v;
                  this._postSet(246, oldVal, this._DebugXMLEntityCacheUseShortClass);
               } else if (name.equals("DebugXMLRegistryDebugLevel")) {
                  oldVal = this._DebugXMLRegistryDebugLevel;
                  this._DebugXMLRegistryDebugLevel = (Integer)v;
                  this._postSet(223, oldVal, this._DebugXMLRegistryDebugLevel);
               } else if (name.equals("DebugXMLRegistryDebugName")) {
                  oldVal = this._DebugXMLRegistryDebugName;
                  this._DebugXMLRegistryDebugName = (String)v;
                  this._postSet(224, oldVal, this._DebugXMLRegistryDebugName);
               } else if (name.equals("DebugXMLRegistryIncludeClass")) {
                  oldVal = this._DebugXMLRegistryIncludeClass;
                  this._DebugXMLRegistryIncludeClass = (Boolean)v;
                  this._postSet(228, oldVal, this._DebugXMLRegistryIncludeClass);
               } else if (name.equals("DebugXMLRegistryIncludeLocation")) {
                  oldVal = this._DebugXMLRegistryIncludeLocation;
                  this._DebugXMLRegistryIncludeLocation = (Boolean)v;
                  this._postSet(229, oldVal, this._DebugXMLRegistryIncludeLocation);
               } else if (name.equals("DebugXMLRegistryIncludeName")) {
                  oldVal = this._DebugXMLRegistryIncludeName;
                  this._DebugXMLRegistryIncludeName = (Boolean)v;
                  this._postSet(227, oldVal, this._DebugXMLRegistryIncludeName);
               } else if (name.equals("DebugXMLRegistryIncludeTime")) {
                  oldVal = this._DebugXMLRegistryIncludeTime;
                  this._DebugXMLRegistryIncludeTime = (Boolean)v;
                  this._postSet(226, oldVal, this._DebugXMLRegistryIncludeTime);
               } else if (name.equals("DebugXMLRegistryOutputStream")) {
                  oldVal = this._DebugXMLRegistryOutputStream;
                  this._DebugXMLRegistryOutputStream = (OutputStream)v;
                  this._postSet(225, oldVal, this._DebugXMLRegistryOutputStream);
               } else if (name.equals("DebugXMLRegistryUseShortClass")) {
                  oldVal = this._DebugXMLRegistryUseShortClass;
                  this._DebugXMLRegistryUseShortClass = (Boolean)v;
                  this._postSet(230, oldVal, this._DebugXMLRegistryUseShortClass);
               } else if (name.equals("DefaultStore")) {
                  oldVal = this._DefaultStore;
                  this._DefaultStore = (Boolean)v;
                  this._postSet(63, oldVal, this._DefaultStore);
               } else if (name.equals("DiagnosticContextDebugMode")) {
                  oldVal = this._DiagnosticContextDebugMode;
                  this._DiagnosticContextDebugMode = (String)v;
                  this._postSet(41, oldVal, this._DiagnosticContextDebugMode);
               } else if (name.equals("ForceShutdownTimeoutNumOfThreadDump")) {
                  oldVal = this._ForceShutdownTimeoutNumOfThreadDump;
                  this._ForceShutdownTimeoutNumOfThreadDump = (Integer)v;
                  this._postSet(54, oldVal, this._ForceShutdownTimeoutNumOfThreadDump);
               } else if (name.equals("ForceShutdownTimeoutThreadDumpInterval")) {
                  oldVal = this._ForceShutdownTimeoutThreadDumpInterval;
                  this._ForceShutdownTimeoutThreadDumpInterval = (Integer)v;
                  this._postSet(55, oldVal, this._ForceShutdownTimeoutThreadDumpInterval);
               } else if (name.equals("GlassFishWebAppParser")) {
                  oldVal = this._GlassFishWebAppParser;
                  this._GlassFishWebAppParser = (Boolean)v;
                  this._postSet(493, oldVal, this._GlassFishWebAppParser);
               } else if (name.equals("GracefulShutdownTimeoutNumOfThreadDump")) {
                  oldVal = this._GracefulShutdownTimeoutNumOfThreadDump;
                  this._GracefulShutdownTimeoutNumOfThreadDump = (Integer)v;
                  this._postSet(52, oldVal, this._GracefulShutdownTimeoutNumOfThreadDump);
               } else if (name.equals("GracefulShutdownTimeoutThreadDumpInterval")) {
                  oldVal = this._GracefulShutdownTimeoutThreadDumpInterval;
                  this._GracefulShutdownTimeoutThreadDumpInterval = (Integer)v;
                  this._postSet(53, oldVal, this._GracefulShutdownTimeoutThreadDumpInterval);
               } else if (name.equals("ListenThreadDebug")) {
                  oldVal = this._ListenThreadDebug;
                  this._ListenThreadDebug = (Boolean)v;
                  this._postSet(44, oldVal, this._ListenThreadDebug);
               } else if (name.equals("MagicThreadDumpBackToSocket")) {
                  oldVal = this._MagicThreadDumpBackToSocket;
                  this._MagicThreadDumpBackToSocket = (Boolean)v;
                  this._postSet(48, oldVal, this._MagicThreadDumpBackToSocket);
               } else if (name.equals("MagicThreadDumpEnabled")) {
                  oldVal = this._MagicThreadDumpEnabled;
                  this._MagicThreadDumpEnabled = (Boolean)v;
                  this._postSet(45, oldVal, this._MagicThreadDumpEnabled);
               } else if (name.equals("MagicThreadDumpFile")) {
                  oldVal = this._MagicThreadDumpFile;
                  this._MagicThreadDumpFile = (String)v;
                  this._postSet(47, oldVal, this._MagicThreadDumpFile);
               } else if (name.equals("MagicThreadDumpHost")) {
                  oldVal = this._MagicThreadDumpHost;
                  this._MagicThreadDumpHost = (String)v;
                  this._postSet(46, oldVal, this._MagicThreadDumpHost);
               } else if (name.equals("MasterDeployer")) {
                  oldVal = this._MasterDeployer;
                  this._MasterDeployer = (Boolean)v;
                  this._postSet(255, oldVal, this._MasterDeployer);
               } else if (name.equals("OSGiForApps")) {
                  oldVal = this._OSGiForApps;
                  this._OSGiForApps = (Boolean)v;
                  this._postSet(494, oldVal, this._OSGiForApps);
               } else if (name.equals("PartitionDebugLoggingEnabled")) {
                  oldVal = this._PartitionDebugLoggingEnabled;
                  this._PartitionDebugLoggingEnabled = (Boolean)v;
                  this._postSet(40, oldVal, this._PartitionDebugLoggingEnabled);
               } else if (name.equals("PartitionEvenInterceptor")) {
                  oldVal = this._PartitionEvenInterceptor;
                  this._PartitionEvenInterceptor = (Boolean)v;
                  this._postSet(495, oldVal, this._PartitionEvenInterceptor);
               } else if (name.equals("PortablePartitionHelper")) {
                  oldVal = this._PortablePartitionHelper;
                  this._PortablePartitionHelper = (Boolean)v;
                  this._postSet(496, oldVal, this._PortablePartitionHelper);
               } else if (name.equals("RedefiningClassLoader")) {
                  oldVal = this._RedefiningClassLoader;
                  this._RedefiningClassLoader = (Boolean)v;
                  this._postSet(61, oldVal, this._RedefiningClassLoader);
               } else if (name.equals("ScriptExecutorCommand")) {
                  oldVal = this._ScriptExecutorCommand;
                  this._ScriptExecutorCommand = (Boolean)v;
                  this._postSet(497, oldVal, this._ScriptExecutorCommand);
               } else if (name.equals("SecurityEncryptionService")) {
                  oldVal = this._SecurityEncryptionService;
                  this._SecurityEncryptionService = (Boolean)v;
                  this._postSet(498, oldVal, this._SecurityEncryptionService);
               } else if (name.equals("Server")) {
                  ServerMBean oldVal = this._Server;
                  this._Server = (ServerMBean)v;
                  this._postSet(43, oldVal, this._Server);
               } else if (name.equals("SlaveDeployer")) {
                  oldVal = this._SlaveDeployer;
                  this._SlaveDeployer = (Boolean)v;
                  this._postSet(256, oldVal, this._SlaveDeployer);
               } else if (name.equals("StartupTimeoutNumOfThreadDump")) {
                  oldVal = this._StartupTimeoutNumOfThreadDump;
                  this._StartupTimeoutNumOfThreadDump = (Integer)v;
                  this._postSet(50, oldVal, this._StartupTimeoutNumOfThreadDump);
               } else if (name.equals("StartupTimeoutThreadDumpInterval")) {
                  oldVal = this._StartupTimeoutThreadDumpInterval;
                  this._StartupTimeoutThreadDumpInterval = (Integer)v;
                  this._postSet(51, oldVal, this._StartupTimeoutThreadDumpInterval);
               } else if (name.equals("T3HttpUpgradeHandler")) {
                  oldVal = this._T3HttpUpgradeHandler;
                  this._T3HttpUpgradeHandler = (Boolean)v;
                  this._postSet(499, oldVal, this._T3HttpUpgradeHandler);
               } else if (name.equals("WarExtraction")) {
                  oldVal = this._WarExtraction;
                  this._WarExtraction = (Boolean)v;
                  this._postSet(500, oldVal, this._WarExtraction);
               } else if (name.equals("WebModule")) {
                  oldVal = this._WebModule;
                  this._WebModule = (Boolean)v;
                  this._postSet(260, oldVal, this._WebModule);
               } else {
                  super.putValue(name, v);
               }
            }
         }
      }
   }

   public Object getValue(String name) {
      if (name.equals("ApplicationContainer")) {
         return new Boolean(this._ApplicationContainer);
      } else if (name.equals("BugReportServiceWsdlUrl")) {
         return this._BugReportServiceWsdlUrl;
      } else if (name.equals("ClassChangeNotifier")) {
         return new Boolean(this._ClassChangeNotifier);
      } else if (name.equals("ClassFinder")) {
         return new Boolean(this._ClassFinder);
      } else if (name.equals("ClassLoader")) {
         return new Boolean(this._ClassLoader);
      } else if (name.equals("ClassLoaderVerbose")) {
         return new Boolean(this._ClassLoaderVerbose);
      } else if (name.equals("ClassloaderWebApp")) {
         return new Boolean(this._ClassloaderWebApp);
      } else if (name.equals("ClasspathServlet")) {
         return new Boolean(this._ClasspathServlet);
      } else if (name.equals("DebugAbbrevs")) {
         return new Boolean(this._DebugAbbrevs);
      } else if (name.equals("DebugAppAnnotations")) {
         return new Boolean(this._DebugAppAnnotations);
      } else if (name.equals("DebugAppClient")) {
         return new Boolean(this._DebugAppClient);
      } else if (name.equals("DebugAppContainer")) {
         return new Boolean(this._DebugAppContainer);
      } else if (name.equals("DebugAppContainerTools")) {
         return new Boolean(this._DebugAppContainerTools);
      } else if (name.equals("DebugAppTiming")) {
         return new Boolean(this._DebugAppTiming);
      } else if (name.equals("DebugAsyncQueue")) {
         return new Boolean(this._DebugAsyncQueue);
      } else if (name.equals("DebugAttach")) {
         return new Boolean(this._DebugAttach);
      } else if (name.equals("DebugBackgroundDeployment")) {
         return new Boolean(this._DebugBackgroundDeployment);
      } else if (name.equals("DebugBatchConnector")) {
         return new Boolean(this._DebugBatchConnector);
      } else if (name.equals("DebugBeanTreeHarvesterControl")) {
         return new Boolean(this._DebugBeanTreeHarvesterControl);
      } else if (name.equals("DebugBeanTreeHarvesterDataCollection")) {
         return new Boolean(this._DebugBeanTreeHarvesterDataCollection);
      } else if (name.equals("DebugBeanTreeHarvesterResolution")) {
         return new Boolean(this._DebugBeanTreeHarvesterResolution);
      } else if (name.equals("DebugBeanTreeHarvesterThreading")) {
         return new Boolean(this._DebugBeanTreeHarvesterThreading);
      } else if (name.equals("DebugBootstrapServlet")) {
         return new Boolean(this._DebugBootstrapServlet);
      } else if (name.equals("DebugBuzzProtocol")) {
         return new Boolean(this._DebugBuzzProtocol);
      } else if (name.equals("DebugBuzzProtocolDetails")) {
         return new Boolean(this._DebugBuzzProtocolDetails);
      } else if (name.equals("DebugBuzzProtocolHttp")) {
         return new Boolean(this._DebugBuzzProtocolHttp);
      } else if (name.equals("DebugCAT")) {
         return new Boolean(this._DebugCAT);
      } else if (name.equals("DebugCertRevocCheck")) {
         return new Boolean(this._DebugCertRevocCheck);
      } else if (name.equals("DebugChannel")) {
         return new Boolean(this._DebugChannel);
      } else if (name.equals("DebugClassLoadingConsistencyChecker")) {
         return new Boolean(this._DebugClassLoadingConsistencyChecker);
      } else if (name.equals("DebugClassLoadingContextualTrace")) {
         return new Boolean(this._DebugClassLoadingContextualTrace);
      } else if (name.equals("DebugClassLoadingVerbose")) {
         return new Boolean(this._DebugClassLoadingVerbose);
      } else if (name.equals("DebugClassRedef")) {
         return new Boolean(this._DebugClassRedef);
      } else if (name.equals("DebugClassSize")) {
         return new Boolean(this._DebugClassSize);
      } else if (name.equals("DebugCluster")) {
         return new Boolean(this._DebugCluster);
      } else if (name.equals("DebugClusterAnnouncements")) {
         return new Boolean(this._DebugClusterAnnouncements);
      } else if (name.equals("DebugClusterFragments")) {
         return new Boolean(this._DebugClusterFragments);
      } else if (name.equals("DebugClusterHeartbeats")) {
         return new Boolean(this._DebugClusterHeartbeats);
      } else if (name.equals("DebugCoherence")) {
         return new Boolean(this._DebugCoherence);
      } else if (name.equals("DebugConcurrent")) {
         return new Boolean(this._DebugConcurrent);
      } else if (name.equals("DebugConcurrentContext")) {
         return new Boolean(this._DebugConcurrentContext);
      } else if (name.equals("DebugConcurrentMES")) {
         return new Boolean(this._DebugConcurrentMES);
      } else if (name.equals("DebugConcurrentMSES")) {
         return new Boolean(this._DebugConcurrentMSES);
      } else if (name.equals("DebugConcurrentMTF")) {
         return new Boolean(this._DebugConcurrentMTF);
      } else if (name.equals("DebugConcurrentTransaction")) {
         return new Boolean(this._DebugConcurrentTransaction);
      } else if (name.equals("DebugConfigurationEdit")) {
         return new Boolean(this._DebugConfigurationEdit);
      } else if (name.equals("DebugConfigurationRuntime")) {
         return new Boolean(this._DebugConfigurationRuntime);
      } else if (name.equals("DebugConnectorService")) {
         return new Boolean(this._DebugConnectorService);
      } else if (name.equals("DebugConsensusLeasing")) {
         return new Boolean(this._DebugConsensusLeasing);
      } else if (name.equals("DebugDRSCalls")) {
         return new Boolean(this._DebugDRSCalls);
      } else if (name.equals("DebugDRSHeartbeats")) {
         return new Boolean(this._DebugDRSHeartbeats);
      } else if (name.equals("DebugDRSMessages")) {
         return new Boolean(this._DebugDRSMessages);
      } else if (name.equals("DebugDRSQueues")) {
         return new Boolean(this._DebugDRSQueues);
      } else if (name.equals("DebugDRSStateTransitions")) {
         return new Boolean(this._DebugDRSStateTransitions);
      } else if (name.equals("DebugDRSUpdateStatus")) {
         return new Boolean(this._DebugDRSUpdateStatus);
      } else if (name.equals("DebugDataSourceInterceptor")) {
         return new Boolean(this._DebugDataSourceInterceptor);
      } else if (name.equals("DebugDebugPatches")) {
         return new Boolean(this._DebugDebugPatches);
      } else if (name.equals("DebugDefaultStoreVerbose")) {
         return new Boolean(this._DebugDefaultStoreVerbose);
      } else if (name.equals("DebugDeploy")) {
         return new Boolean(this._DebugDeploy);
      } else if (name.equals("DebugDeployment")) {
         return new Boolean(this._DebugDeployment);
      } else if (name.equals("DebugDeploymentConcise")) {
         return new Boolean(this._DebugDeploymentConcise);
      } else if (name.equals("DebugDeploymentPlan")) {
         return new Boolean(this._DebugDeploymentPlan);
      } else if (name.equals("DebugDeploymentService")) {
         return new Boolean(this._DebugDeploymentService);
      } else if (name.equals("DebugDeploymentServiceInternal")) {
         return new Boolean(this._DebugDeploymentServiceInternal);
      } else if (name.equals("DebugDeploymentServiceStatusUpdates")) {
         return new Boolean(this._DebugDeploymentServiceStatusUpdates);
      } else if (name.equals("DebugDeploymentServiceTransport")) {
         return new Boolean(this._DebugDeploymentServiceTransport);
      } else if (name.equals("DebugDeploymentServiceTransportHttp")) {
         return new Boolean(this._DebugDeploymentServiceTransportHttp);
      } else if (name.equals("DebugDescriptor")) {
         return new Boolean(this._DebugDescriptor);
      } else if (name.equals("DebugDiagnosticAccessor")) {
         return new Boolean(this._DebugDiagnosticAccessor);
      } else if (name.equals("DebugDiagnosticArchive")) {
         return new Boolean(this._DebugDiagnosticArchive);
      } else if (name.equals("DebugDiagnosticArchiveRetirement")) {
         return new Boolean(this._DebugDiagnosticArchiveRetirement);
      } else if (name.equals("DebugDiagnosticCollections")) {
         return new Boolean(this._DebugDiagnosticCollections);
      } else if (name.equals("DebugDiagnosticContext")) {
         return new Boolean(this._DebugDiagnosticContext);
      } else if (name.equals("DebugDiagnosticDataGathering")) {
         return new Boolean(this._DebugDiagnosticDataGathering);
      } else if (name.equals("DebugDiagnosticFileArchive")) {
         return new Boolean(this._DebugDiagnosticFileArchive);
      } else if (name.equals("DebugDiagnosticImage")) {
         return new Boolean(this._DebugDiagnosticImage);
      } else if (name.equals("DebugDiagnosticInstrumentation")) {
         return new Boolean(this._DebugDiagnosticInstrumentation);
      } else if (name.equals("DebugDiagnosticInstrumentationActions")) {
         return new Boolean(this._DebugDiagnosticInstrumentationActions);
      } else if (name.equals("DebugDiagnosticInstrumentationClassInfo")) {
         return new Boolean(this._DebugDiagnosticInstrumentationClassInfo);
      } else if (name.equals("DebugDiagnosticInstrumentationConfig")) {
         return new Boolean(this._DebugDiagnosticInstrumentationConfig);
      } else if (name.equals("DebugDiagnosticInstrumentationEvents")) {
         return new Boolean(this._DebugDiagnosticInstrumentationEvents);
      } else if (name.equals("DebugDiagnosticInstrumentationResult")) {
         return new Boolean(this._DebugDiagnosticInstrumentationResult);
      } else if (name.equals("DebugDiagnosticInstrumentationWeaving")) {
         return new Boolean(this._DebugDiagnosticInstrumentationWeaving);
      } else if (name.equals("DebugDiagnosticInstrumentationWeavingMatches")) {
         return new Boolean(this._DebugDiagnosticInstrumentationWeavingMatches);
      } else if (name.equals("DebugDiagnosticJdbcArchive")) {
         return new Boolean(this._DebugDiagnosticJdbcArchive);
      } else if (name.equals("DebugDiagnosticLifecycleHandlers")) {
         return new Boolean(this._DebugDiagnosticLifecycleHandlers);
      } else if (name.equals("DebugDiagnosticNotifications")) {
         return new Boolean(this._DebugDiagnosticNotifications);
      } else if (name.equals("DebugDiagnosticQuery")) {
         return new Boolean(this._DebugDiagnosticQuery);
      } else if (name.equals("DebugDiagnosticRuntimeControlDriver")) {
         return new Boolean(this._DebugDiagnosticRuntimeControlDriver);
      } else if (name.equals("DebugDiagnosticRuntimeControlService")) {
         return new Boolean(this._DebugDiagnosticRuntimeControlService);
      } else if (name.equals("DebugDiagnosticWatch")) {
         return new Boolean(this._DebugDiagnosticWatch);
      } else if (name.equals("DebugDiagnosticWatchEvents")) {
         return new Boolean(this._DebugDiagnosticWatchEvents);
      } else if (name.equals("DebugDiagnosticWatchEventsDetails")) {
         return new Boolean(this._DebugDiagnosticWatchEventsDetails);
      } else if (name.equals("DebugDiagnosticWlstoreArchive")) {
         return new Boolean(this._DebugDiagnosticWlstoreArchive);
      } else if (name.equals("DebugDiagnosticsBeanExtensionResolver")) {
         return new Boolean(this._DebugDiagnosticsBeanExtensionResolver);
      } else if (name.equals("DebugDiagnosticsBeanInfoProviders")) {
         return new Boolean(this._DebugDiagnosticsBeanInfoProviders);
      } else if (name.equals("DebugDiagnosticsELContext")) {
         return new Boolean(this._DebugDiagnosticsELContext);
      } else if (name.equals("DebugDiagnosticsELResolver")) {
         return new Boolean(this._DebugDiagnosticsELResolver);
      } else if (name.equals("DebugDiagnosticsExpressionEvaluators")) {
         return new Boolean(this._DebugDiagnosticsExpressionEvaluators);
      } else if (name.equals("DebugDiagnosticsExpressionFunctionMapper")) {
         return new Boolean(this._DebugDiagnosticsExpressionFunctionMapper);
      } else if (name.equals("DebugDiagnosticsExpressionFunctions")) {
         return new Boolean(this._DebugDiagnosticsExpressionFunctions);
      } else if (name.equals("DebugDiagnosticsExpressionMetrics")) {
         return new Boolean(this._DebugDiagnosticsExpressionMetrics);
      } else if (name.equals("DebugDiagnosticsExpressionPoller")) {
         return new Boolean(this._DebugDiagnosticsExpressionPoller);
      } else if (name.equals("DebugDiagnosticsExpressionPollerBuffer")) {
         return new Boolean(this._DebugDiagnosticsExpressionPollerBuffer);
      } else if (name.equals("DebugDiagnosticsHarvester")) {
         return new Boolean(this._DebugDiagnosticsHarvester);
      } else if (name.equals("DebugDiagnosticsHarvesterData")) {
         return new Boolean(this._DebugDiagnosticsHarvesterData);
      } else if (name.equals("DebugDiagnosticsHarvesterMBeanPlugin")) {
         return new Boolean(this._DebugDiagnosticsHarvesterMBeanPlugin);
      } else if (name.equals("DebugDiagnosticsHarvesterTreeBeanPlugin")) {
         return new Boolean(this._DebugDiagnosticsHarvesterTreeBeanPlugin);
      } else if (name.equals("DebugDiagnosticsMBeanELResolver")) {
         return new Boolean(this._DebugDiagnosticsMBeanELResolver);
      } else if (name.equals("DebugDiagnosticsModule")) {
         return new Boolean(this._DebugDiagnosticsModule);
      } else if (name.equals("DebugDiagnosticsNotifications")) {
         return new Boolean(this._DebugDiagnosticsNotifications);
      } else if (name.equals("DebugDiagnosticsScriptAction")) {
         return new Boolean(this._DebugDiagnosticsScriptAction);
      } else if (name.equals("DebugDiagnosticsTimer")) {
         return new Boolean(this._DebugDiagnosticsTimer);
      } else if (name.equals("DebugDiagnosticsUtils")) {
         return new Boolean(this._DebugDiagnosticsUtils);
      } else if (name.equals("DebugDiagnosticsValueTracingELResolver")) {
         return new Boolean(this._DebugDiagnosticsValueTracingELResolver);
      } else if (name.equals("DebugDomainLogHandler")) {
         return new Boolean(this._DebugDomainLogHandler);
      } else if (name.equals("DebugDomainUpgradeServerService")) {
         return new Boolean(this._DebugDomainUpgradeServerService);
      } else if (name.equals("DebugDynamicSingletonServices")) {
         return new Boolean(this._DebugDynamicSingletonServices);
      } else if (name.equals("DebugEjbCaching")) {
         return new Boolean(this._DebugEjbCaching);
      } else if (name.equals("DebugEjbCmpDeployment")) {
         return new Boolean(this._DebugEjbCmpDeployment);
      } else if (name.equals("DebugEjbCmpRuntime")) {
         return new Boolean(this._DebugEjbCmpRuntime);
      } else if (name.equals("DebugEjbCompilation")) {
         return new Boolean(this._DebugEjbCompilation);
      } else if (name.equals("DebugEjbDeployment")) {
         return new Boolean(this._DebugEjbDeployment);
      } else if (name.equals("DebugEjbInvoke")) {
         return new Boolean(this._DebugEjbInvoke);
      } else if (name.equals("DebugEjbLocking")) {
         return new Boolean(this._DebugEjbLocking);
      } else if (name.equals("DebugEjbMdbConnection")) {
         return new Boolean(this._DebugEjbMdbConnection);
      } else if (name.equals("DebugEjbMetadata")) {
         return new Boolean(this._DebugEjbMetadata);
      } else if (name.equals("DebugEjbPooling")) {
         return new Boolean(this._DebugEjbPooling);
      } else if (name.equals("DebugEjbSecurity")) {
         return new Boolean(this._DebugEjbSecurity);
      } else if (name.equals("DebugEjbSwapping")) {
         return new Boolean(this._DebugEjbSwapping);
      } else if (name.equals("DebugEjbTimerStore")) {
         return new Boolean(this._DebugEjbTimerStore);
      } else if (name.equals("DebugEjbTimers")) {
         return new Boolean(this._DebugEjbTimers);
      } else if (name.equals("DebugElasticActions")) {
         return new Boolean(this._DebugElasticActions);
      } else if (name.equals("DebugElasticServices")) {
         return new Boolean(this._DebugElasticServices);
      } else if (name.equals("DebugEmbeddedLDAP")) {
         return new Boolean(this._DebugEmbeddedLDAP);
      } else if (name.equals("DebugEmbeddedLDAPLogLevel")) {
         return new Integer(this._DebugEmbeddedLDAPLogLevel);
      } else if (name.equals("DebugEmbeddedLDAPLogToConsole")) {
         return new Boolean(this._DebugEmbeddedLDAPLogToConsole);
      } else if (name.equals("DebugEmbeddedLDAPWriteOverrideProps")) {
         return new Boolean(this._DebugEmbeddedLDAPWriteOverrideProps);
      } else if (name.equals("DebugEventManager")) {
         return new Boolean(this._DebugEventManager);
      } else if (name.equals("DebugExpressionBeanLocalizer")) {
         return new Boolean(this._DebugExpressionBeanLocalizer);
      } else if (name.equals("DebugExpressionExtensionsManager")) {
         return new Boolean(this._DebugExpressionExtensionsManager);
      } else if (name.equals("DebugExpressionPoller")) {
         return new Boolean(this._DebugExpressionPoller);
      } else if (name.equals("DebugFileDistributionServlet")) {
         return new Boolean(this._DebugFileDistributionServlet);
      } else if (name.equals("DebugFileOwnerFixer")) {
         return new Boolean(this._DebugFileOwnerFixer);
      } else if (name.equals("DebugHarvesterTypeInfoCache")) {
         return new Boolean(this._DebugHarvesterTypeInfoCache);
      } else if (name.equals("DebugHttp")) {
         return new Boolean(this._DebugHttp);
      } else if (name.equals("DebugHttpConcise")) {
         return new Boolean(this._DebugHttpConcise);
      } else if (name.equals("DebugHttpLogging")) {
         return new Boolean(this._DebugHttpLogging);
      } else if (name.equals("DebugHttpSessions")) {
         return new Boolean(this._DebugHttpSessions);
      } else if (name.equals("DebugIIOPDetail")) {
         return new Boolean(this._DebugIIOPDetail);
      } else if (name.equals("DebugIIOPNaming")) {
         return new Boolean(this._DebugIIOPNaming);
      } else if (name.equals("DebugIIOPRepalcer")) {
         return new Boolean(this._DebugIIOPRepalcer);
      } else if (name.equals("DebugIIOPTunneling")) {
         return new Boolean(this._DebugIIOPTunneling);
      } else if (name.equals("DebugInterceptors")) {
         return new Boolean(this._DebugInterceptors);
      } else if (name.equals("DebugJ2EEManagement")) {
         return new Boolean(this._DebugJ2EEManagement);
      } else if (name.equals("DebugJAXPDebugLevel")) {
         return new Integer(this._DebugJAXPDebugLevel);
      } else if (name.equals("DebugJAXPDebugName")) {
         return this._DebugJAXPDebugName;
      } else if (name.equals("DebugJAXPIncludeClass")) {
         return new Boolean(this._DebugJAXPIncludeClass);
      } else if (name.equals("DebugJAXPIncludeLocation")) {
         return new Boolean(this._DebugJAXPIncludeLocation);
      } else if (name.equals("DebugJAXPIncludeName")) {
         return new Boolean(this._DebugJAXPIncludeName);
      } else if (name.equals("DebugJAXPIncludeTime")) {
         return new Boolean(this._DebugJAXPIncludeTime);
      } else if (name.equals("DebugJAXPOutputStream")) {
         return this._DebugJAXPOutputStream;
      } else if (name.equals("DebugJAXPUseShortClass")) {
         return new Boolean(this._DebugJAXPUseShortClass);
      } else if (name.equals("DebugJDBCConn")) {
         return new Boolean(this._DebugJDBCConn);
      } else if (name.equals("DebugJDBCDriverLogging")) {
         return new Boolean(this._DebugJDBCDriverLogging);
      } else if (name.equals("DebugJDBCInternal")) {
         return new Boolean(this._DebugJDBCInternal);
      } else if (name.equals("DebugJDBCONS")) {
         return new Boolean(this._DebugJDBCONS);
      } else if (name.equals("DebugJDBCRAC")) {
         return new Boolean(this._DebugJDBCRAC);
      } else if (name.equals("DebugJDBCRMI")) {
         return new Boolean(this._DebugJDBCRMI);
      } else if (name.equals("DebugJDBCReplay")) {
         return new Boolean(this._DebugJDBCReplay);
      } else if (name.equals("DebugJDBCSQL")) {
         return new Boolean(this._DebugJDBCSQL);
      } else if (name.equals("DebugJDBCUCP")) {
         return new Boolean(this._DebugJDBCUCP);
      } else if (name.equals("DebugJMSAME")) {
         return new Boolean(this._DebugJMSAME);
      } else if (name.equals("DebugJMSBackEnd")) {
         return new Boolean(this._DebugJMSBackEnd);
      } else if (name.equals("DebugJMSBoot")) {
         return new Boolean(this._DebugJMSBoot);
      } else if (name.equals("DebugJMSCDS")) {
         return new Boolean(this._DebugJMSCDS);
      } else if (name.equals("DebugJMSCommon")) {
         return new Boolean(this._DebugJMSCommon);
      } else if (name.equals("DebugJMSConfig")) {
         return new Boolean(this._DebugJMSConfig);
      } else if (name.equals("DebugJMSCrossDomainSecurity")) {
         return new Boolean(this._DebugJMSCrossDomainSecurity);
      } else if (name.equals("DebugJMSDispatcher")) {
         return new Boolean(this._DebugJMSDispatcher);
      } else if (name.equals("DebugJMSDispatcherProxy")) {
         return new Boolean(this._DebugJMSDispatcherProxy);
      } else if (name.equals("DebugJMSDispatcherUtilsVerbose")) {
         return new Boolean(this._DebugJMSDispatcherUtilsVerbose);
      } else if (name.equals("DebugJMSDispatcherVerbose")) {
         return new Boolean(this._DebugJMSDispatcherVerbose);
      } else if (name.equals("DebugJMSDistTopic")) {
         return new Boolean(this._DebugJMSDistTopic);
      } else if (name.equals("DebugJMSDotNetProxy")) {
         return new Boolean(this._DebugJMSDotNetProxy);
      } else if (name.equals("DebugJMSDotNetT3Server")) {
         return new Boolean(this._DebugJMSDotNetT3Server);
      } else if (name.equals("DebugJMSDotNetTransport")) {
         return new Boolean(this._DebugJMSDotNetTransport);
      } else if (name.equals("DebugJMSDurSub")) {
         return new Boolean(this._DebugJMSDurSub);
      } else if (name.equals("DebugJMSDurableSubscribers")) {
         return new Boolean(this._DebugJMSDurableSubscribers);
      } else if (name.equals("DebugJMSFrontEnd")) {
         return new Boolean(this._DebugJMSFrontEnd);
      } else if (name.equals("DebugJMSJDBCScavengeOnFlush")) {
         return new Boolean(this._DebugJMSJDBCScavengeOnFlush);
      } else if (name.equals("DebugJMSJNDI")) {
         return new Boolean(this._DebugJMSJNDI);
      } else if (name.equals("DebugJMSLocking")) {
         return new Boolean(this._DebugJMSLocking);
      } else if (name.equals("DebugJMSMessagePath")) {
         return new Boolean(this._DebugJMSMessagePath);
      } else if (name.equals("DebugJMSModule")) {
         return new Boolean(this._DebugJMSModule);
      } else if (name.equals("DebugJMSOBS")) {
         return new Boolean(this._DebugJMSOBS);
      } else if (name.equals("DebugJMSPauseResume")) {
         return new Boolean(this._DebugJMSPauseResume);
      } else if (name.equals("DebugJMSSAF")) {
         return new Boolean(this._DebugJMSSAF);
      } else if (name.equals("DebugJMSStore")) {
         return new Boolean(this._DebugJMSStore);
      } else if (name.equals("DebugJMST3Server")) {
         return new Boolean(this._DebugJMST3Server);
      } else if (name.equals("DebugJMSWrappers")) {
         return new Boolean(this._DebugJMSWrappers);
      } else if (name.equals("DebugJMSXA")) {
         return new Boolean(this._DebugJMSXA);
      } else if (name.equals("DebugJMX")) {
         return new Boolean(this._DebugJMX);
      } else if (name.equals("DebugJMXCompatibility")) {
         return new Boolean(this._DebugJMXCompatibility);
      } else if (name.equals("DebugJMXContext")) {
         return new Boolean(this._DebugJMXContext);
      } else if (name.equals("DebugJMXCore")) {
         return new Boolean(this._DebugJMXCore);
      } else if (name.equals("DebugJMXCoreConcise")) {
         return new Boolean(this._DebugJMXCoreConcise);
      } else if (name.equals("DebugJMXDomain")) {
         return new Boolean(this._DebugJMXDomain);
      } else if (name.equals("DebugJMXEdit")) {
         return new Boolean(this._DebugJMXEdit);
      } else if (name.equals("DebugJMXRuntime")) {
         return new Boolean(this._DebugJMXRuntime);
      } else if (name.equals("DebugJNDI")) {
         return new Boolean(this._DebugJNDI);
      } else if (name.equals("DebugJNDIFactories")) {
         return new Boolean(this._DebugJNDIFactories);
      } else if (name.equals("DebugJNDIResolution")) {
         return new Boolean(this._DebugJNDIResolution);
      } else if (name.equals("DebugJPA")) {
         return new Boolean(this._DebugJPA);
      } else if (name.equals("DebugJTA2PC")) {
         return new Boolean(this._DebugJTA2PC);
      } else if (name.equals("DebugJTA2PCDetail")) {
         return new Boolean(this._DebugJTA2PCDetail);
      } else if (name.equals("DebugJTA2PCStackTrace")) {
         return new Boolean(this._DebugJTA2PCStackTrace);
      } else if (name.equals("DebugJTAAPI")) {
         return new Boolean(this._DebugJTAAPI);
      } else if (name.equals("DebugJTACDI")) {
         return new Boolean(this._DebugJTACDI);
      } else if (name.equals("DebugJTAGateway")) {
         return new Boolean(this._DebugJTAGateway);
      } else if (name.equals("DebugJTAGatewayStackTrace")) {
         return new Boolean(this._DebugJTAGatewayStackTrace);
      } else if (name.equals("DebugJTAHealth")) {
         return new Boolean(this._DebugJTAHealth);
      } else if (name.equals("DebugJTAJDBC")) {
         return new Boolean(this._DebugJTAJDBC);
      } else if (name.equals("DebugJTALLR")) {
         return new Boolean(this._DebugJTALLR);
      } else if (name.equals("DebugJTALifecycle")) {
         return new Boolean(this._DebugJTALifecycle);
      } else if (name.equals("DebugJTAMigration")) {
         return new Boolean(this._DebugJTAMigration);
      } else if (name.equals("DebugJTANaming")) {
         return new Boolean(this._DebugJTANaming);
      } else if (name.equals("DebugJTANamingStackTrace")) {
         return new Boolean(this._DebugJTANamingStackTrace);
      } else if (name.equals("DebugJTANonXA")) {
         return new Boolean(this._DebugJTANonXA);
      } else if (name.equals("DebugJTAPropagate")) {
         return new Boolean(this._DebugJTAPropagate);
      } else if (name.equals("DebugJTARMI")) {
         return new Boolean(this._DebugJTARMI);
      } else if (name.equals("DebugJTARecovery")) {
         return new Boolean(this._DebugJTARecovery);
      } else if (name.equals("DebugJTARecoveryStackTrace")) {
         return new Boolean(this._DebugJTARecoveryStackTrace);
      } else if (name.equals("DebugJTAResourceHealth")) {
         return new Boolean(this._DebugJTAResourceHealth);
      } else if (name.equals("DebugJTAResourceName")) {
         return this._DebugJTAResourceName;
      } else if (name.equals("DebugJTATLOG")) {
         return new Boolean(this._DebugJTATLOG);
      } else if (name.equals("DebugJTATransactionName")) {
         return this._DebugJTATransactionName;
      } else if (name.equals("DebugJTAXA")) {
         return new Boolean(this._DebugJTAXA);
      } else if (name.equals("DebugJTAXAStackTrace")) {
         return new Boolean(this._DebugJTAXAStackTrace);
      } else if (name.equals("DebugJpaDataCache")) {
         return new Boolean(this._DebugJpaDataCache);
      } else if (name.equals("DebugJpaEnhance")) {
         return new Boolean(this._DebugJpaEnhance);
      } else if (name.equals("DebugJpaJdbcJdbc")) {
         return new Boolean(this._DebugJpaJdbcJdbc);
      } else if (name.equals("DebugJpaJdbcSchema")) {
         return new Boolean(this._DebugJpaJdbcSchema);
      } else if (name.equals("DebugJpaJdbcSql")) {
         return new Boolean(this._DebugJpaJdbcSql);
      } else if (name.equals("DebugJpaManage")) {
         return new Boolean(this._DebugJpaManage);
      } else if (name.equals("DebugJpaMetaData")) {
         return new Boolean(this._DebugJpaMetaData);
      } else if (name.equals("DebugJpaProfile")) {
         return new Boolean(this._DebugJpaProfile);
      } else if (name.equals("DebugJpaQuery")) {
         return new Boolean(this._DebugJpaQuery);
      } else if (name.equals("DebugJpaRuntime")) {
         return new Boolean(this._DebugJpaRuntime);
      } else if (name.equals("DebugJpaTool")) {
         return new Boolean(this._DebugJpaTool);
      } else if (name.equals("DebugKodoWeblogic")) {
         return new Boolean(this._DebugKodoWeblogic);
      } else if (name.equals("DebugLeaderElection")) {
         return new Boolean(this._DebugLeaderElection);
      } else if (name.equals("DebugLegacy")) {
         return new Boolean(this._DebugLegacy);
      } else if (name.equals("DebugLibraries")) {
         return new Boolean(this._DebugLibraries);
      } else if (name.equals("DebugLifecycleManager")) {
         return new Boolean(this._DebugLifecycleManager);
      } else if (name.equals("DebugLoggingConfiguration")) {
         return new Boolean(this._DebugLoggingConfiguration);
      } else if (name.equals("DebugMBeanCIC")) {
         return new Boolean(this._DebugMBeanCIC);
      } else if (name.equals("DebugMBeanEventHandler")) {
         return new Boolean(this._DebugMBeanEventHandler);
      } else if (name.equals("DebugMBeanEventHandlerSummary")) {
         return new Boolean(this._DebugMBeanEventHandlerSummary);
      } else if (name.equals("DebugMBeanEventHandlerWork")) {
         return new Boolean(this._DebugMBeanEventHandlerWork);
      } else if (name.equals("DebugMBeanHarvesterControl")) {
         return new Boolean(this._DebugMBeanHarvesterControl);
      } else if (name.equals("DebugMBeanHarvesterDataCollection")) {
         return new Boolean(this._DebugMBeanHarvesterDataCollection);
      } else if (name.equals("DebugMBeanHarvesterResolution")) {
         return new Boolean(this._DebugMBeanHarvesterResolution);
      } else if (name.equals("DebugMBeanHarvesterThreading")) {
         return new Boolean(this._DebugMBeanHarvesterThreading);
      } else if (name.equals("DebugMBeanLocalization")) {
         return new Boolean(this._DebugMBeanLocalization);
      } else if (name.equals("DebugMBeanTypeUtilQueue")) {
         return new Boolean(this._DebugMBeanTypeUtilQueue);
      } else if (name.equals("DebugMBeanTypeUtilQueuePriority")) {
         return new Boolean(this._DebugMBeanTypeUtilQueuePriority);
      } else if (name.equals("DebugMBeanTypeUtilityListener")) {
         return new Boolean(this._DebugMBeanTypeUtilityListener);
      } else if (name.equals("DebugMBeanTypingUtility")) {
         return new Boolean(this._DebugMBeanTypingUtility);
      } else if (name.equals("DebugMailSessionDeployment")) {
         return new Boolean(this._DebugMailSessionDeployment);
      } else if (name.equals("DebugManagedBean")) {
         return new Boolean(this._DebugManagedBean);
      } else if (name.equals("DebugManagementServicesResource")) {
         return new Boolean(this._DebugManagementServicesResource);
      } else if (name.equals("DebugMaskCriterias")) {
         return this._DebugMaskCriterias;
      } else if (name.equals("DebugMessagingBridgeDumpToConsole")) {
         return new Boolean(this._DebugMessagingBridgeDumpToConsole);
      } else if (name.equals("DebugMessagingBridgeDumpToLog")) {
         return new Boolean(this._DebugMessagingBridgeDumpToLog);
      } else if (name.equals("DebugMessagingBridgeRuntime")) {
         return new Boolean(this._DebugMessagingBridgeRuntime);
      } else if (name.equals("DebugMessagingBridgeRuntimeVerbose")) {
         return new Boolean(this._DebugMessagingBridgeRuntimeVerbose);
      } else if (name.equals("DebugMessagingBridgeStartup")) {
         return new Boolean(this._DebugMessagingBridgeStartup);
      } else if (name.equals("DebugMessagingKernel")) {
         return new Boolean(this._DebugMessagingKernel);
      } else if (name.equals("DebugMessagingKernelBoot")) {
         return new Boolean(this._DebugMessagingKernelBoot);
      } else if (name.equals("DebugMessagingOwnableLock")) {
         return new Boolean(this._DebugMessagingOwnableLock);
      } else if (name.equals("DebugMigrationInfo")) {
         return new Boolean(this._DebugMigrationInfo);
      } else if (name.equals("DebugNIO")) {
         return new Boolean(this._DebugNIO);
      } else if (name.equals("DebugNodeManagerRuntime")) {
         return new Boolean(this._DebugNodeManagerRuntime);
      } else if (name.equals("DebugPageFlowMonitoring")) {
         return new Boolean(this._DebugPageFlowMonitoring);
      } else if (name.equals("DebugPartitionJMX")) {
         return new Boolean(this._DebugPartitionJMX);
      } else if (name.equals("DebugPartitionLifecycle")) {
         return new Boolean(this._DebugPartitionLifecycle);
      } else if (name.equals("DebugPartitionPortability")) {
         return new Boolean(this._DebugPartitionPortability);
      } else if (name.equals("DebugPartitionResourceMetricsRuntime")) {
         return new Boolean(this._DebugPartitionResourceMetricsRuntime);
      } else if (name.equals("DebugPatchingRuntime")) {
         return new Boolean(this._DebugPatchingRuntime);
      } else if (name.equals("DebugPathSvc")) {
         return new Boolean(this._DebugPathSvc);
      } else if (name.equals("DebugPathSvcVerbose")) {
         return new Boolean(this._DebugPathSvcVerbose);
      } else if (name.equals("DebugPersistentStoreManager")) {
         return new Boolean(this._DebugPersistentStoreManager);
      } else if (name.equals("DebugPubSubBayeux")) {
         return new Boolean(this._DebugPubSubBayeux);
      } else if (name.equals("DebugPubSubChannel")) {
         return new Boolean(this._DebugPubSubChannel);
      } else if (name.equals("DebugPubSubClient")) {
         return new Boolean(this._DebugPubSubClient);
      } else if (name.equals("DebugPubSubSecurity")) {
         return new Boolean(this._DebugPubSubSecurity);
      } else if (name.equals("DebugPubSubServer")) {
         return new Boolean(this._DebugPubSubServer);
      } else if (name.equals("DebugRA")) {
         return new Boolean(this._DebugRA);
      } else if (name.equals("DebugRAClassloader")) {
         return new Boolean(this._DebugRAClassloader);
      } else if (name.equals("DebugRAConnEvents")) {
         return new Boolean(this._DebugRAConnEvents);
      } else if (name.equals("DebugRAConnections")) {
         return new Boolean(this._DebugRAConnections);
      } else if (name.equals("DebugRADeployment")) {
         return new Boolean(this._DebugRADeployment);
      } else if (name.equals("DebugRALifecycle")) {
         return new Boolean(this._DebugRALifecycle);
      } else if (name.equals("DebugRALocalOut")) {
         return new Boolean(this._DebugRALocalOut);
      } else if (name.equals("DebugRAParsing")) {
         return new Boolean(this._DebugRAParsing);
      } else if (name.equals("DebugRAPoolVerbose")) {
         return new Boolean(this._DebugRAPoolVerbose);
      } else if (name.equals("DebugRAPooling")) {
         return new Boolean(this._DebugRAPooling);
      } else if (name.equals("DebugRASecurityCtx")) {
         return new Boolean(this._DebugRASecurityCtx);
      } else if (name.equals("DebugRAWork")) {
         return new Boolean(this._DebugRAWork);
      } else if (name.equals("DebugRAWorkEvents")) {
         return new Boolean(this._DebugRAWorkEvents);
      } else if (name.equals("DebugRAXAin")) {
         return new Boolean(this._DebugRAXAin);
      } else if (name.equals("DebugRAXAout")) {
         return new Boolean(this._DebugRAXAout);
      } else if (name.equals("DebugRAXAwork")) {
         return new Boolean(this._DebugRAXAwork);
      } else if (name.equals("DebugRCM")) {
         return new Boolean(this._DebugRCM);
      } else if (name.equals("DebugRESTNotifications")) {
         return new Boolean(this._DebugRESTNotifications);
      } else if (name.equals("DebugRMIDetailed")) {
         return new Boolean(this._DebugRMIDetailed);
      } else if (name.equals("DebugRMIRequestPerf")) {
         return new Boolean(this._DebugRMIRequestPerf);
      } else if (name.equals("DebugReadyApp")) {
         return new Boolean(this._DebugReadyApp);
      } else if (name.equals("DebugRedefAttach")) {
         return new Boolean(this._DebugRedefAttach);
      } else if (name.equals("DebugReplication")) {
         return new Boolean(this._DebugReplication);
      } else if (name.equals("DebugReplicationDetails")) {
         return new Boolean(this._DebugReplicationDetails);
      } else if (name.equals("DebugReplicationSize")) {
         return new Boolean(this._DebugReplicationSize);
      } else if (name.equals("DebugRequestManager")) {
         return new Boolean(this._DebugRequestManager);
      } else if (name.equals("DebugResourceGroupMigration")) {
         return new Boolean(this._DebugResourceGroupMigration);
      } else if (name.equals("DebugRestJersey1Integration")) {
         return new Boolean(this._DebugRestJersey1Integration);
      } else if (name.equals("DebugRestJersey2Integration")) {
         return new Boolean(this._DebugRestJersey2Integration);
      } else if (name.equals("DebugRestartInPlace")) {
         return new Boolean(this._DebugRestartInPlace);
      } else if (name.equals("DebugSAFAdmin")) {
         return new Boolean(this._DebugSAFAdmin);
      } else if (name.equals("DebugSAFLifeCycle")) {
         return new Boolean(this._DebugSAFLifeCycle);
      } else if (name.equals("DebugSAFManager")) {
         return new Boolean(this._DebugSAFManager);
      } else if (name.equals("DebugSAFMessagePath")) {
         return new Boolean(this._DebugSAFMessagePath);
      } else if (name.equals("DebugSAFReceivingAgent")) {
         return new Boolean(this._DebugSAFReceivingAgent);
      } else if (name.equals("DebugSAFSendingAgent")) {
         return new Boolean(this._DebugSAFSendingAgent);
      } else if (name.equals("DebugSAFStore")) {
         return new Boolean(this._DebugSAFStore);
      } else if (name.equals("DebugSAFTransport")) {
         return new Boolean(this._DebugSAFTransport);
      } else if (name.equals("DebugSAFVerbose")) {
         return new Boolean(this._DebugSAFVerbose);
      } else if (name.equals("DebugSNMPAgent")) {
         return new Boolean(this._DebugSNMPAgent);
      } else if (name.equals("DebugSNMPExtensionProvider")) {
         return new Boolean(this._DebugSNMPExtensionProvider);
      } else if (name.equals("DebugSNMPMib")) {
         return new Boolean(this._DebugSNMPMib);
      } else if (name.equals("DebugSNMPProtocolTCP")) {
         return new Boolean(this._DebugSNMPProtocolTCP);
      } else if (name.equals("DebugSNMPToolkit")) {
         return new Boolean(this._DebugSNMPToolkit);
      } else if (name.equals("DebugScaContainer")) {
         return new Boolean(this._DebugScaContainer);
      } else if (name.equals("DebugScrubberStartService")) {
         return new Boolean(this._DebugScrubberStartService);
      } else if (name.equals("DebugSecurity")) {
         return new Boolean(this._DebugSecurity);
      } else if (name.equals("DebugSecurityAdjudicator")) {
         return new Boolean(this._DebugSecurityAdjudicator);
      } else if (name.equals("DebugSecurityAtn")) {
         return new Boolean(this._DebugSecurityAtn);
      } else if (name.equals("DebugSecurityAtz")) {
         return new Boolean(this._DebugSecurityAtz);
      } else if (name.equals("DebugSecurityAuditor")) {
         return new Boolean(this._DebugSecurityAuditor);
      } else if (name.equals("DebugSecurityCertPath")) {
         return new Boolean(this._DebugSecurityCertPath);
      } else if (name.equals("DebugSecurityCredMap")) {
         return new Boolean(this._DebugSecurityCredMap);
      } else if (name.equals("DebugSecurityEEngine")) {
         return new Boolean(this._DebugSecurityEEngine);
      } else if (name.equals("DebugSecurityEncryptionService")) {
         return new Boolean(this._DebugSecurityEncryptionService);
      } else if (name.equals("DebugSecurityJACC")) {
         return new Boolean(this._DebugSecurityJACC);
      } else if (name.equals("DebugSecurityJACCNonPolicy")) {
         return new Boolean(this._DebugSecurityJACCNonPolicy);
      } else if (name.equals("DebugSecurityJACCPolicy")) {
         return new Boolean(this._DebugSecurityJACCPolicy);
      } else if (name.equals("DebugSecurityKeyStore")) {
         return new Boolean(this._DebugSecurityKeyStore);
      } else if (name.equals("DebugSecurityPasswordPolicy")) {
         return new Boolean(this._DebugSecurityPasswordPolicy);
      } else if (name.equals("DebugSecurityPredicate")) {
         return new Boolean(this._DebugSecurityPredicate);
      } else if (name.equals("DebugSecurityProfiler")) {
         return new Boolean(this._DebugSecurityProfiler);
      } else if (name.equals("DebugSecurityRealm")) {
         return new Boolean(this._DebugSecurityRealm);
      } else if (name.equals("DebugSecurityRoleMap")) {
         return new Boolean(this._DebugSecurityRoleMap);
      } else if (name.equals("DebugSecuritySAML2Atn")) {
         return new Boolean(this._DebugSecuritySAML2Atn);
      } else if (name.equals("DebugSecuritySAML2CredMap")) {
         return new Boolean(this._DebugSecuritySAML2CredMap);
      } else if (name.equals("DebugSecuritySAML2Lib")) {
         return new Boolean(this._DebugSecuritySAML2Lib);
      } else if (name.equals("DebugSecuritySAML2Service")) {
         return new Boolean(this._DebugSecuritySAML2Service);
      } else if (name.equals("DebugSecuritySAMLAtn")) {
         return new Boolean(this._DebugSecuritySAMLAtn);
      } else if (name.equals("DebugSecuritySAMLCredMap")) {
         return new Boolean(this._DebugSecuritySAMLCredMap);
      } else if (name.equals("DebugSecuritySAMLLib")) {
         return new Boolean(this._DebugSecuritySAMLLib);
      } else if (name.equals("DebugSecuritySAMLService")) {
         return new Boolean(this._DebugSecuritySAMLService);
      } else if (name.equals("DebugSecuritySSL")) {
         return new Boolean(this._DebugSecuritySSL);
      } else if (name.equals("DebugSecuritySSLEaten")) {
         return new Boolean(this._DebugSecuritySSLEaten);
      } else if (name.equals("DebugSecurityService")) {
         return new Boolean(this._DebugSecurityService);
      } else if (name.equals("DebugSecurityUserLockout")) {
         return new Boolean(this._DebugSecurityUserLockout);
      } else if (name.equals("DebugSelfTuning")) {
         return new Boolean(this._DebugSelfTuning);
      } else if (name.equals("DebugServerLifeCycle")) {
         return new Boolean(this._DebugServerLifeCycle);
      } else if (name.equals("DebugServerMigration")) {
         return new Boolean(this._DebugServerMigration);
      } else if (name.equals("DebugServerRuntime")) {
         return new Boolean(this._DebugServerRuntime);
      } else if (name.equals("DebugServerShutdownStatistics")) {
         return new Boolean(this._DebugServerShutdownStatistics);
      } else if (name.equals("DebugServerShutdownTimer")) {
         return new Boolean(this._DebugServerShutdownTimer);
      } else if (name.equals("DebugServerStartStatistics")) {
         return new Boolean(this._DebugServerStartStatistics);
      } else if (name.equals("DebugServerStartupTimer")) {
         return new Boolean(this._DebugServerStartupTimer);
      } else if (name.equals("DebugSingletonServices")) {
         return new Boolean(this._DebugSingletonServices);
      } else if (name.equals("DebugSituationalConfig")) {
         return new Boolean(this._DebugSituationalConfig);
      } else if (name.equals("DebugSpringStatistics")) {
         return new Boolean(this._DebugSpringStatistics);
      } else if (name.equals("DebugStore")) {
         return new Boolean(this._DebugStore);
      } else if (name.equals("DebugStoreAdmin")) {
         return new Boolean(this._DebugStoreAdmin);
      } else if (name.equals("DebugStoreCache")) {
         return new Boolean(this._DebugStoreCache);
      } else if (name.equals("DebugStoreIOLogical")) {
         return new Boolean(this._DebugStoreIOLogical);
      } else if (name.equals("DebugStoreIOLogicalBoot")) {
         return new Boolean(this._DebugStoreIOLogicalBoot);
      } else if (name.equals("DebugStoreIOPhysical")) {
         return new Boolean(this._DebugStoreIOPhysical);
      } else if (name.equals("DebugStoreIOPhysicalVerbose")) {
         return new Boolean(this._DebugStoreIOPhysicalVerbose);
      } else if (name.equals("DebugStoreRCM")) {
         return new Boolean(this._DebugStoreRCM);
      } else if (name.equals("DebugStoreRCMVerbose")) {
         return new Boolean(this._DebugStoreRCMVerbose);
      } else if (name.equals("DebugStoreXA")) {
         return new Boolean(this._DebugStoreXA);
      } else if (name.equals("DebugStoreXAVerbose")) {
         return new Boolean(this._DebugStoreXAVerbose);
      } else if (name.equals("DebugStubGeneration")) {
         return new Boolean(this._DebugStubGeneration);
      } else if (name.equals("DebugTunnelingConnection")) {
         return new Boolean(this._DebugTunnelingConnection);
      } else if (name.equals("DebugTunnelingConnectionTimeout")) {
         return new Boolean(this._DebugTunnelingConnectionTimeout);
      } else if (name.equals("DebugURLResolution")) {
         return new Boolean(this._DebugURLResolution);
      } else if (name.equals("DebugUnicastMessaging")) {
         return new Boolean(this._DebugUnicastMessaging);
      } else if (name.equals("DebugValidation")) {
         return new Boolean(this._DebugValidation);
      } else if (name.equals("DebugValidationClassLoading")) {
         return new Boolean(this._DebugValidationClassLoading);
      } else if (name.equals("DebugVerboseRCM")) {
         return new Boolean(this._DebugVerboseRCM);
      } else if (name.equals("DebugWANReplicationDetails")) {
         return new Boolean(this._DebugWANReplicationDetails);
      } else if (name.equals("DebugWTCConfig")) {
         return new Boolean(this._DebugWTCConfig);
      } else if (name.equals("DebugWTCCorbaEx")) {
         return new Boolean(this._DebugWTCCorbaEx);
      } else if (name.equals("DebugWTCGwtEx")) {
         return new Boolean(this._DebugWTCGwtEx);
      } else if (name.equals("DebugWTCJatmiEx")) {
         return new Boolean(this._DebugWTCJatmiEx);
      } else if (name.equals("DebugWTCTDomPdu")) {
         return new Boolean(this._DebugWTCTDomPdu);
      } else if (name.equals("DebugWTCTdomPdu")) {
         return new Boolean(this._DebugWTCTdomPdu);
      } else if (name.equals("DebugWTCUData")) {
         return new Boolean(this._DebugWTCUData);
      } else if (name.equals("DebugWTCtBridgeEx")) {
         return new Boolean(this._DebugWTCtBridgeEx);
      } else if (name.equals("DebugWatchScalingActions")) {
         return new Boolean(this._DebugWatchScalingActions);
      } else if (name.equals("DebugWebAppDI")) {
         return new Boolean(this._DebugWebAppDI);
      } else if (name.equals("DebugWebAppIdentityAssertion")) {
         return new Boolean(this._DebugWebAppIdentityAssertion);
      } else if (name.equals("DebugWebAppModule")) {
         return new Boolean(this._DebugWebAppModule);
      } else if (name.equals("DebugWebAppSecurity")) {
         return new Boolean(this._DebugWebAppSecurity);
      } else if (name.equals("DebugWebSocket")) {
         return new Boolean(this._DebugWebSocket);
      } else if (name.equals("DebugXMLEntityCacheDebugLevel")) {
         return new Integer(this._DebugXMLEntityCacheDebugLevel);
      } else if (name.equals("DebugXMLEntityCacheDebugName")) {
         return this._DebugXMLEntityCacheDebugName;
      } else if (name.equals("DebugXMLEntityCacheIncludeClass")) {
         return new Boolean(this._DebugXMLEntityCacheIncludeClass);
      } else if (name.equals("DebugXMLEntityCacheIncludeLocation")) {
         return new Boolean(this._DebugXMLEntityCacheIncludeLocation);
      } else if (name.equals("DebugXMLEntityCacheIncludeName")) {
         return new Boolean(this._DebugXMLEntityCacheIncludeName);
      } else if (name.equals("DebugXMLEntityCacheIncludeTime")) {
         return new Boolean(this._DebugXMLEntityCacheIncludeTime);
      } else if (name.equals("DebugXMLEntityCacheOutputStream")) {
         return this._DebugXMLEntityCacheOutputStream;
      } else if (name.equals("DebugXMLEntityCacheUseShortClass")) {
         return new Boolean(this._DebugXMLEntityCacheUseShortClass);
      } else if (name.equals("DebugXMLRegistryDebugLevel")) {
         return new Integer(this._DebugXMLRegistryDebugLevel);
      } else if (name.equals("DebugXMLRegistryDebugName")) {
         return this._DebugXMLRegistryDebugName;
      } else if (name.equals("DebugXMLRegistryIncludeClass")) {
         return new Boolean(this._DebugXMLRegistryIncludeClass);
      } else if (name.equals("DebugXMLRegistryIncludeLocation")) {
         return new Boolean(this._DebugXMLRegistryIncludeLocation);
      } else if (name.equals("DebugXMLRegistryIncludeName")) {
         return new Boolean(this._DebugXMLRegistryIncludeName);
      } else if (name.equals("DebugXMLRegistryIncludeTime")) {
         return new Boolean(this._DebugXMLRegistryIncludeTime);
      } else if (name.equals("DebugXMLRegistryOutputStream")) {
         return this._DebugXMLRegistryOutputStream;
      } else if (name.equals("DebugXMLRegistryUseShortClass")) {
         return new Boolean(this._DebugXMLRegistryUseShortClass);
      } else if (name.equals("DefaultStore")) {
         return new Boolean(this._DefaultStore);
      } else if (name.equals("DiagnosticContextDebugMode")) {
         return this._DiagnosticContextDebugMode;
      } else if (name.equals("ForceShutdownTimeoutNumOfThreadDump")) {
         return new Integer(this._ForceShutdownTimeoutNumOfThreadDump);
      } else if (name.equals("ForceShutdownTimeoutThreadDumpInterval")) {
         return new Integer(this._ForceShutdownTimeoutThreadDumpInterval);
      } else if (name.equals("GlassFishWebAppParser")) {
         return new Boolean(this._GlassFishWebAppParser);
      } else if (name.equals("GracefulShutdownTimeoutNumOfThreadDump")) {
         return new Integer(this._GracefulShutdownTimeoutNumOfThreadDump);
      } else if (name.equals("GracefulShutdownTimeoutThreadDumpInterval")) {
         return new Integer(this._GracefulShutdownTimeoutThreadDumpInterval);
      } else if (name.equals("ListenThreadDebug")) {
         return new Boolean(this._ListenThreadDebug);
      } else if (name.equals("MagicThreadDumpBackToSocket")) {
         return new Boolean(this._MagicThreadDumpBackToSocket);
      } else if (name.equals("MagicThreadDumpEnabled")) {
         return new Boolean(this._MagicThreadDumpEnabled);
      } else if (name.equals("MagicThreadDumpFile")) {
         return this._MagicThreadDumpFile;
      } else if (name.equals("MagicThreadDumpHost")) {
         return this._MagicThreadDumpHost;
      } else if (name.equals("MasterDeployer")) {
         return new Boolean(this._MasterDeployer);
      } else if (name.equals("OSGiForApps")) {
         return new Boolean(this._OSGiForApps);
      } else if (name.equals("PartitionDebugLoggingEnabled")) {
         return new Boolean(this._PartitionDebugLoggingEnabled);
      } else if (name.equals("PartitionEvenInterceptor")) {
         return new Boolean(this._PartitionEvenInterceptor);
      } else if (name.equals("PortablePartitionHelper")) {
         return new Boolean(this._PortablePartitionHelper);
      } else if (name.equals("RedefiningClassLoader")) {
         return new Boolean(this._RedefiningClassLoader);
      } else if (name.equals("ScriptExecutorCommand")) {
         return new Boolean(this._ScriptExecutorCommand);
      } else if (name.equals("SecurityEncryptionService")) {
         return new Boolean(this._SecurityEncryptionService);
      } else if (name.equals("Server")) {
         return this._Server;
      } else if (name.equals("SlaveDeployer")) {
         return new Boolean(this._SlaveDeployer);
      } else if (name.equals("StartupTimeoutNumOfThreadDump")) {
         return new Integer(this._StartupTimeoutNumOfThreadDump);
      } else if (name.equals("StartupTimeoutThreadDumpInterval")) {
         return new Integer(this._StartupTimeoutThreadDumpInterval);
      } else if (name.equals("T3HttpUpgradeHandler")) {
         return new Boolean(this._T3HttpUpgradeHandler);
      } else if (name.equals("WarExtraction")) {
         return new Boolean(this._WarExtraction);
      } else {
         return name.equals("WebModule") ? new Boolean(this._WebModule) : super.getValue(name);
      }
   }

   public static void validateGeneration() {
      try {
         LegalChecks.checkNonNull("MagicThreadDumpHost", "localhost");
      } catch (IllegalArgumentException var1) {
         throw new DescriptorValidateException("The default value for the property  is null. Properties annotated with false value on @legalZeroLength or @legalNull  should either have @required/@derivedDefault annotations or have a non-null value on @default annotation. Refer annotation legalNull on property MagicThreadDumpHost in ServerDebugMBean" + var1.getMessage());
      }
   }

   // $FF: synthetic method
   static void access$45900(ServerDebugMBeanImpl x0, AbstractDescriptorBean x1, int x2) {
      x0._unSet(x1, x2);
   }

   public static class SchemaHelper2 extends KernelDebugMBeanImpl.SchemaHelper2 implements SchemaHelper {
      public int getPropertyIndex(String s) {
         switch (s.length()) {
            case 6:
               if (s.equals("server")) {
                  return 43;
               }
               break;
            case 7:
               if (s.equals("debugra")) {
                  return 335;
               }
               break;
            case 8:
               if (s.equals("debugcat")) {
                  return 416;
               }

               if (s.equals("debugjmx")) {
                  return 352;
               }

               if (s.equals("debugjpa")) {
                  return 446;
               }

               if (s.equals("debugnio")) {
                  return 458;
               }

               if (s.equals("debugrcm")) {
                  return 404;
               }
            case 9:
            case 45:
            case 47:
            default:
               break;
            case 10:
               if (s.equals("debug-http")) {
                  return 65;
               }

               if (s.equals("debug-jndi")) {
                  return 102;
               }

               if (s.equals("web-module")) {
                  return 260;
               }
               break;
            case 11:
               if (s.equals("debugjta2pc")) {
                  return 131;
               }

               if (s.equals("debugjtaapi")) {
                  return 137;
               }

               if (s.equals("debugjtacdi")) {
                  return 150;
               }

               if (s.equals("debugjtallr")) {
                  return 146;
               }

               if (s.equals("debugjtarmi")) {
                  return 130;
               }

               if (s.equals("debugjta-xa")) {
                  return 127;
               }

               if (s.equals("debug-store")) {
                  return 481;
               }
               break;
            case 12:
               if (s.equals("class-finder")) {
                  return 258;
               }

               if (s.equals("class-loader")) {
                  return 263;
               }

               if (s.equals("debug-attach")) {
                  return 413;
               }

               if (s.equals("debug-deploy")) {
                  return 247;
               }

               if (s.equals("debug-jmsame")) {
                  return 120;
               }

               if (s.equals("debug-jmscds")) {
                  return 126;
               }

               if (s.equals("debug-jmsobs")) {
                  return 444;
               }

               if (s.equals("debug-jms-xa")) {
                  return 113;
               }

               if (s.equals("debugjtatlog")) {
                  return 133;
               }

               if (s.equals("debug-legacy")) {
                  return 449;
               }

               if (s.equals("debugra-work")) {
                  return 348;
               }

               if (s.equals("debugra-xain")) {
                  return 336;
               }
               break;
            case 13:
               if (s.equals("debug-abbrevs")) {
                  return 409;
               }

               if (s.equals("debug-channel")) {
                  return 417;
               }

               if (s.equals("debug-cluster")) {
                  return 89;
               }

               if (s.equals("debug-jdbcons")) {
                  return 208;
               }

               if (s.equals("debug-jdbcrac")) {
                  return 207;
               }

               if (s.equals("debug-jdbcrmi")) {
                  return 204;
               }

               if (s.equals("debug-jdbcucp")) {
                  return 209;
               }

               if (s.equals("debug-jms-saf")) {
                  return 124;
               }

               if (s.equals("debugjmx-core")) {
                  return 353;
               }

               if (s.equals("debugjmx-edit")) {
                  return 357;
               }

               if (s.equals("debugjta-jdbc")) {
                  return 134;
               }

               if (s.equals("debugra-xaout")) {
                  return 337;
               }

               if (s.equals("debugsnmp-mib")) {
                  return 473;
               }

               if (s.equals("default-store")) {
                  return 63;
               }
               break;
            case 14:
               if (s.equals("debugdrs-calls")) {
                  return 96;
               }

               if (s.equals("debug-jdbc-sql")) {
                  return 203;
               }

               if (s.equals("debug-jms-boot")) {
                  return 117;
               }

               if (s.equals("debug-jms-jndi")) {
                  return 443;
               }

               if (s.equals("debug-jpa-tool")) {
                  return 380;
               }

               if (s.equals("debugm-beancic")) {
                  return 450;
               }

               if (s.equals("debug-path-svc")) {
                  return 164;
               }

               if (s.equals("debugra-xawork")) {
                  return 338;
               }

               if (s.equals("debug-security")) {
                  return 168;
               }

               if (s.equals("debug-storercm")) {
                  return 483;
               }

               if (s.equals("debug-store-xa")) {
                  return 220;
               }

               if (s.equals("debugwtcu-data")) {
                  return 370;
               }

               if (s.equals("os-gi-for-apps")) {
                  return 494;
               }

               if (s.equals("slave-deployer")) {
                  return 256;
               }

               if (s.equals("war-extraction")) {
                  return 500;
               }
               break;
            case 15:
               if (s.equals("debug-coherence")) {
                  return 419;
               }

               if (s.equals("debugdrs-queues")) {
                  return 101;
               }

               if (s.equals("debug-jdbc-conn")) {
                  return 202;
               }

               if (s.equals("debug-jms-store")) {
                  return 116;
               }

               if (s.equals("debugjmx-domain")) {
                  return 356;
               }

               if (s.equals("debugjta-health")) {
                  return 147;
               }

               if (s.equals("debugjta-naming")) {
                  return 141;
               }

               if (s.equals("debugjta-non-xa")) {
                  return 128;
               }

               if (s.equals("debug-jpa-query")) {
                  return 378;
               }

               if (s.equals("debug-libraries")) {
                  return 58;
               }

               if (s.equals("debugra-parsing")) {
                  return 343;
               }

               if (s.equals("debugra-pooling")) {
                  return 345;
               }

               if (s.equals("debug-ready-app")) {
                  return 401;
               }

               if (s.equals("debug-saf-admin")) {
                  return 156;
               }

               if (s.equals("debug-saf-store")) {
                  return 162;
               }

               if (s.equals("debugsnmp-agent")) {
                  return 325;
               }

               if (s.equals("debugwtc-config")) {
                  return 368;
               }

               if (s.equals("debugwtc-gwt-ex")) {
                  return 371;
               }

               if (s.equals("debug-web-appdi")) {
                  return 491;
               }

               if (s.equals("master-deployer")) {
                  return 255;
               }
               break;
            case 16:
               if (s.equals("debug-app-client")) {
                  return 410;
               }

               if (s.equals("debug-app-timing")) {
                  return 412;
               }

               if (s.equals("debug-class-size")) {
                  return 62;
               }

               if (s.equals("debug-concurrent")) {
                  return 395;
               }

               if (s.equals("debug-deployment")) {
                  return 248;
               }

               if (s.equals("debug-descriptor")) {
                  return 387;
               }

               if (s.equals("debug-ejb-invoke")) {
                  return 81;
               }

               if (s.equals("debug-ejb-timers")) {
                  return 80;
               }

               if (s.equals("debugiiop-detail")) {
                  return 434;
               }

               if (s.equals("debugiiop-naming")) {
                  return 364;
               }

               if (s.equals("debug-jms-common")) {
                  return 109;
               }

               if (s.equals("debug-jms-config")) {
                  return 110;
               }

               if (s.equals("debug-jms-module")) {
                  return 122;
               }

               if (s.equals("debugjmx-context")) {
                  return 445;
               }

               if (s.equals("debugjmx-runtime")) {
                  return 355;
               }

               if (s.equals("debugjta-gateway")) {
                  return 139;
               }

               if (s.equals("debug-jpa-manage")) {
                  return 381;
               }

               if (s.equals("debug-validation")) {
                  return 487;
               }

               if (s.equals("debug-verbosercm")) {
                  return 405;
               }

               if (s.equals("debug-web-socket")) {
                  return 492;
               }
               break;
            case 17:
               if (s.equals("classpath-servlet")) {
                  return 259;
               }

               if (s.equals("debug-async-queue")) {
                  return 94;
               }

               if (s.equals("debug-class-redef")) {
                  return 60;
               }

               if (s.equals("debugdrs-messages")) {
                  return 98;
               }

               if (s.equals("debug-ejb-caching")) {
                  return 76;
               }

               if (s.equals("debug-ejb-locking")) {
                  return 78;
               }

               if (s.equals("debug-ejb-pooling")) {
                  return 79;
               }

               if (s.equals("debug-jdbc-replay")) {
                  return 210;
               }

               if (s.equals("debug-jms-dur-sub")) {
                  return 442;
               }

               if (s.equals("debug-jms-locking")) {
                  return 112;
               }

               if (s.equals("debugjta-recovery")) {
                  return 135;
               }

               if (s.equals("debug-jpa-enhance")) {
                  return 376;
               }

               if (s.equals("debug-jpa-profile")) {
                  return 382;
               }

               if (s.equals("debug-jpa-runtime")) {
                  return 377;
               }

               if (s.equals("debugra-lifecycle")) {
                  return 340;
               }

               if (s.equals("debugra-local-out")) {
                  return 339;
               }

               if (s.equals("debugrmi-detailed")) {
                  return 469;
               }

               if (s.equals("debug-replication")) {
                  return 92;
               }

               if (s.equals("debug-saf-manager")) {
                  return 157;
               }

               if (s.equals("debug-saf-verbose")) {
                  return 163;
               }

               if (s.equals("debugsnmp-toolkit")) {
                  return 324;
               }

               if (s.equals("debug-securityssl")) {
                  return 173;
               }

               if (s.equals("debug-self-tuning")) {
                  return 38;
               }

               if (s.equals("debug-store-admin")) {
                  return 222;
               }

               if (s.equals("debug-store-cache")) {
                  return 482;
               }

               if (s.equals("debugwtc-corba-ex")) {
                  return 373;
               }

               if (s.equals("debugwtc-jatmi-ex")) {
                  return 372;
               }

               if (s.equals("debugwtct-dom-pdu")) {
                  return 369;
               }

               if (s.equals("debugwtc-tdom-pdu")) {
                  return 489;
               }
               break;
            case 18:
               if (s.equals("debug-ejb-metadata")) {
                  return 85;
               }

               if (s.equals("debug-ejb-security")) {
                  return 82;
               }

               if (s.equals("debug-ejb-swapping")) {
                  return 77;
               }

               if (s.equals("debug-embeddedldap")) {
                  return 176;
               }

               if (s.equals("debug-http-concise")) {
                  return 66;
               }

               if (s.equals("debug-http-logging")) {
                  return 69;
               }

               if (s.equals("debugiiop-repalcer")) {
                  return 435;
               }

               if (s.equals("debug-interceptors")) {
                  return 402;
               }

               if (s.equals("debug-jms-back-end")) {
                  return 107;
               }

               if (s.equals("debug-jmst3-server")) {
                  return 386;
               }

               if (s.equals("debug-jms-wrappers")) {
                  return 125;
               }

               if (s.equals("debugjta2pc-detail")) {
                  return 447;
               }

               if (s.equals("debugjta-lifecycle")) {
                  return 145;
               }

               if (s.equals("debugjta-migration")) {
                  return 144;
               }

               if (s.equals("debugjta-propagate")) {
                  return 138;
               }

               if (s.equals("debug-jpa-jdbc-sql")) {
                  return 383;
               }

               if (s.equals("debug-managed-bean")) {
                  return 456;
               }

               if (s.equals("debug-partitionjmx")) {
                  return 460;
               }

               if (s.equals("debugra-deployment")) {
                  return 342;
               }

               if (s.equals("debug-redef-attach")) {
                  return 470;
               }

               if (s.equals("debug-security-atn")) {
                  return 181;
               }

               if (s.equals("debug-security-atz")) {
                  return 182;
               }

               if (s.equals("debug-securityjacc")) {
                  return 191;
               }
               break;
            case 19:
               if (s.equals("classloader-web-app")) {
                  return 265;
               }

               if (s.equals("debug-app-container")) {
                  return 57;
               }

               if (s.equals("debug-buzz-protocol")) {
                  return 392;
               }

               if (s.equals("debug-concurrentmes")) {
                  return 398;
               }

               if (s.equals("debug-concurrentmtf")) {
                  return 400;
               }

               if (s.equals("debugdrs-heartbeats")) {
                  return 97;
               }

               if (s.equals("debug-debug-patches")) {
                  return 421;
               }

               if (s.equals("debug-event-manager")) {
                  return 86;
               }

               if (s.equals("debug-http-sessions")) {
                  return 68;
               }

               if (s.equals("debugiiop-tunneling")) {
                  return 365;
               }

               if (s.equals("debug-jdbc-internal")) {
                  return 206;
               }

               if (s.equals("debug-jms-front-end")) {
                  return 108;
               }

               if (s.equals("debug-jpa-jdbc-jdbc")) {
                  return 384;
               }

               if (s.equals("debug-jpa-meta-data")) {
                  return 375;
               }

               if (s.equals("debug-kodo-weblogic")) {
                  return 448;
               }

               if (s.equals("debug-mask-criteria")) {
                  return 42;
               }

               if (s.equals("debugra-classloader")) {
                  return 350;
               }

               if (s.equals("debugra-conn-events")) {
                  return 347;
               }

               if (s.equals("debugra-connections")) {
                  return 346;
               }

               if (s.equals("debugra-work-events")) {
                  return 349;
               }

               if (s.equals("debug-saf-transport")) {
                  return 160;
               }

               if (s.equals("debug-sca-container")) {
                  return 166;
               }

               if (s.equals("listen-thread-debug")) {
                  return 44;
               }
               break;
            case 20:
               if (s.equals("class-loader-verbose")) {
                  return 264;
               }

               if (s.equals("debug-concurrentmses")) {
                  return 399;
               }

               if (s.equals("debug-ejb-deployment")) {
                  return 74;
               }

               if (s.equals("debugj2ee-management")) {
                  return 363;
               }

               if (s.equals("debugjaxp-debug-name")) {
                  return 232;
               }

               if (s.equals("debug-jms-dispatcher")) {
                  return 114;
               }

               if (s.equals("debug-jms-dist-topic")) {
                  return 111;
               }

               if (s.equals("debug-jndi-factories")) {
                  return 104;
               }

               if (s.equals("debug-jpa-data-cache")) {
                  return 379;
               }

               if (s.equals("debug-migration-info")) {
                  return 457;
               }

               if (s.equals("debug-pub-sub-bayeux")) {
                  return 464;
               }

               if (s.equals("debug-pub-sub-client")) {
                  return 466;
               }

               if (s.equals("debug-pub-sub-server")) {
                  return 468;
               }

               if (s.equals("debugra-pool-verbose")) {
                  return 334;
               }

               if (s.equals("debugra-security-ctx")) {
                  return 344;
               }

               if (s.equals("debug-saf-life-cycle")) {
                  return 155;
               }

               if (s.equals("debug-security-realm")) {
                  return 167;
               }

               if (s.equals("debug-server-runtime")) {
                  return 475;
               }

               if (s.equals("debug-url-resolution")) {
                  return 67;
               }

               if (s.equals("debugwt-ct-bridge-ex")) {
                  return 374;
               }

               if (s.equals("debug-web-app-module")) {
                  return 72;
               }
               break;
            case 21:
               if (s.equals("application-container")) {
                  return 257;
               }

               if (s.equals("class-change-notifier")) {
                  return 64;
               }

               if (s.equals("debug-app-annotations")) {
                  return 59;
               }

               if (s.equals("debug-batch-connector")) {
                  return 415;
               }

               if (s.equals("debug-deployment-plan")) {
                  return 390;
               }

               if (s.equals("debug-ejb-cmp-runtime")) {
                  return 84;
               }

               if (s.equals("debug-ejb-compilation")) {
                  return 73;
               }

               if (s.equals("debug-ejb-timer-store")) {
                  return 429;
               }

               if (s.equals("debug-elastic-actions")) {
                  return 317;
               }

               if (s.equals("debugjaxp-debug-level")) {
                  return 231;
               }

               if (s.equals("debugjmx-core-concise")) {
                  return 354;
               }

               if (s.equals("debug-jndi-resolution")) {
                  return 103;
               }

               if (s.equals("debug-jpa-jdbc-schema")) {
                  return 385;
               }

               if (s.equals("debug-leader-election")) {
                  return 95;
               }

               if (s.equals("debug-pub-sub-channel")) {
                  return 465;
               }

               if (s.equals("debugrmi-request-perf")) {
                  return 56;
               }

               if (s.equals("debug-request-manager")) {
                  return 471;
               }

               if (s.equals("debugsnmp-protocoltcp")) {
                  return 326;
               }

               if (s.equals("debug-storeio-logical")) {
                  return 216;
               }

               if (s.equals("debug-stub-generation")) {
                  return 485;
               }
               break;
            case 22:
               if (s.equals("debug-cert-revoc-check")) {
                  return 175;
               }

               if (s.equals("debugdrs-update-status")) {
                  return 99;
               }

               if (s.equals("debug-diagnostic-image")) {
                  return 319;
               }

               if (s.equals("debug-diagnostic-query")) {
                  return 320;
               }

               if (s.equals("debug-diagnostic-watch")) {
                  return 330;
               }

               if (s.equals("debug-elastic-services")) {
                  return 318;
               }

               if (s.equals("debug-file-owner-fixer")) {
                  return 431;
               }

               if (s.equals("debugjaxp-include-name")) {
                  return 235;
               }

               if (s.equals("debugjaxp-include-time")) {
                  return 234;
               }

               if (s.equals("debug-jms-message-path")) {
                  return 123;
               }

               if (s.equals("debug-jms-pause-resume")) {
                  return 121;
               }

               if (s.equals("debugjmx-compatibility")) {
                  return 358;
               }

               if (s.equals("debugjta-resource-name")) {
                  return 149;
               }

               if (s.equals("debug-messaging-kernel")) {
                  return 152;
               }

               if (s.equals("debug-patching-runtime")) {
                  return 362;
               }

               if (s.equals("debug-path-svc-verbose")) {
                  return 165;
               }

               if (s.equals("debug-pub-sub-security")) {
                  return 467;
               }

               if (s.equals("debug-replication-size")) {
                  return 391;
               }

               if (s.equals("debug-restart-in-place")) {
                  return 433;
               }

               if (s.equals("debug-saf-message-path")) {
                  return 161;
               }

               if (s.equals("debug-security-auditor")) {
                  return 183;
               }

               if (s.equals("debug-securitye-engine")) {
                  return 190;
               }

               if (s.equals("debug-securitysaml-atn")) {
                  return 195;
               }

               if (s.equals("debug-securitysaml-lib")) {
                  return 194;
               }

               if (s.equals("debug-security-service")) {
                  return 171;
               }

               if (s.equals("debug-server-migration")) {
                  return 87;
               }

               if (s.equals("debug-storeio-physical")) {
                  return 218;
               }

               if (s.equals("debug-storercm-verbose")) {
                  return 484;
               }

               if (s.equals("debug-store-xa-verbose")) {
                  return 221;
               }

               if (s.equals("debug-web-app-security")) {
                  return 71;
               }

               if (s.equals("magic-thread-dump-file")) {
                  return 47;
               }

               if (s.equals("magic-thread-dump-host")) {
                  return 46;
               }
               break;
            case 23:
               if (s.equals("debug-bootstrap-servlet")) {
                  return 266;
               }

               if (s.equals("debug-cluster-fragments")) {
                  return 88;
               }

               if (s.equals("debug-connector-service")) {
                  return 341;
               }

               if (s.equals("debug-consensus-leasing")) {
                  return 366;
               }

               if (s.equals("debug-diagnostics-timer")) {
                  return 427;
               }

               if (s.equals("debug-diagnostics-utils")) {
                  return 313;
               }

               if (s.equals("debug-expression-poller")) {
                  return 430;
               }

               if (s.equals("debugjaxp-include-class")) {
                  return 236;
               }

               if (s.equals("debugjaxp-output-stream")) {
                  return 233;
               }

               if (s.equals("debug-jms-dot-net-proxy")) {
                  return 439;
               }

               if (s.equals("debugjta2pc-stack-trace")) {
                  return 132;
               }

               if (s.equals("debugjta-xa-stack-trace")) {
                  return 129;
               }

               if (s.equals("debug-lifecycle-manager")) {
                  return 151;
               }

               if (s.equals("debugrest-notifications")) {
                  return 315;
               }

               if (s.equals("debug-saf-sending-agent")) {
                  return 158;
               }

               if (s.equals("debug-security-cred-map")) {
                  return 184;
               }

               if (s.equals("debug-security-profiler")) {
                  return 188;
               }

               if (s.equals("debug-security-role-map")) {
                  return 189;
               }

               if (s.equals("debug-securitysaml2-atn")) {
                  return 199;
               }

               if (s.equals("debug-securitysaml2-lib")) {
                  return 198;
               }

               if (s.equals("debug-securityssl-eaten")) {
                  return 174;
               }

               if (s.equals("debug-server-life-cycle")) {
                  return 367;
               }

               if (s.equals("debug-spring-statistics")) {
                  return 480;
               }

               if (s.equals("debug-unicast-messaging")) {
                  return 486;
               }

               if (s.equals("redefining-class-loader")) {
                  return 61;
               }

               if (s.equals("script-executor-command")) {
                  return 497;
               }

               if (s.equals("t3-http-upgrade-handler")) {
                  return 499;
               }
               break;
            case 24:
               if (s.equals("debug-buzz-protocol-http")) {
                  return 394;
               }

               if (s.equals("debug-cluster-heartbeats")) {
                  return 90;
               }

               if (s.equals("debug-concurrent-context")) {
                  return 396;
               }

               if (s.equals("debug-configuration-edit")) {
                  return 359;
               }

               if (s.equals("debug-deployment-concise")) {
                  return 249;
               }

               if (s.equals("debug-deployment-service")) {
                  return 250;
               }

               if (s.equals("debug-diagnostic-archive")) {
                  return 276;
               }

               if (s.equals("debug-diagnostic-context")) {
                  return 323;
               }

               if (s.equals("debug-diagnostics-module")) {
                  return 281;
               }

               if (s.equals("debug-domain-log-handler")) {
                  return 328;
               }

               if (s.equals("debug-ejb-cmp-deployment")) {
                  return 83;
               }

               if (s.equals("debug-ejb-mdb-connection")) {
                  return 75;
               }

               if (s.equals("debugjta-resource-health")) {
                  return 143;
               }

               if (s.equals("debugm-bean-localization")) {
                  return 454;
               }

               if (s.equals("debug-security-cert-path")) {
                  return 187;
               }

               if (s.equals("debug-security-key-store")) {
                  return 186;
               }

               if (s.equals("debug-security-predicate")) {
                  return 172;
               }

               if (s.equals("debug-singleton-services")) {
                  return 479;
               }

               if (s.equals("debug-situational-config")) {
                  return 361;
               }
               break;
            case 25:
               if (s.equals("debug-app-container-tools")) {
                  return 411;
               }

               if (s.equals("debug-diagnostic-accessor")) {
                  return 321;
               }

               if (s.equals("debugjaxp-use-short-class")) {
                  return 238;
               }

               if (s.equals("debug-jdbc-driver-logging")) {
                  return 205;
               }

               if (s.equals("debugjta-transaction-name")) {
                  return 148;
               }

               if (s.equals("debugm-bean-event-handler")) {
                  return 451;
               }

               if (s.equals("debug-partition-lifecycle")) {
                  return 461;
               }

               if (s.equals("debug-replication-details")) {
                  return 93;
               }

               if (s.equals("debug-saf-receiving-agent")) {
                  return 159;
               }

               if (s.equals("debug-securityjacc-policy")) {
                  return 193;
               }

               if (s.equals("glass-fish-web-app-parser")) {
                  return 493;
               }

               if (s.equals("portable-partition-helper")) {
                  return 496;
               }

               if (s.equals("magic-thread-dump-enabled")) {
                  return 45;
               }
               break;
            case 26:
               if (s.equals("debugdrs-state-transitions")) {
                  return 100;
               }

               if (s.equals("debugjaxp-include-location")) {
                  return 237;
               }

               if (s.equals("debug-jms-dispatcher-proxy")) {
                  return 115;
               }

               if (s.equals("debug-jms-dot-nett3-server")) {
                  return 440;
               }

               if (s.equals("debugm-bean-typing-utility")) {
                  return 296;
               }

               if (s.equals("debug-node-manager-runtime")) {
                  return 408;
               }

               if (s.equals("debug-page-flow-monitoring")) {
                  return 459;
               }

               if (s.equals("debug-security-adjudicator")) {
                  return 180;
               }

               if (s.equals("debug-securitysaml-service")) {
                  return 197;
               }

               if (s.equals("debug-server-startup-timer")) {
                  return 478;
               }

               if (s.equals("debug-storeio-logical-boot")) {
                  return 217;
               }

               if (s.equals("debug-tunneling-connection")) {
                  return 106;
               }

               if (s.equals("partition-even-interceptor")) {
                  return 495;
               }
               break;
            case 27:
               if (s.equals("bug-report-service-wsdl-url")) {
                  return 49;
               }

               if (s.equals("debug-background-deployment")) {
                  return 414;
               }

               if (s.equals("debug-buzz-protocol-details")) {
                  return 393;
               }

               if (s.equals("debug-class-loading-verbose")) {
                  return 261;
               }

               if (s.equals("debug-cluster-announcements")) {
                  return 91;
               }

               if (s.equals("debug-configuration-runtime")) {
                  return 360;
               }

               if (s.equals("debug-default-store-verbose")) {
                  return 422;
               }

               if (s.equals("debug-diagnosticsel-context")) {
                  return 307;
               }

               if (s.equals("debug-diagnostics-harvester")) {
                  return 284;
               }

               if (s.equals("debug-jms-dot-net-transport")) {
                  return 441;
               }

               if (s.equals("debugjta-naming-stack-trace")) {
                  return 142;
               }

               if (s.equals("debug-logging-configuration")) {
                  return 329;
               }

               if (s.equals("debugm-bean-type-util-queue")) {
                  return 294;
               }

               if (s.equals("debug-messaging-kernel-boot")) {
                  return 153;
               }

               if (s.equals("debug-partition-portability")) {
                  return 462;
               }

               if (s.equals("debug-securitysaml2-service")) {
                  return 201;
               }

               if (s.equals("debug-securitysaml-cred-map")) {
                  return 196;
               }

               if (s.equals("debug-security-user-lockout")) {
                  return 170;
               }

               if (s.equals("debug-server-shutdown-timer")) {
                  return 477;
               }

               if (s.equals("debug-watch-scaling-actions")) {
                  return 490;
               }

               if (s.equals("security-encryption-service")) {
                  return 498;
               }
               break;
            case 28:
               if (s.equals("debug-concurrent-transaction")) {
                  return 397;
               }

               if (s.equals("debug-diagnostic-collections")) {
                  return 322;
               }

               if (s.equals("debug-diagnosticsel-resolver")) {
                  return 303;
               }

               if (s.equals("debug-embeddedldap-log-level")) {
                  return 178;
               }

               if (s.equals("debug-jms-dispatcher-verbose")) {
                  return 438;
               }

               if (s.equals("debugjta-gateway-stack-trace")) {
                  return 140;
               }

               if (s.equals("debug-messaging-ownable-lock")) {
                  return 154;
               }

               if (s.equals("debugsnmp-extension-provider")) {
                  return 327;
               }

               if (s.equals("debug-scrubber-start-service")) {
                  return 474;
               }

               if (s.equals("debug-securitysaml2-cred-map")) {
                  return 200;
               }

               if (s.equals("debugwan-replication-details")) {
                  return 351;
               }

               if (s.equals("debugxml-registry-debug-name")) {
                  return 224;
               }
               break;
            case 29:
               if (s.equals("debug-data-source-interceptor")) {
                  return 420;
               }

               if (s.equals("debug-diagnostic-file-archive")) {
                  return 277;
               }

               if (s.equals("debug-diagnostic-jdbc-archive")) {
                  return 279;
               }

               if (s.equals("debug-diagnostic-watch-events")) {
                  return 331;
               }

               if (s.equals("debug-jms-durable-subscribers")) {
                  return 118;
               }

               if (s.equals("debugjta-recovery-stack-trace")) {
                  return 136;
               }

               if (s.equals("debugm-bean-harvester-control")) {
                  return 285;
               }

               if (s.equals("debug-mail-session-deployment")) {
                  return 455;
               }

               if (s.equals("debug-securityjacc-non-policy")) {
                  return 192;
               }

               if (s.equals("debug-server-start-statistics")) {
                  return 388;
               }

               if (s.equals("debugxml-registry-debug-level")) {
                  return 223;
               }

               if (s.equals("diagnostic-context-debug-mode")) {
                  return 41;
               }
               break;
            case 30:
               if (s.equals("debug-diagnostic-notifications")) {
                  return 425;
               }

               if (s.equals("debugm-bean-event-handler-work")) {
                  return 453;
               }

               if (s.equals("debug-messaging-bridge-runtime")) {
                  return 212;
               }

               if (s.equals("debug-messaging-bridge-startup")) {
                  return 211;
               }

               if (s.equals("debug-persistent-store-manager")) {
                  return 463;
               }

               if (s.equals("debug-resource-group-migration")) {
                  return 472;
               }

               if (s.equals("debug-rest-jersey1-integration")) {
                  return 406;
               }

               if (s.equals("debug-rest-jersey2-integration")) {
                  return 407;
               }

               if (s.equals("debug-security-password-policy")) {
                  return 169;
               }

               if (s.equals("debug-storeio-physical-verbose")) {
                  return 219;
               }

               if (s.equals("debug-validation-class-loading")) {
                  return 488;
               }

               if (s.equals("debugxml-registry-include-name")) {
                  return 227;
               }

               if (s.equals("debugxml-registry-include-time")) {
                  return 226;
               }
               break;
            case 31:
               if (s.equals("debug-diagnostic-data-gathering")) {
                  return 269;
               }

               if (s.equals("debug-diagnostics-notifications")) {
                  return 426;
               }

               if (s.equals("debug-diagnostics-script-action")) {
                  return 316;
               }

               if (s.equals("debug-expression-bean-localizer")) {
                  return 311;
               }

               if (s.equals("debug-file-distribution-servlet")) {
                  return 267;
               }

               if (s.equals("debug-harvester-type-info-cache")) {
                  return 432;
               }

               if (s.equals("debug-jms-cross-domain-security")) {
                  return 436;
               }

               if (s.equals("debugm-bean-harvester-threading")) {
                  return 288;
               }

               if (s.equals("debugxml-registry-include-class")) {
                  return 228;
               }

               if (s.equals("debugxml-registry-output-stream")) {
                  return 225;
               }

               if (s.equals("partition-debug-logging-enabled")) {
                  return 40;
               }
               break;
            case 32:
               if (s.equals("debug-diagnostic-instrumentation")) {
                  return 270;
               }

               if (s.equals("debug-diagnostic-wlstore-archive")) {
                  return 278;
               }

               if (s.equals("debug-diagnostics-harvester-data")) {
                  return 297;
               }

               if (s.equals("debug-dynamic-singleton-services")) {
                  return 403;
               }

               if (s.equals("debug-jms-jdbc-scavenge-on-flush")) {
                  return 119;
               }

               if (s.equals("debugm-bean-harvester-resolution")) {
                  return 286;
               }

               if (s.equals("debug-server-shutdown-statistics")) {
                  return 476;
               }

               if (s.equals("debug-web-app-identity-assertion")) {
                  return 70;
               }

               if (s.equals("debugxml-entity-cache-debug-name")) {
                  return 240;
               }

               if (s.equals("magic-thread-dump-back-to-socket")) {
                  return 48;
               }
               break;
            case 33:
               if (s.equals("debug-bean-tree-harvester-control")) {
                  return 289;
               }

               if (s.equals("debug-deployment-service-internal")) {
                  return 252;
               }

               if (s.equals("debug-embeddedldap-log-to-console")) {
                  return 177;
               }

               if (s.equals("debugm-bean-event-handler-summary")) {
                  return 452;
               }

               if (s.equals("debugm-bean-type-utility-listener")) {
                  return 293;
               }

               if (s.equals("debug-security-encryption-service")) {
                  return 185;
               }

               if (s.equals("debugxml-entity-cache-debug-level")) {
                  return 239;
               }

               if (s.equals("debugxml-registry-use-short-class")) {
                  return 230;
               }
               break;
            case 34:
               if (s.equals("debug-deployment-service-transport")) {
                  return 253;
               }

               if (s.equals("debug-diagnosticsm-beanel-resolver")) {
                  return 306;
               }

               if (s.equals("debug-jms-dispatcher-utils-verbose")) {
                  return 437;
               }

               if (s.equals("debug-management-services-resource")) {
                  return 389;
               }

               if (s.equals("debug-messaging-bridge-dump-to-log")) {
                  return 214;
               }

               if (s.equals("debug-tunneling-connection-timeout")) {
                  return 105;
               }

               if (s.equals("debugxml-entity-cache-include-name")) {
                  return 243;
               }

               if (s.equals("debugxml-entity-cache-include-time")) {
                  return 242;
               }

               if (s.equals("debugxml-registry-include-location")) {
                  return 229;
               }

               if (s.equals("startup-timeout-num-of-thread-dump")) {
                  return 50;
               }
               break;
            case 35:
               if (s.equals("debug-bean-tree-harvester-threading")) {
                  return 292;
               }

               if (s.equals("debug-diagnostic-archive-retirement")) {
                  return 280;
               }

               if (s.equals("debug-diagnostic-lifecycle-handlers")) {
                  return 268;
               }

               if (s.equals("debug-diagnostics-expression-poller")) {
                  return 308;
               }

               if (s.equals("debug-domain-upgrade-server-service")) {
                  return 428;
               }

               if (s.equals("debug-expression-extensions-manager")) {
                  return 312;
               }

               if (s.equals("debugxml-entity-cache-include-class")) {
                  return 244;
               }

               if (s.equals("debugxml-entity-cache-output-stream")) {
                  return 241;
               }
               break;
            case 36:
               if (s.equals("debug-bean-tree-harvester-resolution")) {
                  return 290;
               }

               if (s.equals("debug-class-loading-contextual-trace")) {
                  return 262;
               }

               if (s.equals("debug-diagnostics-expression-metrics")) {
                  return 301;
               }

               if (s.equals("debugm-bean-type-util-queue-priority")) {
                  return 295;
               }

               if (s.equals("startup-timeout-thread-dump-interval")) {
                  return 51;
               }
               break;
            case 37:
               if (s.equals("debug-diagnostic-watch-events-details")) {
                  return 332;
               }

               if (s.equals("debug-diagnostics-bean-info-providers")) {
                  return 302;
               }

               if (s.equals("debugm-bean-harvester-data-collection")) {
                  return 287;
               }

               if (s.equals("debugxml-entity-cache-use-short-class")) {
                  return 246;
               }
               break;
            case 38:
               if (s.equals("debug-diagnostics-expression-functions")) {
                  return 309;
               }

               if (s.equals("debug-messaging-bridge-dump-to-console")) {
                  return 215;
               }

               if (s.equals("debug-messaging-bridge-runtime-verbose")) {
                  return 213;
               }

               if (s.equals("debugxml-entity-cache-include-location")) {
                  return 245;
               }
               break;
            case 39:
               if (s.equals("debug-class-loading-consistency-checker")) {
                  return 418;
               }

               if (s.equals("debug-deployment-service-status-updates")) {
                  return 251;
               }

               if (s.equals("debug-deployment-service-transport-http")) {
                  return 254;
               }

               if (s.equals("debug-diagnostic-instrumentation-config")) {
                  return 275;
               }

               if (s.equals("debug-diagnostic-instrumentation-events")) {
                  return 274;
               }

               if (s.equals("debug-diagnostic-instrumentation-result")) {
                  return 424;
               }

               if (s.equals("debug-diagnostic-runtime-control-driver")) {
                  return 282;
               }

               if (s.equals("debug-diagnostics-expression-evaluators")) {
                  return 300;
               }

               if (s.equals("debug-embeddedldap-write-override-props")) {
                  return 179;
               }
               break;
            case 40:
               if (s.equals("debug-diagnostic-instrumentation-actions")) {
                  return 273;
               }

               if (s.equals("debug-diagnostic-instrumentation-weaving")) {
                  return 271;
               }

               if (s.equals("debug-diagnostic-runtime-control-service")) {
                  return 283;
               }

               if (s.equals("debug-diagnostics-harvesterm-bean-plugin")) {
                  return 298;
               }

               if (s.equals("debug-partition-resource-metrics-runtime")) {
                  return 333;
               }
               break;
            case 41:
               if (s.equals("debug-bean-tree-harvester-data-collection")) {
                  return 291;
               }

               if (s.equals("debug-diagnostics-bean-extension-resolver")) {
                  return 304;
               }

               if (s.equals("force-shutdown-timeout-num-of-thread-dump")) {
                  return 54;
               }
               break;
            case 42:
               if (s.equals("debug-diagnostics-expression-poller-buffer")) {
                  return 314;
               }

               if (s.equals("debug-diagnostics-value-tracingel-resolver")) {
                  return 305;
               }
               break;
            case 43:
               if (s.equals("debug-diagnostic-instrumentation-class-info")) {
                  return 423;
               }

               if (s.equals("force-shutdown-timeout-thread-dump-interval")) {
                  return 55;
               }
               break;
            case 44:
               if (s.equals("debug-diagnostics-expression-function-mapper")) {
                  return 310;
               }

               if (s.equals("debug-diagnostics-harvester-tree-bean-plugin")) {
                  return 299;
               }

               if (s.equals("graceful-shutdown-timeout-num-of-thread-dump")) {
                  return 52;
               }
               break;
            case 46:
               if (s.equals("graceful-shutdown-timeout-thread-dump-interval")) {
                  return 53;
               }
               break;
            case 48:
               if (s.equals("debug-diagnostic-instrumentation-weaving-matches")) {
                  return 272;
               }
         }

         return super.getPropertyIndex(s);
      }

      public SchemaHelper getSchemaHelper(int propIndex) {
         switch (propIndex) {
            case 10:
               return new DebugScopeMBeanImpl.SchemaHelper2();
            default:
               return super.getSchemaHelper(propIndex);
         }
      }

      public String getElementName(int propIndex) {
         switch (propIndex) {
            case 38:
               return "debug-self-tuning";
            case 39:
            default:
               return super.getElementName(propIndex);
            case 40:
               return "partition-debug-logging-enabled";
            case 41:
               return "diagnostic-context-debug-mode";
            case 42:
               return "debug-mask-criteria";
            case 43:
               return "server";
            case 44:
               return "listen-thread-debug";
            case 45:
               return "magic-thread-dump-enabled";
            case 46:
               return "magic-thread-dump-host";
            case 47:
               return "magic-thread-dump-file";
            case 48:
               return "magic-thread-dump-back-to-socket";
            case 49:
               return "bug-report-service-wsdl-url";
            case 50:
               return "startup-timeout-num-of-thread-dump";
            case 51:
               return "startup-timeout-thread-dump-interval";
            case 52:
               return "graceful-shutdown-timeout-num-of-thread-dump";
            case 53:
               return "graceful-shutdown-timeout-thread-dump-interval";
            case 54:
               return "force-shutdown-timeout-num-of-thread-dump";
            case 55:
               return "force-shutdown-timeout-thread-dump-interval";
            case 56:
               return "debugrmi-request-perf";
            case 57:
               return "debug-app-container";
            case 58:
               return "debug-libraries";
            case 59:
               return "debug-app-annotations";
            case 60:
               return "debug-class-redef";
            case 61:
               return "redefining-class-loader";
            case 62:
               return "debug-class-size";
            case 63:
               return "default-store";
            case 64:
               return "class-change-notifier";
            case 65:
               return "debug-http";
            case 66:
               return "debug-http-concise";
            case 67:
               return "debug-url-resolution";
            case 68:
               return "debug-http-sessions";
            case 69:
               return "debug-http-logging";
            case 70:
               return "debug-web-app-identity-assertion";
            case 71:
               return "debug-web-app-security";
            case 72:
               return "debug-web-app-module";
            case 73:
               return "debug-ejb-compilation";
            case 74:
               return "debug-ejb-deployment";
            case 75:
               return "debug-ejb-mdb-connection";
            case 76:
               return "debug-ejb-caching";
            case 77:
               return "debug-ejb-swapping";
            case 78:
               return "debug-ejb-locking";
            case 79:
               return "debug-ejb-pooling";
            case 80:
               return "debug-ejb-timers";
            case 81:
               return "debug-ejb-invoke";
            case 82:
               return "debug-ejb-security";
            case 83:
               return "debug-ejb-cmp-deployment";
            case 84:
               return "debug-ejb-cmp-runtime";
            case 85:
               return "debug-ejb-metadata";
            case 86:
               return "debug-event-manager";
            case 87:
               return "debug-server-migration";
            case 88:
               return "debug-cluster-fragments";
            case 89:
               return "debug-cluster";
            case 90:
               return "debug-cluster-heartbeats";
            case 91:
               return "debug-cluster-announcements";
            case 92:
               return "debug-replication";
            case 93:
               return "debug-replication-details";
            case 94:
               return "debug-async-queue";
            case 95:
               return "debug-leader-election";
            case 96:
               return "debugdrs-calls";
            case 97:
               return "debugdrs-heartbeats";
            case 98:
               return "debugdrs-messages";
            case 99:
               return "debugdrs-update-status";
            case 100:
               return "debugdrs-state-transitions";
            case 101:
               return "debugdrs-queues";
            case 102:
               return "debug-jndi";
            case 103:
               return "debug-jndi-resolution";
            case 104:
               return "debug-jndi-factories";
            case 105:
               return "debug-tunneling-connection-timeout";
            case 106:
               return "debug-tunneling-connection";
            case 107:
               return "debug-jms-back-end";
            case 108:
               return "debug-jms-front-end";
            case 109:
               return "debug-jms-common";
            case 110:
               return "debug-jms-config";
            case 111:
               return "debug-jms-dist-topic";
            case 112:
               return "debug-jms-locking";
            case 113:
               return "debug-jms-xa";
            case 114:
               return "debug-jms-dispatcher";
            case 115:
               return "debug-jms-dispatcher-proxy";
            case 116:
               return "debug-jms-store";
            case 117:
               return "debug-jms-boot";
            case 118:
               return "debug-jms-durable-subscribers";
            case 119:
               return "debug-jms-jdbc-scavenge-on-flush";
            case 120:
               return "debug-jmsame";
            case 121:
               return "debug-jms-pause-resume";
            case 122:
               return "debug-jms-module";
            case 123:
               return "debug-jms-message-path";
            case 124:
               return "debug-jms-saf";
            case 125:
               return "debug-jms-wrappers";
            case 126:
               return "debug-jmscds";
            case 127:
               return "debugjta-xa";
            case 128:
               return "debugjta-non-xa";
            case 129:
               return "debugjta-xa-stack-trace";
            case 130:
               return "debugjtarmi";
            case 131:
               return "debugjta2pc";
            case 132:
               return "debugjta2pc-stack-trace";
            case 133:
               return "debugjtatlog";
            case 134:
               return "debugjta-jdbc";
            case 135:
               return "debugjta-recovery";
            case 136:
               return "debugjta-recovery-stack-trace";
            case 137:
               return "debugjtaapi";
            case 138:
               return "debugjta-propagate";
            case 139:
               return "debugjta-gateway";
            case 140:
               return "debugjta-gateway-stack-trace";
            case 141:
               return "debugjta-naming";
            case 142:
               return "debugjta-naming-stack-trace";
            case 143:
               return "debugjta-resource-health";
            case 144:
               return "debugjta-migration";
            case 145:
               return "debugjta-lifecycle";
            case 146:
               return "debugjtallr";
            case 147:
               return "debugjta-health";
            case 148:
               return "debugjta-transaction-name";
            case 149:
               return "debugjta-resource-name";
            case 150:
               return "debugjtacdi";
            case 151:
               return "debug-lifecycle-manager";
            case 152:
               return "debug-messaging-kernel";
            case 153:
               return "debug-messaging-kernel-boot";
            case 154:
               return "debug-messaging-ownable-lock";
            case 155:
               return "debug-saf-life-cycle";
            case 156:
               return "debug-saf-admin";
            case 157:
               return "debug-saf-manager";
            case 158:
               return "debug-saf-sending-agent";
            case 159:
               return "debug-saf-receiving-agent";
            case 160:
               return "debug-saf-transport";
            case 161:
               return "debug-saf-message-path";
            case 162:
               return "debug-saf-store";
            case 163:
               return "debug-saf-verbose";
            case 164:
               return "debug-path-svc";
            case 165:
               return "debug-path-svc-verbose";
            case 166:
               return "debug-sca-container";
            case 167:
               return "debug-security-realm";
            case 168:
               return "debug-security";
            case 169:
               return "debug-security-password-policy";
            case 170:
               return "debug-security-user-lockout";
            case 171:
               return "debug-security-service";
            case 172:
               return "debug-security-predicate";
            case 173:
               return "debug-securityssl";
            case 174:
               return "debug-securityssl-eaten";
            case 175:
               return "debug-cert-revoc-check";
            case 176:
               return "debug-embeddedldap";
            case 177:
               return "debug-embeddedldap-log-to-console";
            case 178:
               return "debug-embeddedldap-log-level";
            case 179:
               return "debug-embeddedldap-write-override-props";
            case 180:
               return "debug-security-adjudicator";
            case 181:
               return "debug-security-atn";
            case 182:
               return "debug-security-atz";
            case 183:
               return "debug-security-auditor";
            case 184:
               return "debug-security-cred-map";
            case 185:
               return "debug-security-encryption-service";
            case 186:
               return "debug-security-key-store";
            case 187:
               return "debug-security-cert-path";
            case 188:
               return "debug-security-profiler";
            case 189:
               return "debug-security-role-map";
            case 190:
               return "debug-securitye-engine";
            case 191:
               return "debug-securityjacc";
            case 192:
               return "debug-securityjacc-non-policy";
            case 193:
               return "debug-securityjacc-policy";
            case 194:
               return "debug-securitysaml-lib";
            case 195:
               return "debug-securitysaml-atn";
            case 196:
               return "debug-securitysaml-cred-map";
            case 197:
               return "debug-securitysaml-service";
            case 198:
               return "debug-securitysaml2-lib";
            case 199:
               return "debug-securitysaml2-atn";
            case 200:
               return "debug-securitysaml2-cred-map";
            case 201:
               return "debug-securitysaml2-service";
            case 202:
               return "debug-jdbc-conn";
            case 203:
               return "debug-jdbc-sql";
            case 204:
               return "debug-jdbcrmi";
            case 205:
               return "debug-jdbc-driver-logging";
            case 206:
               return "debug-jdbc-internal";
            case 207:
               return "debug-jdbcrac";
            case 208:
               return "debug-jdbcons";
            case 209:
               return "debug-jdbcucp";
            case 210:
               return "debug-jdbc-replay";
            case 211:
               return "debug-messaging-bridge-startup";
            case 212:
               return "debug-messaging-bridge-runtime";
            case 213:
               return "debug-messaging-bridge-runtime-verbose";
            case 214:
               return "debug-messaging-bridge-dump-to-log";
            case 215:
               return "debug-messaging-bridge-dump-to-console";
            case 216:
               return "debug-storeio-logical";
            case 217:
               return "debug-storeio-logical-boot";
            case 218:
               return "debug-storeio-physical";
            case 219:
               return "debug-storeio-physical-verbose";
            case 220:
               return "debug-store-xa";
            case 221:
               return "debug-store-xa-verbose";
            case 222:
               return "debug-store-admin";
            case 223:
               return "debugxml-registry-debug-level";
            case 224:
               return "debugxml-registry-debug-name";
            case 225:
               return "debugxml-registry-output-stream";
            case 226:
               return "debugxml-registry-include-time";
            case 227:
               return "debugxml-registry-include-name";
            case 228:
               return "debugxml-registry-include-class";
            case 229:
               return "debugxml-registry-include-location";
            case 230:
               return "debugxml-registry-use-short-class";
            case 231:
               return "debugjaxp-debug-level";
            case 232:
               return "debugjaxp-debug-name";
            case 233:
               return "debugjaxp-output-stream";
            case 234:
               return "debugjaxp-include-time";
            case 235:
               return "debugjaxp-include-name";
            case 236:
               return "debugjaxp-include-class";
            case 237:
               return "debugjaxp-include-location";
            case 238:
               return "debugjaxp-use-short-class";
            case 239:
               return "debugxml-entity-cache-debug-level";
            case 240:
               return "debugxml-entity-cache-debug-name";
            case 241:
               return "debugxml-entity-cache-output-stream";
            case 242:
               return "debugxml-entity-cache-include-time";
            case 243:
               return "debugxml-entity-cache-include-name";
            case 244:
               return "debugxml-entity-cache-include-class";
            case 245:
               return "debugxml-entity-cache-include-location";
            case 246:
               return "debugxml-entity-cache-use-short-class";
            case 247:
               return "debug-deploy";
            case 248:
               return "debug-deployment";
            case 249:
               return "debug-deployment-concise";
            case 250:
               return "debug-deployment-service";
            case 251:
               return "debug-deployment-service-status-updates";
            case 252:
               return "debug-deployment-service-internal";
            case 253:
               return "debug-deployment-service-transport";
            case 254:
               return "debug-deployment-service-transport-http";
            case 255:
               return "master-deployer";
            case 256:
               return "slave-deployer";
            case 257:
               return "application-container";
            case 258:
               return "class-finder";
            case 259:
               return "classpath-servlet";
            case 260:
               return "web-module";
            case 261:
               return "debug-class-loading-verbose";
            case 262:
               return "debug-class-loading-contextual-trace";
            case 263:
               return "class-loader";
            case 264:
               return "class-loader-verbose";
            case 265:
               return "classloader-web-app";
            case 266:
               return "debug-bootstrap-servlet";
            case 267:
               return "debug-file-distribution-servlet";
            case 268:
               return "debug-diagnostic-lifecycle-handlers";
            case 269:
               return "debug-diagnostic-data-gathering";
            case 270:
               return "debug-diagnostic-instrumentation";
            case 271:
               return "debug-diagnostic-instrumentation-weaving";
            case 272:
               return "debug-diagnostic-instrumentation-weaving-matches";
            case 273:
               return "debug-diagnostic-instrumentation-actions";
            case 274:
               return "debug-diagnostic-instrumentation-events";
            case 275:
               return "debug-diagnostic-instrumentation-config";
            case 276:
               return "debug-diagnostic-archive";
            case 277:
               return "debug-diagnostic-file-archive";
            case 278:
               return "debug-diagnostic-wlstore-archive";
            case 279:
               return "debug-diagnostic-jdbc-archive";
            case 280:
               return "debug-diagnostic-archive-retirement";
            case 281:
               return "debug-diagnostics-module";
            case 282:
               return "debug-diagnostic-runtime-control-driver";
            case 283:
               return "debug-diagnostic-runtime-control-service";
            case 284:
               return "debug-diagnostics-harvester";
            case 285:
               return "debugm-bean-harvester-control";
            case 286:
               return "debugm-bean-harvester-resolution";
            case 287:
               return "debugm-bean-harvester-data-collection";
            case 288:
               return "debugm-bean-harvester-threading";
            case 289:
               return "debug-bean-tree-harvester-control";
            case 290:
               return "debug-bean-tree-harvester-resolution";
            case 291:
               return "debug-bean-tree-harvester-data-collection";
            case 292:
               return "debug-bean-tree-harvester-threading";
            case 293:
               return "debugm-bean-type-utility-listener";
            case 294:
               return "debugm-bean-type-util-queue";
            case 295:
               return "debugm-bean-type-util-queue-priority";
            case 296:
               return "debugm-bean-typing-utility";
            case 297:
               return "debug-diagnostics-harvester-data";
            case 298:
               return "debug-diagnostics-harvesterm-bean-plugin";
            case 299:
               return "debug-diagnostics-harvester-tree-bean-plugin";
            case 300:
               return "debug-diagnostics-expression-evaluators";
            case 301:
               return "debug-diagnostics-expression-metrics";
            case 302:
               return "debug-diagnostics-bean-info-providers";
            case 303:
               return "debug-diagnosticsel-resolver";
            case 304:
               return "debug-diagnostics-bean-extension-resolver";
            case 305:
               return "debug-diagnostics-value-tracingel-resolver";
            case 306:
               return "debug-diagnosticsm-beanel-resolver";
            case 307:
               return "debug-diagnosticsel-context";
            case 308:
               return "debug-diagnostics-expression-poller";
            case 309:
               return "debug-diagnostics-expression-functions";
            case 310:
               return "debug-diagnostics-expression-function-mapper";
            case 311:
               return "debug-expression-bean-localizer";
            case 312:
               return "debug-expression-extensions-manager";
            case 313:
               return "debug-diagnostics-utils";
            case 314:
               return "debug-diagnostics-expression-poller-buffer";
            case 315:
               return "debugrest-notifications";
            case 316:
               return "debug-diagnostics-script-action";
            case 317:
               return "debug-elastic-actions";
            case 318:
               return "debug-elastic-services";
            case 319:
               return "debug-diagnostic-image";
            case 320:
               return "debug-diagnostic-query";
            case 321:
               return "debug-diagnostic-accessor";
            case 322:
               return "debug-diagnostic-collections";
            case 323:
               return "debug-diagnostic-context";
            case 324:
               return "debugsnmp-toolkit";
            case 325:
               return "debugsnmp-agent";
            case 326:
               return "debugsnmp-protocoltcp";
            case 327:
               return "debugsnmp-extension-provider";
            case 328:
               return "debug-domain-log-handler";
            case 329:
               return "debug-logging-configuration";
            case 330:
               return "debug-diagnostic-watch";
            case 331:
               return "debug-diagnostic-watch-events";
            case 332:
               return "debug-diagnostic-watch-events-details";
            case 333:
               return "debug-partition-resource-metrics-runtime";
            case 334:
               return "debugra-pool-verbose";
            case 335:
               return "debugra";
            case 336:
               return "debugra-xain";
            case 337:
               return "debugra-xaout";
            case 338:
               return "debugra-xawork";
            case 339:
               return "debugra-local-out";
            case 340:
               return "debugra-lifecycle";
            case 341:
               return "debug-connector-service";
            case 342:
               return "debugra-deployment";
            case 343:
               return "debugra-parsing";
            case 344:
               return "debugra-security-ctx";
            case 345:
               return "debugra-pooling";
            case 346:
               return "debugra-connections";
            case 347:
               return "debugra-conn-events";
            case 348:
               return "debugra-work";
            case 349:
               return "debugra-work-events";
            case 350:
               return "debugra-classloader";
            case 351:
               return "debugwan-replication-details";
            case 352:
               return "debugjmx";
            case 353:
               return "debugjmx-core";
            case 354:
               return "debugjmx-core-concise";
            case 355:
               return "debugjmx-runtime";
            case 356:
               return "debugjmx-domain";
            case 357:
               return "debugjmx-edit";
            case 358:
               return "debugjmx-compatibility";
            case 359:
               return "debug-configuration-edit";
            case 360:
               return "debug-configuration-runtime";
            case 361:
               return "debug-situational-config";
            case 362:
               return "debug-patching-runtime";
            case 363:
               return "debugj2ee-management";
            case 364:
               return "debugiiop-naming";
            case 365:
               return "debugiiop-tunneling";
            case 366:
               return "debug-consensus-leasing";
            case 367:
               return "debug-server-life-cycle";
            case 368:
               return "debugwtc-config";
            case 369:
               return "debugwtct-dom-pdu";
            case 370:
               return "debugwtcu-data";
            case 371:
               return "debugwtc-gwt-ex";
            case 372:
               return "debugwtc-jatmi-ex";
            case 373:
               return "debugwtc-corba-ex";
            case 374:
               return "debugwt-ct-bridge-ex";
            case 375:
               return "debug-jpa-meta-data";
            case 376:
               return "debug-jpa-enhance";
            case 377:
               return "debug-jpa-runtime";
            case 378:
               return "debug-jpa-query";
            case 379:
               return "debug-jpa-data-cache";
            case 380:
               return "debug-jpa-tool";
            case 381:
               return "debug-jpa-manage";
            case 382:
               return "debug-jpa-profile";
            case 383:
               return "debug-jpa-jdbc-sql";
            case 384:
               return "debug-jpa-jdbc-jdbc";
            case 385:
               return "debug-jpa-jdbc-schema";
            case 386:
               return "debug-jmst3-server";
            case 387:
               return "debug-descriptor";
            case 388:
               return "debug-server-start-statistics";
            case 389:
               return "debug-management-services-resource";
            case 390:
               return "debug-deployment-plan";
            case 391:
               return "debug-replication-size";
            case 392:
               return "debug-buzz-protocol";
            case 393:
               return "debug-buzz-protocol-details";
            case 394:
               return "debug-buzz-protocol-http";
            case 395:
               return "debug-concurrent";
            case 396:
               return "debug-concurrent-context";
            case 397:
               return "debug-concurrent-transaction";
            case 398:
               return "debug-concurrentmes";
            case 399:
               return "debug-concurrentmses";
            case 400:
               return "debug-concurrentmtf";
            case 401:
               return "debug-ready-app";
            case 402:
               return "debug-interceptors";
            case 403:
               return "debug-dynamic-singleton-services";
            case 404:
               return "debugrcm";
            case 405:
               return "debug-verbosercm";
            case 406:
               return "debug-rest-jersey1-integration";
            case 407:
               return "debug-rest-jersey2-integration";
            case 408:
               return "debug-node-manager-runtime";
            case 409:
               return "debug-abbrevs";
            case 410:
               return "debug-app-client";
            case 411:
               return "debug-app-container-tools";
            case 412:
               return "debug-app-timing";
            case 413:
               return "debug-attach";
            case 414:
               return "debug-background-deployment";
            case 415:
               return "debug-batch-connector";
            case 416:
               return "debugcat";
            case 417:
               return "debug-channel";
            case 418:
               return "debug-class-loading-consistency-checker";
            case 419:
               return "debug-coherence";
            case 420:
               return "debug-data-source-interceptor";
            case 421:
               return "debug-debug-patches";
            case 422:
               return "debug-default-store-verbose";
            case 423:
               return "debug-diagnostic-instrumentation-class-info";
            case 424:
               return "debug-diagnostic-instrumentation-result";
            case 425:
               return "debug-diagnostic-notifications";
            case 426:
               return "debug-diagnostics-notifications";
            case 427:
               return "debug-diagnostics-timer";
            case 428:
               return "debug-domain-upgrade-server-service";
            case 429:
               return "debug-ejb-timer-store";
            case 430:
               return "debug-expression-poller";
            case 431:
               return "debug-file-owner-fixer";
            case 432:
               return "debug-harvester-type-info-cache";
            case 433:
               return "debug-restart-in-place";
            case 434:
               return "debugiiop-detail";
            case 435:
               return "debugiiop-repalcer";
            case 436:
               return "debug-jms-cross-domain-security";
            case 437:
               return "debug-jms-dispatcher-utils-verbose";
            case 438:
               return "debug-jms-dispatcher-verbose";
            case 439:
               return "debug-jms-dot-net-proxy";
            case 440:
               return "debug-jms-dot-nett3-server";
            case 441:
               return "debug-jms-dot-net-transport";
            case 442:
               return "debug-jms-dur-sub";
            case 443:
               return "debug-jms-jndi";
            case 444:
               return "debug-jmsobs";
            case 445:
               return "debugjmx-context";
            case 446:
               return "debugjpa";
            case 447:
               return "debugjta2pc-detail";
            case 448:
               return "debug-kodo-weblogic";
            case 449:
               return "debug-legacy";
            case 450:
               return "debugm-beancic";
            case 451:
               return "debugm-bean-event-handler";
            case 452:
               return "debugm-bean-event-handler-summary";
            case 453:
               return "debugm-bean-event-handler-work";
            case 454:
               return "debugm-bean-localization";
            case 455:
               return "debug-mail-session-deployment";
            case 456:
               return "debug-managed-bean";
            case 457:
               return "debug-migration-info";
            case 458:
               return "debugnio";
            case 459:
               return "debug-page-flow-monitoring";
            case 460:
               return "debug-partitionjmx";
            case 461:
               return "debug-partition-lifecycle";
            case 462:
               return "debug-partition-portability";
            case 463:
               return "debug-persistent-store-manager";
            case 464:
               return "debug-pub-sub-bayeux";
            case 465:
               return "debug-pub-sub-channel";
            case 466:
               return "debug-pub-sub-client";
            case 467:
               return "debug-pub-sub-security";
            case 468:
               return "debug-pub-sub-server";
            case 469:
               return "debugrmi-detailed";
            case 470:
               return "debug-redef-attach";
            case 471:
               return "debug-request-manager";
            case 472:
               return "debug-resource-group-migration";
            case 473:
               return "debugsnmp-mib";
            case 474:
               return "debug-scrubber-start-service";
            case 475:
               return "debug-server-runtime";
            case 476:
               return "debug-server-shutdown-statistics";
            case 477:
               return "debug-server-shutdown-timer";
            case 478:
               return "debug-server-startup-timer";
            case 479:
               return "debug-singleton-services";
            case 480:
               return "debug-spring-statistics";
            case 481:
               return "debug-store";
            case 482:
               return "debug-store-cache";
            case 483:
               return "debug-storercm";
            case 484:
               return "debug-storercm-verbose";
            case 485:
               return "debug-stub-generation";
            case 486:
               return "debug-unicast-messaging";
            case 487:
               return "debug-validation";
            case 488:
               return "debug-validation-class-loading";
            case 489:
               return "debugwtc-tdom-pdu";
            case 490:
               return "debug-watch-scaling-actions";
            case 491:
               return "debug-web-appdi";
            case 492:
               return "debug-web-socket";
            case 493:
               return "glass-fish-web-app-parser";
            case 494:
               return "os-gi-for-apps";
            case 495:
               return "partition-even-interceptor";
            case 496:
               return "portable-partition-helper";
            case 497:
               return "script-executor-command";
            case 498:
               return "security-encryption-service";
            case 499:
               return "t3-http-upgrade-handler";
            case 500:
               return "war-extraction";
         }
      }

      public boolean isArray(int propIndex) {
         switch (propIndex) {
            case 9:
               return true;
            case 10:
               return true;
            case 42:
               return true;
            default:
               return super.isArray(propIndex);
         }
      }

      public boolean isBean(int propIndex) {
         switch (propIndex) {
            case 10:
               return true;
            default:
               return super.isBean(propIndex);
         }
      }

      public boolean isKey(int propIndex) {
         switch (propIndex) {
            case 2:
               return true;
            default:
               return super.isKey(propIndex);
         }
      }

      public String[] getKeyElementNames() {
         List indices = new ArrayList();
         indices.add("name");
         return (String[])((String[])indices.toArray(new String[0]));
      }
   }

   protected static class Helper extends KernelDebugMBeanImpl.Helper {
      private ServerDebugMBeanImpl bean;

      protected Helper(ServerDebugMBeanImpl bean) {
         super(bean);
         this.bean = bean;
      }

      public String getPropertyName(int propIndex) {
         switch (propIndex) {
            case 38:
               return "DebugSelfTuning";
            case 39:
            default:
               return super.getPropertyName(propIndex);
            case 40:
               return "PartitionDebugLoggingEnabled";
            case 41:
               return "DiagnosticContextDebugMode";
            case 42:
               return "DebugMaskCriterias";
            case 43:
               return "Server";
            case 44:
               return "ListenThreadDebug";
            case 45:
               return "MagicThreadDumpEnabled";
            case 46:
               return "MagicThreadDumpHost";
            case 47:
               return "MagicThreadDumpFile";
            case 48:
               return "MagicThreadDumpBackToSocket";
            case 49:
               return "BugReportServiceWsdlUrl";
            case 50:
               return "StartupTimeoutNumOfThreadDump";
            case 51:
               return "StartupTimeoutThreadDumpInterval";
            case 52:
               return "GracefulShutdownTimeoutNumOfThreadDump";
            case 53:
               return "GracefulShutdownTimeoutThreadDumpInterval";
            case 54:
               return "ForceShutdownTimeoutNumOfThreadDump";
            case 55:
               return "ForceShutdownTimeoutThreadDumpInterval";
            case 56:
               return "DebugRMIRequestPerf";
            case 57:
               return "DebugAppContainer";
            case 58:
               return "DebugLibraries";
            case 59:
               return "DebugAppAnnotations";
            case 60:
               return "DebugClassRedef";
            case 61:
               return "RedefiningClassLoader";
            case 62:
               return "DebugClassSize";
            case 63:
               return "DefaultStore";
            case 64:
               return "ClassChangeNotifier";
            case 65:
               return "DebugHttp";
            case 66:
               return "DebugHttpConcise";
            case 67:
               return "DebugURLResolution";
            case 68:
               return "DebugHttpSessions";
            case 69:
               return "DebugHttpLogging";
            case 70:
               return "DebugWebAppIdentityAssertion";
            case 71:
               return "DebugWebAppSecurity";
            case 72:
               return "DebugWebAppModule";
            case 73:
               return "DebugEjbCompilation";
            case 74:
               return "DebugEjbDeployment";
            case 75:
               return "DebugEjbMdbConnection";
            case 76:
               return "DebugEjbCaching";
            case 77:
               return "DebugEjbSwapping";
            case 78:
               return "DebugEjbLocking";
            case 79:
               return "DebugEjbPooling";
            case 80:
               return "DebugEjbTimers";
            case 81:
               return "DebugEjbInvoke";
            case 82:
               return "DebugEjbSecurity";
            case 83:
               return "DebugEjbCmpDeployment";
            case 84:
               return "DebugEjbCmpRuntime";
            case 85:
               return "DebugEjbMetadata";
            case 86:
               return "DebugEventManager";
            case 87:
               return "DebugServerMigration";
            case 88:
               return "DebugClusterFragments";
            case 89:
               return "DebugCluster";
            case 90:
               return "DebugClusterHeartbeats";
            case 91:
               return "DebugClusterAnnouncements";
            case 92:
               return "DebugReplication";
            case 93:
               return "DebugReplicationDetails";
            case 94:
               return "DebugAsyncQueue";
            case 95:
               return "DebugLeaderElection";
            case 96:
               return "DebugDRSCalls";
            case 97:
               return "DebugDRSHeartbeats";
            case 98:
               return "DebugDRSMessages";
            case 99:
               return "DebugDRSUpdateStatus";
            case 100:
               return "DebugDRSStateTransitions";
            case 101:
               return "DebugDRSQueues";
            case 102:
               return "DebugJNDI";
            case 103:
               return "DebugJNDIResolution";
            case 104:
               return "DebugJNDIFactories";
            case 105:
               return "DebugTunnelingConnectionTimeout";
            case 106:
               return "DebugTunnelingConnection";
            case 107:
               return "DebugJMSBackEnd";
            case 108:
               return "DebugJMSFrontEnd";
            case 109:
               return "DebugJMSCommon";
            case 110:
               return "DebugJMSConfig";
            case 111:
               return "DebugJMSDistTopic";
            case 112:
               return "DebugJMSLocking";
            case 113:
               return "DebugJMSXA";
            case 114:
               return "DebugJMSDispatcher";
            case 115:
               return "DebugJMSDispatcherProxy";
            case 116:
               return "DebugJMSStore";
            case 117:
               return "DebugJMSBoot";
            case 118:
               return "DebugJMSDurableSubscribers";
            case 119:
               return "DebugJMSJDBCScavengeOnFlush";
            case 120:
               return "DebugJMSAME";
            case 121:
               return "DebugJMSPauseResume";
            case 122:
               return "DebugJMSModule";
            case 123:
               return "DebugJMSMessagePath";
            case 124:
               return "DebugJMSSAF";
            case 125:
               return "DebugJMSWrappers";
            case 126:
               return "DebugJMSCDS";
            case 127:
               return "DebugJTAXA";
            case 128:
               return "DebugJTANonXA";
            case 129:
               return "DebugJTAXAStackTrace";
            case 130:
               return "DebugJTARMI";
            case 131:
               return "DebugJTA2PC";
            case 132:
               return "DebugJTA2PCStackTrace";
            case 133:
               return "DebugJTATLOG";
            case 134:
               return "DebugJTAJDBC";
            case 135:
               return "DebugJTARecovery";
            case 136:
               return "DebugJTARecoveryStackTrace";
            case 137:
               return "DebugJTAAPI";
            case 138:
               return "DebugJTAPropagate";
            case 139:
               return "DebugJTAGateway";
            case 140:
               return "DebugJTAGatewayStackTrace";
            case 141:
               return "DebugJTANaming";
            case 142:
               return "DebugJTANamingStackTrace";
            case 143:
               return "DebugJTAResourceHealth";
            case 144:
               return "DebugJTAMigration";
            case 145:
               return "DebugJTALifecycle";
            case 146:
               return "DebugJTALLR";
            case 147:
               return "DebugJTAHealth";
            case 148:
               return "DebugJTATransactionName";
            case 149:
               return "DebugJTAResourceName";
            case 150:
               return "DebugJTACDI";
            case 151:
               return "DebugLifecycleManager";
            case 152:
               return "DebugMessagingKernel";
            case 153:
               return "DebugMessagingKernelBoot";
            case 154:
               return "DebugMessagingOwnableLock";
            case 155:
               return "DebugSAFLifeCycle";
            case 156:
               return "DebugSAFAdmin";
            case 157:
               return "DebugSAFManager";
            case 158:
               return "DebugSAFSendingAgent";
            case 159:
               return "DebugSAFReceivingAgent";
            case 160:
               return "DebugSAFTransport";
            case 161:
               return "DebugSAFMessagePath";
            case 162:
               return "DebugSAFStore";
            case 163:
               return "DebugSAFVerbose";
            case 164:
               return "DebugPathSvc";
            case 165:
               return "DebugPathSvcVerbose";
            case 166:
               return "DebugScaContainer";
            case 167:
               return "DebugSecurityRealm";
            case 168:
               return "DebugSecurity";
            case 169:
               return "DebugSecurityPasswordPolicy";
            case 170:
               return "DebugSecurityUserLockout";
            case 171:
               return "DebugSecurityService";
            case 172:
               return "DebugSecurityPredicate";
            case 173:
               return "DebugSecuritySSL";
            case 174:
               return "DebugSecuritySSLEaten";
            case 175:
               return "DebugCertRevocCheck";
            case 176:
               return "DebugEmbeddedLDAP";
            case 177:
               return "DebugEmbeddedLDAPLogToConsole";
            case 178:
               return "DebugEmbeddedLDAPLogLevel";
            case 179:
               return "DebugEmbeddedLDAPWriteOverrideProps";
            case 180:
               return "DebugSecurityAdjudicator";
            case 181:
               return "DebugSecurityAtn";
            case 182:
               return "DebugSecurityAtz";
            case 183:
               return "DebugSecurityAuditor";
            case 184:
               return "DebugSecurityCredMap";
            case 185:
               return "DebugSecurityEncryptionService";
            case 186:
               return "DebugSecurityKeyStore";
            case 187:
               return "DebugSecurityCertPath";
            case 188:
               return "DebugSecurityProfiler";
            case 189:
               return "DebugSecurityRoleMap";
            case 190:
               return "DebugSecurityEEngine";
            case 191:
               return "DebugSecurityJACC";
            case 192:
               return "DebugSecurityJACCNonPolicy";
            case 193:
               return "DebugSecurityJACCPolicy";
            case 194:
               return "DebugSecuritySAMLLib";
            case 195:
               return "DebugSecuritySAMLAtn";
            case 196:
               return "DebugSecuritySAMLCredMap";
            case 197:
               return "DebugSecuritySAMLService";
            case 198:
               return "DebugSecuritySAML2Lib";
            case 199:
               return "DebugSecuritySAML2Atn";
            case 200:
               return "DebugSecuritySAML2CredMap";
            case 201:
               return "DebugSecuritySAML2Service";
            case 202:
               return "DebugJDBCConn";
            case 203:
               return "DebugJDBCSQL";
            case 204:
               return "DebugJDBCRMI";
            case 205:
               return "DebugJDBCDriverLogging";
            case 206:
               return "DebugJDBCInternal";
            case 207:
               return "DebugJDBCRAC";
            case 208:
               return "DebugJDBCONS";
            case 209:
               return "DebugJDBCUCP";
            case 210:
               return "DebugJDBCReplay";
            case 211:
               return "DebugMessagingBridgeStartup";
            case 212:
               return "DebugMessagingBridgeRuntime";
            case 213:
               return "DebugMessagingBridgeRuntimeVerbose";
            case 214:
               return "DebugMessagingBridgeDumpToLog";
            case 215:
               return "DebugMessagingBridgeDumpToConsole";
            case 216:
               return "DebugStoreIOLogical";
            case 217:
               return "DebugStoreIOLogicalBoot";
            case 218:
               return "DebugStoreIOPhysical";
            case 219:
               return "DebugStoreIOPhysicalVerbose";
            case 220:
               return "DebugStoreXA";
            case 221:
               return "DebugStoreXAVerbose";
            case 222:
               return "DebugStoreAdmin";
            case 223:
               return "DebugXMLRegistryDebugLevel";
            case 224:
               return "DebugXMLRegistryDebugName";
            case 225:
               return "DebugXMLRegistryOutputStream";
            case 226:
               return "DebugXMLRegistryIncludeTime";
            case 227:
               return "DebugXMLRegistryIncludeName";
            case 228:
               return "DebugXMLRegistryIncludeClass";
            case 229:
               return "DebugXMLRegistryIncludeLocation";
            case 230:
               return "DebugXMLRegistryUseShortClass";
            case 231:
               return "DebugJAXPDebugLevel";
            case 232:
               return "DebugJAXPDebugName";
            case 233:
               return "DebugJAXPOutputStream";
            case 234:
               return "DebugJAXPIncludeTime";
            case 235:
               return "DebugJAXPIncludeName";
            case 236:
               return "DebugJAXPIncludeClass";
            case 237:
               return "DebugJAXPIncludeLocation";
            case 238:
               return "DebugJAXPUseShortClass";
            case 239:
               return "DebugXMLEntityCacheDebugLevel";
            case 240:
               return "DebugXMLEntityCacheDebugName";
            case 241:
               return "DebugXMLEntityCacheOutputStream";
            case 242:
               return "DebugXMLEntityCacheIncludeTime";
            case 243:
               return "DebugXMLEntityCacheIncludeName";
            case 244:
               return "DebugXMLEntityCacheIncludeClass";
            case 245:
               return "DebugXMLEntityCacheIncludeLocation";
            case 246:
               return "DebugXMLEntityCacheUseShortClass";
            case 247:
               return "DebugDeploy";
            case 248:
               return "DebugDeployment";
            case 249:
               return "DebugDeploymentConcise";
            case 250:
               return "DebugDeploymentService";
            case 251:
               return "DebugDeploymentServiceStatusUpdates";
            case 252:
               return "DebugDeploymentServiceInternal";
            case 253:
               return "DebugDeploymentServiceTransport";
            case 254:
               return "DebugDeploymentServiceTransportHttp";
            case 255:
               return "MasterDeployer";
            case 256:
               return "SlaveDeployer";
            case 257:
               return "ApplicationContainer";
            case 258:
               return "ClassFinder";
            case 259:
               return "ClasspathServlet";
            case 260:
               return "WebModule";
            case 261:
               return "DebugClassLoadingVerbose";
            case 262:
               return "DebugClassLoadingContextualTrace";
            case 263:
               return "ClassLoader";
            case 264:
               return "ClassLoaderVerbose";
            case 265:
               return "ClassloaderWebApp";
            case 266:
               return "DebugBootstrapServlet";
            case 267:
               return "DebugFileDistributionServlet";
            case 268:
               return "DebugDiagnosticLifecycleHandlers";
            case 269:
               return "DebugDiagnosticDataGathering";
            case 270:
               return "DebugDiagnosticInstrumentation";
            case 271:
               return "DebugDiagnosticInstrumentationWeaving";
            case 272:
               return "DebugDiagnosticInstrumentationWeavingMatches";
            case 273:
               return "DebugDiagnosticInstrumentationActions";
            case 274:
               return "DebugDiagnosticInstrumentationEvents";
            case 275:
               return "DebugDiagnosticInstrumentationConfig";
            case 276:
               return "DebugDiagnosticArchive";
            case 277:
               return "DebugDiagnosticFileArchive";
            case 278:
               return "DebugDiagnosticWlstoreArchive";
            case 279:
               return "DebugDiagnosticJdbcArchive";
            case 280:
               return "DebugDiagnosticArchiveRetirement";
            case 281:
               return "DebugDiagnosticsModule";
            case 282:
               return "DebugDiagnosticRuntimeControlDriver";
            case 283:
               return "DebugDiagnosticRuntimeControlService";
            case 284:
               return "DebugDiagnosticsHarvester";
            case 285:
               return "DebugMBeanHarvesterControl";
            case 286:
               return "DebugMBeanHarvesterResolution";
            case 287:
               return "DebugMBeanHarvesterDataCollection";
            case 288:
               return "DebugMBeanHarvesterThreading";
            case 289:
               return "DebugBeanTreeHarvesterControl";
            case 290:
               return "DebugBeanTreeHarvesterResolution";
            case 291:
               return "DebugBeanTreeHarvesterDataCollection";
            case 292:
               return "DebugBeanTreeHarvesterThreading";
            case 293:
               return "DebugMBeanTypeUtilityListener";
            case 294:
               return "DebugMBeanTypeUtilQueue";
            case 295:
               return "DebugMBeanTypeUtilQueuePriority";
            case 296:
               return "DebugMBeanTypingUtility";
            case 297:
               return "DebugDiagnosticsHarvesterData";
            case 298:
               return "DebugDiagnosticsHarvesterMBeanPlugin";
            case 299:
               return "DebugDiagnosticsHarvesterTreeBeanPlugin";
            case 300:
               return "DebugDiagnosticsExpressionEvaluators";
            case 301:
               return "DebugDiagnosticsExpressionMetrics";
            case 302:
               return "DebugDiagnosticsBeanInfoProviders";
            case 303:
               return "DebugDiagnosticsELResolver";
            case 304:
               return "DebugDiagnosticsBeanExtensionResolver";
            case 305:
               return "DebugDiagnosticsValueTracingELResolver";
            case 306:
               return "DebugDiagnosticsMBeanELResolver";
            case 307:
               return "DebugDiagnosticsELContext";
            case 308:
               return "DebugDiagnosticsExpressionPoller";
            case 309:
               return "DebugDiagnosticsExpressionFunctions";
            case 310:
               return "DebugDiagnosticsExpressionFunctionMapper";
            case 311:
               return "DebugExpressionBeanLocalizer";
            case 312:
               return "DebugExpressionExtensionsManager";
            case 313:
               return "DebugDiagnosticsUtils";
            case 314:
               return "DebugDiagnosticsExpressionPollerBuffer";
            case 315:
               return "DebugRESTNotifications";
            case 316:
               return "DebugDiagnosticsScriptAction";
            case 317:
               return "DebugElasticActions";
            case 318:
               return "DebugElasticServices";
            case 319:
               return "DebugDiagnosticImage";
            case 320:
               return "DebugDiagnosticQuery";
            case 321:
               return "DebugDiagnosticAccessor";
            case 322:
               return "DebugDiagnosticCollections";
            case 323:
               return "DebugDiagnosticContext";
            case 324:
               return "DebugSNMPToolkit";
            case 325:
               return "DebugSNMPAgent";
            case 326:
               return "DebugSNMPProtocolTCP";
            case 327:
               return "DebugSNMPExtensionProvider";
            case 328:
               return "DebugDomainLogHandler";
            case 329:
               return "DebugLoggingConfiguration";
            case 330:
               return "DebugDiagnosticWatch";
            case 331:
               return "DebugDiagnosticWatchEvents";
            case 332:
               return "DebugDiagnosticWatchEventsDetails";
            case 333:
               return "DebugPartitionResourceMetricsRuntime";
            case 334:
               return "DebugRAPoolVerbose";
            case 335:
               return "DebugRA";
            case 336:
               return "DebugRAXAin";
            case 337:
               return "DebugRAXAout";
            case 338:
               return "DebugRAXAwork";
            case 339:
               return "DebugRALocalOut";
            case 340:
               return "DebugRALifecycle";
            case 341:
               return "DebugConnectorService";
            case 342:
               return "DebugRADeployment";
            case 343:
               return "DebugRAParsing";
            case 344:
               return "DebugRASecurityCtx";
            case 345:
               return "DebugRAPooling";
            case 346:
               return "DebugRAConnections";
            case 347:
               return "DebugRAConnEvents";
            case 348:
               return "DebugRAWork";
            case 349:
               return "DebugRAWorkEvents";
            case 350:
               return "DebugRAClassloader";
            case 351:
               return "DebugWANReplicationDetails";
            case 352:
               return "DebugJMX";
            case 353:
               return "DebugJMXCore";
            case 354:
               return "DebugJMXCoreConcise";
            case 355:
               return "DebugJMXRuntime";
            case 356:
               return "DebugJMXDomain";
            case 357:
               return "DebugJMXEdit";
            case 358:
               return "DebugJMXCompatibility";
            case 359:
               return "DebugConfigurationEdit";
            case 360:
               return "DebugConfigurationRuntime";
            case 361:
               return "DebugSituationalConfig";
            case 362:
               return "DebugPatchingRuntime";
            case 363:
               return "DebugJ2EEManagement";
            case 364:
               return "DebugIIOPNaming";
            case 365:
               return "DebugIIOPTunneling";
            case 366:
               return "DebugConsensusLeasing";
            case 367:
               return "DebugServerLifeCycle";
            case 368:
               return "DebugWTCConfig";
            case 369:
               return "DebugWTCTDomPdu";
            case 370:
               return "DebugWTCUData";
            case 371:
               return "DebugWTCGwtEx";
            case 372:
               return "DebugWTCJatmiEx";
            case 373:
               return "DebugWTCCorbaEx";
            case 374:
               return "DebugWTCtBridgeEx";
            case 375:
               return "DebugJpaMetaData";
            case 376:
               return "DebugJpaEnhance";
            case 377:
               return "DebugJpaRuntime";
            case 378:
               return "DebugJpaQuery";
            case 379:
               return "DebugJpaDataCache";
            case 380:
               return "DebugJpaTool";
            case 381:
               return "DebugJpaManage";
            case 382:
               return "DebugJpaProfile";
            case 383:
               return "DebugJpaJdbcSql";
            case 384:
               return "DebugJpaJdbcJdbc";
            case 385:
               return "DebugJpaJdbcSchema";
            case 386:
               return "DebugJMST3Server";
            case 387:
               return "DebugDescriptor";
            case 388:
               return "DebugServerStartStatistics";
            case 389:
               return "DebugManagementServicesResource";
            case 390:
               return "DebugDeploymentPlan";
            case 391:
               return "DebugReplicationSize";
            case 392:
               return "DebugBuzzProtocol";
            case 393:
               return "DebugBuzzProtocolDetails";
            case 394:
               return "DebugBuzzProtocolHttp";
            case 395:
               return "DebugConcurrent";
            case 396:
               return "DebugConcurrentContext";
            case 397:
               return "DebugConcurrentTransaction";
            case 398:
               return "DebugConcurrentMES";
            case 399:
               return "DebugConcurrentMSES";
            case 400:
               return "DebugConcurrentMTF";
            case 401:
               return "DebugReadyApp";
            case 402:
               return "DebugInterceptors";
            case 403:
               return "DebugDynamicSingletonServices";
            case 404:
               return "DebugRCM";
            case 405:
               return "DebugVerboseRCM";
            case 406:
               return "DebugRestJersey1Integration";
            case 407:
               return "DebugRestJersey2Integration";
            case 408:
               return "DebugNodeManagerRuntime";
            case 409:
               return "DebugAbbrevs";
            case 410:
               return "DebugAppClient";
            case 411:
               return "DebugAppContainerTools";
            case 412:
               return "DebugAppTiming";
            case 413:
               return "DebugAttach";
            case 414:
               return "DebugBackgroundDeployment";
            case 415:
               return "DebugBatchConnector";
            case 416:
               return "DebugCAT";
            case 417:
               return "DebugChannel";
            case 418:
               return "DebugClassLoadingConsistencyChecker";
            case 419:
               return "DebugCoherence";
            case 420:
               return "DebugDataSourceInterceptor";
            case 421:
               return "DebugDebugPatches";
            case 422:
               return "DebugDefaultStoreVerbose";
            case 423:
               return "DebugDiagnosticInstrumentationClassInfo";
            case 424:
               return "DebugDiagnosticInstrumentationResult";
            case 425:
               return "DebugDiagnosticNotifications";
            case 426:
               return "DebugDiagnosticsNotifications";
            case 427:
               return "DebugDiagnosticsTimer";
            case 428:
               return "DebugDomainUpgradeServerService";
            case 429:
               return "DebugEjbTimerStore";
            case 430:
               return "DebugExpressionPoller";
            case 431:
               return "DebugFileOwnerFixer";
            case 432:
               return "DebugHarvesterTypeInfoCache";
            case 433:
               return "DebugRestartInPlace";
            case 434:
               return "DebugIIOPDetail";
            case 435:
               return "DebugIIOPRepalcer";
            case 436:
               return "DebugJMSCrossDomainSecurity";
            case 437:
               return "DebugJMSDispatcherUtilsVerbose";
            case 438:
               return "DebugJMSDispatcherVerbose";
            case 439:
               return "DebugJMSDotNetProxy";
            case 440:
               return "DebugJMSDotNetT3Server";
            case 441:
               return "DebugJMSDotNetTransport";
            case 442:
               return "DebugJMSDurSub";
            case 443:
               return "DebugJMSJNDI";
            case 444:
               return "DebugJMSOBS";
            case 445:
               return "DebugJMXContext";
            case 446:
               return "DebugJPA";
            case 447:
               return "DebugJTA2PCDetail";
            case 448:
               return "DebugKodoWeblogic";
            case 449:
               return "DebugLegacy";
            case 450:
               return "DebugMBeanCIC";
            case 451:
               return "DebugMBeanEventHandler";
            case 452:
               return "DebugMBeanEventHandlerSummary";
            case 453:
               return "DebugMBeanEventHandlerWork";
            case 454:
               return "DebugMBeanLocalization";
            case 455:
               return "DebugMailSessionDeployment";
            case 456:
               return "DebugManagedBean";
            case 457:
               return "DebugMigrationInfo";
            case 458:
               return "DebugNIO";
            case 459:
               return "DebugPageFlowMonitoring";
            case 460:
               return "DebugPartitionJMX";
            case 461:
               return "DebugPartitionLifecycle";
            case 462:
               return "DebugPartitionPortability";
            case 463:
               return "DebugPersistentStoreManager";
            case 464:
               return "DebugPubSubBayeux";
            case 465:
               return "DebugPubSubChannel";
            case 466:
               return "DebugPubSubClient";
            case 467:
               return "DebugPubSubSecurity";
            case 468:
               return "DebugPubSubServer";
            case 469:
               return "DebugRMIDetailed";
            case 470:
               return "DebugRedefAttach";
            case 471:
               return "DebugRequestManager";
            case 472:
               return "DebugResourceGroupMigration";
            case 473:
               return "DebugSNMPMib";
            case 474:
               return "DebugScrubberStartService";
            case 475:
               return "DebugServerRuntime";
            case 476:
               return "DebugServerShutdownStatistics";
            case 477:
               return "DebugServerShutdownTimer";
            case 478:
               return "DebugServerStartupTimer";
            case 479:
               return "DebugSingletonServices";
            case 480:
               return "DebugSpringStatistics";
            case 481:
               return "DebugStore";
            case 482:
               return "DebugStoreCache";
            case 483:
               return "DebugStoreRCM";
            case 484:
               return "DebugStoreRCMVerbose";
            case 485:
               return "DebugStubGeneration";
            case 486:
               return "DebugUnicastMessaging";
            case 487:
               return "DebugValidation";
            case 488:
               return "DebugValidationClassLoading";
            case 489:
               return "DebugWTCTdomPdu";
            case 490:
               return "DebugWatchScalingActions";
            case 491:
               return "DebugWebAppDI";
            case 492:
               return "DebugWebSocket";
            case 493:
               return "GlassFishWebAppParser";
            case 494:
               return "OSGiForApps";
            case 495:
               return "PartitionEvenInterceptor";
            case 496:
               return "PortablePartitionHelper";
            case 497:
               return "ScriptExecutorCommand";
            case 498:
               return "SecurityEncryptionService";
            case 499:
               return "T3HttpUpgradeHandler";
            case 500:
               return "WarExtraction";
         }
      }

      public int getPropertyIndex(String propName) {
         if (propName.equals("ApplicationContainer")) {
            return 257;
         } else if (propName.equals("BugReportServiceWsdlUrl")) {
            return 49;
         } else if (propName.equals("ClassChangeNotifier")) {
            return 64;
         } else if (propName.equals("ClassFinder")) {
            return 258;
         } else if (propName.equals("ClassLoader")) {
            return 263;
         } else if (propName.equals("ClassLoaderVerbose")) {
            return 264;
         } else if (propName.equals("ClassloaderWebApp")) {
            return 265;
         } else if (propName.equals("ClasspathServlet")) {
            return 259;
         } else if (propName.equals("DebugAbbrevs")) {
            return 409;
         } else if (propName.equals("DebugAppAnnotations")) {
            return 59;
         } else if (propName.equals("DebugAppClient")) {
            return 410;
         } else if (propName.equals("DebugAppContainer")) {
            return 57;
         } else if (propName.equals("DebugAppContainerTools")) {
            return 411;
         } else if (propName.equals("DebugAppTiming")) {
            return 412;
         } else if (propName.equals("DebugAsyncQueue")) {
            return 94;
         } else if (propName.equals("DebugAttach")) {
            return 413;
         } else if (propName.equals("DebugBackgroundDeployment")) {
            return 414;
         } else if (propName.equals("DebugBatchConnector")) {
            return 415;
         } else if (propName.equals("DebugBeanTreeHarvesterControl")) {
            return 289;
         } else if (propName.equals("DebugBeanTreeHarvesterDataCollection")) {
            return 291;
         } else if (propName.equals("DebugBeanTreeHarvesterResolution")) {
            return 290;
         } else if (propName.equals("DebugBeanTreeHarvesterThreading")) {
            return 292;
         } else if (propName.equals("DebugBootstrapServlet")) {
            return 266;
         } else if (propName.equals("DebugBuzzProtocol")) {
            return 392;
         } else if (propName.equals("DebugBuzzProtocolDetails")) {
            return 393;
         } else if (propName.equals("DebugBuzzProtocolHttp")) {
            return 394;
         } else if (propName.equals("DebugCAT")) {
            return 416;
         } else if (propName.equals("DebugCertRevocCheck")) {
            return 175;
         } else if (propName.equals("DebugChannel")) {
            return 417;
         } else if (propName.equals("DebugClassLoadingConsistencyChecker")) {
            return 418;
         } else if (propName.equals("DebugClassLoadingContextualTrace")) {
            return 262;
         } else if (propName.equals("DebugClassLoadingVerbose")) {
            return 261;
         } else if (propName.equals("DebugClassRedef")) {
            return 60;
         } else if (propName.equals("DebugClassSize")) {
            return 62;
         } else if (propName.equals("DebugCluster")) {
            return 89;
         } else if (propName.equals("DebugClusterAnnouncements")) {
            return 91;
         } else if (propName.equals("DebugClusterFragments")) {
            return 88;
         } else if (propName.equals("DebugClusterHeartbeats")) {
            return 90;
         } else if (propName.equals("DebugCoherence")) {
            return 419;
         } else if (propName.equals("DebugConcurrent")) {
            return 395;
         } else if (propName.equals("DebugConcurrentContext")) {
            return 396;
         } else if (propName.equals("DebugConcurrentMES")) {
            return 398;
         } else if (propName.equals("DebugConcurrentMSES")) {
            return 399;
         } else if (propName.equals("DebugConcurrentMTF")) {
            return 400;
         } else if (propName.equals("DebugConcurrentTransaction")) {
            return 397;
         } else if (propName.equals("DebugConfigurationEdit")) {
            return 359;
         } else if (propName.equals("DebugConfigurationRuntime")) {
            return 360;
         } else if (propName.equals("DebugConnectorService")) {
            return 341;
         } else if (propName.equals("DebugConsensusLeasing")) {
            return 366;
         } else if (propName.equals("DebugDRSCalls")) {
            return 96;
         } else if (propName.equals("DebugDRSHeartbeats")) {
            return 97;
         } else if (propName.equals("DebugDRSMessages")) {
            return 98;
         } else if (propName.equals("DebugDRSQueues")) {
            return 101;
         } else if (propName.equals("DebugDRSStateTransitions")) {
            return 100;
         } else if (propName.equals("DebugDRSUpdateStatus")) {
            return 99;
         } else if (propName.equals("DebugDataSourceInterceptor")) {
            return 420;
         } else if (propName.equals("DebugDebugPatches")) {
            return 421;
         } else if (propName.equals("DebugDefaultStoreVerbose")) {
            return 422;
         } else if (propName.equals("DebugDeploy")) {
            return 247;
         } else if (propName.equals("DebugDeployment")) {
            return 248;
         } else if (propName.equals("DebugDeploymentConcise")) {
            return 249;
         } else if (propName.equals("DebugDeploymentPlan")) {
            return 390;
         } else if (propName.equals("DebugDeploymentService")) {
            return 250;
         } else if (propName.equals("DebugDeploymentServiceInternal")) {
            return 252;
         } else if (propName.equals("DebugDeploymentServiceStatusUpdates")) {
            return 251;
         } else if (propName.equals("DebugDeploymentServiceTransport")) {
            return 253;
         } else if (propName.equals("DebugDeploymentServiceTransportHttp")) {
            return 254;
         } else if (propName.equals("DebugDescriptor")) {
            return 387;
         } else if (propName.equals("DebugDiagnosticAccessor")) {
            return 321;
         } else if (propName.equals("DebugDiagnosticArchive")) {
            return 276;
         } else if (propName.equals("DebugDiagnosticArchiveRetirement")) {
            return 280;
         } else if (propName.equals("DebugDiagnosticCollections")) {
            return 322;
         } else if (propName.equals("DebugDiagnosticContext")) {
            return 323;
         } else if (propName.equals("DebugDiagnosticDataGathering")) {
            return 269;
         } else if (propName.equals("DebugDiagnosticFileArchive")) {
            return 277;
         } else if (propName.equals("DebugDiagnosticImage")) {
            return 319;
         } else if (propName.equals("DebugDiagnosticInstrumentation")) {
            return 270;
         } else if (propName.equals("DebugDiagnosticInstrumentationActions")) {
            return 273;
         } else if (propName.equals("DebugDiagnosticInstrumentationClassInfo")) {
            return 423;
         } else if (propName.equals("DebugDiagnosticInstrumentationConfig")) {
            return 275;
         } else if (propName.equals("DebugDiagnosticInstrumentationEvents")) {
            return 274;
         } else if (propName.equals("DebugDiagnosticInstrumentationResult")) {
            return 424;
         } else if (propName.equals("DebugDiagnosticInstrumentationWeaving")) {
            return 271;
         } else if (propName.equals("DebugDiagnosticInstrumentationWeavingMatches")) {
            return 272;
         } else if (propName.equals("DebugDiagnosticJdbcArchive")) {
            return 279;
         } else if (propName.equals("DebugDiagnosticLifecycleHandlers")) {
            return 268;
         } else if (propName.equals("DebugDiagnosticNotifications")) {
            return 425;
         } else if (propName.equals("DebugDiagnosticQuery")) {
            return 320;
         } else if (propName.equals("DebugDiagnosticRuntimeControlDriver")) {
            return 282;
         } else if (propName.equals("DebugDiagnosticRuntimeControlService")) {
            return 283;
         } else if (propName.equals("DebugDiagnosticWatch")) {
            return 330;
         } else if (propName.equals("DebugDiagnosticWatchEvents")) {
            return 331;
         } else if (propName.equals("DebugDiagnosticWatchEventsDetails")) {
            return 332;
         } else if (propName.equals("DebugDiagnosticWlstoreArchive")) {
            return 278;
         } else if (propName.equals("DebugDiagnosticsBeanExtensionResolver")) {
            return 304;
         } else if (propName.equals("DebugDiagnosticsBeanInfoProviders")) {
            return 302;
         } else if (propName.equals("DebugDiagnosticsELContext")) {
            return 307;
         } else if (propName.equals("DebugDiagnosticsELResolver")) {
            return 303;
         } else if (propName.equals("DebugDiagnosticsExpressionEvaluators")) {
            return 300;
         } else if (propName.equals("DebugDiagnosticsExpressionFunctionMapper")) {
            return 310;
         } else if (propName.equals("DebugDiagnosticsExpressionFunctions")) {
            return 309;
         } else if (propName.equals("DebugDiagnosticsExpressionMetrics")) {
            return 301;
         } else if (propName.equals("DebugDiagnosticsExpressionPoller")) {
            return 308;
         } else if (propName.equals("DebugDiagnosticsExpressionPollerBuffer")) {
            return 314;
         } else if (propName.equals("DebugDiagnosticsHarvester")) {
            return 284;
         } else if (propName.equals("DebugDiagnosticsHarvesterData")) {
            return 297;
         } else if (propName.equals("DebugDiagnosticsHarvesterMBeanPlugin")) {
            return 298;
         } else if (propName.equals("DebugDiagnosticsHarvesterTreeBeanPlugin")) {
            return 299;
         } else if (propName.equals("DebugDiagnosticsMBeanELResolver")) {
            return 306;
         } else if (propName.equals("DebugDiagnosticsModule")) {
            return 281;
         } else if (propName.equals("DebugDiagnosticsNotifications")) {
            return 426;
         } else if (propName.equals("DebugDiagnosticsScriptAction")) {
            return 316;
         } else if (propName.equals("DebugDiagnosticsTimer")) {
            return 427;
         } else if (propName.equals("DebugDiagnosticsUtils")) {
            return 313;
         } else if (propName.equals("DebugDiagnosticsValueTracingELResolver")) {
            return 305;
         } else if (propName.equals("DebugDomainLogHandler")) {
            return 328;
         } else if (propName.equals("DebugDomainUpgradeServerService")) {
            return 428;
         } else if (propName.equals("DebugDynamicSingletonServices")) {
            return 403;
         } else if (propName.equals("DebugEjbCaching")) {
            return 76;
         } else if (propName.equals("DebugEjbCmpDeployment")) {
            return 83;
         } else if (propName.equals("DebugEjbCmpRuntime")) {
            return 84;
         } else if (propName.equals("DebugEjbCompilation")) {
            return 73;
         } else if (propName.equals("DebugEjbDeployment")) {
            return 74;
         } else if (propName.equals("DebugEjbInvoke")) {
            return 81;
         } else if (propName.equals("DebugEjbLocking")) {
            return 78;
         } else if (propName.equals("DebugEjbMdbConnection")) {
            return 75;
         } else if (propName.equals("DebugEjbMetadata")) {
            return 85;
         } else if (propName.equals("DebugEjbPooling")) {
            return 79;
         } else if (propName.equals("DebugEjbSecurity")) {
            return 82;
         } else if (propName.equals("DebugEjbSwapping")) {
            return 77;
         } else if (propName.equals("DebugEjbTimerStore")) {
            return 429;
         } else if (propName.equals("DebugEjbTimers")) {
            return 80;
         } else if (propName.equals("DebugElasticActions")) {
            return 317;
         } else if (propName.equals("DebugElasticServices")) {
            return 318;
         } else if (propName.equals("DebugEmbeddedLDAP")) {
            return 176;
         } else if (propName.equals("DebugEmbeddedLDAPLogLevel")) {
            return 178;
         } else if (propName.equals("DebugEmbeddedLDAPLogToConsole")) {
            return 177;
         } else if (propName.equals("DebugEmbeddedLDAPWriteOverrideProps")) {
            return 179;
         } else if (propName.equals("DebugEventManager")) {
            return 86;
         } else if (propName.equals("DebugExpressionBeanLocalizer")) {
            return 311;
         } else if (propName.equals("DebugExpressionExtensionsManager")) {
            return 312;
         } else if (propName.equals("DebugExpressionPoller")) {
            return 430;
         } else if (propName.equals("DebugFileDistributionServlet")) {
            return 267;
         } else if (propName.equals("DebugFileOwnerFixer")) {
            return 431;
         } else if (propName.equals("DebugHarvesterTypeInfoCache")) {
            return 432;
         } else if (propName.equals("DebugHttp")) {
            return 65;
         } else if (propName.equals("DebugHttpConcise")) {
            return 66;
         } else if (propName.equals("DebugHttpLogging")) {
            return 69;
         } else if (propName.equals("DebugHttpSessions")) {
            return 68;
         } else if (propName.equals("DebugIIOPDetail")) {
            return 434;
         } else if (propName.equals("DebugIIOPNaming")) {
            return 364;
         } else if (propName.equals("DebugIIOPRepalcer")) {
            return 435;
         } else if (propName.equals("DebugIIOPTunneling")) {
            return 365;
         } else if (propName.equals("DebugInterceptors")) {
            return 402;
         } else if (propName.equals("DebugJ2EEManagement")) {
            return 363;
         } else if (propName.equals("DebugJAXPDebugLevel")) {
            return 231;
         } else if (propName.equals("DebugJAXPDebugName")) {
            return 232;
         } else if (propName.equals("DebugJAXPIncludeClass")) {
            return 236;
         } else if (propName.equals("DebugJAXPIncludeLocation")) {
            return 237;
         } else if (propName.equals("DebugJAXPIncludeName")) {
            return 235;
         } else if (propName.equals("DebugJAXPIncludeTime")) {
            return 234;
         } else if (propName.equals("DebugJAXPOutputStream")) {
            return 233;
         } else if (propName.equals("DebugJAXPUseShortClass")) {
            return 238;
         } else if (propName.equals("DebugJDBCConn")) {
            return 202;
         } else if (propName.equals("DebugJDBCDriverLogging")) {
            return 205;
         } else if (propName.equals("DebugJDBCInternal")) {
            return 206;
         } else if (propName.equals("DebugJDBCONS")) {
            return 208;
         } else if (propName.equals("DebugJDBCRAC")) {
            return 207;
         } else if (propName.equals("DebugJDBCRMI")) {
            return 204;
         } else if (propName.equals("DebugJDBCReplay")) {
            return 210;
         } else if (propName.equals("DebugJDBCSQL")) {
            return 203;
         } else if (propName.equals("DebugJDBCUCP")) {
            return 209;
         } else if (propName.equals("DebugJMSAME")) {
            return 120;
         } else if (propName.equals("DebugJMSBackEnd")) {
            return 107;
         } else if (propName.equals("DebugJMSBoot")) {
            return 117;
         } else if (propName.equals("DebugJMSCDS")) {
            return 126;
         } else if (propName.equals("DebugJMSCommon")) {
            return 109;
         } else if (propName.equals("DebugJMSConfig")) {
            return 110;
         } else if (propName.equals("DebugJMSCrossDomainSecurity")) {
            return 436;
         } else if (propName.equals("DebugJMSDispatcher")) {
            return 114;
         } else if (propName.equals("DebugJMSDispatcherProxy")) {
            return 115;
         } else if (propName.equals("DebugJMSDispatcherUtilsVerbose")) {
            return 437;
         } else if (propName.equals("DebugJMSDispatcherVerbose")) {
            return 438;
         } else if (propName.equals("DebugJMSDistTopic")) {
            return 111;
         } else if (propName.equals("DebugJMSDotNetProxy")) {
            return 439;
         } else if (propName.equals("DebugJMSDotNetT3Server")) {
            return 440;
         } else if (propName.equals("DebugJMSDotNetTransport")) {
            return 441;
         } else if (propName.equals("DebugJMSDurSub")) {
            return 442;
         } else if (propName.equals("DebugJMSDurableSubscribers")) {
            return 118;
         } else if (propName.equals("DebugJMSFrontEnd")) {
            return 108;
         } else if (propName.equals("DebugJMSJDBCScavengeOnFlush")) {
            return 119;
         } else if (propName.equals("DebugJMSJNDI")) {
            return 443;
         } else if (propName.equals("DebugJMSLocking")) {
            return 112;
         } else if (propName.equals("DebugJMSMessagePath")) {
            return 123;
         } else if (propName.equals("DebugJMSModule")) {
            return 122;
         } else if (propName.equals("DebugJMSOBS")) {
            return 444;
         } else if (propName.equals("DebugJMSPauseResume")) {
            return 121;
         } else if (propName.equals("DebugJMSSAF")) {
            return 124;
         } else if (propName.equals("DebugJMSStore")) {
            return 116;
         } else if (propName.equals("DebugJMST3Server")) {
            return 386;
         } else if (propName.equals("DebugJMSWrappers")) {
            return 125;
         } else if (propName.equals("DebugJMSXA")) {
            return 113;
         } else if (propName.equals("DebugJMX")) {
            return 352;
         } else if (propName.equals("DebugJMXCompatibility")) {
            return 358;
         } else if (propName.equals("DebugJMXContext")) {
            return 445;
         } else if (propName.equals("DebugJMXCore")) {
            return 353;
         } else if (propName.equals("DebugJMXCoreConcise")) {
            return 354;
         } else if (propName.equals("DebugJMXDomain")) {
            return 356;
         } else if (propName.equals("DebugJMXEdit")) {
            return 357;
         } else if (propName.equals("DebugJMXRuntime")) {
            return 355;
         } else if (propName.equals("DebugJNDI")) {
            return 102;
         } else if (propName.equals("DebugJNDIFactories")) {
            return 104;
         } else if (propName.equals("DebugJNDIResolution")) {
            return 103;
         } else if (propName.equals("DebugJPA")) {
            return 446;
         } else if (propName.equals("DebugJTA2PC")) {
            return 131;
         } else if (propName.equals("DebugJTA2PCDetail")) {
            return 447;
         } else if (propName.equals("DebugJTA2PCStackTrace")) {
            return 132;
         } else if (propName.equals("DebugJTAAPI")) {
            return 137;
         } else if (propName.equals("DebugJTACDI")) {
            return 150;
         } else if (propName.equals("DebugJTAGateway")) {
            return 139;
         } else if (propName.equals("DebugJTAGatewayStackTrace")) {
            return 140;
         } else if (propName.equals("DebugJTAHealth")) {
            return 147;
         } else if (propName.equals("DebugJTAJDBC")) {
            return 134;
         } else if (propName.equals("DebugJTALLR")) {
            return 146;
         } else if (propName.equals("DebugJTALifecycle")) {
            return 145;
         } else if (propName.equals("DebugJTAMigration")) {
            return 144;
         } else if (propName.equals("DebugJTANaming")) {
            return 141;
         } else if (propName.equals("DebugJTANamingStackTrace")) {
            return 142;
         } else if (propName.equals("DebugJTANonXA")) {
            return 128;
         } else if (propName.equals("DebugJTAPropagate")) {
            return 138;
         } else if (propName.equals("DebugJTARMI")) {
            return 130;
         } else if (propName.equals("DebugJTARecovery")) {
            return 135;
         } else if (propName.equals("DebugJTARecoveryStackTrace")) {
            return 136;
         } else if (propName.equals("DebugJTAResourceHealth")) {
            return 143;
         } else if (propName.equals("DebugJTAResourceName")) {
            return 149;
         } else if (propName.equals("DebugJTATLOG")) {
            return 133;
         } else if (propName.equals("DebugJTATransactionName")) {
            return 148;
         } else if (propName.equals("DebugJTAXA")) {
            return 127;
         } else if (propName.equals("DebugJTAXAStackTrace")) {
            return 129;
         } else if (propName.equals("DebugJpaDataCache")) {
            return 379;
         } else if (propName.equals("DebugJpaEnhance")) {
            return 376;
         } else if (propName.equals("DebugJpaJdbcJdbc")) {
            return 384;
         } else if (propName.equals("DebugJpaJdbcSchema")) {
            return 385;
         } else if (propName.equals("DebugJpaJdbcSql")) {
            return 383;
         } else if (propName.equals("DebugJpaManage")) {
            return 381;
         } else if (propName.equals("DebugJpaMetaData")) {
            return 375;
         } else if (propName.equals("DebugJpaProfile")) {
            return 382;
         } else if (propName.equals("DebugJpaQuery")) {
            return 378;
         } else if (propName.equals("DebugJpaRuntime")) {
            return 377;
         } else if (propName.equals("DebugJpaTool")) {
            return 380;
         } else if (propName.equals("DebugKodoWeblogic")) {
            return 448;
         } else if (propName.equals("DebugLeaderElection")) {
            return 95;
         } else if (propName.equals("DebugLegacy")) {
            return 449;
         } else if (propName.equals("DebugLibraries")) {
            return 58;
         } else if (propName.equals("DebugLifecycleManager")) {
            return 151;
         } else if (propName.equals("DebugLoggingConfiguration")) {
            return 329;
         } else if (propName.equals("DebugMBeanCIC")) {
            return 450;
         } else if (propName.equals("DebugMBeanEventHandler")) {
            return 451;
         } else if (propName.equals("DebugMBeanEventHandlerSummary")) {
            return 452;
         } else if (propName.equals("DebugMBeanEventHandlerWork")) {
            return 453;
         } else if (propName.equals("DebugMBeanHarvesterControl")) {
            return 285;
         } else if (propName.equals("DebugMBeanHarvesterDataCollection")) {
            return 287;
         } else if (propName.equals("DebugMBeanHarvesterResolution")) {
            return 286;
         } else if (propName.equals("DebugMBeanHarvesterThreading")) {
            return 288;
         } else if (propName.equals("DebugMBeanLocalization")) {
            return 454;
         } else if (propName.equals("DebugMBeanTypeUtilQueue")) {
            return 294;
         } else if (propName.equals("DebugMBeanTypeUtilQueuePriority")) {
            return 295;
         } else if (propName.equals("DebugMBeanTypeUtilityListener")) {
            return 293;
         } else if (propName.equals("DebugMBeanTypingUtility")) {
            return 296;
         } else if (propName.equals("DebugMailSessionDeployment")) {
            return 455;
         } else if (propName.equals("DebugManagedBean")) {
            return 456;
         } else if (propName.equals("DebugManagementServicesResource")) {
            return 389;
         } else if (propName.equals("DebugMaskCriterias")) {
            return 42;
         } else if (propName.equals("DebugMessagingBridgeDumpToConsole")) {
            return 215;
         } else if (propName.equals("DebugMessagingBridgeDumpToLog")) {
            return 214;
         } else if (propName.equals("DebugMessagingBridgeRuntime")) {
            return 212;
         } else if (propName.equals("DebugMessagingBridgeRuntimeVerbose")) {
            return 213;
         } else if (propName.equals("DebugMessagingBridgeStartup")) {
            return 211;
         } else if (propName.equals("DebugMessagingKernel")) {
            return 152;
         } else if (propName.equals("DebugMessagingKernelBoot")) {
            return 153;
         } else if (propName.equals("DebugMessagingOwnableLock")) {
            return 154;
         } else if (propName.equals("DebugMigrationInfo")) {
            return 457;
         } else if (propName.equals("DebugNIO")) {
            return 458;
         } else if (propName.equals("DebugNodeManagerRuntime")) {
            return 408;
         } else if (propName.equals("DebugPageFlowMonitoring")) {
            return 459;
         } else if (propName.equals("DebugPartitionJMX")) {
            return 460;
         } else if (propName.equals("DebugPartitionLifecycle")) {
            return 461;
         } else if (propName.equals("DebugPartitionPortability")) {
            return 462;
         } else if (propName.equals("DebugPartitionResourceMetricsRuntime")) {
            return 333;
         } else if (propName.equals("DebugPatchingRuntime")) {
            return 362;
         } else if (propName.equals("DebugPathSvc")) {
            return 164;
         } else if (propName.equals("DebugPathSvcVerbose")) {
            return 165;
         } else if (propName.equals("DebugPersistentStoreManager")) {
            return 463;
         } else if (propName.equals("DebugPubSubBayeux")) {
            return 464;
         } else if (propName.equals("DebugPubSubChannel")) {
            return 465;
         } else if (propName.equals("DebugPubSubClient")) {
            return 466;
         } else if (propName.equals("DebugPubSubSecurity")) {
            return 467;
         } else if (propName.equals("DebugPubSubServer")) {
            return 468;
         } else if (propName.equals("DebugRA")) {
            return 335;
         } else if (propName.equals("DebugRAClassloader")) {
            return 350;
         } else if (propName.equals("DebugRAConnEvents")) {
            return 347;
         } else if (propName.equals("DebugRAConnections")) {
            return 346;
         } else if (propName.equals("DebugRADeployment")) {
            return 342;
         } else if (propName.equals("DebugRALifecycle")) {
            return 340;
         } else if (propName.equals("DebugRALocalOut")) {
            return 339;
         } else if (propName.equals("DebugRAParsing")) {
            return 343;
         } else if (propName.equals("DebugRAPoolVerbose")) {
            return 334;
         } else if (propName.equals("DebugRAPooling")) {
            return 345;
         } else if (propName.equals("DebugRASecurityCtx")) {
            return 344;
         } else if (propName.equals("DebugRAWork")) {
            return 348;
         } else if (propName.equals("DebugRAWorkEvents")) {
            return 349;
         } else if (propName.equals("DebugRAXAin")) {
            return 336;
         } else if (propName.equals("DebugRAXAout")) {
            return 337;
         } else if (propName.equals("DebugRAXAwork")) {
            return 338;
         } else if (propName.equals("DebugRCM")) {
            return 404;
         } else if (propName.equals("DebugRESTNotifications")) {
            return 315;
         } else if (propName.equals("DebugRMIDetailed")) {
            return 469;
         } else if (propName.equals("DebugRMIRequestPerf")) {
            return 56;
         } else if (propName.equals("DebugReadyApp")) {
            return 401;
         } else if (propName.equals("DebugRedefAttach")) {
            return 470;
         } else if (propName.equals("DebugReplication")) {
            return 92;
         } else if (propName.equals("DebugReplicationDetails")) {
            return 93;
         } else if (propName.equals("DebugReplicationSize")) {
            return 391;
         } else if (propName.equals("DebugRequestManager")) {
            return 471;
         } else if (propName.equals("DebugResourceGroupMigration")) {
            return 472;
         } else if (propName.equals("DebugRestJersey1Integration")) {
            return 406;
         } else if (propName.equals("DebugRestJersey2Integration")) {
            return 407;
         } else if (propName.equals("DebugRestartInPlace")) {
            return 433;
         } else if (propName.equals("DebugSAFAdmin")) {
            return 156;
         } else if (propName.equals("DebugSAFLifeCycle")) {
            return 155;
         } else if (propName.equals("DebugSAFManager")) {
            return 157;
         } else if (propName.equals("DebugSAFMessagePath")) {
            return 161;
         } else if (propName.equals("DebugSAFReceivingAgent")) {
            return 159;
         } else if (propName.equals("DebugSAFSendingAgent")) {
            return 158;
         } else if (propName.equals("DebugSAFStore")) {
            return 162;
         } else if (propName.equals("DebugSAFTransport")) {
            return 160;
         } else if (propName.equals("DebugSAFVerbose")) {
            return 163;
         } else if (propName.equals("DebugSNMPAgent")) {
            return 325;
         } else if (propName.equals("DebugSNMPExtensionProvider")) {
            return 327;
         } else if (propName.equals("DebugSNMPMib")) {
            return 473;
         } else if (propName.equals("DebugSNMPProtocolTCP")) {
            return 326;
         } else if (propName.equals("DebugSNMPToolkit")) {
            return 324;
         } else if (propName.equals("DebugScaContainer")) {
            return 166;
         } else if (propName.equals("DebugScrubberStartService")) {
            return 474;
         } else if (propName.equals("DebugSecurity")) {
            return 168;
         } else if (propName.equals("DebugSecurityAdjudicator")) {
            return 180;
         } else if (propName.equals("DebugSecurityAtn")) {
            return 181;
         } else if (propName.equals("DebugSecurityAtz")) {
            return 182;
         } else if (propName.equals("DebugSecurityAuditor")) {
            return 183;
         } else if (propName.equals("DebugSecurityCertPath")) {
            return 187;
         } else if (propName.equals("DebugSecurityCredMap")) {
            return 184;
         } else if (propName.equals("DebugSecurityEEngine")) {
            return 190;
         } else if (propName.equals("DebugSecurityEncryptionService")) {
            return 185;
         } else if (propName.equals("DebugSecurityJACC")) {
            return 191;
         } else if (propName.equals("DebugSecurityJACCNonPolicy")) {
            return 192;
         } else if (propName.equals("DebugSecurityJACCPolicy")) {
            return 193;
         } else if (propName.equals("DebugSecurityKeyStore")) {
            return 186;
         } else if (propName.equals("DebugSecurityPasswordPolicy")) {
            return 169;
         } else if (propName.equals("DebugSecurityPredicate")) {
            return 172;
         } else if (propName.equals("DebugSecurityProfiler")) {
            return 188;
         } else if (propName.equals("DebugSecurityRealm")) {
            return 167;
         } else if (propName.equals("DebugSecurityRoleMap")) {
            return 189;
         } else if (propName.equals("DebugSecuritySAML2Atn")) {
            return 199;
         } else if (propName.equals("DebugSecuritySAML2CredMap")) {
            return 200;
         } else if (propName.equals("DebugSecuritySAML2Lib")) {
            return 198;
         } else if (propName.equals("DebugSecuritySAML2Service")) {
            return 201;
         } else if (propName.equals("DebugSecuritySAMLAtn")) {
            return 195;
         } else if (propName.equals("DebugSecuritySAMLCredMap")) {
            return 196;
         } else if (propName.equals("DebugSecuritySAMLLib")) {
            return 194;
         } else if (propName.equals("DebugSecuritySAMLService")) {
            return 197;
         } else if (propName.equals("DebugSecuritySSL")) {
            return 173;
         } else if (propName.equals("DebugSecuritySSLEaten")) {
            return 174;
         } else if (propName.equals("DebugSecurityService")) {
            return 171;
         } else if (propName.equals("DebugSecurityUserLockout")) {
            return 170;
         } else if (propName.equals("DebugSelfTuning")) {
            return 38;
         } else if (propName.equals("DebugServerLifeCycle")) {
            return 367;
         } else if (propName.equals("DebugServerMigration")) {
            return 87;
         } else if (propName.equals("DebugServerRuntime")) {
            return 475;
         } else if (propName.equals("DebugServerShutdownStatistics")) {
            return 476;
         } else if (propName.equals("DebugServerShutdownTimer")) {
            return 477;
         } else if (propName.equals("DebugServerStartStatistics")) {
            return 388;
         } else if (propName.equals("DebugServerStartupTimer")) {
            return 478;
         } else if (propName.equals("DebugSingletonServices")) {
            return 479;
         } else if (propName.equals("DebugSituationalConfig")) {
            return 361;
         } else if (propName.equals("DebugSpringStatistics")) {
            return 480;
         } else if (propName.equals("DebugStore")) {
            return 481;
         } else if (propName.equals("DebugStoreAdmin")) {
            return 222;
         } else if (propName.equals("DebugStoreCache")) {
            return 482;
         } else if (propName.equals("DebugStoreIOLogical")) {
            return 216;
         } else if (propName.equals("DebugStoreIOLogicalBoot")) {
            return 217;
         } else if (propName.equals("DebugStoreIOPhysical")) {
            return 218;
         } else if (propName.equals("DebugStoreIOPhysicalVerbose")) {
            return 219;
         } else if (propName.equals("DebugStoreRCM")) {
            return 483;
         } else if (propName.equals("DebugStoreRCMVerbose")) {
            return 484;
         } else if (propName.equals("DebugStoreXA")) {
            return 220;
         } else if (propName.equals("DebugStoreXAVerbose")) {
            return 221;
         } else if (propName.equals("DebugStubGeneration")) {
            return 485;
         } else if (propName.equals("DebugTunnelingConnection")) {
            return 106;
         } else if (propName.equals("DebugTunnelingConnectionTimeout")) {
            return 105;
         } else if (propName.equals("DebugURLResolution")) {
            return 67;
         } else if (propName.equals("DebugUnicastMessaging")) {
            return 486;
         } else if (propName.equals("DebugValidation")) {
            return 487;
         } else if (propName.equals("DebugValidationClassLoading")) {
            return 488;
         } else if (propName.equals("DebugVerboseRCM")) {
            return 405;
         } else if (propName.equals("DebugWANReplicationDetails")) {
            return 351;
         } else if (propName.equals("DebugWTCConfig")) {
            return 368;
         } else if (propName.equals("DebugWTCCorbaEx")) {
            return 373;
         } else if (propName.equals("DebugWTCGwtEx")) {
            return 371;
         } else if (propName.equals("DebugWTCJatmiEx")) {
            return 372;
         } else if (propName.equals("DebugWTCTDomPdu")) {
            return 369;
         } else if (propName.equals("DebugWTCTdomPdu")) {
            return 489;
         } else if (propName.equals("DebugWTCUData")) {
            return 370;
         } else if (propName.equals("DebugWTCtBridgeEx")) {
            return 374;
         } else if (propName.equals("DebugWatchScalingActions")) {
            return 490;
         } else if (propName.equals("DebugWebAppDI")) {
            return 491;
         } else if (propName.equals("DebugWebAppIdentityAssertion")) {
            return 70;
         } else if (propName.equals("DebugWebAppModule")) {
            return 72;
         } else if (propName.equals("DebugWebAppSecurity")) {
            return 71;
         } else if (propName.equals("DebugWebSocket")) {
            return 492;
         } else if (propName.equals("DebugXMLEntityCacheDebugLevel")) {
            return 239;
         } else if (propName.equals("DebugXMLEntityCacheDebugName")) {
            return 240;
         } else if (propName.equals("DebugXMLEntityCacheIncludeClass")) {
            return 244;
         } else if (propName.equals("DebugXMLEntityCacheIncludeLocation")) {
            return 245;
         } else if (propName.equals("DebugXMLEntityCacheIncludeName")) {
            return 243;
         } else if (propName.equals("DebugXMLEntityCacheIncludeTime")) {
            return 242;
         } else if (propName.equals("DebugXMLEntityCacheOutputStream")) {
            return 241;
         } else if (propName.equals("DebugXMLEntityCacheUseShortClass")) {
            return 246;
         } else if (propName.equals("DebugXMLRegistryDebugLevel")) {
            return 223;
         } else if (propName.equals("DebugXMLRegistryDebugName")) {
            return 224;
         } else if (propName.equals("DebugXMLRegistryIncludeClass")) {
            return 228;
         } else if (propName.equals("DebugXMLRegistryIncludeLocation")) {
            return 229;
         } else if (propName.equals("DebugXMLRegistryIncludeName")) {
            return 227;
         } else if (propName.equals("DebugXMLRegistryIncludeTime")) {
            return 226;
         } else if (propName.equals("DebugXMLRegistryOutputStream")) {
            return 225;
         } else if (propName.equals("DebugXMLRegistryUseShortClass")) {
            return 230;
         } else if (propName.equals("DefaultStore")) {
            return 63;
         } else if (propName.equals("DiagnosticContextDebugMode")) {
            return 41;
         } else if (propName.equals("ForceShutdownTimeoutNumOfThreadDump")) {
            return 54;
         } else if (propName.equals("ForceShutdownTimeoutThreadDumpInterval")) {
            return 55;
         } else if (propName.equals("GlassFishWebAppParser")) {
            return 493;
         } else if (propName.equals("GracefulShutdownTimeoutNumOfThreadDump")) {
            return 52;
         } else if (propName.equals("GracefulShutdownTimeoutThreadDumpInterval")) {
            return 53;
         } else if (propName.equals("ListenThreadDebug")) {
            return 44;
         } else if (propName.equals("MagicThreadDumpBackToSocket")) {
            return 48;
         } else if (propName.equals("MagicThreadDumpFile")) {
            return 47;
         } else if (propName.equals("MagicThreadDumpHost")) {
            return 46;
         } else if (propName.equals("MasterDeployer")) {
            return 255;
         } else if (propName.equals("OSGiForApps")) {
            return 494;
         } else if (propName.equals("PartitionEvenInterceptor")) {
            return 495;
         } else if (propName.equals("PortablePartitionHelper")) {
            return 496;
         } else if (propName.equals("RedefiningClassLoader")) {
            return 61;
         } else if (propName.equals("ScriptExecutorCommand")) {
            return 497;
         } else if (propName.equals("SecurityEncryptionService")) {
            return 498;
         } else if (propName.equals("Server")) {
            return 43;
         } else if (propName.equals("SlaveDeployer")) {
            return 256;
         } else if (propName.equals("StartupTimeoutNumOfThreadDump")) {
            return 50;
         } else if (propName.equals("StartupTimeoutThreadDumpInterval")) {
            return 51;
         } else if (propName.equals("T3HttpUpgradeHandler")) {
            return 499;
         } else if (propName.equals("WarExtraction")) {
            return 500;
         } else if (propName.equals("WebModule")) {
            return 260;
         } else if (propName.equals("MagicThreadDumpEnabled")) {
            return 45;
         } else {
            return propName.equals("PartitionDebugLoggingEnabled") ? 40 : super.getPropertyIndex(propName);
         }
      }

      public Iterator getChildren() {
         List iterators = new ArrayList();
         iterators.add(new ArrayIterator(this.bean.getDebugScopes()));
         return new CombinedIterator(iterators);
      }

      protected long computeHashValue(CRC32 crc) {
         try {
            StringBuffer buf = new StringBuffer();
            long superValue = super.computeHashValue(crc);
            if (superValue != 0L) {
               buf.append(String.valueOf(superValue));
            }

            long childValue = 0L;
            if (this.bean.isApplicationContainerSet()) {
               buf.append("ApplicationContainer");
               buf.append(String.valueOf(this.bean.getApplicationContainer()));
            }

            if (this.bean.isBugReportServiceWsdlUrlSet()) {
               buf.append("BugReportServiceWsdlUrl");
               buf.append(String.valueOf(this.bean.getBugReportServiceWsdlUrl()));
            }

            if (this.bean.isClassChangeNotifierSet()) {
               buf.append("ClassChangeNotifier");
               buf.append(String.valueOf(this.bean.getClassChangeNotifier()));
            }

            if (this.bean.isClassFinderSet()) {
               buf.append("ClassFinder");
               buf.append(String.valueOf(this.bean.getClassFinder()));
            }

            if (this.bean.isClassLoaderSet()) {
               buf.append("ClassLoader");
               buf.append(String.valueOf(this.bean.getClassLoader()));
            }

            if (this.bean.isClassLoaderVerboseSet()) {
               buf.append("ClassLoaderVerbose");
               buf.append(String.valueOf(this.bean.getClassLoaderVerbose()));
            }

            if (this.bean.isClassloaderWebAppSet()) {
               buf.append("ClassloaderWebApp");
               buf.append(String.valueOf(this.bean.getClassloaderWebApp()));
            }

            if (this.bean.isClasspathServletSet()) {
               buf.append("ClasspathServlet");
               buf.append(String.valueOf(this.bean.getClasspathServlet()));
            }

            if (this.bean.isDebugAbbrevsSet()) {
               buf.append("DebugAbbrevs");
               buf.append(String.valueOf(this.bean.getDebugAbbrevs()));
            }

            if (this.bean.isDebugAppAnnotationsSet()) {
               buf.append("DebugAppAnnotations");
               buf.append(String.valueOf(this.bean.getDebugAppAnnotations()));
            }

            if (this.bean.isDebugAppClientSet()) {
               buf.append("DebugAppClient");
               buf.append(String.valueOf(this.bean.getDebugAppClient()));
            }

            if (this.bean.isDebugAppContainerSet()) {
               buf.append("DebugAppContainer");
               buf.append(String.valueOf(this.bean.getDebugAppContainer()));
            }

            if (this.bean.isDebugAppContainerToolsSet()) {
               buf.append("DebugAppContainerTools");
               buf.append(String.valueOf(this.bean.getDebugAppContainerTools()));
            }

            if (this.bean.isDebugAppTimingSet()) {
               buf.append("DebugAppTiming");
               buf.append(String.valueOf(this.bean.getDebugAppTiming()));
            }

            if (this.bean.isDebugAsyncQueueSet()) {
               buf.append("DebugAsyncQueue");
               buf.append(String.valueOf(this.bean.getDebugAsyncQueue()));
            }

            if (this.bean.isDebugAttachSet()) {
               buf.append("DebugAttach");
               buf.append(String.valueOf(this.bean.getDebugAttach()));
            }

            if (this.bean.isDebugBackgroundDeploymentSet()) {
               buf.append("DebugBackgroundDeployment");
               buf.append(String.valueOf(this.bean.getDebugBackgroundDeployment()));
            }

            if (this.bean.isDebugBatchConnectorSet()) {
               buf.append("DebugBatchConnector");
               buf.append(String.valueOf(this.bean.getDebugBatchConnector()));
            }

            if (this.bean.isDebugBeanTreeHarvesterControlSet()) {
               buf.append("DebugBeanTreeHarvesterControl");
               buf.append(String.valueOf(this.bean.getDebugBeanTreeHarvesterControl()));
            }

            if (this.bean.isDebugBeanTreeHarvesterDataCollectionSet()) {
               buf.append("DebugBeanTreeHarvesterDataCollection");
               buf.append(String.valueOf(this.bean.getDebugBeanTreeHarvesterDataCollection()));
            }

            if (this.bean.isDebugBeanTreeHarvesterResolutionSet()) {
               buf.append("DebugBeanTreeHarvesterResolution");
               buf.append(String.valueOf(this.bean.getDebugBeanTreeHarvesterResolution()));
            }

            if (this.bean.isDebugBeanTreeHarvesterThreadingSet()) {
               buf.append("DebugBeanTreeHarvesterThreading");
               buf.append(String.valueOf(this.bean.getDebugBeanTreeHarvesterThreading()));
            }

            if (this.bean.isDebugBootstrapServletSet()) {
               buf.append("DebugBootstrapServlet");
               buf.append(String.valueOf(this.bean.getDebugBootstrapServlet()));
            }

            if (this.bean.isDebugBuzzProtocolSet()) {
               buf.append("DebugBuzzProtocol");
               buf.append(String.valueOf(this.bean.getDebugBuzzProtocol()));
            }

            if (this.bean.isDebugBuzzProtocolDetailsSet()) {
               buf.append("DebugBuzzProtocolDetails");
               buf.append(String.valueOf(this.bean.getDebugBuzzProtocolDetails()));
            }

            if (this.bean.isDebugBuzzProtocolHttpSet()) {
               buf.append("DebugBuzzProtocolHttp");
               buf.append(String.valueOf(this.bean.getDebugBuzzProtocolHttp()));
            }

            if (this.bean.isDebugCATSet()) {
               buf.append("DebugCAT");
               buf.append(String.valueOf(this.bean.getDebugCAT()));
            }

            if (this.bean.isDebugCertRevocCheckSet()) {
               buf.append("DebugCertRevocCheck");
               buf.append(String.valueOf(this.bean.getDebugCertRevocCheck()));
            }

            if (this.bean.isDebugChannelSet()) {
               buf.append("DebugChannel");
               buf.append(String.valueOf(this.bean.getDebugChannel()));
            }

            if (this.bean.isDebugClassLoadingConsistencyCheckerSet()) {
               buf.append("DebugClassLoadingConsistencyChecker");
               buf.append(String.valueOf(this.bean.getDebugClassLoadingConsistencyChecker()));
            }

            if (this.bean.isDebugClassLoadingContextualTraceSet()) {
               buf.append("DebugClassLoadingContextualTrace");
               buf.append(String.valueOf(this.bean.getDebugClassLoadingContextualTrace()));
            }

            if (this.bean.isDebugClassLoadingVerboseSet()) {
               buf.append("DebugClassLoadingVerbose");
               buf.append(String.valueOf(this.bean.getDebugClassLoadingVerbose()));
            }

            if (this.bean.isDebugClassRedefSet()) {
               buf.append("DebugClassRedef");
               buf.append(String.valueOf(this.bean.getDebugClassRedef()));
            }

            if (this.bean.isDebugClassSizeSet()) {
               buf.append("DebugClassSize");
               buf.append(String.valueOf(this.bean.getDebugClassSize()));
            }

            if (this.bean.isDebugClusterSet()) {
               buf.append("DebugCluster");
               buf.append(String.valueOf(this.bean.getDebugCluster()));
            }

            if (this.bean.isDebugClusterAnnouncementsSet()) {
               buf.append("DebugClusterAnnouncements");
               buf.append(String.valueOf(this.bean.getDebugClusterAnnouncements()));
            }

            if (this.bean.isDebugClusterFragmentsSet()) {
               buf.append("DebugClusterFragments");
               buf.append(String.valueOf(this.bean.getDebugClusterFragments()));
            }

            if (this.bean.isDebugClusterHeartbeatsSet()) {
               buf.append("DebugClusterHeartbeats");
               buf.append(String.valueOf(this.bean.getDebugClusterHeartbeats()));
            }

            if (this.bean.isDebugCoherenceSet()) {
               buf.append("DebugCoherence");
               buf.append(String.valueOf(this.bean.getDebugCoherence()));
            }

            if (this.bean.isDebugConcurrentSet()) {
               buf.append("DebugConcurrent");
               buf.append(String.valueOf(this.bean.getDebugConcurrent()));
            }

            if (this.bean.isDebugConcurrentContextSet()) {
               buf.append("DebugConcurrentContext");
               buf.append(String.valueOf(this.bean.getDebugConcurrentContext()));
            }

            if (this.bean.isDebugConcurrentMESSet()) {
               buf.append("DebugConcurrentMES");
               buf.append(String.valueOf(this.bean.getDebugConcurrentMES()));
            }

            if (this.bean.isDebugConcurrentMSESSet()) {
               buf.append("DebugConcurrentMSES");
               buf.append(String.valueOf(this.bean.getDebugConcurrentMSES()));
            }

            if (this.bean.isDebugConcurrentMTFSet()) {
               buf.append("DebugConcurrentMTF");
               buf.append(String.valueOf(this.bean.getDebugConcurrentMTF()));
            }

            if (this.bean.isDebugConcurrentTransactionSet()) {
               buf.append("DebugConcurrentTransaction");
               buf.append(String.valueOf(this.bean.getDebugConcurrentTransaction()));
            }

            if (this.bean.isDebugConfigurationEditSet()) {
               buf.append("DebugConfigurationEdit");
               buf.append(String.valueOf(this.bean.getDebugConfigurationEdit()));
            }

            if (this.bean.isDebugConfigurationRuntimeSet()) {
               buf.append("DebugConfigurationRuntime");
               buf.append(String.valueOf(this.bean.getDebugConfigurationRuntime()));
            }

            if (this.bean.isDebugConnectorServiceSet()) {
               buf.append("DebugConnectorService");
               buf.append(String.valueOf(this.bean.getDebugConnectorService()));
            }

            if (this.bean.isDebugConsensusLeasingSet()) {
               buf.append("DebugConsensusLeasing");
               buf.append(String.valueOf(this.bean.getDebugConsensusLeasing()));
            }

            if (this.bean.isDebugDRSCallsSet()) {
               buf.append("DebugDRSCalls");
               buf.append(String.valueOf(this.bean.getDebugDRSCalls()));
            }

            if (this.bean.isDebugDRSHeartbeatsSet()) {
               buf.append("DebugDRSHeartbeats");
               buf.append(String.valueOf(this.bean.getDebugDRSHeartbeats()));
            }

            if (this.bean.isDebugDRSMessagesSet()) {
               buf.append("DebugDRSMessages");
               buf.append(String.valueOf(this.bean.getDebugDRSMessages()));
            }

            if (this.bean.isDebugDRSQueuesSet()) {
               buf.append("DebugDRSQueues");
               buf.append(String.valueOf(this.bean.getDebugDRSQueues()));
            }

            if (this.bean.isDebugDRSStateTransitionsSet()) {
               buf.append("DebugDRSStateTransitions");
               buf.append(String.valueOf(this.bean.getDebugDRSStateTransitions()));
            }

            if (this.bean.isDebugDRSUpdateStatusSet()) {
               buf.append("DebugDRSUpdateStatus");
               buf.append(String.valueOf(this.bean.getDebugDRSUpdateStatus()));
            }

            if (this.bean.isDebugDataSourceInterceptorSet()) {
               buf.append("DebugDataSourceInterceptor");
               buf.append(String.valueOf(this.bean.getDebugDataSourceInterceptor()));
            }

            if (this.bean.isDebugDebugPatchesSet()) {
               buf.append("DebugDebugPatches");
               buf.append(String.valueOf(this.bean.getDebugDebugPatches()));
            }

            if (this.bean.isDebugDefaultStoreVerboseSet()) {
               buf.append("DebugDefaultStoreVerbose");
               buf.append(String.valueOf(this.bean.getDebugDefaultStoreVerbose()));
            }

            if (this.bean.isDebugDeploySet()) {
               buf.append("DebugDeploy");
               buf.append(String.valueOf(this.bean.getDebugDeploy()));
            }

            if (this.bean.isDebugDeploymentSet()) {
               buf.append("DebugDeployment");
               buf.append(String.valueOf(this.bean.getDebugDeployment()));
            }

            if (this.bean.isDebugDeploymentConciseSet()) {
               buf.append("DebugDeploymentConcise");
               buf.append(String.valueOf(this.bean.getDebugDeploymentConcise()));
            }

            if (this.bean.isDebugDeploymentPlanSet()) {
               buf.append("DebugDeploymentPlan");
               buf.append(String.valueOf(this.bean.getDebugDeploymentPlan()));
            }

            if (this.bean.isDebugDeploymentServiceSet()) {
               buf.append("DebugDeploymentService");
               buf.append(String.valueOf(this.bean.getDebugDeploymentService()));
            }

            if (this.bean.isDebugDeploymentServiceInternalSet()) {
               buf.append("DebugDeploymentServiceInternal");
               buf.append(String.valueOf(this.bean.getDebugDeploymentServiceInternal()));
            }

            if (this.bean.isDebugDeploymentServiceStatusUpdatesSet()) {
               buf.append("DebugDeploymentServiceStatusUpdates");
               buf.append(String.valueOf(this.bean.getDebugDeploymentServiceStatusUpdates()));
            }

            if (this.bean.isDebugDeploymentServiceTransportSet()) {
               buf.append("DebugDeploymentServiceTransport");
               buf.append(String.valueOf(this.bean.getDebugDeploymentServiceTransport()));
            }

            if (this.bean.isDebugDeploymentServiceTransportHttpSet()) {
               buf.append("DebugDeploymentServiceTransportHttp");
               buf.append(String.valueOf(this.bean.getDebugDeploymentServiceTransportHttp()));
            }

            if (this.bean.isDebugDescriptorSet()) {
               buf.append("DebugDescriptor");
               buf.append(String.valueOf(this.bean.getDebugDescriptor()));
            }

            if (this.bean.isDebugDiagnosticAccessorSet()) {
               buf.append("DebugDiagnosticAccessor");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticAccessor()));
            }

            if (this.bean.isDebugDiagnosticArchiveSet()) {
               buf.append("DebugDiagnosticArchive");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticArchive()));
            }

            if (this.bean.isDebugDiagnosticArchiveRetirementSet()) {
               buf.append("DebugDiagnosticArchiveRetirement");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticArchiveRetirement()));
            }

            if (this.bean.isDebugDiagnosticCollectionsSet()) {
               buf.append("DebugDiagnosticCollections");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticCollections()));
            }

            if (this.bean.isDebugDiagnosticContextSet()) {
               buf.append("DebugDiagnosticContext");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticContext()));
            }

            if (this.bean.isDebugDiagnosticDataGatheringSet()) {
               buf.append("DebugDiagnosticDataGathering");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticDataGathering()));
            }

            if (this.bean.isDebugDiagnosticFileArchiveSet()) {
               buf.append("DebugDiagnosticFileArchive");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticFileArchive()));
            }

            if (this.bean.isDebugDiagnosticImageSet()) {
               buf.append("DebugDiagnosticImage");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticImage()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationSet()) {
               buf.append("DebugDiagnosticInstrumentation");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentation()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationActionsSet()) {
               buf.append("DebugDiagnosticInstrumentationActions");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationActions()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationClassInfoSet()) {
               buf.append("DebugDiagnosticInstrumentationClassInfo");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationClassInfo()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationConfigSet()) {
               buf.append("DebugDiagnosticInstrumentationConfig");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationConfig()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationEventsSet()) {
               buf.append("DebugDiagnosticInstrumentationEvents");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationEvents()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationResultSet()) {
               buf.append("DebugDiagnosticInstrumentationResult");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationResult()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationWeavingSet()) {
               buf.append("DebugDiagnosticInstrumentationWeaving");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationWeaving()));
            }

            if (this.bean.isDebugDiagnosticInstrumentationWeavingMatchesSet()) {
               buf.append("DebugDiagnosticInstrumentationWeavingMatches");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticInstrumentationWeavingMatches()));
            }

            if (this.bean.isDebugDiagnosticJdbcArchiveSet()) {
               buf.append("DebugDiagnosticJdbcArchive");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticJdbcArchive()));
            }

            if (this.bean.isDebugDiagnosticLifecycleHandlersSet()) {
               buf.append("DebugDiagnosticLifecycleHandlers");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticLifecycleHandlers()));
            }

            if (this.bean.isDebugDiagnosticNotificationsSet()) {
               buf.append("DebugDiagnosticNotifications");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticNotifications()));
            }

            if (this.bean.isDebugDiagnosticQuerySet()) {
               buf.append("DebugDiagnosticQuery");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticQuery()));
            }

            if (this.bean.isDebugDiagnosticRuntimeControlDriverSet()) {
               buf.append("DebugDiagnosticRuntimeControlDriver");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticRuntimeControlDriver()));
            }

            if (this.bean.isDebugDiagnosticRuntimeControlServiceSet()) {
               buf.append("DebugDiagnosticRuntimeControlService");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticRuntimeControlService()));
            }

            if (this.bean.isDebugDiagnosticWatchSet()) {
               buf.append("DebugDiagnosticWatch");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticWatch()));
            }

            if (this.bean.isDebugDiagnosticWatchEventsSet()) {
               buf.append("DebugDiagnosticWatchEvents");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticWatchEvents()));
            }

            if (this.bean.isDebugDiagnosticWatchEventsDetailsSet()) {
               buf.append("DebugDiagnosticWatchEventsDetails");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticWatchEventsDetails()));
            }

            if (this.bean.isDebugDiagnosticWlstoreArchiveSet()) {
               buf.append("DebugDiagnosticWlstoreArchive");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticWlstoreArchive()));
            }

            if (this.bean.isDebugDiagnosticsBeanExtensionResolverSet()) {
               buf.append("DebugDiagnosticsBeanExtensionResolver");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsBeanExtensionResolver()));
            }

            if (this.bean.isDebugDiagnosticsBeanInfoProvidersSet()) {
               buf.append("DebugDiagnosticsBeanInfoProviders");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsBeanInfoProviders()));
            }

            if (this.bean.isDebugDiagnosticsELContextSet()) {
               buf.append("DebugDiagnosticsELContext");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsELContext()));
            }

            if (this.bean.isDebugDiagnosticsELResolverSet()) {
               buf.append("DebugDiagnosticsELResolver");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsELResolver()));
            }

            if (this.bean.isDebugDiagnosticsExpressionEvaluatorsSet()) {
               buf.append("DebugDiagnosticsExpressionEvaluators");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionEvaluators()));
            }

            if (this.bean.isDebugDiagnosticsExpressionFunctionMapperSet()) {
               buf.append("DebugDiagnosticsExpressionFunctionMapper");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionFunctionMapper()));
            }

            if (this.bean.isDebugDiagnosticsExpressionFunctionsSet()) {
               buf.append("DebugDiagnosticsExpressionFunctions");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionFunctions()));
            }

            if (this.bean.isDebugDiagnosticsExpressionMetricsSet()) {
               buf.append("DebugDiagnosticsExpressionMetrics");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionMetrics()));
            }

            if (this.bean.isDebugDiagnosticsExpressionPollerSet()) {
               buf.append("DebugDiagnosticsExpressionPoller");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionPoller()));
            }

            if (this.bean.isDebugDiagnosticsExpressionPollerBufferSet()) {
               buf.append("DebugDiagnosticsExpressionPollerBuffer");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsExpressionPollerBuffer()));
            }

            if (this.bean.isDebugDiagnosticsHarvesterSet()) {
               buf.append("DebugDiagnosticsHarvester");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsHarvester()));
            }

            if (this.bean.isDebugDiagnosticsHarvesterDataSet()) {
               buf.append("DebugDiagnosticsHarvesterData");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsHarvesterData()));
            }

            if (this.bean.isDebugDiagnosticsHarvesterMBeanPluginSet()) {
               buf.append("DebugDiagnosticsHarvesterMBeanPlugin");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsHarvesterMBeanPlugin()));
            }

            if (this.bean.isDebugDiagnosticsHarvesterTreeBeanPluginSet()) {
               buf.append("DebugDiagnosticsHarvesterTreeBeanPlugin");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsHarvesterTreeBeanPlugin()));
            }

            if (this.bean.isDebugDiagnosticsMBeanELResolverSet()) {
               buf.append("DebugDiagnosticsMBeanELResolver");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsMBeanELResolver()));
            }

            if (this.bean.isDebugDiagnosticsModuleSet()) {
               buf.append("DebugDiagnosticsModule");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsModule()));
            }

            if (this.bean.isDebugDiagnosticsNotificationsSet()) {
               buf.append("DebugDiagnosticsNotifications");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsNotifications()));
            }

            if (this.bean.isDebugDiagnosticsScriptActionSet()) {
               buf.append("DebugDiagnosticsScriptAction");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsScriptAction()));
            }

            if (this.bean.isDebugDiagnosticsTimerSet()) {
               buf.append("DebugDiagnosticsTimer");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsTimer()));
            }

            if (this.bean.isDebugDiagnosticsUtilsSet()) {
               buf.append("DebugDiagnosticsUtils");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsUtils()));
            }

            if (this.bean.isDebugDiagnosticsValueTracingELResolverSet()) {
               buf.append("DebugDiagnosticsValueTracingELResolver");
               buf.append(String.valueOf(this.bean.getDebugDiagnosticsValueTracingELResolver()));
            }

            if (this.bean.isDebugDomainLogHandlerSet()) {
               buf.append("DebugDomainLogHandler");
               buf.append(String.valueOf(this.bean.getDebugDomainLogHandler()));
            }

            if (this.bean.isDebugDomainUpgradeServerServiceSet()) {
               buf.append("DebugDomainUpgradeServerService");
               buf.append(String.valueOf(this.bean.getDebugDomainUpgradeServerService()));
            }

            if (this.bean.isDebugDynamicSingletonServicesSet()) {
               buf.append("DebugDynamicSingletonServices");
               buf.append(String.valueOf(this.bean.getDebugDynamicSingletonServices()));
            }

            if (this.bean.isDebugEjbCachingSet()) {
               buf.append("DebugEjbCaching");
               buf.append(String.valueOf(this.bean.getDebugEjbCaching()));
            }

            if (this.bean.isDebugEjbCmpDeploymentSet()) {
               buf.append("DebugEjbCmpDeployment");
               buf.append(String.valueOf(this.bean.getDebugEjbCmpDeployment()));
            }

            if (this.bean.isDebugEjbCmpRuntimeSet()) {
               buf.append("DebugEjbCmpRuntime");
               buf.append(String.valueOf(this.bean.getDebugEjbCmpRuntime()));
            }

            if (this.bean.isDebugEjbCompilationSet()) {
               buf.append("DebugEjbCompilation");
               buf.append(String.valueOf(this.bean.getDebugEjbCompilation()));
            }

            if (this.bean.isDebugEjbDeploymentSet()) {
               buf.append("DebugEjbDeployment");
               buf.append(String.valueOf(this.bean.getDebugEjbDeployment()));
            }

            if (this.bean.isDebugEjbInvokeSet()) {
               buf.append("DebugEjbInvoke");
               buf.append(String.valueOf(this.bean.getDebugEjbInvoke()));
            }

            if (this.bean.isDebugEjbLockingSet()) {
               buf.append("DebugEjbLocking");
               buf.append(String.valueOf(this.bean.getDebugEjbLocking()));
            }

            if (this.bean.isDebugEjbMdbConnectionSet()) {
               buf.append("DebugEjbMdbConnection");
               buf.append(String.valueOf(this.bean.getDebugEjbMdbConnection()));
            }

            if (this.bean.isDebugEjbMetadataSet()) {
               buf.append("DebugEjbMetadata");
               buf.append(String.valueOf(this.bean.getDebugEjbMetadata()));
            }

            if (this.bean.isDebugEjbPoolingSet()) {
               buf.append("DebugEjbPooling");
               buf.append(String.valueOf(this.bean.getDebugEjbPooling()));
            }

            if (this.bean.isDebugEjbSecuritySet()) {
               buf.append("DebugEjbSecurity");
               buf.append(String.valueOf(this.bean.getDebugEjbSecurity()));
            }

            if (this.bean.isDebugEjbSwappingSet()) {
               buf.append("DebugEjbSwapping");
               buf.append(String.valueOf(this.bean.getDebugEjbSwapping()));
            }

            if (this.bean.isDebugEjbTimerStoreSet()) {
               buf.append("DebugEjbTimerStore");
               buf.append(String.valueOf(this.bean.getDebugEjbTimerStore()));
            }

            if (this.bean.isDebugEjbTimersSet()) {
               buf.append("DebugEjbTimers");
               buf.append(String.valueOf(this.bean.getDebugEjbTimers()));
            }

            if (this.bean.isDebugElasticActionsSet()) {
               buf.append("DebugElasticActions");
               buf.append(String.valueOf(this.bean.getDebugElasticActions()));
            }

            if (this.bean.isDebugElasticServicesSet()) {
               buf.append("DebugElasticServices");
               buf.append(String.valueOf(this.bean.getDebugElasticServices()));
            }

            if (this.bean.isDebugEmbeddedLDAPSet()) {
               buf.append("DebugEmbeddedLDAP");
               buf.append(String.valueOf(this.bean.getDebugEmbeddedLDAP()));
            }

            if (this.bean.isDebugEmbeddedLDAPLogLevelSet()) {
               buf.append("DebugEmbeddedLDAPLogLevel");
               buf.append(String.valueOf(this.bean.getDebugEmbeddedLDAPLogLevel()));
            }

            if (this.bean.isDebugEmbeddedLDAPLogToConsoleSet()) {
               buf.append("DebugEmbeddedLDAPLogToConsole");
               buf.append(String.valueOf(this.bean.getDebugEmbeddedLDAPLogToConsole()));
            }

            if (this.bean.isDebugEmbeddedLDAPWriteOverridePropsSet()) {
               buf.append("DebugEmbeddedLDAPWriteOverrideProps");
               buf.append(String.valueOf(this.bean.getDebugEmbeddedLDAPWriteOverrideProps()));
            }

            if (this.bean.isDebugEventManagerSet()) {
               buf.append("DebugEventManager");
               buf.append(String.valueOf(this.bean.getDebugEventManager()));
            }

            if (this.bean.isDebugExpressionBeanLocalizerSet()) {
               buf.append("DebugExpressionBeanLocalizer");
               buf.append(String.valueOf(this.bean.getDebugExpressionBeanLocalizer()));
            }

            if (this.bean.isDebugExpressionExtensionsManagerSet()) {
               buf.append("DebugExpressionExtensionsManager");
               buf.append(String.valueOf(this.bean.getDebugExpressionExtensionsManager()));
            }

            if (this.bean.isDebugExpressionPollerSet()) {
               buf.append("DebugExpressionPoller");
               buf.append(String.valueOf(this.bean.getDebugExpressionPoller()));
            }

            if (this.bean.isDebugFileDistributionServletSet()) {
               buf.append("DebugFileDistributionServlet");
               buf.append(String.valueOf(this.bean.getDebugFileDistributionServlet()));
            }

            if (this.bean.isDebugFileOwnerFixerSet()) {
               buf.append("DebugFileOwnerFixer");
               buf.append(String.valueOf(this.bean.getDebugFileOwnerFixer()));
            }

            if (this.bean.isDebugHarvesterTypeInfoCacheSet()) {
               buf.append("DebugHarvesterTypeInfoCache");
               buf.append(String.valueOf(this.bean.getDebugHarvesterTypeInfoCache()));
            }

            if (this.bean.isDebugHttpSet()) {
               buf.append("DebugHttp");
               buf.append(String.valueOf(this.bean.getDebugHttp()));
            }

            if (this.bean.isDebugHttpConciseSet()) {
               buf.append("DebugHttpConcise");
               buf.append(String.valueOf(this.bean.getDebugHttpConcise()));
            }

            if (this.bean.isDebugHttpLoggingSet()) {
               buf.append("DebugHttpLogging");
               buf.append(String.valueOf(this.bean.getDebugHttpLogging()));
            }

            if (this.bean.isDebugHttpSessionsSet()) {
               buf.append("DebugHttpSessions");
               buf.append(String.valueOf(this.bean.getDebugHttpSessions()));
            }

            if (this.bean.isDebugIIOPDetailSet()) {
               buf.append("DebugIIOPDetail");
               buf.append(String.valueOf(this.bean.getDebugIIOPDetail()));
            }

            if (this.bean.isDebugIIOPNamingSet()) {
               buf.append("DebugIIOPNaming");
               buf.append(String.valueOf(this.bean.getDebugIIOPNaming()));
            }

            if (this.bean.isDebugIIOPRepalcerSet()) {
               buf.append("DebugIIOPRepalcer");
               buf.append(String.valueOf(this.bean.getDebugIIOPRepalcer()));
            }

            if (this.bean.isDebugIIOPTunnelingSet()) {
               buf.append("DebugIIOPTunneling");
               buf.append(String.valueOf(this.bean.getDebugIIOPTunneling()));
            }

            if (this.bean.isDebugInterceptorsSet()) {
               buf.append("DebugInterceptors");
               buf.append(String.valueOf(this.bean.getDebugInterceptors()));
            }

            if (this.bean.isDebugJ2EEManagementSet()) {
               buf.append("DebugJ2EEManagement");
               buf.append(String.valueOf(this.bean.getDebugJ2EEManagement()));
            }

            if (this.bean.isDebugJAXPDebugLevelSet()) {
               buf.append("DebugJAXPDebugLevel");
               buf.append(String.valueOf(this.bean.getDebugJAXPDebugLevel()));
            }

            if (this.bean.isDebugJAXPDebugNameSet()) {
               buf.append("DebugJAXPDebugName");
               buf.append(String.valueOf(this.bean.getDebugJAXPDebugName()));
            }

            if (this.bean.isDebugJAXPIncludeClassSet()) {
               buf.append("DebugJAXPIncludeClass");
               buf.append(String.valueOf(this.bean.getDebugJAXPIncludeClass()));
            }

            if (this.bean.isDebugJAXPIncludeLocationSet()) {
               buf.append("DebugJAXPIncludeLocation");
               buf.append(String.valueOf(this.bean.getDebugJAXPIncludeLocation()));
            }

            if (this.bean.isDebugJAXPIncludeNameSet()) {
               buf.append("DebugJAXPIncludeName");
               buf.append(String.valueOf(this.bean.getDebugJAXPIncludeName()));
            }

            if (this.bean.isDebugJAXPIncludeTimeSet()) {
               buf.append("DebugJAXPIncludeTime");
               buf.append(String.valueOf(this.bean.getDebugJAXPIncludeTime()));
            }

            if (this.bean.isDebugJAXPOutputStreamSet()) {
               buf.append("DebugJAXPOutputStream");
               buf.append(String.valueOf(this.bean.getDebugJAXPOutputStream()));
            }

            if (this.bean.isDebugJAXPUseShortClassSet()) {
               buf.append("DebugJAXPUseShortClass");
               buf.append(String.valueOf(this.bean.getDebugJAXPUseShortClass()));
            }

            if (this.bean.isDebugJDBCConnSet()) {
               buf.append("DebugJDBCConn");
               buf.append(String.valueOf(this.bean.getDebugJDBCConn()));
            }

            if (this.bean.isDebugJDBCDriverLoggingSet()) {
               buf.append("DebugJDBCDriverLogging");
               buf.append(String.valueOf(this.bean.getDebugJDBCDriverLogging()));
            }

            if (this.bean.isDebugJDBCInternalSet()) {
               buf.append("DebugJDBCInternal");
               buf.append(String.valueOf(this.bean.getDebugJDBCInternal()));
            }

            if (this.bean.isDebugJDBCONSSet()) {
               buf.append("DebugJDBCONS");
               buf.append(String.valueOf(this.bean.getDebugJDBCONS()));
            }

            if (this.bean.isDebugJDBCRACSet()) {
               buf.append("DebugJDBCRAC");
               buf.append(String.valueOf(this.bean.getDebugJDBCRAC()));
            }

            if (this.bean.isDebugJDBCRMISet()) {
               buf.append("DebugJDBCRMI");
               buf.append(String.valueOf(this.bean.getDebugJDBCRMI()));
            }

            if (this.bean.isDebugJDBCReplaySet()) {
               buf.append("DebugJDBCReplay");
               buf.append(String.valueOf(this.bean.getDebugJDBCReplay()));
            }

            if (this.bean.isDebugJDBCSQLSet()) {
               buf.append("DebugJDBCSQL");
               buf.append(String.valueOf(this.bean.getDebugJDBCSQL()));
            }

            if (this.bean.isDebugJDBCUCPSet()) {
               buf.append("DebugJDBCUCP");
               buf.append(String.valueOf(this.bean.getDebugJDBCUCP()));
            }

            if (this.bean.isDebugJMSAMESet()) {
               buf.append("DebugJMSAME");
               buf.append(String.valueOf(this.bean.getDebugJMSAME()));
            }

            if (this.bean.isDebugJMSBackEndSet()) {
               buf.append("DebugJMSBackEnd");
               buf.append(String.valueOf(this.bean.getDebugJMSBackEnd()));
            }

            if (this.bean.isDebugJMSBootSet()) {
               buf.append("DebugJMSBoot");
               buf.append(String.valueOf(this.bean.getDebugJMSBoot()));
            }

            if (this.bean.isDebugJMSCDSSet()) {
               buf.append("DebugJMSCDS");
               buf.append(String.valueOf(this.bean.getDebugJMSCDS()));
            }

            if (this.bean.isDebugJMSCommonSet()) {
               buf.append("DebugJMSCommon");
               buf.append(String.valueOf(this.bean.getDebugJMSCommon()));
            }

            if (this.bean.isDebugJMSConfigSet()) {
               buf.append("DebugJMSConfig");
               buf.append(String.valueOf(this.bean.getDebugJMSConfig()));
            }

            if (this.bean.isDebugJMSCrossDomainSecuritySet()) {
               buf.append("DebugJMSCrossDomainSecurity");
               buf.append(String.valueOf(this.bean.getDebugJMSCrossDomainSecurity()));
            }

            if (this.bean.isDebugJMSDispatcherSet()) {
               buf.append("DebugJMSDispatcher");
               buf.append(String.valueOf(this.bean.getDebugJMSDispatcher()));
            }

            if (this.bean.isDebugJMSDispatcherProxySet()) {
               buf.append("DebugJMSDispatcherProxy");
               buf.append(String.valueOf(this.bean.getDebugJMSDispatcherProxy()));
            }

            if (this.bean.isDebugJMSDispatcherUtilsVerboseSet()) {
               buf.append("DebugJMSDispatcherUtilsVerbose");
               buf.append(String.valueOf(this.bean.getDebugJMSDispatcherUtilsVerbose()));
            }

            if (this.bean.isDebugJMSDispatcherVerboseSet()) {
               buf.append("DebugJMSDispatcherVerbose");
               buf.append(String.valueOf(this.bean.getDebugJMSDispatcherVerbose()));
            }

            if (this.bean.isDebugJMSDistTopicSet()) {
               buf.append("DebugJMSDistTopic");
               buf.append(String.valueOf(this.bean.getDebugJMSDistTopic()));
            }

            if (this.bean.isDebugJMSDotNetProxySet()) {
               buf.append("DebugJMSDotNetProxy");
               buf.append(String.valueOf(this.bean.getDebugJMSDotNetProxy()));
            }

            if (this.bean.isDebugJMSDotNetT3ServerSet()) {
               buf.append("DebugJMSDotNetT3Server");
               buf.append(String.valueOf(this.bean.getDebugJMSDotNetT3Server()));
            }

            if (this.bean.isDebugJMSDotNetTransportSet()) {
               buf.append("DebugJMSDotNetTransport");
               buf.append(String.valueOf(this.bean.getDebugJMSDotNetTransport()));
            }

            if (this.bean.isDebugJMSDurSubSet()) {
               buf.append("DebugJMSDurSub");
               buf.append(String.valueOf(this.bean.getDebugJMSDurSub()));
            }

            if (this.bean.isDebugJMSDurableSubscribersSet()) {
               buf.append("DebugJMSDurableSubscribers");
               buf.append(String.valueOf(this.bean.getDebugJMSDurableSubscribers()));
            }

            if (this.bean.isDebugJMSFrontEndSet()) {
               buf.append("DebugJMSFrontEnd");
               buf.append(String.valueOf(this.bean.getDebugJMSFrontEnd()));
            }

            if (this.bean.isDebugJMSJDBCScavengeOnFlushSet()) {
               buf.append("DebugJMSJDBCScavengeOnFlush");
               buf.append(String.valueOf(this.bean.getDebugJMSJDBCScavengeOnFlush()));
            }

            if (this.bean.isDebugJMSJNDISet()) {
               buf.append("DebugJMSJNDI");
               buf.append(String.valueOf(this.bean.getDebugJMSJNDI()));
            }

            if (this.bean.isDebugJMSLockingSet()) {
               buf.append("DebugJMSLocking");
               buf.append(String.valueOf(this.bean.getDebugJMSLocking()));
            }

            if (this.bean.isDebugJMSMessagePathSet()) {
               buf.append("DebugJMSMessagePath");
               buf.append(String.valueOf(this.bean.getDebugJMSMessagePath()));
            }

            if (this.bean.isDebugJMSModuleSet()) {
               buf.append("DebugJMSModule");
               buf.append(String.valueOf(this.bean.getDebugJMSModule()));
            }

            if (this.bean.isDebugJMSOBSSet()) {
               buf.append("DebugJMSOBS");
               buf.append(String.valueOf(this.bean.getDebugJMSOBS()));
            }

            if (this.bean.isDebugJMSPauseResumeSet()) {
               buf.append("DebugJMSPauseResume");
               buf.append(String.valueOf(this.bean.getDebugJMSPauseResume()));
            }

            if (this.bean.isDebugJMSSAFSet()) {
               buf.append("DebugJMSSAF");
               buf.append(String.valueOf(this.bean.getDebugJMSSAF()));
            }

            if (this.bean.isDebugJMSStoreSet()) {
               buf.append("DebugJMSStore");
               buf.append(String.valueOf(this.bean.getDebugJMSStore()));
            }

            if (this.bean.isDebugJMST3ServerSet()) {
               buf.append("DebugJMST3Server");
               buf.append(String.valueOf(this.bean.getDebugJMST3Server()));
            }

            if (this.bean.isDebugJMSWrappersSet()) {
               buf.append("DebugJMSWrappers");
               buf.append(String.valueOf(this.bean.getDebugJMSWrappers()));
            }

            if (this.bean.isDebugJMSXASet()) {
               buf.append("DebugJMSXA");
               buf.append(String.valueOf(this.bean.getDebugJMSXA()));
            }

            if (this.bean.isDebugJMXSet()) {
               buf.append("DebugJMX");
               buf.append(String.valueOf(this.bean.getDebugJMX()));
            }

            if (this.bean.isDebugJMXCompatibilitySet()) {
               buf.append("DebugJMXCompatibility");
               buf.append(String.valueOf(this.bean.getDebugJMXCompatibility()));
            }

            if (this.bean.isDebugJMXContextSet()) {
               buf.append("DebugJMXContext");
               buf.append(String.valueOf(this.bean.getDebugJMXContext()));
            }

            if (this.bean.isDebugJMXCoreSet()) {
               buf.append("DebugJMXCore");
               buf.append(String.valueOf(this.bean.getDebugJMXCore()));
            }

            if (this.bean.isDebugJMXCoreConciseSet()) {
               buf.append("DebugJMXCoreConcise");
               buf.append(String.valueOf(this.bean.getDebugJMXCoreConcise()));
            }

            if (this.bean.isDebugJMXDomainSet()) {
               buf.append("DebugJMXDomain");
               buf.append(String.valueOf(this.bean.getDebugJMXDomain()));
            }

            if (this.bean.isDebugJMXEditSet()) {
               buf.append("DebugJMXEdit");
               buf.append(String.valueOf(this.bean.getDebugJMXEdit()));
            }

            if (this.bean.isDebugJMXRuntimeSet()) {
               buf.append("DebugJMXRuntime");
               buf.append(String.valueOf(this.bean.getDebugJMXRuntime()));
            }

            if (this.bean.isDebugJNDISet()) {
               buf.append("DebugJNDI");
               buf.append(String.valueOf(this.bean.getDebugJNDI()));
            }

            if (this.bean.isDebugJNDIFactoriesSet()) {
               buf.append("DebugJNDIFactories");
               buf.append(String.valueOf(this.bean.getDebugJNDIFactories()));
            }

            if (this.bean.isDebugJNDIResolutionSet()) {
               buf.append("DebugJNDIResolution");
               buf.append(String.valueOf(this.bean.getDebugJNDIResolution()));
            }

            if (this.bean.isDebugJPASet()) {
               buf.append("DebugJPA");
               buf.append(String.valueOf(this.bean.getDebugJPA()));
            }

            if (this.bean.isDebugJTA2PCSet()) {
               buf.append("DebugJTA2PC");
               buf.append(String.valueOf(this.bean.getDebugJTA2PC()));
            }

            if (this.bean.isDebugJTA2PCDetailSet()) {
               buf.append("DebugJTA2PCDetail");
               buf.append(String.valueOf(this.bean.getDebugJTA2PCDetail()));
            }

            if (this.bean.isDebugJTA2PCStackTraceSet()) {
               buf.append("DebugJTA2PCStackTrace");
               buf.append(String.valueOf(this.bean.getDebugJTA2PCStackTrace()));
            }

            if (this.bean.isDebugJTAAPISet()) {
               buf.append("DebugJTAAPI");
               buf.append(String.valueOf(this.bean.getDebugJTAAPI()));
            }

            if (this.bean.isDebugJTACDISet()) {
               buf.append("DebugJTACDI");
               buf.append(String.valueOf(this.bean.getDebugJTACDI()));
            }

            if (this.bean.isDebugJTAGatewaySet()) {
               buf.append("DebugJTAGateway");
               buf.append(String.valueOf(this.bean.getDebugJTAGateway()));
            }

            if (this.bean.isDebugJTAGatewayStackTraceSet()) {
               buf.append("DebugJTAGatewayStackTrace");
               buf.append(String.valueOf(this.bean.getDebugJTAGatewayStackTrace()));
            }

            if (this.bean.isDebugJTAHealthSet()) {
               buf.append("DebugJTAHealth");
               buf.append(String.valueOf(this.bean.getDebugJTAHealth()));
            }

            if (this.bean.isDebugJTAJDBCSet()) {
               buf.append("DebugJTAJDBC");
               buf.append(String.valueOf(this.bean.getDebugJTAJDBC()));
            }

            if (this.bean.isDebugJTALLRSet()) {
               buf.append("DebugJTALLR");
               buf.append(String.valueOf(this.bean.getDebugJTALLR()));
            }

            if (this.bean.isDebugJTALifecycleSet()) {
               buf.append("DebugJTALifecycle");
               buf.append(String.valueOf(this.bean.getDebugJTALifecycle()));
            }

            if (this.bean.isDebugJTAMigrationSet()) {
               buf.append("DebugJTAMigration");
               buf.append(String.valueOf(this.bean.getDebugJTAMigration()));
            }

            if (this.bean.isDebugJTANamingSet()) {
               buf.append("DebugJTANaming");
               buf.append(String.valueOf(this.bean.getDebugJTANaming()));
            }

            if (this.bean.isDebugJTANamingStackTraceSet()) {
               buf.append("DebugJTANamingStackTrace");
               buf.append(String.valueOf(this.bean.getDebugJTANamingStackTrace()));
            }

            if (this.bean.isDebugJTANonXASet()) {
               buf.append("DebugJTANonXA");
               buf.append(String.valueOf(this.bean.getDebugJTANonXA()));
            }

            if (this.bean.isDebugJTAPropagateSet()) {
               buf.append("DebugJTAPropagate");
               buf.append(String.valueOf(this.bean.getDebugJTAPropagate()));
            }

            if (this.bean.isDebugJTARMISet()) {
               buf.append("DebugJTARMI");
               buf.append(String.valueOf(this.bean.getDebugJTARMI()));
            }

            if (this.bean.isDebugJTARecoverySet()) {
               buf.append("DebugJTARecovery");
               buf.append(String.valueOf(this.bean.getDebugJTARecovery()));
            }

            if (this.bean.isDebugJTARecoveryStackTraceSet()) {
               buf.append("DebugJTARecoveryStackTrace");
               buf.append(String.valueOf(this.bean.getDebugJTARecoveryStackTrace()));
            }

            if (this.bean.isDebugJTAResourceHealthSet()) {
               buf.append("DebugJTAResourceHealth");
               buf.append(String.valueOf(this.bean.getDebugJTAResourceHealth()));
            }

            if (this.bean.isDebugJTAResourceNameSet()) {
               buf.append("DebugJTAResourceName");
               buf.append(String.valueOf(this.bean.getDebugJTAResourceName()));
            }

            if (this.bean.isDebugJTATLOGSet()) {
               buf.append("DebugJTATLOG");
               buf.append(String.valueOf(this.bean.getDebugJTATLOG()));
            }

            if (this.bean.isDebugJTATransactionNameSet()) {
               buf.append("DebugJTATransactionName");
               buf.append(String.valueOf(this.bean.getDebugJTATransactionName()));
            }

            if (this.bean.isDebugJTAXASet()) {
               buf.append("DebugJTAXA");
               buf.append(String.valueOf(this.bean.getDebugJTAXA()));
            }

            if (this.bean.isDebugJTAXAStackTraceSet()) {
               buf.append("DebugJTAXAStackTrace");
               buf.append(String.valueOf(this.bean.getDebugJTAXAStackTrace()));
            }

            if (this.bean.isDebugJpaDataCacheSet()) {
               buf.append("DebugJpaDataCache");
               buf.append(String.valueOf(this.bean.getDebugJpaDataCache()));
            }

            if (this.bean.isDebugJpaEnhanceSet()) {
               buf.append("DebugJpaEnhance");
               buf.append(String.valueOf(this.bean.getDebugJpaEnhance()));
            }

            if (this.bean.isDebugJpaJdbcJdbcSet()) {
               buf.append("DebugJpaJdbcJdbc");
               buf.append(String.valueOf(this.bean.getDebugJpaJdbcJdbc()));
            }

            if (this.bean.isDebugJpaJdbcSchemaSet()) {
               buf.append("DebugJpaJdbcSchema");
               buf.append(String.valueOf(this.bean.getDebugJpaJdbcSchema()));
            }

            if (this.bean.isDebugJpaJdbcSqlSet()) {
               buf.append("DebugJpaJdbcSql");
               buf.append(String.valueOf(this.bean.getDebugJpaJdbcSql()));
            }

            if (this.bean.isDebugJpaManageSet()) {
               buf.append("DebugJpaManage");
               buf.append(String.valueOf(this.bean.getDebugJpaManage()));
            }

            if (this.bean.isDebugJpaMetaDataSet()) {
               buf.append("DebugJpaMetaData");
               buf.append(String.valueOf(this.bean.getDebugJpaMetaData()));
            }

            if (this.bean.isDebugJpaProfileSet()) {
               buf.append("DebugJpaProfile");
               buf.append(String.valueOf(this.bean.getDebugJpaProfile()));
            }

            if (this.bean.isDebugJpaQuerySet()) {
               buf.append("DebugJpaQuery");
               buf.append(String.valueOf(this.bean.getDebugJpaQuery()));
            }

            if (this.bean.isDebugJpaRuntimeSet()) {
               buf.append("DebugJpaRuntime");
               buf.append(String.valueOf(this.bean.getDebugJpaRuntime()));
            }

            if (this.bean.isDebugJpaToolSet()) {
               buf.append("DebugJpaTool");
               buf.append(String.valueOf(this.bean.getDebugJpaTool()));
            }

            if (this.bean.isDebugKodoWeblogicSet()) {
               buf.append("DebugKodoWeblogic");
               buf.append(String.valueOf(this.bean.getDebugKodoWeblogic()));
            }

            if (this.bean.isDebugLeaderElectionSet()) {
               buf.append("DebugLeaderElection");
               buf.append(String.valueOf(this.bean.getDebugLeaderElection()));
            }

            if (this.bean.isDebugLegacySet()) {
               buf.append("DebugLegacy");
               buf.append(String.valueOf(this.bean.getDebugLegacy()));
            }

            if (this.bean.isDebugLibrariesSet()) {
               buf.append("DebugLibraries");
               buf.append(String.valueOf(this.bean.getDebugLibraries()));
            }

            if (this.bean.isDebugLifecycleManagerSet()) {
               buf.append("DebugLifecycleManager");
               buf.append(String.valueOf(this.bean.getDebugLifecycleManager()));
            }

            if (this.bean.isDebugLoggingConfigurationSet()) {
               buf.append("DebugLoggingConfiguration");
               buf.append(String.valueOf(this.bean.getDebugLoggingConfiguration()));
            }

            if (this.bean.isDebugMBeanCICSet()) {
               buf.append("DebugMBeanCIC");
               buf.append(String.valueOf(this.bean.getDebugMBeanCIC()));
            }

            if (this.bean.isDebugMBeanEventHandlerSet()) {
               buf.append("DebugMBeanEventHandler");
               buf.append(String.valueOf(this.bean.getDebugMBeanEventHandler()));
            }

            if (this.bean.isDebugMBeanEventHandlerSummarySet()) {
               buf.append("DebugMBeanEventHandlerSummary");
               buf.append(String.valueOf(this.bean.getDebugMBeanEventHandlerSummary()));
            }

            if (this.bean.isDebugMBeanEventHandlerWorkSet()) {
               buf.append("DebugMBeanEventHandlerWork");
               buf.append(String.valueOf(this.bean.getDebugMBeanEventHandlerWork()));
            }

            if (this.bean.isDebugMBeanHarvesterControlSet()) {
               buf.append("DebugMBeanHarvesterControl");
               buf.append(String.valueOf(this.bean.getDebugMBeanHarvesterControl()));
            }

            if (this.bean.isDebugMBeanHarvesterDataCollectionSet()) {
               buf.append("DebugMBeanHarvesterDataCollection");
               buf.append(String.valueOf(this.bean.getDebugMBeanHarvesterDataCollection()));
            }

            if (this.bean.isDebugMBeanHarvesterResolutionSet()) {
               buf.append("DebugMBeanHarvesterResolution");
               buf.append(String.valueOf(this.bean.getDebugMBeanHarvesterResolution()));
            }

            if (this.bean.isDebugMBeanHarvesterThreadingSet()) {
               buf.append("DebugMBeanHarvesterThreading");
               buf.append(String.valueOf(this.bean.getDebugMBeanHarvesterThreading()));
            }

            if (this.bean.isDebugMBeanLocalizationSet()) {
               buf.append("DebugMBeanLocalization");
               buf.append(String.valueOf(this.bean.getDebugMBeanLocalization()));
            }

            if (this.bean.isDebugMBeanTypeUtilQueueSet()) {
               buf.append("DebugMBeanTypeUtilQueue");
               buf.append(String.valueOf(this.bean.getDebugMBeanTypeUtilQueue()));
            }

            if (this.bean.isDebugMBeanTypeUtilQueuePrioritySet()) {
               buf.append("DebugMBeanTypeUtilQueuePriority");
               buf.append(String.valueOf(this.bean.getDebugMBeanTypeUtilQueuePriority()));
            }

            if (this.bean.isDebugMBeanTypeUtilityListenerSet()) {
               buf.append("DebugMBeanTypeUtilityListener");
               buf.append(String.valueOf(this.bean.getDebugMBeanTypeUtilityListener()));
            }

            if (this.bean.isDebugMBeanTypingUtilitySet()) {
               buf.append("DebugMBeanTypingUtility");
               buf.append(String.valueOf(this.bean.getDebugMBeanTypingUtility()));
            }

            if (this.bean.isDebugMailSessionDeploymentSet()) {
               buf.append("DebugMailSessionDeployment");
               buf.append(String.valueOf(this.bean.getDebugMailSessionDeployment()));
            }

            if (this.bean.isDebugManagedBeanSet()) {
               buf.append("DebugManagedBean");
               buf.append(String.valueOf(this.bean.getDebugManagedBean()));
            }

            if (this.bean.isDebugManagementServicesResourceSet()) {
               buf.append("DebugManagementServicesResource");
               buf.append(String.valueOf(this.bean.getDebugManagementServicesResource()));
            }

            if (this.bean.isDebugMaskCriteriasSet()) {
               buf.append("DebugMaskCriterias");
               buf.append(Arrays.toString(ArrayUtils.copyAndSort(this.bean.getDebugMaskCriterias())));
            }

            if (this.bean.isDebugMessagingBridgeDumpToConsoleSet()) {
               buf.append("DebugMessagingBridgeDumpToConsole");
               buf.append(String.valueOf(this.bean.getDebugMessagingBridgeDumpToConsole()));
            }

            if (this.bean.isDebugMessagingBridgeDumpToLogSet()) {
               buf.append("DebugMessagingBridgeDumpToLog");
               buf.append(String.valueOf(this.bean.getDebugMessagingBridgeDumpToLog()));
            }

            if (this.bean.isDebugMessagingBridgeRuntimeSet()) {
               buf.append("DebugMessagingBridgeRuntime");
               buf.append(String.valueOf(this.bean.getDebugMessagingBridgeRuntime()));
            }

            if (this.bean.isDebugMessagingBridgeRuntimeVerboseSet()) {
               buf.append("DebugMessagingBridgeRuntimeVerbose");
               buf.append(String.valueOf(this.bean.getDebugMessagingBridgeRuntimeVerbose()));
            }

            if (this.bean.isDebugMessagingBridgeStartupSet()) {
               buf.append("DebugMessagingBridgeStartup");
               buf.append(String.valueOf(this.bean.getDebugMessagingBridgeStartup()));
            }

            if (this.bean.isDebugMessagingKernelSet()) {
               buf.append("DebugMessagingKernel");
               buf.append(String.valueOf(this.bean.getDebugMessagingKernel()));
            }

            if (this.bean.isDebugMessagingKernelBootSet()) {
               buf.append("DebugMessagingKernelBoot");
               buf.append(String.valueOf(this.bean.getDebugMessagingKernelBoot()));
            }

            if (this.bean.isDebugMessagingOwnableLockSet()) {
               buf.append("DebugMessagingOwnableLock");
               buf.append(String.valueOf(this.bean.getDebugMessagingOwnableLock()));
            }

            if (this.bean.isDebugMigrationInfoSet()) {
               buf.append("DebugMigrationInfo");
               buf.append(String.valueOf(this.bean.getDebugMigrationInfo()));
            }

            if (this.bean.isDebugNIOSet()) {
               buf.append("DebugNIO");
               buf.append(String.valueOf(this.bean.getDebugNIO()));
            }

            if (this.bean.isDebugNodeManagerRuntimeSet()) {
               buf.append("DebugNodeManagerRuntime");
               buf.append(String.valueOf(this.bean.getDebugNodeManagerRuntime()));
            }

            if (this.bean.isDebugPageFlowMonitoringSet()) {
               buf.append("DebugPageFlowMonitoring");
               buf.append(String.valueOf(this.bean.getDebugPageFlowMonitoring()));
            }

            if (this.bean.isDebugPartitionJMXSet()) {
               buf.append("DebugPartitionJMX");
               buf.append(String.valueOf(this.bean.getDebugPartitionJMX()));
            }

            if (this.bean.isDebugPartitionLifecycleSet()) {
               buf.append("DebugPartitionLifecycle");
               buf.append(String.valueOf(this.bean.getDebugPartitionLifecycle()));
            }

            if (this.bean.isDebugPartitionPortabilitySet()) {
               buf.append("DebugPartitionPortability");
               buf.append(String.valueOf(this.bean.getDebugPartitionPortability()));
            }

            if (this.bean.isDebugPartitionResourceMetricsRuntimeSet()) {
               buf.append("DebugPartitionResourceMetricsRuntime");
               buf.append(String.valueOf(this.bean.getDebugPartitionResourceMetricsRuntime()));
            }

            if (this.bean.isDebugPatchingRuntimeSet()) {
               buf.append("DebugPatchingRuntime");
               buf.append(String.valueOf(this.bean.getDebugPatchingRuntime()));
            }

            if (this.bean.isDebugPathSvcSet()) {
               buf.append("DebugPathSvc");
               buf.append(String.valueOf(this.bean.getDebugPathSvc()));
            }

            if (this.bean.isDebugPathSvcVerboseSet()) {
               buf.append("DebugPathSvcVerbose");
               buf.append(String.valueOf(this.bean.getDebugPathSvcVerbose()));
            }

            if (this.bean.isDebugPersistentStoreManagerSet()) {
               buf.append("DebugPersistentStoreManager");
               buf.append(String.valueOf(this.bean.getDebugPersistentStoreManager()));
            }

            if (this.bean.isDebugPubSubBayeuxSet()) {
               buf.append("DebugPubSubBayeux");
               buf.append(String.valueOf(this.bean.getDebugPubSubBayeux()));
            }

            if (this.bean.isDebugPubSubChannelSet()) {
               buf.append("DebugPubSubChannel");
               buf.append(String.valueOf(this.bean.getDebugPubSubChannel()));
            }

            if (this.bean.isDebugPubSubClientSet()) {
               buf.append("DebugPubSubClient");
               buf.append(String.valueOf(this.bean.getDebugPubSubClient()));
            }

            if (this.bean.isDebugPubSubSecuritySet()) {
               buf.append("DebugPubSubSecurity");
               buf.append(String.valueOf(this.bean.getDebugPubSubSecurity()));
            }

            if (this.bean.isDebugPubSubServerSet()) {
               buf.append("DebugPubSubServer");
               buf.append(String.valueOf(this.bean.getDebugPubSubServer()));
            }

            if (this.bean.isDebugRASet()) {
               buf.append("DebugRA");
               buf.append(String.valueOf(this.bean.getDebugRA()));
            }

            if (this.bean.isDebugRAClassloaderSet()) {
               buf.append("DebugRAClassloader");
               buf.append(String.valueOf(this.bean.getDebugRAClassloader()));
            }

            if (this.bean.isDebugRAConnEventsSet()) {
               buf.append("DebugRAConnEvents");
               buf.append(String.valueOf(this.bean.getDebugRAConnEvents()));
            }

            if (this.bean.isDebugRAConnectionsSet()) {
               buf.append("DebugRAConnections");
               buf.append(String.valueOf(this.bean.getDebugRAConnections()));
            }

            if (this.bean.isDebugRADeploymentSet()) {
               buf.append("DebugRADeployment");
               buf.append(String.valueOf(this.bean.getDebugRADeployment()));
            }

            if (this.bean.isDebugRALifecycleSet()) {
               buf.append("DebugRALifecycle");
               buf.append(String.valueOf(this.bean.getDebugRALifecycle()));
            }

            if (this.bean.isDebugRALocalOutSet()) {
               buf.append("DebugRALocalOut");
               buf.append(String.valueOf(this.bean.getDebugRALocalOut()));
            }

            if (this.bean.isDebugRAParsingSet()) {
               buf.append("DebugRAParsing");
               buf.append(String.valueOf(this.bean.getDebugRAParsing()));
            }

            if (this.bean.isDebugRAPoolVerboseSet()) {
               buf.append("DebugRAPoolVerbose");
               buf.append(String.valueOf(this.bean.getDebugRAPoolVerbose()));
            }

            if (this.bean.isDebugRAPoolingSet()) {
               buf.append("DebugRAPooling");
               buf.append(String.valueOf(this.bean.getDebugRAPooling()));
            }

            if (this.bean.isDebugRASecurityCtxSet()) {
               buf.append("DebugRASecurityCtx");
               buf.append(String.valueOf(this.bean.getDebugRASecurityCtx()));
            }

            if (this.bean.isDebugRAWorkSet()) {
               buf.append("DebugRAWork");
               buf.append(String.valueOf(this.bean.getDebugRAWork()));
            }

            if (this.bean.isDebugRAWorkEventsSet()) {
               buf.append("DebugRAWorkEvents");
               buf.append(String.valueOf(this.bean.getDebugRAWorkEvents()));
            }

            if (this.bean.isDebugRAXAinSet()) {
               buf.append("DebugRAXAin");
               buf.append(String.valueOf(this.bean.getDebugRAXAin()));
            }

            if (this.bean.isDebugRAXAoutSet()) {
               buf.append("DebugRAXAout");
               buf.append(String.valueOf(this.bean.getDebugRAXAout()));
            }

            if (this.bean.isDebugRAXAworkSet()) {
               buf.append("DebugRAXAwork");
               buf.append(String.valueOf(this.bean.getDebugRAXAwork()));
            }

            if (this.bean.isDebugRCMSet()) {
               buf.append("DebugRCM");
               buf.append(String.valueOf(this.bean.getDebugRCM()));
            }

            if (this.bean.isDebugRESTNotificationsSet()) {
               buf.append("DebugRESTNotifications");
               buf.append(String.valueOf(this.bean.getDebugRESTNotifications()));
            }

            if (this.bean.isDebugRMIDetailedSet()) {
               buf.append("DebugRMIDetailed");
               buf.append(String.valueOf(this.bean.getDebugRMIDetailed()));
            }

            if (this.bean.isDebugRMIRequestPerfSet()) {
               buf.append("DebugRMIRequestPerf");
               buf.append(String.valueOf(this.bean.getDebugRMIRequestPerf()));
            }

            if (this.bean.isDebugReadyAppSet()) {
               buf.append("DebugReadyApp");
               buf.append(String.valueOf(this.bean.getDebugReadyApp()));
            }

            if (this.bean.isDebugRedefAttachSet()) {
               buf.append("DebugRedefAttach");
               buf.append(String.valueOf(this.bean.getDebugRedefAttach()));
            }

            if (this.bean.isDebugReplicationSet()) {
               buf.append("DebugReplication");
               buf.append(String.valueOf(this.bean.getDebugReplication()));
            }

            if (this.bean.isDebugReplicationDetailsSet()) {
               buf.append("DebugReplicationDetails");
               buf.append(String.valueOf(this.bean.getDebugReplicationDetails()));
            }

            if (this.bean.isDebugReplicationSizeSet()) {
               buf.append("DebugReplicationSize");
               buf.append(String.valueOf(this.bean.getDebugReplicationSize()));
            }

            if (this.bean.isDebugRequestManagerSet()) {
               buf.append("DebugRequestManager");
               buf.append(String.valueOf(this.bean.getDebugRequestManager()));
            }

            if (this.bean.isDebugResourceGroupMigrationSet()) {
               buf.append("DebugResourceGroupMigration");
               buf.append(String.valueOf(this.bean.getDebugResourceGroupMigration()));
            }

            if (this.bean.isDebugRestJersey1IntegrationSet()) {
               buf.append("DebugRestJersey1Integration");
               buf.append(String.valueOf(this.bean.getDebugRestJersey1Integration()));
            }

            if (this.bean.isDebugRestJersey2IntegrationSet()) {
               buf.append("DebugRestJersey2Integration");
               buf.append(String.valueOf(this.bean.getDebugRestJersey2Integration()));
            }

            if (this.bean.isDebugRestartInPlaceSet()) {
               buf.append("DebugRestartInPlace");
               buf.append(String.valueOf(this.bean.getDebugRestartInPlace()));
            }

            if (this.bean.isDebugSAFAdminSet()) {
               buf.append("DebugSAFAdmin");
               buf.append(String.valueOf(this.bean.getDebugSAFAdmin()));
            }

            if (this.bean.isDebugSAFLifeCycleSet()) {
               buf.append("DebugSAFLifeCycle");
               buf.append(String.valueOf(this.bean.getDebugSAFLifeCycle()));
            }

            if (this.bean.isDebugSAFManagerSet()) {
               buf.append("DebugSAFManager");
               buf.append(String.valueOf(this.bean.getDebugSAFManager()));
            }

            if (this.bean.isDebugSAFMessagePathSet()) {
               buf.append("DebugSAFMessagePath");
               buf.append(String.valueOf(this.bean.getDebugSAFMessagePath()));
            }

            if (this.bean.isDebugSAFReceivingAgentSet()) {
               buf.append("DebugSAFReceivingAgent");
               buf.append(String.valueOf(this.bean.getDebugSAFReceivingAgent()));
            }

            if (this.bean.isDebugSAFSendingAgentSet()) {
               buf.append("DebugSAFSendingAgent");
               buf.append(String.valueOf(this.bean.getDebugSAFSendingAgent()));
            }

            if (this.bean.isDebugSAFStoreSet()) {
               buf.append("DebugSAFStore");
               buf.append(String.valueOf(this.bean.getDebugSAFStore()));
            }

            if (this.bean.isDebugSAFTransportSet()) {
               buf.append("DebugSAFTransport");
               buf.append(String.valueOf(this.bean.getDebugSAFTransport()));
            }

            if (this.bean.isDebugSAFVerboseSet()) {
               buf.append("DebugSAFVerbose");
               buf.append(String.valueOf(this.bean.getDebugSAFVerbose()));
            }

            if (this.bean.isDebugSNMPAgentSet()) {
               buf.append("DebugSNMPAgent");
               buf.append(String.valueOf(this.bean.getDebugSNMPAgent()));
            }

            if (this.bean.isDebugSNMPExtensionProviderSet()) {
               buf.append("DebugSNMPExtensionProvider");
               buf.append(String.valueOf(this.bean.getDebugSNMPExtensionProvider()));
            }

            if (this.bean.isDebugSNMPMibSet()) {
               buf.append("DebugSNMPMib");
               buf.append(String.valueOf(this.bean.getDebugSNMPMib()));
            }

            if (this.bean.isDebugSNMPProtocolTCPSet()) {
               buf.append("DebugSNMPProtocolTCP");
               buf.append(String.valueOf(this.bean.getDebugSNMPProtocolTCP()));
            }

            if (this.bean.isDebugSNMPToolkitSet()) {
               buf.append("DebugSNMPToolkit");
               buf.append(String.valueOf(this.bean.getDebugSNMPToolkit()));
            }

            if (this.bean.isDebugScaContainerSet()) {
               buf.append("DebugScaContainer");
               buf.append(String.valueOf(this.bean.getDebugScaContainer()));
            }

            if (this.bean.isDebugScrubberStartServiceSet()) {
               buf.append("DebugScrubberStartService");
               buf.append(String.valueOf(this.bean.getDebugScrubberStartService()));
            }

            if (this.bean.isDebugSecuritySet()) {
               buf.append("DebugSecurity");
               buf.append(String.valueOf(this.bean.getDebugSecurity()));
            }

            if (this.bean.isDebugSecurityAdjudicatorSet()) {
               buf.append("DebugSecurityAdjudicator");
               buf.append(String.valueOf(this.bean.getDebugSecurityAdjudicator()));
            }

            if (this.bean.isDebugSecurityAtnSet()) {
               buf.append("DebugSecurityAtn");
               buf.append(String.valueOf(this.bean.getDebugSecurityAtn()));
            }

            if (this.bean.isDebugSecurityAtzSet()) {
               buf.append("DebugSecurityAtz");
               buf.append(String.valueOf(this.bean.getDebugSecurityAtz()));
            }

            if (this.bean.isDebugSecurityAuditorSet()) {
               buf.append("DebugSecurityAuditor");
               buf.append(String.valueOf(this.bean.getDebugSecurityAuditor()));
            }

            if (this.bean.isDebugSecurityCertPathSet()) {
               buf.append("DebugSecurityCertPath");
               buf.append(String.valueOf(this.bean.getDebugSecurityCertPath()));
            }

            if (this.bean.isDebugSecurityCredMapSet()) {
               buf.append("DebugSecurityCredMap");
               buf.append(String.valueOf(this.bean.getDebugSecurityCredMap()));
            }

            if (this.bean.isDebugSecurityEEngineSet()) {
               buf.append("DebugSecurityEEngine");
               buf.append(String.valueOf(this.bean.getDebugSecurityEEngine()));
            }

            if (this.bean.isDebugSecurityEncryptionServiceSet()) {
               buf.append("DebugSecurityEncryptionService");
               buf.append(String.valueOf(this.bean.getDebugSecurityEncryptionService()));
            }

            if (this.bean.isDebugSecurityJACCSet()) {
               buf.append("DebugSecurityJACC");
               buf.append(String.valueOf(this.bean.getDebugSecurityJACC()));
            }

            if (this.bean.isDebugSecurityJACCNonPolicySet()) {
               buf.append("DebugSecurityJACCNonPolicy");
               buf.append(String.valueOf(this.bean.getDebugSecurityJACCNonPolicy()));
            }

            if (this.bean.isDebugSecurityJACCPolicySet()) {
               buf.append("DebugSecurityJACCPolicy");
               buf.append(String.valueOf(this.bean.getDebugSecurityJACCPolicy()));
            }

            if (this.bean.isDebugSecurityKeyStoreSet()) {
               buf.append("DebugSecurityKeyStore");
               buf.append(String.valueOf(this.bean.getDebugSecurityKeyStore()));
            }

            if (this.bean.isDebugSecurityPasswordPolicySet()) {
               buf.append("DebugSecurityPasswordPolicy");
               buf.append(String.valueOf(this.bean.getDebugSecurityPasswordPolicy()));
            }

            if (this.bean.isDebugSecurityPredicateSet()) {
               buf.append("DebugSecurityPredicate");
               buf.append(String.valueOf(this.bean.getDebugSecurityPredicate()));
            }

            if (this.bean.isDebugSecurityProfilerSet()) {
               buf.append("DebugSecurityProfiler");
               buf.append(String.valueOf(this.bean.getDebugSecurityProfiler()));
            }

            if (this.bean.isDebugSecurityRealmSet()) {
               buf.append("DebugSecurityRealm");
               buf.append(String.valueOf(this.bean.getDebugSecurityRealm()));
            }

            if (this.bean.isDebugSecurityRoleMapSet()) {
               buf.append("DebugSecurityRoleMap");
               buf.append(String.valueOf(this.bean.getDebugSecurityRoleMap()));
            }

            if (this.bean.isDebugSecuritySAML2AtnSet()) {
               buf.append("DebugSecuritySAML2Atn");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAML2Atn()));
            }

            if (this.bean.isDebugSecuritySAML2CredMapSet()) {
               buf.append("DebugSecuritySAML2CredMap");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAML2CredMap()));
            }

            if (this.bean.isDebugSecuritySAML2LibSet()) {
               buf.append("DebugSecuritySAML2Lib");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAML2Lib()));
            }

            if (this.bean.isDebugSecuritySAML2ServiceSet()) {
               buf.append("DebugSecuritySAML2Service");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAML2Service()));
            }

            if (this.bean.isDebugSecuritySAMLAtnSet()) {
               buf.append("DebugSecuritySAMLAtn");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAMLAtn()));
            }

            if (this.bean.isDebugSecuritySAMLCredMapSet()) {
               buf.append("DebugSecuritySAMLCredMap");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAMLCredMap()));
            }

            if (this.bean.isDebugSecuritySAMLLibSet()) {
               buf.append("DebugSecuritySAMLLib");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAMLLib()));
            }

            if (this.bean.isDebugSecuritySAMLServiceSet()) {
               buf.append("DebugSecuritySAMLService");
               buf.append(String.valueOf(this.bean.getDebugSecuritySAMLService()));
            }

            if (this.bean.isDebugSecuritySSLSet()) {
               buf.append("DebugSecuritySSL");
               buf.append(String.valueOf(this.bean.getDebugSecuritySSL()));
            }

            if (this.bean.isDebugSecuritySSLEatenSet()) {
               buf.append("DebugSecuritySSLEaten");
               buf.append(String.valueOf(this.bean.getDebugSecuritySSLEaten()));
            }

            if (this.bean.isDebugSecurityServiceSet()) {
               buf.append("DebugSecurityService");
               buf.append(String.valueOf(this.bean.getDebugSecurityService()));
            }

            if (this.bean.isDebugSecurityUserLockoutSet()) {
               buf.append("DebugSecurityUserLockout");
               buf.append(String.valueOf(this.bean.getDebugSecurityUserLockout()));
            }

            if (this.bean.isDebugSelfTuningSet()) {
               buf.append("DebugSelfTuning");
               buf.append(String.valueOf(this.bean.getDebugSelfTuning()));
            }

            if (this.bean.isDebugServerLifeCycleSet()) {
               buf.append("DebugServerLifeCycle");
               buf.append(String.valueOf(this.bean.getDebugServerLifeCycle()));
            }

            if (this.bean.isDebugServerMigrationSet()) {
               buf.append("DebugServerMigration");
               buf.append(String.valueOf(this.bean.getDebugServerMigration()));
            }

            if (this.bean.isDebugServerRuntimeSet()) {
               buf.append("DebugServerRuntime");
               buf.append(String.valueOf(this.bean.getDebugServerRuntime()));
            }

            if (this.bean.isDebugServerShutdownStatisticsSet()) {
               buf.append("DebugServerShutdownStatistics");
               buf.append(String.valueOf(this.bean.getDebugServerShutdownStatistics()));
            }

            if (this.bean.isDebugServerShutdownTimerSet()) {
               buf.append("DebugServerShutdownTimer");
               buf.append(String.valueOf(this.bean.getDebugServerShutdownTimer()));
            }

            if (this.bean.isDebugServerStartStatisticsSet()) {
               buf.append("DebugServerStartStatistics");
               buf.append(String.valueOf(this.bean.getDebugServerStartStatistics()));
            }

            if (this.bean.isDebugServerStartupTimerSet()) {
               buf.append("DebugServerStartupTimer");
               buf.append(String.valueOf(this.bean.getDebugServerStartupTimer()));
            }

            if (this.bean.isDebugSingletonServicesSet()) {
               buf.append("DebugSingletonServices");
               buf.append(String.valueOf(this.bean.getDebugSingletonServices()));
            }

            if (this.bean.isDebugSituationalConfigSet()) {
               buf.append("DebugSituationalConfig");
               buf.append(String.valueOf(this.bean.getDebugSituationalConfig()));
            }

            if (this.bean.isDebugSpringStatisticsSet()) {
               buf.append("DebugSpringStatistics");
               buf.append(String.valueOf(this.bean.getDebugSpringStatistics()));
            }

            if (this.bean.isDebugStoreSet()) {
               buf.append("DebugStore");
               buf.append(String.valueOf(this.bean.getDebugStore()));
            }

            if (this.bean.isDebugStoreAdminSet()) {
               buf.append("DebugStoreAdmin");
               buf.append(String.valueOf(this.bean.getDebugStoreAdmin()));
            }

            if (this.bean.isDebugStoreCacheSet()) {
               buf.append("DebugStoreCache");
               buf.append(String.valueOf(this.bean.getDebugStoreCache()));
            }

            if (this.bean.isDebugStoreIOLogicalSet()) {
               buf.append("DebugStoreIOLogical");
               buf.append(String.valueOf(this.bean.getDebugStoreIOLogical()));
            }

            if (this.bean.isDebugStoreIOLogicalBootSet()) {
               buf.append("DebugStoreIOLogicalBoot");
               buf.append(String.valueOf(this.bean.getDebugStoreIOLogicalBoot()));
            }

            if (this.bean.isDebugStoreIOPhysicalSet()) {
               buf.append("DebugStoreIOPhysical");
               buf.append(String.valueOf(this.bean.getDebugStoreIOPhysical()));
            }

            if (this.bean.isDebugStoreIOPhysicalVerboseSet()) {
               buf.append("DebugStoreIOPhysicalVerbose");
               buf.append(String.valueOf(this.bean.getDebugStoreIOPhysicalVerbose()));
            }

            if (this.bean.isDebugStoreRCMSet()) {
               buf.append("DebugStoreRCM");
               buf.append(String.valueOf(this.bean.getDebugStoreRCM()));
            }

            if (this.bean.isDebugStoreRCMVerboseSet()) {
               buf.append("DebugStoreRCMVerbose");
               buf.append(String.valueOf(this.bean.getDebugStoreRCMVerbose()));
            }

            if (this.bean.isDebugStoreXASet()) {
               buf.append("DebugStoreXA");
               buf.append(String.valueOf(this.bean.getDebugStoreXA()));
            }

            if (this.bean.isDebugStoreXAVerboseSet()) {
               buf.append("DebugStoreXAVerbose");
               buf.append(String.valueOf(this.bean.getDebugStoreXAVerbose()));
            }

            if (this.bean.isDebugStubGenerationSet()) {
               buf.append("DebugStubGeneration");
               buf.append(String.valueOf(this.bean.getDebugStubGeneration()));
            }

            if (this.bean.isDebugTunnelingConnectionSet()) {
               buf.append("DebugTunnelingConnection");
               buf.append(String.valueOf(this.bean.getDebugTunnelingConnection()));
            }

            if (this.bean.isDebugTunnelingConnectionTimeoutSet()) {
               buf.append("DebugTunnelingConnectionTimeout");
               buf.append(String.valueOf(this.bean.getDebugTunnelingConnectionTimeout()));
            }

            if (this.bean.isDebugURLResolutionSet()) {
               buf.append("DebugURLResolution");
               buf.append(String.valueOf(this.bean.getDebugURLResolution()));
            }

            if (this.bean.isDebugUnicastMessagingSet()) {
               buf.append("DebugUnicastMessaging");
               buf.append(String.valueOf(this.bean.getDebugUnicastMessaging()));
            }

            if (this.bean.isDebugValidationSet()) {
               buf.append("DebugValidation");
               buf.append(String.valueOf(this.bean.getDebugValidation()));
            }

            if (this.bean.isDebugValidationClassLoadingSet()) {
               buf.append("DebugValidationClassLoading");
               buf.append(String.valueOf(this.bean.getDebugValidationClassLoading()));
            }

            if (this.bean.isDebugVerboseRCMSet()) {
               buf.append("DebugVerboseRCM");
               buf.append(String.valueOf(this.bean.getDebugVerboseRCM()));
            }

            if (this.bean.isDebugWANReplicationDetailsSet()) {
               buf.append("DebugWANReplicationDetails");
               buf.append(String.valueOf(this.bean.getDebugWANReplicationDetails()));
            }

            if (this.bean.isDebugWTCConfigSet()) {
               buf.append("DebugWTCConfig");
               buf.append(String.valueOf(this.bean.getDebugWTCConfig()));
            }

            if (this.bean.isDebugWTCCorbaExSet()) {
               buf.append("DebugWTCCorbaEx");
               buf.append(String.valueOf(this.bean.getDebugWTCCorbaEx()));
            }

            if (this.bean.isDebugWTCGwtExSet()) {
               buf.append("DebugWTCGwtEx");
               buf.append(String.valueOf(this.bean.getDebugWTCGwtEx()));
            }

            if (this.bean.isDebugWTCJatmiExSet()) {
               buf.append("DebugWTCJatmiEx");
               buf.append(String.valueOf(this.bean.getDebugWTCJatmiEx()));
            }

            if (this.bean.isDebugWTCTDomPduSet()) {
               buf.append("DebugWTCTDomPdu");
               buf.append(String.valueOf(this.bean.getDebugWTCTDomPdu()));
            }

            if (this.bean.isDebugWTCTdomPduSet()) {
               buf.append("DebugWTCTdomPdu");
               buf.append(String.valueOf(this.bean.getDebugWTCTdomPdu()));
            }

            if (this.bean.isDebugWTCUDataSet()) {
               buf.append("DebugWTCUData");
               buf.append(String.valueOf(this.bean.getDebugWTCUData()));
            }

            if (this.bean.isDebugWTCtBridgeExSet()) {
               buf.append("DebugWTCtBridgeEx");
               buf.append(String.valueOf(this.bean.getDebugWTCtBridgeEx()));
            }

            if (this.bean.isDebugWatchScalingActionsSet()) {
               buf.append("DebugWatchScalingActions");
               buf.append(String.valueOf(this.bean.getDebugWatchScalingActions()));
            }

            if (this.bean.isDebugWebAppDISet()) {
               buf.append("DebugWebAppDI");
               buf.append(String.valueOf(this.bean.getDebugWebAppDI()));
            }

            if (this.bean.isDebugWebAppIdentityAssertionSet()) {
               buf.append("DebugWebAppIdentityAssertion");
               buf.append(String.valueOf(this.bean.getDebugWebAppIdentityAssertion()));
            }

            if (this.bean.isDebugWebAppModuleSet()) {
               buf.append("DebugWebAppModule");
               buf.append(String.valueOf(this.bean.getDebugWebAppModule()));
            }

            if (this.bean.isDebugWebAppSecuritySet()) {
               buf.append("DebugWebAppSecurity");
               buf.append(String.valueOf(this.bean.getDebugWebAppSecurity()));
            }

            if (this.bean.isDebugWebSocketSet()) {
               buf.append("DebugWebSocket");
               buf.append(String.valueOf(this.bean.getDebugWebSocket()));
            }

            if (this.bean.isDebugXMLEntityCacheDebugLevelSet()) {
               buf.append("DebugXMLEntityCacheDebugLevel");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheDebugLevel()));
            }

            if (this.bean.isDebugXMLEntityCacheDebugNameSet()) {
               buf.append("DebugXMLEntityCacheDebugName");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheDebugName()));
            }

            if (this.bean.isDebugXMLEntityCacheIncludeClassSet()) {
               buf.append("DebugXMLEntityCacheIncludeClass");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheIncludeClass()));
            }

            if (this.bean.isDebugXMLEntityCacheIncludeLocationSet()) {
               buf.append("DebugXMLEntityCacheIncludeLocation");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheIncludeLocation()));
            }

            if (this.bean.isDebugXMLEntityCacheIncludeNameSet()) {
               buf.append("DebugXMLEntityCacheIncludeName");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheIncludeName()));
            }

            if (this.bean.isDebugXMLEntityCacheIncludeTimeSet()) {
               buf.append("DebugXMLEntityCacheIncludeTime");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheIncludeTime()));
            }

            if (this.bean.isDebugXMLEntityCacheOutputStreamSet()) {
               buf.append("DebugXMLEntityCacheOutputStream");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheOutputStream()));
            }

            if (this.bean.isDebugXMLEntityCacheUseShortClassSet()) {
               buf.append("DebugXMLEntityCacheUseShortClass");
               buf.append(String.valueOf(this.bean.getDebugXMLEntityCacheUseShortClass()));
            }

            if (this.bean.isDebugXMLRegistryDebugLevelSet()) {
               buf.append("DebugXMLRegistryDebugLevel");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryDebugLevel()));
            }

            if (this.bean.isDebugXMLRegistryDebugNameSet()) {
               buf.append("DebugXMLRegistryDebugName");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryDebugName()));
            }

            if (this.bean.isDebugXMLRegistryIncludeClassSet()) {
               buf.append("DebugXMLRegistryIncludeClass");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryIncludeClass()));
            }

            if (this.bean.isDebugXMLRegistryIncludeLocationSet()) {
               buf.append("DebugXMLRegistryIncludeLocation");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryIncludeLocation()));
            }

            if (this.bean.isDebugXMLRegistryIncludeNameSet()) {
               buf.append("DebugXMLRegistryIncludeName");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryIncludeName()));
            }

            if (this.bean.isDebugXMLRegistryIncludeTimeSet()) {
               buf.append("DebugXMLRegistryIncludeTime");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryIncludeTime()));
            }

            if (this.bean.isDebugXMLRegistryOutputStreamSet()) {
               buf.append("DebugXMLRegistryOutputStream");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryOutputStream()));
            }

            if (this.bean.isDebugXMLRegistryUseShortClassSet()) {
               buf.append("DebugXMLRegistryUseShortClass");
               buf.append(String.valueOf(this.bean.getDebugXMLRegistryUseShortClass()));
            }

            if (this.bean.isDefaultStoreSet()) {
               buf.append("DefaultStore");
               buf.append(String.valueOf(this.bean.getDefaultStore()));
            }

            if (this.bean.isDiagnosticContextDebugModeSet()) {
               buf.append("DiagnosticContextDebugMode");
               buf.append(String.valueOf(this.bean.getDiagnosticContextDebugMode()));
            }

            if (this.bean.isForceShutdownTimeoutNumOfThreadDumpSet()) {
               buf.append("ForceShutdownTimeoutNumOfThreadDump");
               buf.append(String.valueOf(this.bean.getForceShutdownTimeoutNumOfThreadDump()));
            }

            if (this.bean.isForceShutdownTimeoutThreadDumpIntervalSet()) {
               buf.append("ForceShutdownTimeoutThreadDumpInterval");
               buf.append(String.valueOf(this.bean.getForceShutdownTimeoutThreadDumpInterval()));
            }

            if (this.bean.isGlassFishWebAppParserSet()) {
               buf.append("GlassFishWebAppParser");
               buf.append(String.valueOf(this.bean.getGlassFishWebAppParser()));
            }

            if (this.bean.isGracefulShutdownTimeoutNumOfThreadDumpSet()) {
               buf.append("GracefulShutdownTimeoutNumOfThreadDump");
               buf.append(String.valueOf(this.bean.getGracefulShutdownTimeoutNumOfThreadDump()));
            }

            if (this.bean.isGracefulShutdownTimeoutThreadDumpIntervalSet()) {
               buf.append("GracefulShutdownTimeoutThreadDumpInterval");
               buf.append(String.valueOf(this.bean.getGracefulShutdownTimeoutThreadDumpInterval()));
            }

            if (this.bean.isListenThreadDebugSet()) {
               buf.append("ListenThreadDebug");
               buf.append(String.valueOf(this.bean.getListenThreadDebug()));
            }

            if (this.bean.isMagicThreadDumpBackToSocketSet()) {
               buf.append("MagicThreadDumpBackToSocket");
               buf.append(String.valueOf(this.bean.getMagicThreadDumpBackToSocket()));
            }

            if (this.bean.isMagicThreadDumpFileSet()) {
               buf.append("MagicThreadDumpFile");
               buf.append(String.valueOf(this.bean.getMagicThreadDumpFile()));
            }

            if (this.bean.isMagicThreadDumpHostSet()) {
               buf.append("MagicThreadDumpHost");
               buf.append(String.valueOf(this.bean.getMagicThreadDumpHost()));
            }

            if (this.bean.isMasterDeployerSet()) {
               buf.append("MasterDeployer");
               buf.append(String.valueOf(this.bean.getMasterDeployer()));
            }

            if (this.bean.isOSGiForAppsSet()) {
               buf.append("OSGiForApps");
               buf.append(String.valueOf(this.bean.getOSGiForApps()));
            }

            if (this.bean.isPartitionEvenInterceptorSet()) {
               buf.append("PartitionEvenInterceptor");
               buf.append(String.valueOf(this.bean.getPartitionEvenInterceptor()));
            }

            if (this.bean.isPortablePartitionHelperSet()) {
               buf.append("PortablePartitionHelper");
               buf.append(String.valueOf(this.bean.getPortablePartitionHelper()));
            }

            if (this.bean.isRedefiningClassLoaderSet()) {
               buf.append("RedefiningClassLoader");
               buf.append(String.valueOf(this.bean.getRedefiningClassLoader()));
            }

            if (this.bean.isScriptExecutorCommandSet()) {
               buf.append("ScriptExecutorCommand");
               buf.append(String.valueOf(this.bean.getScriptExecutorCommand()));
            }

            if (this.bean.isSecurityEncryptionServiceSet()) {
               buf.append("SecurityEncryptionService");
               buf.append(String.valueOf(this.bean.getSecurityEncryptionService()));
            }

            if (this.bean.isServerSet()) {
               buf.append("Server");
               buf.append(String.valueOf(this.bean.getServer()));
            }

            if (this.bean.isSlaveDeployerSet()) {
               buf.append("SlaveDeployer");
               buf.append(String.valueOf(this.bean.getSlaveDeployer()));
            }

            if (this.bean.isStartupTimeoutNumOfThreadDumpSet()) {
               buf.append("StartupTimeoutNumOfThreadDump");
               buf.append(String.valueOf(this.bean.getStartupTimeoutNumOfThreadDump()));
            }

            if (this.bean.isStartupTimeoutThreadDumpIntervalSet()) {
               buf.append("StartupTimeoutThreadDumpInterval");
               buf.append(String.valueOf(this.bean.getStartupTimeoutThreadDumpInterval()));
            }

            if (this.bean.isT3HttpUpgradeHandlerSet()) {
               buf.append("T3HttpUpgradeHandler");
               buf.append(String.valueOf(this.bean.getT3HttpUpgradeHandler()));
            }

            if (this.bean.isWarExtractionSet()) {
               buf.append("WarExtraction");
               buf.append(String.valueOf(this.bean.getWarExtraction()));
            }

            if (this.bean.isWebModuleSet()) {
               buf.append("WebModule");
               buf.append(String.valueOf(this.bean.getWebModule()));
            }

            if (this.bean.isMagicThreadDumpEnabledSet()) {
               buf.append("MagicThreadDumpEnabled");
               buf.append(String.valueOf(this.bean.isMagicThreadDumpEnabled()));
            }

            if (this.bean.isPartitionDebugLoggingEnabledSet()) {
               buf.append("PartitionDebugLoggingEnabled");
               buf.append(String.valueOf(this.bean.isPartitionDebugLoggingEnabled()));
            }

            crc.update(buf.toString().getBytes());
            return crc.getValue();
         } catch (Exception var7) {
            throw (Error)(new AssertionError("Impossible Exception")).initCause(var7);
         }
      }

      protected void computeDiff(AbstractDescriptorBean other) {
         try {
            super.computeDiff(other);
            ServerDebugMBeanImpl otherTyped = (ServerDebugMBeanImpl)other;
            this.computeDiff("ApplicationContainer", this.bean.getApplicationContainer(), otherTyped.getApplicationContainer(), false);
            this.computeDiff("BugReportServiceWsdlUrl", this.bean.getBugReportServiceWsdlUrl(), otherTyped.getBugReportServiceWsdlUrl(), false);
            this.computeDiff("ClassChangeNotifier", this.bean.getClassChangeNotifier(), otherTyped.getClassChangeNotifier(), true);
            this.computeDiff("ClassFinder", this.bean.getClassFinder(), otherTyped.getClassFinder(), false);
            this.computeDiff("ClassLoader", this.bean.getClassLoader(), otherTyped.getClassLoader(), true);
            this.computeDiff("ClassLoaderVerbose", this.bean.getClassLoaderVerbose(), otherTyped.getClassLoaderVerbose(), true);
            this.computeDiff("ClassloaderWebApp", this.bean.getClassloaderWebApp(), otherTyped.getClassloaderWebApp(), true);
            this.computeDiff("ClasspathServlet", this.bean.getClasspathServlet(), otherTyped.getClasspathServlet(), false);
            this.computeDiff("DebugAbbrevs", this.bean.getDebugAbbrevs(), otherTyped.getDebugAbbrevs(), true);
            this.computeDiff("DebugAppAnnotations", this.bean.getDebugAppAnnotations(), otherTyped.getDebugAppAnnotations(), true);
            this.computeDiff("DebugAppClient", this.bean.getDebugAppClient(), otherTyped.getDebugAppClient(), true);
            this.computeDiff("DebugAppContainer", this.bean.getDebugAppContainer(), otherTyped.getDebugAppContainer(), true);
            this.computeDiff("DebugAppContainerTools", this.bean.getDebugAppContainerTools(), otherTyped.getDebugAppContainerTools(), true);
            this.computeDiff("DebugAppTiming", this.bean.getDebugAppTiming(), otherTyped.getDebugAppTiming(), true);
            this.computeDiff("DebugAsyncQueue", this.bean.getDebugAsyncQueue(), otherTyped.getDebugAsyncQueue(), true);
            this.computeDiff("DebugAttach", this.bean.getDebugAttach(), otherTyped.getDebugAttach(), true);
            this.computeDiff("DebugBackgroundDeployment", this.bean.getDebugBackgroundDeployment(), otherTyped.getDebugBackgroundDeployment(), true);
            this.computeDiff("DebugBatchConnector", this.bean.getDebugBatchConnector(), otherTyped.getDebugBatchConnector(), true);
            this.computeDiff("DebugBeanTreeHarvesterControl", this.bean.getDebugBeanTreeHarvesterControl(), otherTyped.getDebugBeanTreeHarvesterControl(), true);
            this.computeDiff("DebugBeanTreeHarvesterDataCollection", this.bean.getDebugBeanTreeHarvesterDataCollection(), otherTyped.getDebugBeanTreeHarvesterDataCollection(), true);
            this.computeDiff("DebugBeanTreeHarvesterResolution", this.bean.getDebugBeanTreeHarvesterResolution(), otherTyped.getDebugBeanTreeHarvesterResolution(), true);
            this.computeDiff("DebugBeanTreeHarvesterThreading", this.bean.getDebugBeanTreeHarvesterThreading(), otherTyped.getDebugBeanTreeHarvesterThreading(), true);
            this.computeDiff("DebugBootstrapServlet", this.bean.getDebugBootstrapServlet(), otherTyped.getDebugBootstrapServlet(), true);
            this.computeDiff("DebugBuzzProtocol", this.bean.getDebugBuzzProtocol(), otherTyped.getDebugBuzzProtocol(), true);
            this.computeDiff("DebugBuzzProtocolDetails", this.bean.getDebugBuzzProtocolDetails(), otherTyped.getDebugBuzzProtocolDetails(), true);
            this.computeDiff("DebugBuzzProtocolHttp", this.bean.getDebugBuzzProtocolHttp(), otherTyped.getDebugBuzzProtocolHttp(), true);
            this.computeDiff("DebugCAT", this.bean.getDebugCAT(), otherTyped.getDebugCAT(), true);
            this.computeDiff("DebugCertRevocCheck", this.bean.getDebugCertRevocCheck(), otherTyped.getDebugCertRevocCheck(), true);
            this.computeDiff("DebugChannel", this.bean.getDebugChannel(), otherTyped.getDebugChannel(), true);
            this.computeDiff("DebugClassLoadingConsistencyChecker", this.bean.getDebugClassLoadingConsistencyChecker(), otherTyped.getDebugClassLoadingConsistencyChecker(), true);
            this.computeDiff("DebugClassLoadingContextualTrace", this.bean.getDebugClassLoadingContextualTrace(), otherTyped.getDebugClassLoadingContextualTrace(), true);
            this.computeDiff("DebugClassLoadingVerbose", this.bean.getDebugClassLoadingVerbose(), otherTyped.getDebugClassLoadingVerbose(), true);
            this.computeDiff("DebugClassRedef", this.bean.getDebugClassRedef(), otherTyped.getDebugClassRedef(), true);
            this.computeDiff("DebugClassSize", this.bean.getDebugClassSize(), otherTyped.getDebugClassSize(), true);
            this.computeDiff("DebugCluster", this.bean.getDebugCluster(), otherTyped.getDebugCluster(), true);
            this.computeDiff("DebugClusterAnnouncements", this.bean.getDebugClusterAnnouncements(), otherTyped.getDebugClusterAnnouncements(), true);
            this.computeDiff("DebugClusterFragments", this.bean.getDebugClusterFragments(), otherTyped.getDebugClusterFragments(), false);
            this.computeDiff("DebugClusterHeartbeats", this.bean.getDebugClusterHeartbeats(), otherTyped.getDebugClusterHeartbeats(), true);
            this.computeDiff("DebugCoherence", this.bean.getDebugCoherence(), otherTyped.getDebugCoherence(), true);
            this.computeDiff("DebugConcurrent", this.bean.getDebugConcurrent(), otherTyped.getDebugConcurrent(), true);
            this.computeDiff("DebugConcurrentContext", this.bean.getDebugConcurrentContext(), otherTyped.getDebugConcurrentContext(), true);
            this.computeDiff("DebugConcurrentMES", this.bean.getDebugConcurrentMES(), otherTyped.getDebugConcurrentMES(), true);
            this.computeDiff("DebugConcurrentMSES", this.bean.getDebugConcurrentMSES(), otherTyped.getDebugConcurrentMSES(), true);
            this.computeDiff("DebugConcurrentMTF", this.bean.getDebugConcurrentMTF(), otherTyped.getDebugConcurrentMTF(), true);
            this.computeDiff("DebugConcurrentTransaction", this.bean.getDebugConcurrentTransaction(), otherTyped.getDebugConcurrentTransaction(), true);
            this.computeDiff("DebugConfigurationEdit", this.bean.getDebugConfigurationEdit(), otherTyped.getDebugConfigurationEdit(), true);
            this.computeDiff("DebugConfigurationRuntime", this.bean.getDebugConfigurationRuntime(), otherTyped.getDebugConfigurationRuntime(), true);
            this.computeDiff("DebugConnectorService", this.bean.getDebugConnectorService(), otherTyped.getDebugConnectorService(), true);
            this.computeDiff("DebugConsensusLeasing", this.bean.getDebugConsensusLeasing(), otherTyped.getDebugConsensusLeasing(), true);
            this.computeDiff("DebugDRSCalls", this.bean.getDebugDRSCalls(), otherTyped.getDebugDRSCalls(), false);
            this.computeDiff("DebugDRSHeartbeats", this.bean.getDebugDRSHeartbeats(), otherTyped.getDebugDRSHeartbeats(), false);
            this.computeDiff("DebugDRSMessages", this.bean.getDebugDRSMessages(), otherTyped.getDebugDRSMessages(), false);
            this.computeDiff("DebugDRSQueues", this.bean.getDebugDRSQueues(), otherTyped.getDebugDRSQueues(), false);
            this.computeDiff("DebugDRSStateTransitions", this.bean.getDebugDRSStateTransitions(), otherTyped.getDebugDRSStateTransitions(), false);
            this.computeDiff("DebugDRSUpdateStatus", this.bean.getDebugDRSUpdateStatus(), otherTyped.getDebugDRSUpdateStatus(), false);
            this.computeDiff("DebugDataSourceInterceptor", this.bean.getDebugDataSourceInterceptor(), otherTyped.getDebugDataSourceInterceptor(), true);
            this.computeDiff("DebugDebugPatches", this.bean.getDebugDebugPatches(), otherTyped.getDebugDebugPatches(), true);
            this.computeDiff("DebugDefaultStoreVerbose", this.bean.getDebugDefaultStoreVerbose(), otherTyped.getDebugDefaultStoreVerbose(), true);
            this.computeDiff("DebugDeploy", this.bean.getDebugDeploy(), otherTyped.getDebugDeploy(), true);
            this.computeDiff("DebugDeployment", this.bean.getDebugDeployment(), otherTyped.getDebugDeployment(), true);
            this.computeDiff("DebugDeploymentConcise", this.bean.getDebugDeploymentConcise(), otherTyped.getDebugDeploymentConcise(), true);
            this.computeDiff("DebugDeploymentPlan", this.bean.getDebugDeploymentPlan(), otherTyped.getDebugDeploymentPlan(), true);
            this.computeDiff("DebugDeploymentService", this.bean.getDebugDeploymentService(), otherTyped.getDebugDeploymentService(), true);
            this.computeDiff("DebugDeploymentServiceInternal", this.bean.getDebugDeploymentServiceInternal(), otherTyped.getDebugDeploymentServiceInternal(), true);
            this.computeDiff("DebugDeploymentServiceStatusUpdates", this.bean.getDebugDeploymentServiceStatusUpdates(), otherTyped.getDebugDeploymentServiceStatusUpdates(), true);
            this.computeDiff("DebugDeploymentServiceTransport", this.bean.getDebugDeploymentServiceTransport(), otherTyped.getDebugDeploymentServiceTransport(), true);
            this.computeDiff("DebugDeploymentServiceTransportHttp", this.bean.getDebugDeploymentServiceTransportHttp(), otherTyped.getDebugDeploymentServiceTransportHttp(), true);
            this.computeDiff("DebugDescriptor", this.bean.getDebugDescriptor(), otherTyped.getDebugDescriptor(), true);
            this.computeDiff("DebugDiagnosticAccessor", this.bean.getDebugDiagnosticAccessor(), otherTyped.getDebugDiagnosticAccessor(), true);
            this.computeDiff("DebugDiagnosticArchive", this.bean.getDebugDiagnosticArchive(), otherTyped.getDebugDiagnosticArchive(), true);
            this.computeDiff("DebugDiagnosticArchiveRetirement", this.bean.getDebugDiagnosticArchiveRetirement(), otherTyped.getDebugDiagnosticArchiveRetirement(), true);
            this.computeDiff("DebugDiagnosticCollections", this.bean.getDebugDiagnosticCollections(), otherTyped.getDebugDiagnosticCollections(), true);
            this.computeDiff("DebugDiagnosticContext", this.bean.getDebugDiagnosticContext(), otherTyped.getDebugDiagnosticContext(), true);
            this.computeDiff("DebugDiagnosticDataGathering", this.bean.getDebugDiagnosticDataGathering(), otherTyped.getDebugDiagnosticDataGathering(), true);
            this.computeDiff("DebugDiagnosticFileArchive", this.bean.getDebugDiagnosticFileArchive(), otherTyped.getDebugDiagnosticFileArchive(), true);
            this.computeDiff("DebugDiagnosticImage", this.bean.getDebugDiagnosticImage(), otherTyped.getDebugDiagnosticImage(), true);
            this.computeDiff("DebugDiagnosticInstrumentation", this.bean.getDebugDiagnosticInstrumentation(), otherTyped.getDebugDiagnosticInstrumentation(), true);
            this.computeDiff("DebugDiagnosticInstrumentationActions", this.bean.getDebugDiagnosticInstrumentationActions(), otherTyped.getDebugDiagnosticInstrumentationActions(), true);
            this.computeDiff("DebugDiagnosticInstrumentationClassInfo", this.bean.getDebugDiagnosticInstrumentationClassInfo(), otherTyped.getDebugDiagnosticInstrumentationClassInfo(), true);
            this.computeDiff("DebugDiagnosticInstrumentationConfig", this.bean.getDebugDiagnosticInstrumentationConfig(), otherTyped.getDebugDiagnosticInstrumentationConfig(), true);
            this.computeDiff("DebugDiagnosticInstrumentationEvents", this.bean.getDebugDiagnosticInstrumentationEvents(), otherTyped.getDebugDiagnosticInstrumentationEvents(), true);
            this.computeDiff("DebugDiagnosticInstrumentationResult", this.bean.getDebugDiagnosticInstrumentationResult(), otherTyped.getDebugDiagnosticInstrumentationResult(), true);
            this.computeDiff("DebugDiagnosticInstrumentationWeaving", this.bean.getDebugDiagnosticInstrumentationWeaving(), otherTyped.getDebugDiagnosticInstrumentationWeaving(), true);
            this.computeDiff("DebugDiagnosticInstrumentationWeavingMatches", this.bean.getDebugDiagnosticInstrumentationWeavingMatches(), otherTyped.getDebugDiagnosticInstrumentationWeavingMatches(), true);
            this.computeDiff("DebugDiagnosticJdbcArchive", this.bean.getDebugDiagnosticJdbcArchive(), otherTyped.getDebugDiagnosticJdbcArchive(), true);
            this.computeDiff("DebugDiagnosticLifecycleHandlers", this.bean.getDebugDiagnosticLifecycleHandlers(), otherTyped.getDebugDiagnosticLifecycleHandlers(), true);
            this.computeDiff("DebugDiagnosticNotifications", this.bean.getDebugDiagnosticNotifications(), otherTyped.getDebugDiagnosticNotifications(), true);
            this.computeDiff("DebugDiagnosticQuery", this.bean.getDebugDiagnosticQuery(), otherTyped.getDebugDiagnosticQuery(), true);
            this.computeDiff("DebugDiagnosticRuntimeControlDriver", this.bean.getDebugDiagnosticRuntimeControlDriver(), otherTyped.getDebugDiagnosticRuntimeControlDriver(), true);
            this.computeDiff("DebugDiagnosticRuntimeControlService", this.bean.getDebugDiagnosticRuntimeControlService(), otherTyped.getDebugDiagnosticRuntimeControlService(), true);
            this.computeDiff("DebugDiagnosticWatch", this.bean.getDebugDiagnosticWatch(), otherTyped.getDebugDiagnosticWatch(), true);
            this.computeDiff("DebugDiagnosticWatchEvents", this.bean.getDebugDiagnosticWatchEvents(), otherTyped.getDebugDiagnosticWatchEvents(), true);
            this.computeDiff("DebugDiagnosticWatchEventsDetails", this.bean.getDebugDiagnosticWatchEventsDetails(), otherTyped.getDebugDiagnosticWatchEventsDetails(), true);
            this.computeDiff("DebugDiagnosticWlstoreArchive", this.bean.getDebugDiagnosticWlstoreArchive(), otherTyped.getDebugDiagnosticWlstoreArchive(), true);
            this.computeDiff("DebugDiagnosticsBeanExtensionResolver", this.bean.getDebugDiagnosticsBeanExtensionResolver(), otherTyped.getDebugDiagnosticsBeanExtensionResolver(), true);
            this.computeDiff("DebugDiagnosticsBeanInfoProviders", this.bean.getDebugDiagnosticsBeanInfoProviders(), otherTyped.getDebugDiagnosticsBeanInfoProviders(), true);
            this.computeDiff("DebugDiagnosticsELContext", this.bean.getDebugDiagnosticsELContext(), otherTyped.getDebugDiagnosticsELContext(), true);
            this.computeDiff("DebugDiagnosticsELResolver", this.bean.getDebugDiagnosticsELResolver(), otherTyped.getDebugDiagnosticsELResolver(), true);
            this.computeDiff("DebugDiagnosticsExpressionEvaluators", this.bean.getDebugDiagnosticsExpressionEvaluators(), otherTyped.getDebugDiagnosticsExpressionEvaluators(), true);
            this.computeDiff("DebugDiagnosticsExpressionFunctionMapper", this.bean.getDebugDiagnosticsExpressionFunctionMapper(), otherTyped.getDebugDiagnosticsExpressionFunctionMapper(), true);
            this.computeDiff("DebugDiagnosticsExpressionFunctions", this.bean.getDebugDiagnosticsExpressionFunctions(), otherTyped.getDebugDiagnosticsExpressionFunctions(), true);
            this.computeDiff("DebugDiagnosticsExpressionMetrics", this.bean.getDebugDiagnosticsExpressionMetrics(), otherTyped.getDebugDiagnosticsExpressionMetrics(), true);
            this.computeDiff("DebugDiagnosticsExpressionPoller", this.bean.getDebugDiagnosticsExpressionPoller(), otherTyped.getDebugDiagnosticsExpressionPoller(), true);
            this.computeDiff("DebugDiagnosticsExpressionPollerBuffer", this.bean.getDebugDiagnosticsExpressionPollerBuffer(), otherTyped.getDebugDiagnosticsExpressionPollerBuffer(), true);
            this.computeDiff("DebugDiagnosticsHarvester", this.bean.getDebugDiagnosticsHarvester(), otherTyped.getDebugDiagnosticsHarvester(), true);
            this.computeDiff("DebugDiagnosticsHarvesterData", this.bean.getDebugDiagnosticsHarvesterData(), otherTyped.getDebugDiagnosticsHarvesterData(), true);
            this.computeDiff("DebugDiagnosticsHarvesterMBeanPlugin", this.bean.getDebugDiagnosticsHarvesterMBeanPlugin(), otherTyped.getDebugDiagnosticsHarvesterMBeanPlugin(), true);
            this.computeDiff("DebugDiagnosticsHarvesterTreeBeanPlugin", this.bean.getDebugDiagnosticsHarvesterTreeBeanPlugin(), otherTyped.getDebugDiagnosticsHarvesterTreeBeanPlugin(), true);
            this.computeDiff("DebugDiagnosticsMBeanELResolver", this.bean.getDebugDiagnosticsMBeanELResolver(), otherTyped.getDebugDiagnosticsMBeanELResolver(), true);
            this.computeDiff("DebugDiagnosticsModule", this.bean.getDebugDiagnosticsModule(), otherTyped.getDebugDiagnosticsModule(), true);
            this.computeDiff("DebugDiagnosticsNotifications", this.bean.getDebugDiagnosticsNotifications(), otherTyped.getDebugDiagnosticsNotifications(), true);
            this.computeDiff("DebugDiagnosticsScriptAction", this.bean.getDebugDiagnosticsScriptAction(), otherTyped.getDebugDiagnosticsScriptAction(), true);
            this.computeDiff("DebugDiagnosticsTimer", this.bean.getDebugDiagnosticsTimer(), otherTyped.getDebugDiagnosticsTimer(), true);
            this.computeDiff("DebugDiagnosticsUtils", this.bean.getDebugDiagnosticsUtils(), otherTyped.getDebugDiagnosticsUtils(), true);
            this.computeDiff("DebugDiagnosticsValueTracingELResolver", this.bean.getDebugDiagnosticsValueTracingELResolver(), otherTyped.getDebugDiagnosticsValueTracingELResolver(), true);
            this.computeDiff("DebugDomainLogHandler", this.bean.getDebugDomainLogHandler(), otherTyped.getDebugDomainLogHandler(), true);
            this.computeDiff("DebugDomainUpgradeServerService", this.bean.getDebugDomainUpgradeServerService(), otherTyped.getDebugDomainUpgradeServerService(), true);
            this.computeDiff("DebugDynamicSingletonServices", this.bean.getDebugDynamicSingletonServices(), otherTyped.getDebugDynamicSingletonServices(), true);
            this.computeDiff("DebugEjbCaching", this.bean.getDebugEjbCaching(), otherTyped.getDebugEjbCaching(), true);
            this.computeDiff("DebugEjbCmpDeployment", this.bean.getDebugEjbCmpDeployment(), otherTyped.getDebugEjbCmpDeployment(), true);
            this.computeDiff("DebugEjbCmpRuntime", this.bean.getDebugEjbCmpRuntime(), otherTyped.getDebugEjbCmpRuntime(), true);
            this.computeDiff("DebugEjbCompilation", this.bean.getDebugEjbCompilation(), otherTyped.getDebugEjbCompilation(), true);
            this.computeDiff("DebugEjbDeployment", this.bean.getDebugEjbDeployment(), otherTyped.getDebugEjbDeployment(), true);
            this.computeDiff("DebugEjbInvoke", this.bean.getDebugEjbInvoke(), otherTyped.getDebugEjbInvoke(), true);
            this.computeDiff("DebugEjbLocking", this.bean.getDebugEjbLocking(), otherTyped.getDebugEjbLocking(), true);
            this.computeDiff("DebugEjbMdbConnection", this.bean.getDebugEjbMdbConnection(), otherTyped.getDebugEjbMdbConnection(), true);
            this.computeDiff("DebugEjbMetadata", this.bean.getDebugEjbMetadata(), otherTyped.getDebugEjbMetadata(), true);
            this.computeDiff("DebugEjbPooling", this.bean.getDebugEjbPooling(), otherTyped.getDebugEjbPooling(), true);
            this.computeDiff("DebugEjbSecurity", this.bean.getDebugEjbSecurity(), otherTyped.getDebugEjbSecurity(), true);
            this.computeDiff("DebugEjbSwapping", this.bean.getDebugEjbSwapping(), otherTyped.getDebugEjbSwapping(), true);
            this.computeDiff("DebugEjbTimerStore", this.bean.getDebugEjbTimerStore(), otherTyped.getDebugEjbTimerStore(), true);
            this.computeDiff("DebugEjbTimers", this.bean.getDebugEjbTimers(), otherTyped.getDebugEjbTimers(), true);
            this.computeDiff("DebugElasticActions", this.bean.getDebugElasticActions(), otherTyped.getDebugElasticActions(), true);
            this.computeDiff("DebugElasticServices", this.bean.getDebugElasticServices(), otherTyped.getDebugElasticServices(), true);
            this.computeDiff("DebugEmbeddedLDAP", this.bean.getDebugEmbeddedLDAP(), otherTyped.getDebugEmbeddedLDAP(), false);
            this.computeDiff("DebugEmbeddedLDAPLogLevel", this.bean.getDebugEmbeddedLDAPLogLevel(), otherTyped.getDebugEmbeddedLDAPLogLevel(), false);
            this.computeDiff("DebugEmbeddedLDAPLogToConsole", this.bean.getDebugEmbeddedLDAPLogToConsole(), otherTyped.getDebugEmbeddedLDAPLogToConsole(), false);
            this.computeDiff("DebugEmbeddedLDAPWriteOverrideProps", this.bean.getDebugEmbeddedLDAPWriteOverrideProps(), otherTyped.getDebugEmbeddedLDAPWriteOverrideProps(), false);
            this.computeDiff("DebugEventManager", this.bean.getDebugEventManager(), otherTyped.getDebugEventManager(), false);
            this.computeDiff("DebugExpressionBeanLocalizer", this.bean.getDebugExpressionBeanLocalizer(), otherTyped.getDebugExpressionBeanLocalizer(), true);
            this.computeDiff("DebugExpressionExtensionsManager", this.bean.getDebugExpressionExtensionsManager(), otherTyped.getDebugExpressionExtensionsManager(), true);
            this.computeDiff("DebugExpressionPoller", this.bean.getDebugExpressionPoller(), otherTyped.getDebugExpressionPoller(), true);
            this.computeDiff("DebugFileDistributionServlet", this.bean.getDebugFileDistributionServlet(), otherTyped.getDebugFileDistributionServlet(), true);
            this.computeDiff("DebugFileOwnerFixer", this.bean.getDebugFileOwnerFixer(), otherTyped.getDebugFileOwnerFixer(), true);
            this.computeDiff("DebugHarvesterTypeInfoCache", this.bean.getDebugHarvesterTypeInfoCache(), otherTyped.getDebugHarvesterTypeInfoCache(), true);
            this.computeDiff("DebugHttp", this.bean.getDebugHttp(), otherTyped.getDebugHttp(), true);
            this.computeDiff("DebugHttpConcise", this.bean.getDebugHttpConcise(), otherTyped.getDebugHttpConcise(), true);
            this.computeDiff("DebugHttpLogging", this.bean.getDebugHttpLogging(), otherTyped.getDebugHttpLogging(), true);
            this.computeDiff("DebugHttpSessions", this.bean.getDebugHttpSessions(), otherTyped.getDebugHttpSessions(), true);
            this.computeDiff("DebugIIOPDetail", this.bean.getDebugIIOPDetail(), otherTyped.getDebugIIOPDetail(), true);
            this.computeDiff("DebugIIOPNaming", this.bean.getDebugIIOPNaming(), otherTyped.getDebugIIOPNaming(), true);
            this.computeDiff("DebugIIOPRepalcer", this.bean.getDebugIIOPRepalcer(), otherTyped.getDebugIIOPRepalcer(), true);
            this.computeDiff("DebugIIOPTunneling", this.bean.getDebugIIOPTunneling(), otherTyped.getDebugIIOPTunneling(), true);
            this.computeDiff("DebugInterceptors", this.bean.getDebugInterceptors(), otherTyped.getDebugInterceptors(), true);
            this.computeDiff("DebugJ2EEManagement", this.bean.getDebugJ2EEManagement(), otherTyped.getDebugJ2EEManagement(), true);
            this.computeDiff("DebugJAXPDebugLevel", this.bean.getDebugJAXPDebugLevel(), otherTyped.getDebugJAXPDebugLevel(), false);
            this.computeDiff("DebugJAXPDebugName", this.bean.getDebugJAXPDebugName(), otherTyped.getDebugJAXPDebugName(), false);
            this.computeDiff("DebugJAXPIncludeClass", this.bean.getDebugJAXPIncludeClass(), otherTyped.getDebugJAXPIncludeClass(), false);
            this.computeDiff("DebugJAXPIncludeLocation", this.bean.getDebugJAXPIncludeLocation(), otherTyped.getDebugJAXPIncludeLocation(), false);
            this.computeDiff("DebugJAXPIncludeName", this.bean.getDebugJAXPIncludeName(), otherTyped.getDebugJAXPIncludeName(), false);
            this.computeDiff("DebugJAXPIncludeTime", this.bean.getDebugJAXPIncludeTime(), otherTyped.getDebugJAXPIncludeTime(), false);
            this.computeDiff("DebugJAXPUseShortClass", this.bean.getDebugJAXPUseShortClass(), otherTyped.getDebugJAXPUseShortClass(), false);
            this.computeDiff("DebugJDBCConn", this.bean.getDebugJDBCConn(), otherTyped.getDebugJDBCConn(), true);
            this.computeDiff("DebugJDBCDriverLogging", this.bean.getDebugJDBCDriverLogging(), otherTyped.getDebugJDBCDriverLogging(), true);
            this.computeDiff("DebugJDBCInternal", this.bean.getDebugJDBCInternal(), otherTyped.getDebugJDBCInternal(), true);
            this.computeDiff("DebugJDBCONS", this.bean.getDebugJDBCONS(), otherTyped.getDebugJDBCONS(), true);
            this.computeDiff("DebugJDBCRAC", this.bean.getDebugJDBCRAC(), otherTyped.getDebugJDBCRAC(), true);
            this.computeDiff("DebugJDBCRMI", this.bean.getDebugJDBCRMI(), otherTyped.getDebugJDBCRMI(), true);
            this.computeDiff("DebugJDBCReplay", this.bean.getDebugJDBCReplay(), otherTyped.getDebugJDBCReplay(), true);
            this.computeDiff("DebugJDBCSQL", this.bean.getDebugJDBCSQL(), otherTyped.getDebugJDBCSQL(), true);
            this.computeDiff("DebugJDBCUCP", this.bean.getDebugJDBCUCP(), otherTyped.getDebugJDBCUCP(), true);
            this.computeDiff("DebugJMSAME", this.bean.getDebugJMSAME(), otherTyped.getDebugJMSAME(), true);
            this.computeDiff("DebugJMSBackEnd", this.bean.getDebugJMSBackEnd(), otherTyped.getDebugJMSBackEnd(), true);
            this.computeDiff("DebugJMSBoot", this.bean.getDebugJMSBoot(), otherTyped.getDebugJMSBoot(), true);
            this.computeDiff("DebugJMSCDS", this.bean.getDebugJMSCDS(), otherTyped.getDebugJMSCDS(), true);
            this.computeDiff("DebugJMSCommon", this.bean.getDebugJMSCommon(), otherTyped.getDebugJMSCommon(), true);
            this.computeDiff("DebugJMSConfig", this.bean.getDebugJMSConfig(), otherTyped.getDebugJMSConfig(), true);
            this.computeDiff("DebugJMSCrossDomainSecurity", this.bean.getDebugJMSCrossDomainSecurity(), otherTyped.getDebugJMSCrossDomainSecurity(), true);
            this.computeDiff("DebugJMSDispatcher", this.bean.getDebugJMSDispatcher(), otherTyped.getDebugJMSDispatcher(), true);
            this.computeDiff("DebugJMSDispatcherProxy", this.bean.getDebugJMSDispatcherProxy(), otherTyped.getDebugJMSDispatcherProxy(), true);
            this.computeDiff("DebugJMSDispatcherUtilsVerbose", this.bean.getDebugJMSDispatcherUtilsVerbose(), otherTyped.getDebugJMSDispatcherUtilsVerbose(), true);
            this.computeDiff("DebugJMSDispatcherVerbose", this.bean.getDebugJMSDispatcherVerbose(), otherTyped.getDebugJMSDispatcherVerbose(), true);
            this.computeDiff("DebugJMSDistTopic", this.bean.getDebugJMSDistTopic(), otherTyped.getDebugJMSDistTopic(), true);
            this.computeDiff("DebugJMSDotNetProxy", this.bean.getDebugJMSDotNetProxy(), otherTyped.getDebugJMSDotNetProxy(), true);
            this.computeDiff("DebugJMSDotNetT3Server", this.bean.getDebugJMSDotNetT3Server(), otherTyped.getDebugJMSDotNetT3Server(), true);
            this.computeDiff("DebugJMSDotNetTransport", this.bean.getDebugJMSDotNetTransport(), otherTyped.getDebugJMSDotNetTransport(), true);
            this.computeDiff("DebugJMSDurSub", this.bean.getDebugJMSDurSub(), otherTyped.getDebugJMSDurSub(), true);
            this.computeDiff("DebugJMSDurableSubscribers", this.bean.getDebugJMSDurableSubscribers(), otherTyped.getDebugJMSDurableSubscribers(), true);
            this.computeDiff("DebugJMSFrontEnd", this.bean.getDebugJMSFrontEnd(), otherTyped.getDebugJMSFrontEnd(), true);
            this.computeDiff("DebugJMSJDBCScavengeOnFlush", this.bean.getDebugJMSJDBCScavengeOnFlush(), otherTyped.getDebugJMSJDBCScavengeOnFlush(), true);
            this.computeDiff("DebugJMSJNDI", this.bean.getDebugJMSJNDI(), otherTyped.getDebugJMSJNDI(), true);
            this.computeDiff("DebugJMSLocking", this.bean.getDebugJMSLocking(), otherTyped.getDebugJMSLocking(), true);
            this.computeDiff("DebugJMSMessagePath", this.bean.getDebugJMSMessagePath(), otherTyped.getDebugJMSMessagePath(), true);
            this.computeDiff("DebugJMSModule", this.bean.getDebugJMSModule(), otherTyped.getDebugJMSModule(), true);
            this.computeDiff("DebugJMSOBS", this.bean.getDebugJMSOBS(), otherTyped.getDebugJMSOBS(), true);
            this.computeDiff("DebugJMSPauseResume", this.bean.getDebugJMSPauseResume(), otherTyped.getDebugJMSPauseResume(), true);
            this.computeDiff("DebugJMSSAF", this.bean.getDebugJMSSAF(), otherTyped.getDebugJMSSAF(), true);
            this.computeDiff("DebugJMSStore", this.bean.getDebugJMSStore(), otherTyped.getDebugJMSStore(), true);
            this.computeDiff("DebugJMST3Server", this.bean.getDebugJMST3Server(), otherTyped.getDebugJMST3Server(), true);
            this.computeDiff("DebugJMSWrappers", this.bean.getDebugJMSWrappers(), otherTyped.getDebugJMSWrappers(), true);
            this.computeDiff("DebugJMSXA", this.bean.getDebugJMSXA(), otherTyped.getDebugJMSXA(), true);
            this.computeDiff("DebugJMX", this.bean.getDebugJMX(), otherTyped.getDebugJMX(), true);
            this.computeDiff("DebugJMXCompatibility", this.bean.getDebugJMXCompatibility(), otherTyped.getDebugJMXCompatibility(), true);
            this.computeDiff("DebugJMXContext", this.bean.getDebugJMXContext(), otherTyped.getDebugJMXContext(), true);
            this.computeDiff("DebugJMXCore", this.bean.getDebugJMXCore(), otherTyped.getDebugJMXCore(), true);
            this.computeDiff("DebugJMXCoreConcise", this.bean.getDebugJMXCoreConcise(), otherTyped.getDebugJMXCoreConcise(), true);
            this.computeDiff("DebugJMXDomain", this.bean.getDebugJMXDomain(), otherTyped.getDebugJMXDomain(), true);
            this.computeDiff("DebugJMXEdit", this.bean.getDebugJMXEdit(), otherTyped.getDebugJMXEdit(), true);
            this.computeDiff("DebugJMXRuntime", this.bean.getDebugJMXRuntime(), otherTyped.getDebugJMXRuntime(), true);
            this.computeDiff("DebugJNDI", this.bean.getDebugJNDI(), otherTyped.getDebugJNDI(), true);
            this.computeDiff("DebugJNDIFactories", this.bean.getDebugJNDIFactories(), otherTyped.getDebugJNDIFactories(), true);
            this.computeDiff("DebugJNDIResolution", this.bean.getDebugJNDIResolution(), otherTyped.getDebugJNDIResolution(), true);
            this.computeDiff("DebugJPA", this.bean.getDebugJPA(), otherTyped.getDebugJPA(), true);
            this.computeDiff("DebugJTA2PC", this.bean.getDebugJTA2PC(), otherTyped.getDebugJTA2PC(), true);
            this.computeDiff("DebugJTA2PCDetail", this.bean.getDebugJTA2PCDetail(), otherTyped.getDebugJTA2PCDetail(), true);
            this.computeDiff("DebugJTA2PCStackTrace", this.bean.getDebugJTA2PCStackTrace(), otherTyped.getDebugJTA2PCStackTrace(), true);
            this.computeDiff("DebugJTAAPI", this.bean.getDebugJTAAPI(), otherTyped.getDebugJTAAPI(), true);
            this.computeDiff("DebugJTACDI", this.bean.getDebugJTACDI(), otherTyped.getDebugJTACDI(), true);
            this.computeDiff("DebugJTAGateway", this.bean.getDebugJTAGateway(), otherTyped.getDebugJTAGateway(), true);
            this.computeDiff("DebugJTAGatewayStackTrace", this.bean.getDebugJTAGatewayStackTrace(), otherTyped.getDebugJTAGatewayStackTrace(), true);
            this.computeDiff("DebugJTAHealth", this.bean.getDebugJTAHealth(), otherTyped.getDebugJTAHealth(), true);
            this.computeDiff("DebugJTAJDBC", this.bean.getDebugJTAJDBC(), otherTyped.getDebugJTAJDBC(), true);
            this.computeDiff("DebugJTALLR", this.bean.getDebugJTALLR(), otherTyped.getDebugJTALLR(), true);
            this.computeDiff("DebugJTALifecycle", this.bean.getDebugJTALifecycle(), otherTyped.getDebugJTALifecycle(), true);
            this.computeDiff("DebugJTAMigration", this.bean.getDebugJTAMigration(), otherTyped.getDebugJTAMigration(), true);
            this.computeDiff("DebugJTANaming", this.bean.getDebugJTANaming(), otherTyped.getDebugJTANaming(), true);
            this.computeDiff("DebugJTANamingStackTrace", this.bean.getDebugJTANamingStackTrace(), otherTyped.getDebugJTANamingStackTrace(), true);
            this.computeDiff("DebugJTANonXA", this.bean.getDebugJTANonXA(), otherTyped.getDebugJTANonXA(), true);
            this.computeDiff("DebugJTAPropagate", this.bean.getDebugJTAPropagate(), otherTyped.getDebugJTAPropagate(), true);
            this.computeDiff("DebugJTARMI", this.bean.getDebugJTARMI(), otherTyped.getDebugJTARMI(), true);
            this.computeDiff("DebugJTARecovery", this.bean.getDebugJTARecovery(), otherTyped.getDebugJTARecovery(), true);
            this.computeDiff("DebugJTARecoveryStackTrace", this.bean.getDebugJTARecoveryStackTrace(), otherTyped.getDebugJTARecoveryStackTrace(), true);
            this.computeDiff("DebugJTAResourceHealth", this.bean.getDebugJTAResourceHealth(), otherTyped.getDebugJTAResourceHealth(), true);
            this.computeDiff("DebugJTAResourceName", this.bean.getDebugJTAResourceName(), otherTyped.getDebugJTAResourceName(), true);
            this.computeDiff("DebugJTATLOG", this.bean.getDebugJTATLOG(), otherTyped.getDebugJTATLOG(), true);
            this.computeDiff("DebugJTATransactionName", this.bean.getDebugJTATransactionName(), otherTyped.getDebugJTATransactionName(), true);
            this.computeDiff("DebugJTAXA", this.bean.getDebugJTAXA(), otherTyped.getDebugJTAXA(), true);
            this.computeDiff("DebugJTAXAStackTrace", this.bean.getDebugJTAXAStackTrace(), otherTyped.getDebugJTAXAStackTrace(), true);
            this.computeDiff("DebugJpaDataCache", this.bean.getDebugJpaDataCache(), otherTyped.getDebugJpaDataCache(), true);
            this.computeDiff("DebugJpaEnhance", this.bean.getDebugJpaEnhance(), otherTyped.getDebugJpaEnhance(), true);
            this.computeDiff("DebugJpaJdbcJdbc", this.bean.getDebugJpaJdbcJdbc(), otherTyped.getDebugJpaJdbcJdbc(), true);
            this.computeDiff("DebugJpaJdbcSchema", this.bean.getDebugJpaJdbcSchema(), otherTyped.getDebugJpaJdbcSchema(), true);
            this.computeDiff("DebugJpaJdbcSql", this.bean.getDebugJpaJdbcSql(), otherTyped.getDebugJpaJdbcSql(), true);
            this.computeDiff("DebugJpaManage", this.bean.getDebugJpaManage(), otherTyped.getDebugJpaManage(), true);
            this.computeDiff("DebugJpaMetaData", this.bean.getDebugJpaMetaData(), otherTyped.getDebugJpaMetaData(), true);
            this.computeDiff("DebugJpaProfile", this.bean.getDebugJpaProfile(), otherTyped.getDebugJpaProfile(), true);
            this.computeDiff("DebugJpaQuery", this.bean.getDebugJpaQuery(), otherTyped.getDebugJpaQuery(), true);
            this.computeDiff("DebugJpaRuntime", this.bean.getDebugJpaRuntime(), otherTyped.getDebugJpaRuntime(), true);
            this.computeDiff("DebugJpaTool", this.bean.getDebugJpaTool(), otherTyped.getDebugJpaTool(), true);
            this.computeDiff("DebugKodoWeblogic", this.bean.getDebugKodoWeblogic(), otherTyped.getDebugKodoWeblogic(), true);
            this.computeDiff("DebugLeaderElection", this.bean.getDebugLeaderElection(), otherTyped.getDebugLeaderElection(), false);
            this.computeDiff("DebugLegacy", this.bean.getDebugLegacy(), otherTyped.getDebugLegacy(), true);
            this.computeDiff("DebugLibraries", this.bean.getDebugLibraries(), otherTyped.getDebugLibraries(), true);
            this.computeDiff("DebugLifecycleManager", this.bean.getDebugLifecycleManager(), otherTyped.getDebugLifecycleManager(), true);
            this.computeDiff("DebugLoggingConfiguration", this.bean.getDebugLoggingConfiguration(), otherTyped.getDebugLoggingConfiguration(), true);
            this.computeDiff("DebugMBeanCIC", this.bean.getDebugMBeanCIC(), otherTyped.getDebugMBeanCIC(), true);
            this.computeDiff("DebugMBeanEventHandler", this.bean.getDebugMBeanEventHandler(), otherTyped.getDebugMBeanEventHandler(), true);
            this.computeDiff("DebugMBeanEventHandlerSummary", this.bean.getDebugMBeanEventHandlerSummary(), otherTyped.getDebugMBeanEventHandlerSummary(), true);
            this.computeDiff("DebugMBeanEventHandlerWork", this.bean.getDebugMBeanEventHandlerWork(), otherTyped.getDebugMBeanEventHandlerWork(), true);
            this.computeDiff("DebugMBeanHarvesterControl", this.bean.getDebugMBeanHarvesterControl(), otherTyped.getDebugMBeanHarvesterControl(), true);
            this.computeDiff("DebugMBeanHarvesterDataCollection", this.bean.getDebugMBeanHarvesterDataCollection(), otherTyped.getDebugMBeanHarvesterDataCollection(), true);
            this.computeDiff("DebugMBeanHarvesterResolution", this.bean.getDebugMBeanHarvesterResolution(), otherTyped.getDebugMBeanHarvesterResolution(), true);
            this.computeDiff("DebugMBeanHarvesterThreading", this.bean.getDebugMBeanHarvesterThreading(), otherTyped.getDebugMBeanHarvesterThreading(), true);
            this.computeDiff("DebugMBeanLocalization", this.bean.getDebugMBeanLocalization(), otherTyped.getDebugMBeanLocalization(), true);
            this.computeDiff("DebugMBeanTypeUtilQueue", this.bean.getDebugMBeanTypeUtilQueue(), otherTyped.getDebugMBeanTypeUtilQueue(), true);
            this.computeDiff("DebugMBeanTypeUtilQueuePriority", this.bean.getDebugMBeanTypeUtilQueuePriority(), otherTyped.getDebugMBeanTypeUtilQueuePriority(), true);
            this.computeDiff("DebugMBeanTypeUtilityListener", this.bean.getDebugMBeanTypeUtilityListener(), otherTyped.getDebugMBeanTypeUtilityListener(), true);
            this.computeDiff("DebugMBeanTypingUtility", this.bean.getDebugMBeanTypingUtility(), otherTyped.getDebugMBeanTypingUtility(), true);
            this.computeDiff("DebugMailSessionDeployment", this.bean.getDebugMailSessionDeployment(), otherTyped.getDebugMailSessionDeployment(), true);
            this.computeDiff("DebugManagedBean", this.bean.getDebugManagedBean(), otherTyped.getDebugManagedBean(), true);
            this.computeDiff("DebugManagementServicesResource", this.bean.getDebugManagementServicesResource(), otherTyped.getDebugManagementServicesResource(), true);
            this.computeDiff("DebugMaskCriterias", this.bean.getDebugMaskCriterias(), otherTyped.getDebugMaskCriterias(), true);
            this.computeDiff("DebugMessagingBridgeDumpToConsole", this.bean.getDebugMessagingBridgeDumpToConsole(), otherTyped.getDebugMessagingBridgeDumpToConsole(), true);
            this.computeDiff("DebugMessagingBridgeDumpToLog", this.bean.getDebugMessagingBridgeDumpToLog(), otherTyped.getDebugMessagingBridgeDumpToLog(), true);
            this.computeDiff("DebugMessagingBridgeRuntime", this.bean.getDebugMessagingBridgeRuntime(), otherTyped.getDebugMessagingBridgeRuntime(), true);
            this.computeDiff("DebugMessagingBridgeRuntimeVerbose", this.bean.getDebugMessagingBridgeRuntimeVerbose(), otherTyped.getDebugMessagingBridgeRuntimeVerbose(), true);
            this.computeDiff("DebugMessagingBridgeStartup", this.bean.getDebugMessagingBridgeStartup(), otherTyped.getDebugMessagingBridgeStartup(), true);
            this.computeDiff("DebugMessagingKernel", this.bean.getDebugMessagingKernel(), otherTyped.getDebugMessagingKernel(), true);
            this.computeDiff("DebugMessagingKernelBoot", this.bean.getDebugMessagingKernelBoot(), otherTyped.getDebugMessagingKernelBoot(), true);
            this.computeDiff("DebugMessagingOwnableLock", this.bean.getDebugMessagingOwnableLock(), otherTyped.getDebugMessagingOwnableLock(), true);
            this.computeDiff("DebugMigrationInfo", this.bean.getDebugMigrationInfo(), otherTyped.getDebugMigrationInfo(), true);
            this.computeDiff("DebugNIO", this.bean.getDebugNIO(), otherTyped.getDebugNIO(), true);
            this.computeDiff("DebugNodeManagerRuntime", this.bean.getDebugNodeManagerRuntime(), otherTyped.getDebugNodeManagerRuntime(), true);
            this.computeDiff("DebugPageFlowMonitoring", this.bean.getDebugPageFlowMonitoring(), otherTyped.getDebugPageFlowMonitoring(), true);
            this.computeDiff("DebugPartitionJMX", this.bean.getDebugPartitionJMX(), otherTyped.getDebugPartitionJMX(), true);
            this.computeDiff("DebugPartitionLifecycle", this.bean.getDebugPartitionLifecycle(), otherTyped.getDebugPartitionLifecycle(), true);
            this.computeDiff("DebugPartitionPortability", this.bean.getDebugPartitionPortability(), otherTyped.getDebugPartitionPortability(), true);
            this.computeDiff("DebugPartitionResourceMetricsRuntime", this.bean.getDebugPartitionResourceMetricsRuntime(), otherTyped.getDebugPartitionResourceMetricsRuntime(), true);
            this.computeDiff("DebugPatchingRuntime", this.bean.getDebugPatchingRuntime(), otherTyped.getDebugPatchingRuntime(), true);
            this.computeDiff("DebugPathSvc", this.bean.getDebugPathSvc(), otherTyped.getDebugPathSvc(), true);
            this.computeDiff("DebugPathSvcVerbose", this.bean.getDebugPathSvcVerbose(), otherTyped.getDebugPathSvcVerbose(), true);
            this.computeDiff("DebugPersistentStoreManager", this.bean.getDebugPersistentStoreManager(), otherTyped.getDebugPersistentStoreManager(), true);
            this.computeDiff("DebugPubSubBayeux", this.bean.getDebugPubSubBayeux(), otherTyped.getDebugPubSubBayeux(), true);
            this.computeDiff("DebugPubSubChannel", this.bean.getDebugPubSubChannel(), otherTyped.getDebugPubSubChannel(), true);
            this.computeDiff("DebugPubSubClient", this.bean.getDebugPubSubClient(), otherTyped.getDebugPubSubClient(), true);
            this.computeDiff("DebugPubSubSecurity", this.bean.getDebugPubSubSecurity(), otherTyped.getDebugPubSubSecurity(), true);
            this.computeDiff("DebugPubSubServer", this.bean.getDebugPubSubServer(), otherTyped.getDebugPubSubServer(), true);
            this.computeDiff("DebugRA", this.bean.getDebugRA(), otherTyped.getDebugRA(), true);
            this.computeDiff("DebugRAClassloader", this.bean.getDebugRAClassloader(), otherTyped.getDebugRAClassloader(), true);
            this.computeDiff("DebugRAConnEvents", this.bean.getDebugRAConnEvents(), otherTyped.getDebugRAConnEvents(), true);
            this.computeDiff("DebugRAConnections", this.bean.getDebugRAConnections(), otherTyped.getDebugRAConnections(), true);
            this.computeDiff("DebugRADeployment", this.bean.getDebugRADeployment(), otherTyped.getDebugRADeployment(), true);
            this.computeDiff("DebugRALifecycle", this.bean.getDebugRALifecycle(), otherTyped.getDebugRALifecycle(), true);
            this.computeDiff("DebugRALocalOut", this.bean.getDebugRALocalOut(), otherTyped.getDebugRALocalOut(), true);
            this.computeDiff("DebugRAParsing", this.bean.getDebugRAParsing(), otherTyped.getDebugRAParsing(), true);
            this.computeDiff("DebugRAPoolVerbose", this.bean.getDebugRAPoolVerbose(), otherTyped.getDebugRAPoolVerbose(), true);
            this.computeDiff("DebugRAPooling", this.bean.getDebugRAPooling(), otherTyped.getDebugRAPooling(), true);
            this.computeDiff("DebugRASecurityCtx", this.bean.getDebugRASecurityCtx(), otherTyped.getDebugRASecurityCtx(), true);
            this.computeDiff("DebugRAWork", this.bean.getDebugRAWork(), otherTyped.getDebugRAWork(), true);
            this.computeDiff("DebugRAWorkEvents", this.bean.getDebugRAWorkEvents(), otherTyped.getDebugRAWorkEvents(), true);
            this.computeDiff("DebugRAXAin", this.bean.getDebugRAXAin(), otherTyped.getDebugRAXAin(), true);
            this.computeDiff("DebugRAXAout", this.bean.getDebugRAXAout(), otherTyped.getDebugRAXAout(), true);
            this.computeDiff("DebugRAXAwork", this.bean.getDebugRAXAwork(), otherTyped.getDebugRAXAwork(), true);
            this.computeDiff("DebugRCM", this.bean.getDebugRCM(), otherTyped.getDebugRCM(), true);
            this.computeDiff("DebugRESTNotifications", this.bean.getDebugRESTNotifications(), otherTyped.getDebugRESTNotifications(), true);
            this.computeDiff("DebugRMIDetailed", this.bean.getDebugRMIDetailed(), otherTyped.getDebugRMIDetailed(), true);
            this.computeDiff("DebugRMIRequestPerf", this.bean.getDebugRMIRequestPerf(), otherTyped.getDebugRMIRequestPerf(), false);
            this.computeDiff("DebugReadyApp", this.bean.getDebugReadyApp(), otherTyped.getDebugReadyApp(), true);
            this.computeDiff("DebugRedefAttach", this.bean.getDebugRedefAttach(), otherTyped.getDebugRedefAttach(), true);
            this.computeDiff("DebugReplication", this.bean.getDebugReplication(), otherTyped.getDebugReplication(), true);
            this.computeDiff("DebugReplicationDetails", this.bean.getDebugReplicationDetails(), otherTyped.getDebugReplicationDetails(), true);
            this.computeDiff("DebugReplicationSize", this.bean.getDebugReplicationSize(), otherTyped.getDebugReplicationSize(), true);
            this.computeDiff("DebugRequestManager", this.bean.getDebugRequestManager(), otherTyped.getDebugRequestManager(), true);
            this.computeDiff("DebugResourceGroupMigration", this.bean.getDebugResourceGroupMigration(), otherTyped.getDebugResourceGroupMigration(), true);
            this.computeDiff("DebugRestJersey1Integration", this.bean.getDebugRestJersey1Integration(), otherTyped.getDebugRestJersey1Integration(), true);
            this.computeDiff("DebugRestJersey2Integration", this.bean.getDebugRestJersey2Integration(), otherTyped.getDebugRestJersey2Integration(), true);
            this.computeDiff("DebugRestartInPlace", this.bean.getDebugRestartInPlace(), otherTyped.getDebugRestartInPlace(), true);
            this.computeDiff("DebugSAFAdmin", this.bean.getDebugSAFAdmin(), otherTyped.getDebugSAFAdmin(), true);
            this.computeDiff("DebugSAFLifeCycle", this.bean.getDebugSAFLifeCycle(), otherTyped.getDebugSAFLifeCycle(), true);
            this.computeDiff("DebugSAFManager", this.bean.getDebugSAFManager(), otherTyped.getDebugSAFManager(), true);
            this.computeDiff("DebugSAFMessagePath", this.bean.getDebugSAFMessagePath(), otherTyped.getDebugSAFMessagePath(), true);
            this.computeDiff("DebugSAFReceivingAgent", this.bean.getDebugSAFReceivingAgent(), otherTyped.getDebugSAFReceivingAgent(), true);
            this.computeDiff("DebugSAFSendingAgent", this.bean.getDebugSAFSendingAgent(), otherTyped.getDebugSAFSendingAgent(), true);
            this.computeDiff("DebugSAFStore", this.bean.getDebugSAFStore(), otherTyped.getDebugSAFStore(), true);
            this.computeDiff("DebugSAFTransport", this.bean.getDebugSAFTransport(), otherTyped.getDebugSAFTransport(), true);
            this.computeDiff("DebugSAFVerbose", this.bean.getDebugSAFVerbose(), otherTyped.getDebugSAFVerbose(), true);
            this.computeDiff("DebugSNMPAgent", this.bean.getDebugSNMPAgent(), otherTyped.getDebugSNMPAgent(), true);
            this.computeDiff("DebugSNMPExtensionProvider", this.bean.getDebugSNMPExtensionProvider(), otherTyped.getDebugSNMPExtensionProvider(), true);
            this.computeDiff("DebugSNMPMib", this.bean.getDebugSNMPMib(), otherTyped.getDebugSNMPMib(), true);
            this.computeDiff("DebugSNMPProtocolTCP", this.bean.getDebugSNMPProtocolTCP(), otherTyped.getDebugSNMPProtocolTCP(), true);
            this.computeDiff("DebugSNMPToolkit", this.bean.getDebugSNMPToolkit(), otherTyped.getDebugSNMPToolkit(), true);
            this.computeDiff("DebugScaContainer", this.bean.getDebugScaContainer(), otherTyped.getDebugScaContainer(), true);
            this.computeDiff("DebugScrubberStartService", this.bean.getDebugScrubberStartService(), otherTyped.getDebugScrubberStartService(), true);
            this.computeDiff("DebugSecurity", this.bean.getDebugSecurity(), otherTyped.getDebugSecurity(), true);
            this.computeDiff("DebugSecurityAdjudicator", this.bean.getDebugSecurityAdjudicator(), otherTyped.getDebugSecurityAdjudicator(), true);
            this.computeDiff("DebugSecurityAtn", this.bean.getDebugSecurityAtn(), otherTyped.getDebugSecurityAtn(), true);
            this.computeDiff("DebugSecurityAtz", this.bean.getDebugSecurityAtz(), otherTyped.getDebugSecurityAtz(), true);
            this.computeDiff("DebugSecurityAuditor", this.bean.getDebugSecurityAuditor(), otherTyped.getDebugSecurityAuditor(), true);
            this.computeDiff("DebugSecurityCertPath", this.bean.getDebugSecurityCertPath(), otherTyped.getDebugSecurityCertPath(), true);
            this.computeDiff("DebugSecurityCredMap", this.bean.getDebugSecurityCredMap(), otherTyped.getDebugSecurityCredMap(), true);
            this.computeDiff("DebugSecurityEEngine", this.bean.getDebugSecurityEEngine(), otherTyped.getDebugSecurityEEngine(), true);
            this.computeDiff("DebugSecurityEncryptionService", this.bean.getDebugSecurityEncryptionService(), otherTyped.getDebugSecurityEncryptionService(), true);
            this.computeDiff("DebugSecurityJACC", this.bean.getDebugSecurityJACC(), otherTyped.getDebugSecurityJACC(), true);
            this.computeDiff("DebugSecurityJACCNonPolicy", this.bean.getDebugSecurityJACCNonPolicy(), otherTyped.getDebugSecurityJACCNonPolicy(), true);
            this.computeDiff("DebugSecurityJACCPolicy", this.bean.getDebugSecurityJACCPolicy(), otherTyped.getDebugSecurityJACCPolicy(), true);
            this.computeDiff("DebugSecurityKeyStore", this.bean.getDebugSecurityKeyStore(), otherTyped.getDebugSecurityKeyStore(), true);
            this.computeDiff("DebugSecurityPasswordPolicy", this.bean.getDebugSecurityPasswordPolicy(), otherTyped.getDebugSecurityPasswordPolicy(), true);
            this.computeDiff("DebugSecurityPredicate", this.bean.getDebugSecurityPredicate(), otherTyped.getDebugSecurityPredicate(), true);
            if (BootstrapProperties.getIncludeObsoletePropsInDiff()) {
               this.computeDiff("DebugSecurityProfiler", this.bean.getDebugSecurityProfiler(), otherTyped.getDebugSecurityProfiler(), false);
            }

            this.computeDiff("DebugSecurityRealm", this.bean.getDebugSecurityRealm(), otherTyped.getDebugSecurityRealm(), true);
            this.computeDiff("DebugSecurityRoleMap", this.bean.getDebugSecurityRoleMap(), otherTyped.getDebugSecurityRoleMap(), true);
            this.computeDiff("DebugSecuritySAML2Atn", this.bean.getDebugSecuritySAML2Atn(), otherTyped.getDebugSecuritySAML2Atn(), true);
            this.computeDiff("DebugSecuritySAML2CredMap", this.bean.getDebugSecuritySAML2CredMap(), otherTyped.getDebugSecuritySAML2CredMap(), true);
            this.computeDiff("DebugSecuritySAML2Lib", this.bean.getDebugSecuritySAML2Lib(), otherTyped.getDebugSecuritySAML2Lib(), true);
            this.computeDiff("DebugSecuritySAML2Service", this.bean.getDebugSecuritySAML2Service(), otherTyped.getDebugSecuritySAML2Service(), true);
            this.computeDiff("DebugSecuritySAMLAtn", this.bean.getDebugSecuritySAMLAtn(), otherTyped.getDebugSecuritySAMLAtn(), true);
            this.computeDiff("DebugSecuritySAMLCredMap", this.bean.getDebugSecuritySAMLCredMap(), otherTyped.getDebugSecuritySAMLCredMap(), true);
            this.computeDiff("DebugSecuritySAMLLib", this.bean.getDebugSecuritySAMLLib(), otherTyped.getDebugSecuritySAMLLib(), true);
            this.computeDiff("DebugSecuritySAMLService", this.bean.getDebugSecuritySAMLService(), otherTyped.getDebugSecuritySAMLService(), true);
            this.computeDiff("DebugSecuritySSL", this.bean.getDebugSecuritySSL(), otherTyped.getDebugSecuritySSL(), true);
            this.computeDiff("DebugSecuritySSLEaten", this.bean.getDebugSecuritySSLEaten(), otherTyped.getDebugSecuritySSLEaten(), true);
            this.computeDiff("DebugSecurityService", this.bean.getDebugSecurityService(), otherTyped.getDebugSecurityService(), true);
            this.computeDiff("DebugSecurityUserLockout", this.bean.getDebugSecurityUserLockout(), otherTyped.getDebugSecurityUserLockout(), true);
            this.computeDiff("DebugSelfTuning", this.bean.getDebugSelfTuning(), otherTyped.getDebugSelfTuning(), true);
            this.computeDiff("DebugServerLifeCycle", this.bean.getDebugServerLifeCycle(), otherTyped.getDebugServerLifeCycle(), true);
            this.computeDiff("DebugServerMigration", this.bean.getDebugServerMigration(), otherTyped.getDebugServerMigration(), true);
            this.computeDiff("DebugServerRuntime", this.bean.getDebugServerRuntime(), otherTyped.getDebugServerRuntime(), true);
            this.computeDiff("DebugServerShutdownStatistics", this.bean.getDebugServerShutdownStatistics(), otherTyped.getDebugServerShutdownStatistics(), true);
            this.computeDiff("DebugServerShutdownTimer", this.bean.getDebugServerShutdownTimer(), otherTyped.getDebugServerShutdownTimer(), true);
            this.computeDiff("DebugServerStartStatistics", this.bean.getDebugServerStartStatistics(), otherTyped.getDebugServerStartStatistics(), true);
            this.computeDiff("DebugServerStartupTimer", this.bean.getDebugServerStartupTimer(), otherTyped.getDebugServerStartupTimer(), true);
            this.computeDiff("DebugSingletonServices", this.bean.getDebugSingletonServices(), otherTyped.getDebugSingletonServices(), true);
            this.computeDiff("DebugSituationalConfig", this.bean.getDebugSituationalConfig(), otherTyped.getDebugSituationalConfig(), true);
            this.computeDiff("DebugSpringStatistics", this.bean.getDebugSpringStatistics(), otherTyped.getDebugSpringStatistics(), true);
            this.computeDiff("DebugStore", this.bean.getDebugStore(), otherTyped.getDebugStore(), true);
            this.computeDiff("DebugStoreAdmin", this.bean.getDebugStoreAdmin(), otherTyped.getDebugStoreAdmin(), true);
            this.computeDiff("DebugStoreCache", this.bean.getDebugStoreCache(), otherTyped.getDebugStoreCache(), true);
            this.computeDiff("DebugStoreIOLogical", this.bean.getDebugStoreIOLogical(), otherTyped.getDebugStoreIOLogical(), true);
            this.computeDiff("DebugStoreIOLogicalBoot", this.bean.getDebugStoreIOLogicalBoot(), otherTyped.getDebugStoreIOLogicalBoot(), true);
            this.computeDiff("DebugStoreIOPhysical", this.bean.getDebugStoreIOPhysical(), otherTyped.getDebugStoreIOPhysical(), true);
            this.computeDiff("DebugStoreIOPhysicalVerbose", this.bean.getDebugStoreIOPhysicalVerbose(), otherTyped.getDebugStoreIOPhysicalVerbose(), true);
            this.computeDiff("DebugStoreRCM", this.bean.getDebugStoreRCM(), otherTyped.getDebugStoreRCM(), true);
            this.computeDiff("DebugStoreRCMVerbose", this.bean.getDebugStoreRCMVerbose(), otherTyped.getDebugStoreRCMVerbose(), true);
            this.computeDiff("DebugStoreXA", this.bean.getDebugStoreXA(), otherTyped.getDebugStoreXA(), true);
            this.computeDiff("DebugStoreXAVerbose", this.bean.getDebugStoreXAVerbose(), otherTyped.getDebugStoreXAVerbose(), true);
            this.computeDiff("DebugStubGeneration", this.bean.getDebugStubGeneration(), otherTyped.getDebugStubGeneration(), true);
            this.computeDiff("DebugTunnelingConnection", this.bean.getDebugTunnelingConnection(), otherTyped.getDebugTunnelingConnection(), false);
            this.computeDiff("DebugTunnelingConnectionTimeout", this.bean.getDebugTunnelingConnectionTimeout(), otherTyped.getDebugTunnelingConnectionTimeout(), false);
            this.computeDiff("DebugURLResolution", this.bean.getDebugURLResolution(), otherTyped.getDebugURLResolution(), true);
            this.computeDiff("DebugUnicastMessaging", this.bean.getDebugUnicastMessaging(), otherTyped.getDebugUnicastMessaging(), true);
            this.computeDiff("DebugValidation", this.bean.getDebugValidation(), otherTyped.getDebugValidation(), true);
            this.computeDiff("DebugValidationClassLoading", this.bean.getDebugValidationClassLoading(), otherTyped.getDebugValidationClassLoading(), true);
            this.computeDiff("DebugVerboseRCM", this.bean.getDebugVerboseRCM(), otherTyped.getDebugVerboseRCM(), true);
            this.computeDiff("DebugWANReplicationDetails", this.bean.getDebugWANReplicationDetails(), otherTyped.getDebugWANReplicationDetails(), true);
            this.computeDiff("DebugWTCConfig", this.bean.getDebugWTCConfig(), otherTyped.getDebugWTCConfig(), true);
            this.computeDiff("DebugWTCCorbaEx", this.bean.getDebugWTCCorbaEx(), otherTyped.getDebugWTCCorbaEx(), true);
            this.computeDiff("DebugWTCGwtEx", this.bean.getDebugWTCGwtEx(), otherTyped.getDebugWTCGwtEx(), true);
            this.computeDiff("DebugWTCJatmiEx", this.bean.getDebugWTCJatmiEx(), otherTyped.getDebugWTCJatmiEx(), true);
            this.computeDiff("DebugWTCTDomPdu", this.bean.getDebugWTCTDomPdu(), otherTyped.getDebugWTCTDomPdu(), true);
            this.computeDiff("DebugWTCTdomPdu", this.bean.getDebugWTCTdomPdu(), otherTyped.getDebugWTCTdomPdu(), true);
            this.computeDiff("DebugWTCUData", this.bean.getDebugWTCUData(), otherTyped.getDebugWTCUData(), true);
            this.computeDiff("DebugWTCtBridgeEx", this.bean.getDebugWTCtBridgeEx(), otherTyped.getDebugWTCtBridgeEx(), true);
            this.computeDiff("DebugWatchScalingActions", this.bean.getDebugWatchScalingActions(), otherTyped.getDebugWatchScalingActions(), true);
            this.computeDiff("DebugWebAppDI", this.bean.getDebugWebAppDI(), otherTyped.getDebugWebAppDI(), true);
            this.computeDiff("DebugWebAppIdentityAssertion", this.bean.getDebugWebAppIdentityAssertion(), otherTyped.getDebugWebAppIdentityAssertion(), true);
            this.computeDiff("DebugWebAppModule", this.bean.getDebugWebAppModule(), otherTyped.getDebugWebAppModule(), true);
            this.computeDiff("DebugWebAppSecurity", this.bean.getDebugWebAppSecurity(), otherTyped.getDebugWebAppSecurity(), true);
            this.computeDiff("DebugWebSocket", this.bean.getDebugWebSocket(), otherTyped.getDebugWebSocket(), true);
            this.computeDiff("DebugXMLEntityCacheDebugLevel", this.bean.getDebugXMLEntityCacheDebugLevel(), otherTyped.getDebugXMLEntityCacheDebugLevel(), false);
            this.computeDiff("DebugXMLEntityCacheDebugName", this.bean.getDebugXMLEntityCacheDebugName(), otherTyped.getDebugXMLEntityCacheDebugName(), false);
            this.computeDiff("DebugXMLEntityCacheIncludeClass", this.bean.getDebugXMLEntityCacheIncludeClass(), otherTyped.getDebugXMLEntityCacheIncludeClass(), false);
            this.computeDiff("DebugXMLEntityCacheIncludeLocation", this.bean.getDebugXMLEntityCacheIncludeLocation(), otherTyped.getDebugXMLEntityCacheIncludeLocation(), false);
            this.computeDiff("DebugXMLEntityCacheIncludeName", this.bean.getDebugXMLEntityCacheIncludeName(), otherTyped.getDebugXMLEntityCacheIncludeName(), false);
            this.computeDiff("DebugXMLEntityCacheIncludeTime", this.bean.getDebugXMLEntityCacheIncludeTime(), otherTyped.getDebugXMLEntityCacheIncludeTime(), false);
            this.computeDiff("DebugXMLEntityCacheUseShortClass", this.bean.getDebugXMLEntityCacheUseShortClass(), otherTyped.getDebugXMLEntityCacheUseShortClass(), false);
            this.computeDiff("DebugXMLRegistryDebugLevel", this.bean.getDebugXMLRegistryDebugLevel(), otherTyped.getDebugXMLRegistryDebugLevel(), false);
            this.computeDiff("DebugXMLRegistryDebugName", this.bean.getDebugXMLRegistryDebugName(), otherTyped.getDebugXMLRegistryDebugName(), false);
            this.computeDiff("DebugXMLRegistryIncludeClass", this.bean.getDebugXMLRegistryIncludeClass(), otherTyped.getDebugXMLRegistryIncludeClass(), false);
            this.computeDiff("DebugXMLRegistryIncludeLocation", this.bean.getDebugXMLRegistryIncludeLocation(), otherTyped.getDebugXMLRegistryIncludeLocation(), false);
            this.computeDiff("DebugXMLRegistryIncludeName", this.bean.getDebugXMLRegistryIncludeName(), otherTyped.getDebugXMLRegistryIncludeName(), false);
            this.computeDiff("DebugXMLRegistryIncludeTime", this.bean.getDebugXMLRegistryIncludeTime(), otherTyped.getDebugXMLRegistryIncludeTime(), false);
            this.computeDiff("DebugXMLRegistryUseShortClass", this.bean.getDebugXMLRegistryUseShortClass(), otherTyped.getDebugXMLRegistryUseShortClass(), false);
            this.computeDiff("DefaultStore", this.bean.getDefaultStore(), otherTyped.getDefaultStore(), true);
            this.computeDiff("DiagnosticContextDebugMode", this.bean.getDiagnosticContextDebugMode(), otherTyped.getDiagnosticContextDebugMode(), true);
            this.computeDiff("ForceShutdownTimeoutNumOfThreadDump", this.bean.getForceShutdownTimeoutNumOfThreadDump(), otherTyped.getForceShutdownTimeoutNumOfThreadDump(), true);
            this.computeDiff("ForceShutdownTimeoutThreadDumpInterval", this.bean.getForceShutdownTimeoutThreadDumpInterval(), otherTyped.getForceShutdownTimeoutThreadDumpInterval(), true);
            this.computeDiff("GlassFishWebAppParser", this.bean.getGlassFishWebAppParser(), otherTyped.getGlassFishWebAppParser(), true);
            this.computeDiff("GracefulShutdownTimeoutNumOfThreadDump", this.bean.getGracefulShutdownTimeoutNumOfThreadDump(), otherTyped.getGracefulShutdownTimeoutNumOfThreadDump(), true);
            this.computeDiff("GracefulShutdownTimeoutThreadDumpInterval", this.bean.getGracefulShutdownTimeoutThreadDumpInterval(), otherTyped.getGracefulShutdownTimeoutThreadDumpInterval(), true);
            this.computeDiff("ListenThreadDebug", this.bean.getListenThreadDebug(), otherTyped.getListenThreadDebug(), false);
            this.computeDiff("MagicThreadDumpBackToSocket", this.bean.getMagicThreadDumpBackToSocket(), otherTyped.getMagicThreadDumpBackToSocket(), false);
            this.computeDiff("MagicThreadDumpFile", this.bean.getMagicThreadDumpFile(), otherTyped.getMagicThreadDumpFile(), false);
            this.computeDiff("MagicThreadDumpHost", this.bean.getMagicThreadDumpHost(), otherTyped.getMagicThreadDumpHost(), false);
            this.computeDiff("MasterDeployer", this.bean.getMasterDeployer(), otherTyped.getMasterDeployer(), false);
            this.computeDiff("OSGiForApps", this.bean.getOSGiForApps(), otherTyped.getOSGiForApps(), true);
            this.computeDiff("PartitionEvenInterceptor", this.bean.getPartitionEvenInterceptor(), otherTyped.getPartitionEvenInterceptor(), true);
            this.computeDiff("PortablePartitionHelper", this.bean.getPortablePartitionHelper(), otherTyped.getPortablePartitionHelper(), true);
            this.computeDiff("RedefiningClassLoader", this.bean.getRedefiningClassLoader(), otherTyped.getRedefiningClassLoader(), true);
            this.computeDiff("ScriptExecutorCommand", this.bean.getScriptExecutorCommand(), otherTyped.getScriptExecutorCommand(), true);
            this.computeDiff("SecurityEncryptionService", this.bean.getSecurityEncryptionService(), otherTyped.getSecurityEncryptionService(), true);
            this.computeDiff("Server", this.bean.getServer(), otherTyped.getServer(), false);
            this.computeDiff("SlaveDeployer", this.bean.getSlaveDeployer(), otherTyped.getSlaveDeployer(), false);
            this.computeDiff("StartupTimeoutNumOfThreadDump", this.bean.getStartupTimeoutNumOfThreadDump(), otherTyped.getStartupTimeoutNumOfThreadDump(), true);
            this.computeDiff("StartupTimeoutThreadDumpInterval", this.bean.getStartupTimeoutThreadDumpInterval(), otherTyped.getStartupTimeoutThreadDumpInterval(), true);
            this.computeDiff("T3HttpUpgradeHandler", this.bean.getT3HttpUpgradeHandler(), otherTyped.getT3HttpUpgradeHandler(), true);
            this.computeDiff("WarExtraction", this.bean.getWarExtraction(), otherTyped.getWarExtraction(), true);
            this.computeDiff("WebModule", this.bean.getWebModule(), otherTyped.getWebModule(), false);
            this.computeDiff("MagicThreadDumpEnabled", this.bean.isMagicThreadDumpEnabled(), otherTyped.isMagicThreadDumpEnabled(), false);
            this.computeDiff("PartitionDebugLoggingEnabled", this.bean.isPartitionDebugLoggingEnabled(), otherTyped.isPartitionDebugLoggingEnabled(), true);
         } catch (Exception var3) {
            throw (Error)(new AssertionError("Impossible Exception")).initCause(var3);
         }
      }

      protected void applyPropertyUpdate(BeanUpdateEvent event, BeanUpdateEvent.PropertyUpdate update) {
         try {
            ServerDebugMBeanImpl original = (ServerDebugMBeanImpl)event.getSourceBean();
            ServerDebugMBeanImpl proposed = (ServerDebugMBeanImpl)event.getProposedBean();
            String prop = update.getPropertyName();
            int type = update.getUpdateType();
            if (!update.isDerivedUpdate()) {
               if (prop.equals("ApplicationContainer")) {
                  original.setApplicationContainer(proposed.getApplicationContainer());
                  original._conditionalUnset(update.isUnsetUpdate(), 257);
               } else if (prop.equals("BugReportServiceWsdlUrl")) {
                  original.setBugReportServiceWsdlUrl(proposed.getBugReportServiceWsdlUrl());
                  original._conditionalUnset(update.isUnsetUpdate(), 49);
               } else if (prop.equals("ClassChangeNotifier")) {
                  original.setClassChangeNotifier(proposed.getClassChangeNotifier());
                  original._conditionalUnset(update.isUnsetUpdate(), 64);
               } else if (prop.equals("ClassFinder")) {
                  original.setClassFinder(proposed.getClassFinder());
                  original._conditionalUnset(update.isUnsetUpdate(), 258);
               } else if (prop.equals("ClassLoader")) {
                  original.setClassLoader(proposed.getClassLoader());
                  original._conditionalUnset(update.isUnsetUpdate(), 263);
               } else if (prop.equals("ClassLoaderVerbose")) {
                  original.setClassLoaderVerbose(proposed.getClassLoaderVerbose());
                  original._conditionalUnset(update.isUnsetUpdate(), 264);
               } else if (prop.equals("ClassloaderWebApp")) {
                  original.setClassloaderWebApp(proposed.getClassloaderWebApp());
                  original._conditionalUnset(update.isUnsetUpdate(), 265);
               } else if (prop.equals("ClasspathServlet")) {
                  original.setClasspathServlet(proposed.getClasspathServlet());
                  original._conditionalUnset(update.isUnsetUpdate(), 259);
               } else if (prop.equals("DebugAbbrevs")) {
                  original.setDebugAbbrevs(proposed.getDebugAbbrevs());
                  original._conditionalUnset(update.isUnsetUpdate(), 409);
               } else if (prop.equals("DebugAppAnnotations")) {
                  original.setDebugAppAnnotations(proposed.getDebugAppAnnotations());
                  original._conditionalUnset(update.isUnsetUpdate(), 59);
               } else if (prop.equals("DebugAppClient")) {
                  original.setDebugAppClient(proposed.getDebugAppClient());
                  original._conditionalUnset(update.isUnsetUpdate(), 410);
               } else if (prop.equals("DebugAppContainer")) {
                  original.setDebugAppContainer(proposed.getDebugAppContainer());
                  original._conditionalUnset(update.isUnsetUpdate(), 57);
               } else if (prop.equals("DebugAppContainerTools")) {
                  original.setDebugAppContainerTools(proposed.getDebugAppContainerTools());
                  original._conditionalUnset(update.isUnsetUpdate(), 411);
               } else if (prop.equals("DebugAppTiming")) {
                  original.setDebugAppTiming(proposed.getDebugAppTiming());
                  original._conditionalUnset(update.isUnsetUpdate(), 412);
               } else if (prop.equals("DebugAsyncQueue")) {
                  original.setDebugAsyncQueue(proposed.getDebugAsyncQueue());
                  original._conditionalUnset(update.isUnsetUpdate(), 94);
               } else if (prop.equals("DebugAttach")) {
                  original.setDebugAttach(proposed.getDebugAttach());
                  original._conditionalUnset(update.isUnsetUpdate(), 413);
               } else if (prop.equals("DebugBackgroundDeployment")) {
                  original.setDebugBackgroundDeployment(proposed.getDebugBackgroundDeployment());
                  original._conditionalUnset(update.isUnsetUpdate(), 414);
               } else if (prop.equals("DebugBatchConnector")) {
                  original.setDebugBatchConnector(proposed.getDebugBatchConnector());
                  original._conditionalUnset(update.isUnsetUpdate(), 415);
               } else if (prop.equals("DebugBeanTreeHarvesterControl")) {
                  original.setDebugBeanTreeHarvesterControl(proposed.getDebugBeanTreeHarvesterControl());
                  original._conditionalUnset(update.isUnsetUpdate(), 289);
               } else if (prop.equals("DebugBeanTreeHarvesterDataCollection")) {
                  original.setDebugBeanTreeHarvesterDataCollection(proposed.getDebugBeanTreeHarvesterDataCollection());
                  original._conditionalUnset(update.isUnsetUpdate(), 291);
               } else if (prop.equals("DebugBeanTreeHarvesterResolution")) {
                  original.setDebugBeanTreeHarvesterResolution(proposed.getDebugBeanTreeHarvesterResolution());
                  original._conditionalUnset(update.isUnsetUpdate(), 290);
               } else if (prop.equals("DebugBeanTreeHarvesterThreading")) {
                  original.setDebugBeanTreeHarvesterThreading(proposed.getDebugBeanTreeHarvesterThreading());
                  original._conditionalUnset(update.isUnsetUpdate(), 292);
               } else if (prop.equals("DebugBootstrapServlet")) {
                  original.setDebugBootstrapServlet(proposed.getDebugBootstrapServlet());
                  original._conditionalUnset(update.isUnsetUpdate(), 266);
               } else if (prop.equals("DebugBuzzProtocol")) {
                  original.setDebugBuzzProtocol(proposed.getDebugBuzzProtocol());
                  original._conditionalUnset(update.isUnsetUpdate(), 392);
               } else if (prop.equals("DebugBuzzProtocolDetails")) {
                  original.setDebugBuzzProtocolDetails(proposed.getDebugBuzzProtocolDetails());
                  original._conditionalUnset(update.isUnsetUpdate(), 393);
               } else if (prop.equals("DebugBuzzProtocolHttp")) {
                  original.setDebugBuzzProtocolHttp(proposed.getDebugBuzzProtocolHttp());
                  original._conditionalUnset(update.isUnsetUpdate(), 394);
               } else if (prop.equals("DebugCAT")) {
                  original.setDebugCAT(proposed.getDebugCAT());
                  original._conditionalUnset(update.isUnsetUpdate(), 416);
               } else if (prop.equals("DebugCertRevocCheck")) {
                  original.setDebugCertRevocCheck(proposed.getDebugCertRevocCheck());
                  original._conditionalUnset(update.isUnsetUpdate(), 175);
               } else if (prop.equals("DebugChannel")) {
                  original.setDebugChannel(proposed.getDebugChannel());
                  original._conditionalUnset(update.isUnsetUpdate(), 417);
               } else if (prop.equals("DebugClassLoadingConsistencyChecker")) {
                  original.setDebugClassLoadingConsistencyChecker(proposed.getDebugClassLoadingConsistencyChecker());
                  original._conditionalUnset(update.isUnsetUpdate(), 418);
               } else if (prop.equals("DebugClassLoadingContextualTrace")) {
                  original.setDebugClassLoadingContextualTrace(proposed.getDebugClassLoadingContextualTrace());
                  original._conditionalUnset(update.isUnsetUpdate(), 262);
               } else if (prop.equals("DebugClassLoadingVerbose")) {
                  original.setDebugClassLoadingVerbose(proposed.getDebugClassLoadingVerbose());
                  original._conditionalUnset(update.isUnsetUpdate(), 261);
               } else if (prop.equals("DebugClassRedef")) {
                  original.setDebugClassRedef(proposed.getDebugClassRedef());
                  original._conditionalUnset(update.isUnsetUpdate(), 60);
               } else if (prop.equals("DebugClassSize")) {
                  original.setDebugClassSize(proposed.getDebugClassSize());
                  original._conditionalUnset(update.isUnsetUpdate(), 62);
               } else if (prop.equals("DebugCluster")) {
                  original.setDebugCluster(proposed.getDebugCluster());
                  original._conditionalUnset(update.isUnsetUpdate(), 89);
               } else if (prop.equals("DebugClusterAnnouncements")) {
                  original.setDebugClusterAnnouncements(proposed.getDebugClusterAnnouncements());
                  original._conditionalUnset(update.isUnsetUpdate(), 91);
               } else if (prop.equals("DebugClusterFragments")) {
                  original.setDebugClusterFragments(proposed.getDebugClusterFragments());
                  original._conditionalUnset(update.isUnsetUpdate(), 88);
               } else if (prop.equals("DebugClusterHeartbeats")) {
                  original.setDebugClusterHeartbeats(proposed.getDebugClusterHeartbeats());
                  original._conditionalUnset(update.isUnsetUpdate(), 90);
               } else if (prop.equals("DebugCoherence")) {
                  original.setDebugCoherence(proposed.getDebugCoherence());
                  original._conditionalUnset(update.isUnsetUpdate(), 419);
               } else if (prop.equals("DebugConcurrent")) {
                  original.setDebugConcurrent(proposed.getDebugConcurrent());
                  original._conditionalUnset(update.isUnsetUpdate(), 395);
               } else if (prop.equals("DebugConcurrentContext")) {
                  original.setDebugConcurrentContext(proposed.getDebugConcurrentContext());
                  original._conditionalUnset(update.isUnsetUpdate(), 396);
               } else if (prop.equals("DebugConcurrentMES")) {
                  original.setDebugConcurrentMES(proposed.getDebugConcurrentMES());
                  original._conditionalUnset(update.isUnsetUpdate(), 398);
               } else if (prop.equals("DebugConcurrentMSES")) {
                  original.setDebugConcurrentMSES(proposed.getDebugConcurrentMSES());
                  original._conditionalUnset(update.isUnsetUpdate(), 399);
               } else if (prop.equals("DebugConcurrentMTF")) {
                  original.setDebugConcurrentMTF(proposed.getDebugConcurrentMTF());
                  original._conditionalUnset(update.isUnsetUpdate(), 400);
               } else if (prop.equals("DebugConcurrentTransaction")) {
                  original.setDebugConcurrentTransaction(proposed.getDebugConcurrentTransaction());
                  original._conditionalUnset(update.isUnsetUpdate(), 397);
               } else if (prop.equals("DebugConfigurationEdit")) {
                  original.setDebugConfigurationEdit(proposed.getDebugConfigurationEdit());
                  original._conditionalUnset(update.isUnsetUpdate(), 359);
               } else if (prop.equals("DebugConfigurationRuntime")) {
                  original.setDebugConfigurationRuntime(proposed.getDebugConfigurationRuntime());
                  original._conditionalUnset(update.isUnsetUpdate(), 360);
               } else if (prop.equals("DebugConnectorService")) {
                  original.setDebugConnectorService(proposed.getDebugConnectorService());
                  original._conditionalUnset(update.isUnsetUpdate(), 341);
               } else if (prop.equals("DebugConsensusLeasing")) {
                  original.setDebugConsensusLeasing(proposed.getDebugConsensusLeasing());
                  original._conditionalUnset(update.isUnsetUpdate(), 366);
               } else if (prop.equals("DebugDRSCalls")) {
                  original.setDebugDRSCalls(proposed.getDebugDRSCalls());
                  original._conditionalUnset(update.isUnsetUpdate(), 96);
               } else if (prop.equals("DebugDRSHeartbeats")) {
                  original.setDebugDRSHeartbeats(proposed.getDebugDRSHeartbeats());
                  original._conditionalUnset(update.isUnsetUpdate(), 97);
               } else if (prop.equals("DebugDRSMessages")) {
                  original.setDebugDRSMessages(proposed.getDebugDRSMessages());
                  original._conditionalUnset(update.isUnsetUpdate(), 98);
               } else if (prop.equals("DebugDRSQueues")) {
                  original.setDebugDRSQueues(proposed.getDebugDRSQueues());
                  original._conditionalUnset(update.isUnsetUpdate(), 101);
               } else if (prop.equals("DebugDRSStateTransitions")) {
                  original.setDebugDRSStateTransitions(proposed.getDebugDRSStateTransitions());
                  original._conditionalUnset(update.isUnsetUpdate(), 100);
               } else if (prop.equals("DebugDRSUpdateStatus")) {
                  original.setDebugDRSUpdateStatus(proposed.getDebugDRSUpdateStatus());
                  original._conditionalUnset(update.isUnsetUpdate(), 99);
               } else if (prop.equals("DebugDataSourceInterceptor")) {
                  original.setDebugDataSourceInterceptor(proposed.getDebugDataSourceInterceptor());
                  original._conditionalUnset(update.isUnsetUpdate(), 420);
               } else if (prop.equals("DebugDebugPatches")) {
                  original.setDebugDebugPatches(proposed.getDebugDebugPatches());
                  original._conditionalUnset(update.isUnsetUpdate(), 421);
               } else if (prop.equals("DebugDefaultStoreVerbose")) {
                  original.setDebugDefaultStoreVerbose(proposed.getDebugDefaultStoreVerbose());
                  original._conditionalUnset(update.isUnsetUpdate(), 422);
               } else if (prop.equals("DebugDeploy")) {
                  original.setDebugDeploy(proposed.getDebugDeploy());
                  original._conditionalUnset(update.isUnsetUpdate(), 247);
               } else if (prop.equals("DebugDeployment")) {
                  original.setDebugDeployment(proposed.getDebugDeployment());
                  original._conditionalUnset(update.isUnsetUpdate(), 248);
               } else if (prop.equals("DebugDeploymentConcise")) {
                  original.setDebugDeploymentConcise(proposed.getDebugDeploymentConcise());
                  original._conditionalUnset(update.isUnsetUpdate(), 249);
               } else if (prop.equals("DebugDeploymentPlan")) {
                  original.setDebugDeploymentPlan(proposed.getDebugDeploymentPlan());
                  original._conditionalUnset(update.isUnsetUpdate(), 390);
               } else if (prop.equals("DebugDeploymentService")) {
                  original.setDebugDeploymentService(proposed.getDebugDeploymentService());
                  original._conditionalUnset(update.isUnsetUpdate(), 250);
               } else if (prop.equals("DebugDeploymentServiceInternal")) {
                  original.setDebugDeploymentServiceInternal(proposed.getDebugDeploymentServiceInternal());
                  original._conditionalUnset(update.isUnsetUpdate(), 252);
               } else if (prop.equals("DebugDeploymentServiceStatusUpdates")) {
                  original.setDebugDeploymentServiceStatusUpdates(proposed.getDebugDeploymentServiceStatusUpdates());
                  original._conditionalUnset(update.isUnsetUpdate(), 251);
               } else if (prop.equals("DebugDeploymentServiceTransport")) {
                  original.setDebugDeploymentServiceTransport(proposed.getDebugDeploymentServiceTransport());
                  original._conditionalUnset(update.isUnsetUpdate(), 253);
               } else if (prop.equals("DebugDeploymentServiceTransportHttp")) {
                  original.setDebugDeploymentServiceTransportHttp(proposed.getDebugDeploymentServiceTransportHttp());
                  original._conditionalUnset(update.isUnsetUpdate(), 254);
               } else if (prop.equals("DebugDescriptor")) {
                  original.setDebugDescriptor(proposed.getDebugDescriptor());
                  original._conditionalUnset(update.isUnsetUpdate(), 387);
               } else if (prop.equals("DebugDiagnosticAccessor")) {
                  original.setDebugDiagnosticAccessor(proposed.getDebugDiagnosticAccessor());
                  original._conditionalUnset(update.isUnsetUpdate(), 321);
               } else if (prop.equals("DebugDiagnosticArchive")) {
                  original.setDebugDiagnosticArchive(proposed.getDebugDiagnosticArchive());
                  original._conditionalUnset(update.isUnsetUpdate(), 276);
               } else if (prop.equals("DebugDiagnosticArchiveRetirement")) {
                  original.setDebugDiagnosticArchiveRetirement(proposed.getDebugDiagnosticArchiveRetirement());
                  original._conditionalUnset(update.isUnsetUpdate(), 280);
               } else if (prop.equals("DebugDiagnosticCollections")) {
                  original.setDebugDiagnosticCollections(proposed.getDebugDiagnosticCollections());
                  original._conditionalUnset(update.isUnsetUpdate(), 322);
               } else if (prop.equals("DebugDiagnosticContext")) {
                  original.setDebugDiagnosticContext(proposed.getDebugDiagnosticContext());
                  original._conditionalUnset(update.isUnsetUpdate(), 323);
               } else if (prop.equals("DebugDiagnosticDataGathering")) {
                  original.setDebugDiagnosticDataGathering(proposed.getDebugDiagnosticDataGathering());
                  original._conditionalUnset(update.isUnsetUpdate(), 269);
               } else if (prop.equals("DebugDiagnosticFileArchive")) {
                  original.setDebugDiagnosticFileArchive(proposed.getDebugDiagnosticFileArchive());
                  original._conditionalUnset(update.isUnsetUpdate(), 277);
               } else if (prop.equals("DebugDiagnosticImage")) {
                  original.setDebugDiagnosticImage(proposed.getDebugDiagnosticImage());
                  original._conditionalUnset(update.isUnsetUpdate(), 319);
               } else if (prop.equals("DebugDiagnosticInstrumentation")) {
                  original.setDebugDiagnosticInstrumentation(proposed.getDebugDiagnosticInstrumentation());
                  original._conditionalUnset(update.isUnsetUpdate(), 270);
               } else if (prop.equals("DebugDiagnosticInstrumentationActions")) {
                  original.setDebugDiagnosticInstrumentationActions(proposed.getDebugDiagnosticInstrumentationActions());
                  original._conditionalUnset(update.isUnsetUpdate(), 273);
               } else if (prop.equals("DebugDiagnosticInstrumentationClassInfo")) {
                  original.setDebugDiagnosticInstrumentationClassInfo(proposed.getDebugDiagnosticInstrumentationClassInfo());
                  original._conditionalUnset(update.isUnsetUpdate(), 423);
               } else if (prop.equals("DebugDiagnosticInstrumentationConfig")) {
                  original.setDebugDiagnosticInstrumentationConfig(proposed.getDebugDiagnosticInstrumentationConfig());
                  original._conditionalUnset(update.isUnsetUpdate(), 275);
               } else if (prop.equals("DebugDiagnosticInstrumentationEvents")) {
                  original.setDebugDiagnosticInstrumentationEvents(proposed.getDebugDiagnosticInstrumentationEvents());
                  original._conditionalUnset(update.isUnsetUpdate(), 274);
               } else if (prop.equals("DebugDiagnosticInstrumentationResult")) {
                  original.setDebugDiagnosticInstrumentationResult(proposed.getDebugDiagnosticInstrumentationResult());
                  original._conditionalUnset(update.isUnsetUpdate(), 424);
               } else if (prop.equals("DebugDiagnosticInstrumentationWeaving")) {
                  original.setDebugDiagnosticInstrumentationWeaving(proposed.getDebugDiagnosticInstrumentationWeaving());
                  original._conditionalUnset(update.isUnsetUpdate(), 271);
               } else if (prop.equals("DebugDiagnosticInstrumentationWeavingMatches")) {
                  original.setDebugDiagnosticInstrumentationWeavingMatches(proposed.getDebugDiagnosticInstrumentationWeavingMatches());
                  original._conditionalUnset(update.isUnsetUpdate(), 272);
               } else if (prop.equals("DebugDiagnosticJdbcArchive")) {
                  original.setDebugDiagnosticJdbcArchive(proposed.getDebugDiagnosticJdbcArchive());
                  original._conditionalUnset(update.isUnsetUpdate(), 279);
               } else if (prop.equals("DebugDiagnosticLifecycleHandlers")) {
                  original.setDebugDiagnosticLifecycleHandlers(proposed.getDebugDiagnosticLifecycleHandlers());
                  original._conditionalUnset(update.isUnsetUpdate(), 268);
               } else if (prop.equals("DebugDiagnosticNotifications")) {
                  original.setDebugDiagnosticNotifications(proposed.getDebugDiagnosticNotifications());
                  original._conditionalUnset(update.isUnsetUpdate(), 425);
               } else if (prop.equals("DebugDiagnosticQuery")) {
                  original.setDebugDiagnosticQuery(proposed.getDebugDiagnosticQuery());
                  original._conditionalUnset(update.isUnsetUpdate(), 320);
               } else if (prop.equals("DebugDiagnosticRuntimeControlDriver")) {
                  original.setDebugDiagnosticRuntimeControlDriver(proposed.getDebugDiagnosticRuntimeControlDriver());
                  original._conditionalUnset(update.isUnsetUpdate(), 282);
               } else if (prop.equals("DebugDiagnosticRuntimeControlService")) {
                  original.setDebugDiagnosticRuntimeControlService(proposed.getDebugDiagnosticRuntimeControlService());
                  original._conditionalUnset(update.isUnsetUpdate(), 283);
               } else if (prop.equals("DebugDiagnosticWatch")) {
                  original.setDebugDiagnosticWatch(proposed.getDebugDiagnosticWatch());
                  original._conditionalUnset(update.isUnsetUpdate(), 330);
               } else if (prop.equals("DebugDiagnosticWatchEvents")) {
                  original.setDebugDiagnosticWatchEvents(proposed.getDebugDiagnosticWatchEvents());
                  original._conditionalUnset(update.isUnsetUpdate(), 331);
               } else if (prop.equals("DebugDiagnosticWatchEventsDetails")) {
                  original.setDebugDiagnosticWatchEventsDetails(proposed.getDebugDiagnosticWatchEventsDetails());
                  original._conditionalUnset(update.isUnsetUpdate(), 332);
               } else if (prop.equals("DebugDiagnosticWlstoreArchive")) {
                  original.setDebugDiagnosticWlstoreArchive(proposed.getDebugDiagnosticWlstoreArchive());
                  original._conditionalUnset(update.isUnsetUpdate(), 278);
               } else if (prop.equals("DebugDiagnosticsBeanExtensionResolver")) {
                  original.setDebugDiagnosticsBeanExtensionResolver(proposed.getDebugDiagnosticsBeanExtensionResolver());
                  original._conditionalUnset(update.isUnsetUpdate(), 304);
               } else if (prop.equals("DebugDiagnosticsBeanInfoProviders")) {
                  original.setDebugDiagnosticsBeanInfoProviders(proposed.getDebugDiagnosticsBeanInfoProviders());
                  original._conditionalUnset(update.isUnsetUpdate(), 302);
               } else if (prop.equals("DebugDiagnosticsELContext")) {
                  original.setDebugDiagnosticsELContext(proposed.getDebugDiagnosticsELContext());
                  original._conditionalUnset(update.isUnsetUpdate(), 307);
               } else if (prop.equals("DebugDiagnosticsELResolver")) {
                  original.setDebugDiagnosticsELResolver(proposed.getDebugDiagnosticsELResolver());
                  original._conditionalUnset(update.isUnsetUpdate(), 303);
               } else if (prop.equals("DebugDiagnosticsExpressionEvaluators")) {
                  original.setDebugDiagnosticsExpressionEvaluators(proposed.getDebugDiagnosticsExpressionEvaluators());
                  original._conditionalUnset(update.isUnsetUpdate(), 300);
               } else if (prop.equals("DebugDiagnosticsExpressionFunctionMapper")) {
                  original.setDebugDiagnosticsExpressionFunctionMapper(proposed.getDebugDiagnosticsExpressionFunctionMapper());
                  original._conditionalUnset(update.isUnsetUpdate(), 310);
               } else if (prop.equals("DebugDiagnosticsExpressionFunctions")) {
                  original.setDebugDiagnosticsExpressionFunctions(proposed.getDebugDiagnosticsExpressionFunctions());
                  original._conditionalUnset(update.isUnsetUpdate(), 309);
               } else if (prop.equals("DebugDiagnosticsExpressionMetrics")) {
                  original.setDebugDiagnosticsExpressionMetrics(proposed.getDebugDiagnosticsExpressionMetrics());
                  original._conditionalUnset(update.isUnsetUpdate(), 301);
               } else if (prop.equals("DebugDiagnosticsExpressionPoller")) {
                  original.setDebugDiagnosticsExpressionPoller(proposed.getDebugDiagnosticsExpressionPoller());
                  original._conditionalUnset(update.isUnsetUpdate(), 308);
               } else if (prop.equals("DebugDiagnosticsExpressionPollerBuffer")) {
                  original.setDebugDiagnosticsExpressionPollerBuffer(proposed.getDebugDiagnosticsExpressionPollerBuffer());
                  original._conditionalUnset(update.isUnsetUpdate(), 314);
               } else if (prop.equals("DebugDiagnosticsHarvester")) {
                  original.setDebugDiagnosticsHarvester(proposed.getDebugDiagnosticsHarvester());
                  original._conditionalUnset(update.isUnsetUpdate(), 284);
               } else if (prop.equals("DebugDiagnosticsHarvesterData")) {
                  original.setDebugDiagnosticsHarvesterData(proposed.getDebugDiagnosticsHarvesterData());
                  original._conditionalUnset(update.isUnsetUpdate(), 297);
               } else if (prop.equals("DebugDiagnosticsHarvesterMBeanPlugin")) {
                  original.setDebugDiagnosticsHarvesterMBeanPlugin(proposed.getDebugDiagnosticsHarvesterMBeanPlugin());
                  original._conditionalUnset(update.isUnsetUpdate(), 298);
               } else if (prop.equals("DebugDiagnosticsHarvesterTreeBeanPlugin")) {
                  original.setDebugDiagnosticsHarvesterTreeBeanPlugin(proposed.getDebugDiagnosticsHarvesterTreeBeanPlugin());
                  original._conditionalUnset(update.isUnsetUpdate(), 299);
               } else if (prop.equals("DebugDiagnosticsMBeanELResolver")) {
                  original.setDebugDiagnosticsMBeanELResolver(proposed.getDebugDiagnosticsMBeanELResolver());
                  original._conditionalUnset(update.isUnsetUpdate(), 306);
               } else if (prop.equals("DebugDiagnosticsModule")) {
                  original.setDebugDiagnosticsModule(proposed.getDebugDiagnosticsModule());
                  original._conditionalUnset(update.isUnsetUpdate(), 281);
               } else if (prop.equals("DebugDiagnosticsNotifications")) {
                  original.setDebugDiagnosticsNotifications(proposed.getDebugDiagnosticsNotifications());
                  original._conditionalUnset(update.isUnsetUpdate(), 426);
               } else if (prop.equals("DebugDiagnosticsScriptAction")) {
                  original.setDebugDiagnosticsScriptAction(proposed.getDebugDiagnosticsScriptAction());
                  original._conditionalUnset(update.isUnsetUpdate(), 316);
               } else if (prop.equals("DebugDiagnosticsTimer")) {
                  original.setDebugDiagnosticsTimer(proposed.getDebugDiagnosticsTimer());
                  original._conditionalUnset(update.isUnsetUpdate(), 427);
               } else if (prop.equals("DebugDiagnosticsUtils")) {
                  original.setDebugDiagnosticsUtils(proposed.getDebugDiagnosticsUtils());
                  original._conditionalUnset(update.isUnsetUpdate(), 313);
               } else if (prop.equals("DebugDiagnosticsValueTracingELResolver")) {
                  original.setDebugDiagnosticsValueTracingELResolver(proposed.getDebugDiagnosticsValueTracingELResolver());
                  original._conditionalUnset(update.isUnsetUpdate(), 305);
               } else if (prop.equals("DebugDomainLogHandler")) {
                  original.setDebugDomainLogHandler(proposed.getDebugDomainLogHandler());
                  original._conditionalUnset(update.isUnsetUpdate(), 328);
               } else if (prop.equals("DebugDomainUpgradeServerService")) {
                  original.setDebugDomainUpgradeServerService(proposed.getDebugDomainUpgradeServerService());
                  original._conditionalUnset(update.isUnsetUpdate(), 428);
               } else if (prop.equals("DebugDynamicSingletonServices")) {
                  original.setDebugDynamicSingletonServices(proposed.getDebugDynamicSingletonServices());
                  original._conditionalUnset(update.isUnsetUpdate(), 403);
               } else if (prop.equals("DebugEjbCaching")) {
                  original.setDebugEjbCaching(proposed.getDebugEjbCaching());
                  original._conditionalUnset(update.isUnsetUpdate(), 76);
               } else if (prop.equals("DebugEjbCmpDeployment")) {
                  original.setDebugEjbCmpDeployment(proposed.getDebugEjbCmpDeployment());
                  original._conditionalUnset(update.isUnsetUpdate(), 83);
               } else if (prop.equals("DebugEjbCmpRuntime")) {
                  original.setDebugEjbCmpRuntime(proposed.getDebugEjbCmpRuntime());
                  original._conditionalUnset(update.isUnsetUpdate(), 84);
               } else if (prop.equals("DebugEjbCompilation")) {
                  original.setDebugEjbCompilation(proposed.getDebugEjbCompilation());
                  original._conditionalUnset(update.isUnsetUpdate(), 73);
               } else if (prop.equals("DebugEjbDeployment")) {
                  original.setDebugEjbDeployment(proposed.getDebugEjbDeployment());
                  original._conditionalUnset(update.isUnsetUpdate(), 74);
               } else if (prop.equals("DebugEjbInvoke")) {
                  original.setDebugEjbInvoke(proposed.getDebugEjbInvoke());
                  original._conditionalUnset(update.isUnsetUpdate(), 81);
               } else if (prop.equals("DebugEjbLocking")) {
                  original.setDebugEjbLocking(proposed.getDebugEjbLocking());
                  original._conditionalUnset(update.isUnsetUpdate(), 78);
               } else if (prop.equals("DebugEjbMdbConnection")) {
                  original.setDebugEjbMdbConnection(proposed.getDebugEjbMdbConnection());
                  original._conditionalUnset(update.isUnsetUpdate(), 75);
               } else if (prop.equals("DebugEjbMetadata")) {
                  original.setDebugEjbMetadata(proposed.getDebugEjbMetadata());
                  original._conditionalUnset(update.isUnsetUpdate(), 85);
               } else if (prop.equals("DebugEjbPooling")) {
                  original.setDebugEjbPooling(proposed.getDebugEjbPooling());
                  original._conditionalUnset(update.isUnsetUpdate(), 79);
               } else if (prop.equals("DebugEjbSecurity")) {
                  original.setDebugEjbSecurity(proposed.getDebugEjbSecurity());
                  original._conditionalUnset(update.isUnsetUpdate(), 82);
               } else if (prop.equals("DebugEjbSwapping")) {
                  original.setDebugEjbSwapping(proposed.getDebugEjbSwapping());
                  original._conditionalUnset(update.isUnsetUpdate(), 77);
               } else if (prop.equals("DebugEjbTimerStore")) {
                  original.setDebugEjbTimerStore(proposed.getDebugEjbTimerStore());
                  original._conditionalUnset(update.isUnsetUpdate(), 429);
               } else if (prop.equals("DebugEjbTimers")) {
                  original.setDebugEjbTimers(proposed.getDebugEjbTimers());
                  original._conditionalUnset(update.isUnsetUpdate(), 80);
               } else if (prop.equals("DebugElasticActions")) {
                  original.setDebugElasticActions(proposed.getDebugElasticActions());
                  original._conditionalUnset(update.isUnsetUpdate(), 317);
               } else if (prop.equals("DebugElasticServices")) {
                  original.setDebugElasticServices(proposed.getDebugElasticServices());
                  original._conditionalUnset(update.isUnsetUpdate(), 318);
               } else if (prop.equals("DebugEmbeddedLDAP")) {
                  original.setDebugEmbeddedLDAP(proposed.getDebugEmbeddedLDAP());
                  original._conditionalUnset(update.isUnsetUpdate(), 176);
               } else if (prop.equals("DebugEmbeddedLDAPLogLevel")) {
                  original.setDebugEmbeddedLDAPLogLevel(proposed.getDebugEmbeddedLDAPLogLevel());
                  original._conditionalUnset(update.isUnsetUpdate(), 178);
               } else if (prop.equals("DebugEmbeddedLDAPLogToConsole")) {
                  original.setDebugEmbeddedLDAPLogToConsole(proposed.getDebugEmbeddedLDAPLogToConsole());
                  original._conditionalUnset(update.isUnsetUpdate(), 177);
               } else if (prop.equals("DebugEmbeddedLDAPWriteOverrideProps")) {
                  original.setDebugEmbeddedLDAPWriteOverrideProps(proposed.getDebugEmbeddedLDAPWriteOverrideProps());
                  original._conditionalUnset(update.isUnsetUpdate(), 179);
               } else if (prop.equals("DebugEventManager")) {
                  original.setDebugEventManager(proposed.getDebugEventManager());
                  original._conditionalUnset(update.isUnsetUpdate(), 86);
               } else if (prop.equals("DebugExpressionBeanLocalizer")) {
                  original.setDebugExpressionBeanLocalizer(proposed.getDebugExpressionBeanLocalizer());
                  original._conditionalUnset(update.isUnsetUpdate(), 311);
               } else if (prop.equals("DebugExpressionExtensionsManager")) {
                  original.setDebugExpressionExtensionsManager(proposed.getDebugExpressionExtensionsManager());
                  original._conditionalUnset(update.isUnsetUpdate(), 312);
               } else if (prop.equals("DebugExpressionPoller")) {
                  original.setDebugExpressionPoller(proposed.getDebugExpressionPoller());
                  original._conditionalUnset(update.isUnsetUpdate(), 430);
               } else if (prop.equals("DebugFileDistributionServlet")) {
                  original.setDebugFileDistributionServlet(proposed.getDebugFileDistributionServlet());
                  original._conditionalUnset(update.isUnsetUpdate(), 267);
               } else if (prop.equals("DebugFileOwnerFixer")) {
                  original.setDebugFileOwnerFixer(proposed.getDebugFileOwnerFixer());
                  original._conditionalUnset(update.isUnsetUpdate(), 431);
               } else if (prop.equals("DebugHarvesterTypeInfoCache")) {
                  original.setDebugHarvesterTypeInfoCache(proposed.getDebugHarvesterTypeInfoCache());
                  original._conditionalUnset(update.isUnsetUpdate(), 432);
               } else if (prop.equals("DebugHttp")) {
                  original.setDebugHttp(proposed.getDebugHttp());
                  original._conditionalUnset(update.isUnsetUpdate(), 65);
               } else if (prop.equals("DebugHttpConcise")) {
                  original.setDebugHttpConcise(proposed.getDebugHttpConcise());
                  original._conditionalUnset(update.isUnsetUpdate(), 66);
               } else if (prop.equals("DebugHttpLogging")) {
                  original.setDebugHttpLogging(proposed.getDebugHttpLogging());
                  original._conditionalUnset(update.isUnsetUpdate(), 69);
               } else if (prop.equals("DebugHttpSessions")) {
                  original.setDebugHttpSessions(proposed.getDebugHttpSessions());
                  original._conditionalUnset(update.isUnsetUpdate(), 68);
               } else if (prop.equals("DebugIIOPDetail")) {
                  original.setDebugIIOPDetail(proposed.getDebugIIOPDetail());
                  original._conditionalUnset(update.isUnsetUpdate(), 434);
               } else if (prop.equals("DebugIIOPNaming")) {
                  original.setDebugIIOPNaming(proposed.getDebugIIOPNaming());
                  original._conditionalUnset(update.isUnsetUpdate(), 364);
               } else if (prop.equals("DebugIIOPRepalcer")) {
                  original.setDebugIIOPRepalcer(proposed.getDebugIIOPRepalcer());
                  original._conditionalUnset(update.isUnsetUpdate(), 435);
               } else if (prop.equals("DebugIIOPTunneling")) {
                  original.setDebugIIOPTunneling(proposed.getDebugIIOPTunneling());
                  original._conditionalUnset(update.isUnsetUpdate(), 365);
               } else if (prop.equals("DebugInterceptors")) {
                  original.setDebugInterceptors(proposed.getDebugInterceptors());
                  original._conditionalUnset(update.isUnsetUpdate(), 402);
               } else if (prop.equals("DebugJ2EEManagement")) {
                  original.setDebugJ2EEManagement(proposed.getDebugJ2EEManagement());
                  original._conditionalUnset(update.isUnsetUpdate(), 363);
               } else if (prop.equals("DebugJAXPDebugLevel")) {
                  original.setDebugJAXPDebugLevel(proposed.getDebugJAXPDebugLevel());
                  original._conditionalUnset(update.isUnsetUpdate(), 231);
               } else if (prop.equals("DebugJAXPDebugName")) {
                  original.setDebugJAXPDebugName(proposed.getDebugJAXPDebugName());
                  original._conditionalUnset(update.isUnsetUpdate(), 232);
               } else if (prop.equals("DebugJAXPIncludeClass")) {
                  original.setDebugJAXPIncludeClass(proposed.getDebugJAXPIncludeClass());
                  original._conditionalUnset(update.isUnsetUpdate(), 236);
               } else if (prop.equals("DebugJAXPIncludeLocation")) {
                  original.setDebugJAXPIncludeLocation(proposed.getDebugJAXPIncludeLocation());
                  original._conditionalUnset(update.isUnsetUpdate(), 237);
               } else if (prop.equals("DebugJAXPIncludeName")) {
                  original.setDebugJAXPIncludeName(proposed.getDebugJAXPIncludeName());
                  original._conditionalUnset(update.isUnsetUpdate(), 235);
               } else if (prop.equals("DebugJAXPIncludeTime")) {
                  original.setDebugJAXPIncludeTime(proposed.getDebugJAXPIncludeTime());
                  original._conditionalUnset(update.isUnsetUpdate(), 234);
               } else if (!prop.equals("DebugJAXPOutputStream")) {
                  if (prop.equals("DebugJAXPUseShortClass")) {
                     original.setDebugJAXPUseShortClass(proposed.getDebugJAXPUseShortClass());
                     original._conditionalUnset(update.isUnsetUpdate(), 238);
                  } else if (prop.equals("DebugJDBCConn")) {
                     original.setDebugJDBCConn(proposed.getDebugJDBCConn());
                     original._conditionalUnset(update.isUnsetUpdate(), 202);
                  } else if (prop.equals("DebugJDBCDriverLogging")) {
                     original.setDebugJDBCDriverLogging(proposed.getDebugJDBCDriverLogging());
                     original._conditionalUnset(update.isUnsetUpdate(), 205);
                  } else if (prop.equals("DebugJDBCInternal")) {
                     original.setDebugJDBCInternal(proposed.getDebugJDBCInternal());
                     original._conditionalUnset(update.isUnsetUpdate(), 206);
                  } else if (prop.equals("DebugJDBCONS")) {
                     original.setDebugJDBCONS(proposed.getDebugJDBCONS());
                     original._conditionalUnset(update.isUnsetUpdate(), 208);
                  } else if (prop.equals("DebugJDBCRAC")) {
                     original.setDebugJDBCRAC(proposed.getDebugJDBCRAC());
                     original._conditionalUnset(update.isUnsetUpdate(), 207);
                  } else if (prop.equals("DebugJDBCRMI")) {
                     original.setDebugJDBCRMI(proposed.getDebugJDBCRMI());
                     original._conditionalUnset(update.isUnsetUpdate(), 204);
                  } else if (prop.equals("DebugJDBCReplay")) {
                     original.setDebugJDBCReplay(proposed.getDebugJDBCReplay());
                     original._conditionalUnset(update.isUnsetUpdate(), 210);
                  } else if (prop.equals("DebugJDBCSQL")) {
                     original.setDebugJDBCSQL(proposed.getDebugJDBCSQL());
                     original._conditionalUnset(update.isUnsetUpdate(), 203);
                  } else if (prop.equals("DebugJDBCUCP")) {
                     original.setDebugJDBCUCP(proposed.getDebugJDBCUCP());
                     original._conditionalUnset(update.isUnsetUpdate(), 209);
                  } else if (prop.equals("DebugJMSAME")) {
                     original.setDebugJMSAME(proposed.getDebugJMSAME());
                     original._conditionalUnset(update.isUnsetUpdate(), 120);
                  } else if (prop.equals("DebugJMSBackEnd")) {
                     original.setDebugJMSBackEnd(proposed.getDebugJMSBackEnd());
                     original._conditionalUnset(update.isUnsetUpdate(), 107);
                  } else if (prop.equals("DebugJMSBoot")) {
                     original.setDebugJMSBoot(proposed.getDebugJMSBoot());
                     original._conditionalUnset(update.isUnsetUpdate(), 117);
                  } else if (prop.equals("DebugJMSCDS")) {
                     original.setDebugJMSCDS(proposed.getDebugJMSCDS());
                     original._conditionalUnset(update.isUnsetUpdate(), 126);
                  } else if (prop.equals("DebugJMSCommon")) {
                     original.setDebugJMSCommon(proposed.getDebugJMSCommon());
                     original._conditionalUnset(update.isUnsetUpdate(), 109);
                  } else if (prop.equals("DebugJMSConfig")) {
                     original.setDebugJMSConfig(proposed.getDebugJMSConfig());
                     original._conditionalUnset(update.isUnsetUpdate(), 110);
                  } else if (prop.equals("DebugJMSCrossDomainSecurity")) {
                     original.setDebugJMSCrossDomainSecurity(proposed.getDebugJMSCrossDomainSecurity());
                     original._conditionalUnset(update.isUnsetUpdate(), 436);
                  } else if (prop.equals("DebugJMSDispatcher")) {
                     original.setDebugJMSDispatcher(proposed.getDebugJMSDispatcher());
                     original._conditionalUnset(update.isUnsetUpdate(), 114);
                  } else if (prop.equals("DebugJMSDispatcherProxy")) {
                     original.setDebugJMSDispatcherProxy(proposed.getDebugJMSDispatcherProxy());
                     original._conditionalUnset(update.isUnsetUpdate(), 115);
                  } else if (prop.equals("DebugJMSDispatcherUtilsVerbose")) {
                     original.setDebugJMSDispatcherUtilsVerbose(proposed.getDebugJMSDispatcherUtilsVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 437);
                  } else if (prop.equals("DebugJMSDispatcherVerbose")) {
                     original.setDebugJMSDispatcherVerbose(proposed.getDebugJMSDispatcherVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 438);
                  } else if (prop.equals("DebugJMSDistTopic")) {
                     original.setDebugJMSDistTopic(proposed.getDebugJMSDistTopic());
                     original._conditionalUnset(update.isUnsetUpdate(), 111);
                  } else if (prop.equals("DebugJMSDotNetProxy")) {
                     original.setDebugJMSDotNetProxy(proposed.getDebugJMSDotNetProxy());
                     original._conditionalUnset(update.isUnsetUpdate(), 439);
                  } else if (prop.equals("DebugJMSDotNetT3Server")) {
                     original.setDebugJMSDotNetT3Server(proposed.getDebugJMSDotNetT3Server());
                     original._conditionalUnset(update.isUnsetUpdate(), 440);
                  } else if (prop.equals("DebugJMSDotNetTransport")) {
                     original.setDebugJMSDotNetTransport(proposed.getDebugJMSDotNetTransport());
                     original._conditionalUnset(update.isUnsetUpdate(), 441);
                  } else if (prop.equals("DebugJMSDurSub")) {
                     original.setDebugJMSDurSub(proposed.getDebugJMSDurSub());
                     original._conditionalUnset(update.isUnsetUpdate(), 442);
                  } else if (prop.equals("DebugJMSDurableSubscribers")) {
                     original.setDebugJMSDurableSubscribers(proposed.getDebugJMSDurableSubscribers());
                     original._conditionalUnset(update.isUnsetUpdate(), 118);
                  } else if (prop.equals("DebugJMSFrontEnd")) {
                     original.setDebugJMSFrontEnd(proposed.getDebugJMSFrontEnd());
                     original._conditionalUnset(update.isUnsetUpdate(), 108);
                  } else if (prop.equals("DebugJMSJDBCScavengeOnFlush")) {
                     original.setDebugJMSJDBCScavengeOnFlush(proposed.getDebugJMSJDBCScavengeOnFlush());
                     original._conditionalUnset(update.isUnsetUpdate(), 119);
                  } else if (prop.equals("DebugJMSJNDI")) {
                     original.setDebugJMSJNDI(proposed.getDebugJMSJNDI());
                     original._conditionalUnset(update.isUnsetUpdate(), 443);
                  } else if (prop.equals("DebugJMSLocking")) {
                     original.setDebugJMSLocking(proposed.getDebugJMSLocking());
                     original._conditionalUnset(update.isUnsetUpdate(), 112);
                  } else if (prop.equals("DebugJMSMessagePath")) {
                     original.setDebugJMSMessagePath(proposed.getDebugJMSMessagePath());
                     original._conditionalUnset(update.isUnsetUpdate(), 123);
                  } else if (prop.equals("DebugJMSModule")) {
                     original.setDebugJMSModule(proposed.getDebugJMSModule());
                     original._conditionalUnset(update.isUnsetUpdate(), 122);
                  } else if (prop.equals("DebugJMSOBS")) {
                     original.setDebugJMSOBS(proposed.getDebugJMSOBS());
                     original._conditionalUnset(update.isUnsetUpdate(), 444);
                  } else if (prop.equals("DebugJMSPauseResume")) {
                     original.setDebugJMSPauseResume(proposed.getDebugJMSPauseResume());
                     original._conditionalUnset(update.isUnsetUpdate(), 121);
                  } else if (prop.equals("DebugJMSSAF")) {
                     original.setDebugJMSSAF(proposed.getDebugJMSSAF());
                     original._conditionalUnset(update.isUnsetUpdate(), 124);
                  } else if (prop.equals("DebugJMSStore")) {
                     original.setDebugJMSStore(proposed.getDebugJMSStore());
                     original._conditionalUnset(update.isUnsetUpdate(), 116);
                  } else if (prop.equals("DebugJMST3Server")) {
                     original.setDebugJMST3Server(proposed.getDebugJMST3Server());
                     original._conditionalUnset(update.isUnsetUpdate(), 386);
                  } else if (prop.equals("DebugJMSWrappers")) {
                     original.setDebugJMSWrappers(proposed.getDebugJMSWrappers());
                     original._conditionalUnset(update.isUnsetUpdate(), 125);
                  } else if (prop.equals("DebugJMSXA")) {
                     original.setDebugJMSXA(proposed.getDebugJMSXA());
                     original._conditionalUnset(update.isUnsetUpdate(), 113);
                  } else if (prop.equals("DebugJMX")) {
                     original.setDebugJMX(proposed.getDebugJMX());
                     original._conditionalUnset(update.isUnsetUpdate(), 352);
                  } else if (prop.equals("DebugJMXCompatibility")) {
                     original.setDebugJMXCompatibility(proposed.getDebugJMXCompatibility());
                     original._conditionalUnset(update.isUnsetUpdate(), 358);
                  } else if (prop.equals("DebugJMXContext")) {
                     original.setDebugJMXContext(proposed.getDebugJMXContext());
                     original._conditionalUnset(update.isUnsetUpdate(), 445);
                  } else if (prop.equals("DebugJMXCore")) {
                     original.setDebugJMXCore(proposed.getDebugJMXCore());
                     original._conditionalUnset(update.isUnsetUpdate(), 353);
                  } else if (prop.equals("DebugJMXCoreConcise")) {
                     original.setDebugJMXCoreConcise(proposed.getDebugJMXCoreConcise());
                     original._conditionalUnset(update.isUnsetUpdate(), 354);
                  } else if (prop.equals("DebugJMXDomain")) {
                     original.setDebugJMXDomain(proposed.getDebugJMXDomain());
                     original._conditionalUnset(update.isUnsetUpdate(), 356);
                  } else if (prop.equals("DebugJMXEdit")) {
                     original.setDebugJMXEdit(proposed.getDebugJMXEdit());
                     original._conditionalUnset(update.isUnsetUpdate(), 357);
                  } else if (prop.equals("DebugJMXRuntime")) {
                     original.setDebugJMXRuntime(proposed.getDebugJMXRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 355);
                  } else if (prop.equals("DebugJNDI")) {
                     original.setDebugJNDI(proposed.getDebugJNDI());
                     original._conditionalUnset(update.isUnsetUpdate(), 102);
                  } else if (prop.equals("DebugJNDIFactories")) {
                     original.setDebugJNDIFactories(proposed.getDebugJNDIFactories());
                     original._conditionalUnset(update.isUnsetUpdate(), 104);
                  } else if (prop.equals("DebugJNDIResolution")) {
                     original.setDebugJNDIResolution(proposed.getDebugJNDIResolution());
                     original._conditionalUnset(update.isUnsetUpdate(), 103);
                  } else if (prop.equals("DebugJPA")) {
                     original.setDebugJPA(proposed.getDebugJPA());
                     original._conditionalUnset(update.isUnsetUpdate(), 446);
                  } else if (prop.equals("DebugJTA2PC")) {
                     original.setDebugJTA2PC(proposed.getDebugJTA2PC());
                     original._conditionalUnset(update.isUnsetUpdate(), 131);
                  } else if (prop.equals("DebugJTA2PCDetail")) {
                     original.setDebugJTA2PCDetail(proposed.getDebugJTA2PCDetail());
                     original._conditionalUnset(update.isUnsetUpdate(), 447);
                  } else if (prop.equals("DebugJTA2PCStackTrace")) {
                     original.setDebugJTA2PCStackTrace(proposed.getDebugJTA2PCStackTrace());
                     original._conditionalUnset(update.isUnsetUpdate(), 132);
                  } else if (prop.equals("DebugJTAAPI")) {
                     original.setDebugJTAAPI(proposed.getDebugJTAAPI());
                     original._conditionalUnset(update.isUnsetUpdate(), 137);
                  } else if (prop.equals("DebugJTACDI")) {
                     original.setDebugJTACDI(proposed.getDebugJTACDI());
                     original._conditionalUnset(update.isUnsetUpdate(), 150);
                  } else if (prop.equals("DebugJTAGateway")) {
                     original.setDebugJTAGateway(proposed.getDebugJTAGateway());
                     original._conditionalUnset(update.isUnsetUpdate(), 139);
                  } else if (prop.equals("DebugJTAGatewayStackTrace")) {
                     original.setDebugJTAGatewayStackTrace(proposed.getDebugJTAGatewayStackTrace());
                     original._conditionalUnset(update.isUnsetUpdate(), 140);
                  } else if (prop.equals("DebugJTAHealth")) {
                     original.setDebugJTAHealth(proposed.getDebugJTAHealth());
                     original._conditionalUnset(update.isUnsetUpdate(), 147);
                  } else if (prop.equals("DebugJTAJDBC")) {
                     original.setDebugJTAJDBC(proposed.getDebugJTAJDBC());
                     original._conditionalUnset(update.isUnsetUpdate(), 134);
                  } else if (prop.equals("DebugJTALLR")) {
                     original.setDebugJTALLR(proposed.getDebugJTALLR());
                     original._conditionalUnset(update.isUnsetUpdate(), 146);
                  } else if (prop.equals("DebugJTALifecycle")) {
                     original.setDebugJTALifecycle(proposed.getDebugJTALifecycle());
                     original._conditionalUnset(update.isUnsetUpdate(), 145);
                  } else if (prop.equals("DebugJTAMigration")) {
                     original.setDebugJTAMigration(proposed.getDebugJTAMigration());
                     original._conditionalUnset(update.isUnsetUpdate(), 144);
                  } else if (prop.equals("DebugJTANaming")) {
                     original.setDebugJTANaming(proposed.getDebugJTANaming());
                     original._conditionalUnset(update.isUnsetUpdate(), 141);
                  } else if (prop.equals("DebugJTANamingStackTrace")) {
                     original.setDebugJTANamingStackTrace(proposed.getDebugJTANamingStackTrace());
                     original._conditionalUnset(update.isUnsetUpdate(), 142);
                  } else if (prop.equals("DebugJTANonXA")) {
                     original.setDebugJTANonXA(proposed.getDebugJTANonXA());
                     original._conditionalUnset(update.isUnsetUpdate(), 128);
                  } else if (prop.equals("DebugJTAPropagate")) {
                     original.setDebugJTAPropagate(proposed.getDebugJTAPropagate());
                     original._conditionalUnset(update.isUnsetUpdate(), 138);
                  } else if (prop.equals("DebugJTARMI")) {
                     original.setDebugJTARMI(proposed.getDebugJTARMI());
                     original._conditionalUnset(update.isUnsetUpdate(), 130);
                  } else if (prop.equals("DebugJTARecovery")) {
                     original.setDebugJTARecovery(proposed.getDebugJTARecovery());
                     original._conditionalUnset(update.isUnsetUpdate(), 135);
                  } else if (prop.equals("DebugJTARecoveryStackTrace")) {
                     original.setDebugJTARecoveryStackTrace(proposed.getDebugJTARecoveryStackTrace());
                     original._conditionalUnset(update.isUnsetUpdate(), 136);
                  } else if (prop.equals("DebugJTAResourceHealth")) {
                     original.setDebugJTAResourceHealth(proposed.getDebugJTAResourceHealth());
                     original._conditionalUnset(update.isUnsetUpdate(), 143);
                  } else if (prop.equals("DebugJTAResourceName")) {
                     original.setDebugJTAResourceName(proposed.getDebugJTAResourceName());
                     original._conditionalUnset(update.isUnsetUpdate(), 149);
                  } else if (prop.equals("DebugJTATLOG")) {
                     original.setDebugJTATLOG(proposed.getDebugJTATLOG());
                     original._conditionalUnset(update.isUnsetUpdate(), 133);
                  } else if (prop.equals("DebugJTATransactionName")) {
                     original.setDebugJTATransactionName(proposed.getDebugJTATransactionName());
                     original._conditionalUnset(update.isUnsetUpdate(), 148);
                  } else if (prop.equals("DebugJTAXA")) {
                     original.setDebugJTAXA(proposed.getDebugJTAXA());
                     original._conditionalUnset(update.isUnsetUpdate(), 127);
                  } else if (prop.equals("DebugJTAXAStackTrace")) {
                     original.setDebugJTAXAStackTrace(proposed.getDebugJTAXAStackTrace());
                     original._conditionalUnset(update.isUnsetUpdate(), 129);
                  } else if (prop.equals("DebugJpaDataCache")) {
                     original.setDebugJpaDataCache(proposed.getDebugJpaDataCache());
                     original._conditionalUnset(update.isUnsetUpdate(), 379);
                  } else if (prop.equals("DebugJpaEnhance")) {
                     original.setDebugJpaEnhance(proposed.getDebugJpaEnhance());
                     original._conditionalUnset(update.isUnsetUpdate(), 376);
                  } else if (prop.equals("DebugJpaJdbcJdbc")) {
                     original.setDebugJpaJdbcJdbc(proposed.getDebugJpaJdbcJdbc());
                     original._conditionalUnset(update.isUnsetUpdate(), 384);
                  } else if (prop.equals("DebugJpaJdbcSchema")) {
                     original.setDebugJpaJdbcSchema(proposed.getDebugJpaJdbcSchema());
                     original._conditionalUnset(update.isUnsetUpdate(), 385);
                  } else if (prop.equals("DebugJpaJdbcSql")) {
                     original.setDebugJpaJdbcSql(proposed.getDebugJpaJdbcSql());
                     original._conditionalUnset(update.isUnsetUpdate(), 383);
                  } else if (prop.equals("DebugJpaManage")) {
                     original.setDebugJpaManage(proposed.getDebugJpaManage());
                     original._conditionalUnset(update.isUnsetUpdate(), 381);
                  } else if (prop.equals("DebugJpaMetaData")) {
                     original.setDebugJpaMetaData(proposed.getDebugJpaMetaData());
                     original._conditionalUnset(update.isUnsetUpdate(), 375);
                  } else if (prop.equals("DebugJpaProfile")) {
                     original.setDebugJpaProfile(proposed.getDebugJpaProfile());
                     original._conditionalUnset(update.isUnsetUpdate(), 382);
                  } else if (prop.equals("DebugJpaQuery")) {
                     original.setDebugJpaQuery(proposed.getDebugJpaQuery());
                     original._conditionalUnset(update.isUnsetUpdate(), 378);
                  } else if (prop.equals("DebugJpaRuntime")) {
                     original.setDebugJpaRuntime(proposed.getDebugJpaRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 377);
                  } else if (prop.equals("DebugJpaTool")) {
                     original.setDebugJpaTool(proposed.getDebugJpaTool());
                     original._conditionalUnset(update.isUnsetUpdate(), 380);
                  } else if (prop.equals("DebugKodoWeblogic")) {
                     original.setDebugKodoWeblogic(proposed.getDebugKodoWeblogic());
                     original._conditionalUnset(update.isUnsetUpdate(), 448);
                  } else if (prop.equals("DebugLeaderElection")) {
                     original.setDebugLeaderElection(proposed.getDebugLeaderElection());
                     original._conditionalUnset(update.isUnsetUpdate(), 95);
                  } else if (prop.equals("DebugLegacy")) {
                     original.setDebugLegacy(proposed.getDebugLegacy());
                     original._conditionalUnset(update.isUnsetUpdate(), 449);
                  } else if (prop.equals("DebugLibraries")) {
                     original.setDebugLibraries(proposed.getDebugLibraries());
                     original._conditionalUnset(update.isUnsetUpdate(), 58);
                  } else if (prop.equals("DebugLifecycleManager")) {
                     original.setDebugLifecycleManager(proposed.getDebugLifecycleManager());
                     original._conditionalUnset(update.isUnsetUpdate(), 151);
                  } else if (prop.equals("DebugLoggingConfiguration")) {
                     original.setDebugLoggingConfiguration(proposed.getDebugLoggingConfiguration());
                     original._conditionalUnset(update.isUnsetUpdate(), 329);
                  } else if (prop.equals("DebugMBeanCIC")) {
                     original.setDebugMBeanCIC(proposed.getDebugMBeanCIC());
                     original._conditionalUnset(update.isUnsetUpdate(), 450);
                  } else if (prop.equals("DebugMBeanEventHandler")) {
                     original.setDebugMBeanEventHandler(proposed.getDebugMBeanEventHandler());
                     original._conditionalUnset(update.isUnsetUpdate(), 451);
                  } else if (prop.equals("DebugMBeanEventHandlerSummary")) {
                     original.setDebugMBeanEventHandlerSummary(proposed.getDebugMBeanEventHandlerSummary());
                     original._conditionalUnset(update.isUnsetUpdate(), 452);
                  } else if (prop.equals("DebugMBeanEventHandlerWork")) {
                     original.setDebugMBeanEventHandlerWork(proposed.getDebugMBeanEventHandlerWork());
                     original._conditionalUnset(update.isUnsetUpdate(), 453);
                  } else if (prop.equals("DebugMBeanHarvesterControl")) {
                     original.setDebugMBeanHarvesterControl(proposed.getDebugMBeanHarvesterControl());
                     original._conditionalUnset(update.isUnsetUpdate(), 285);
                  } else if (prop.equals("DebugMBeanHarvesterDataCollection")) {
                     original.setDebugMBeanHarvesterDataCollection(proposed.getDebugMBeanHarvesterDataCollection());
                     original._conditionalUnset(update.isUnsetUpdate(), 287);
                  } else if (prop.equals("DebugMBeanHarvesterResolution")) {
                     original.setDebugMBeanHarvesterResolution(proposed.getDebugMBeanHarvesterResolution());
                     original._conditionalUnset(update.isUnsetUpdate(), 286);
                  } else if (prop.equals("DebugMBeanHarvesterThreading")) {
                     original.setDebugMBeanHarvesterThreading(proposed.getDebugMBeanHarvesterThreading());
                     original._conditionalUnset(update.isUnsetUpdate(), 288);
                  } else if (prop.equals("DebugMBeanLocalization")) {
                     original.setDebugMBeanLocalization(proposed.getDebugMBeanLocalization());
                     original._conditionalUnset(update.isUnsetUpdate(), 454);
                  } else if (prop.equals("DebugMBeanTypeUtilQueue")) {
                     original.setDebugMBeanTypeUtilQueue(proposed.getDebugMBeanTypeUtilQueue());
                     original._conditionalUnset(update.isUnsetUpdate(), 294);
                  } else if (prop.equals("DebugMBeanTypeUtilQueuePriority")) {
                     original.setDebugMBeanTypeUtilQueuePriority(proposed.getDebugMBeanTypeUtilQueuePriority());
                     original._conditionalUnset(update.isUnsetUpdate(), 295);
                  } else if (prop.equals("DebugMBeanTypeUtilityListener")) {
                     original.setDebugMBeanTypeUtilityListener(proposed.getDebugMBeanTypeUtilityListener());
                     original._conditionalUnset(update.isUnsetUpdate(), 293);
                  } else if (prop.equals("DebugMBeanTypingUtility")) {
                     original.setDebugMBeanTypingUtility(proposed.getDebugMBeanTypingUtility());
                     original._conditionalUnset(update.isUnsetUpdate(), 296);
                  } else if (prop.equals("DebugMailSessionDeployment")) {
                     original.setDebugMailSessionDeployment(proposed.getDebugMailSessionDeployment());
                     original._conditionalUnset(update.isUnsetUpdate(), 455);
                  } else if (prop.equals("DebugManagedBean")) {
                     original.setDebugManagedBean(proposed.getDebugManagedBean());
                     original._conditionalUnset(update.isUnsetUpdate(), 456);
                  } else if (prop.equals("DebugManagementServicesResource")) {
                     original.setDebugManagementServicesResource(proposed.getDebugManagementServicesResource());
                     original._conditionalUnset(update.isUnsetUpdate(), 389);
                  } else if (prop.equals("DebugMaskCriterias")) {
                     original.setDebugMaskCriterias(proposed.getDebugMaskCriterias());
                     original._conditionalUnset(update.isUnsetUpdate(), 42);
                  } else if (prop.equals("DebugMessagingBridgeDumpToConsole")) {
                     original.setDebugMessagingBridgeDumpToConsole(proposed.getDebugMessagingBridgeDumpToConsole());
                     original._conditionalUnset(update.isUnsetUpdate(), 215);
                  } else if (prop.equals("DebugMessagingBridgeDumpToLog")) {
                     original.setDebugMessagingBridgeDumpToLog(proposed.getDebugMessagingBridgeDumpToLog());
                     original._conditionalUnset(update.isUnsetUpdate(), 214);
                  } else if (prop.equals("DebugMessagingBridgeRuntime")) {
                     original.setDebugMessagingBridgeRuntime(proposed.getDebugMessagingBridgeRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 212);
                  } else if (prop.equals("DebugMessagingBridgeRuntimeVerbose")) {
                     original.setDebugMessagingBridgeRuntimeVerbose(proposed.getDebugMessagingBridgeRuntimeVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 213);
                  } else if (prop.equals("DebugMessagingBridgeStartup")) {
                     original.setDebugMessagingBridgeStartup(proposed.getDebugMessagingBridgeStartup());
                     original._conditionalUnset(update.isUnsetUpdate(), 211);
                  } else if (prop.equals("DebugMessagingKernel")) {
                     original.setDebugMessagingKernel(proposed.getDebugMessagingKernel());
                     original._conditionalUnset(update.isUnsetUpdate(), 152);
                  } else if (prop.equals("DebugMessagingKernelBoot")) {
                     original.setDebugMessagingKernelBoot(proposed.getDebugMessagingKernelBoot());
                     original._conditionalUnset(update.isUnsetUpdate(), 153);
                  } else if (prop.equals("DebugMessagingOwnableLock")) {
                     original.setDebugMessagingOwnableLock(proposed.getDebugMessagingOwnableLock());
                     original._conditionalUnset(update.isUnsetUpdate(), 154);
                  } else if (prop.equals("DebugMigrationInfo")) {
                     original.setDebugMigrationInfo(proposed.getDebugMigrationInfo());
                     original._conditionalUnset(update.isUnsetUpdate(), 457);
                  } else if (prop.equals("DebugNIO")) {
                     original.setDebugNIO(proposed.getDebugNIO());
                     original._conditionalUnset(update.isUnsetUpdate(), 458);
                  } else if (prop.equals("DebugNodeManagerRuntime")) {
                     original.setDebugNodeManagerRuntime(proposed.getDebugNodeManagerRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 408);
                  } else if (prop.equals("DebugPageFlowMonitoring")) {
                     original.setDebugPageFlowMonitoring(proposed.getDebugPageFlowMonitoring());
                     original._conditionalUnset(update.isUnsetUpdate(), 459);
                  } else if (prop.equals("DebugPartitionJMX")) {
                     original.setDebugPartitionJMX(proposed.getDebugPartitionJMX());
                     original._conditionalUnset(update.isUnsetUpdate(), 460);
                  } else if (prop.equals("DebugPartitionLifecycle")) {
                     original.setDebugPartitionLifecycle(proposed.getDebugPartitionLifecycle());
                     original._conditionalUnset(update.isUnsetUpdate(), 461);
                  } else if (prop.equals("DebugPartitionPortability")) {
                     original.setDebugPartitionPortability(proposed.getDebugPartitionPortability());
                     original._conditionalUnset(update.isUnsetUpdate(), 462);
                  } else if (prop.equals("DebugPartitionResourceMetricsRuntime")) {
                     original.setDebugPartitionResourceMetricsRuntime(proposed.getDebugPartitionResourceMetricsRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 333);
                  } else if (prop.equals("DebugPatchingRuntime")) {
                     original.setDebugPatchingRuntime(proposed.getDebugPatchingRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 362);
                  } else if (prop.equals("DebugPathSvc")) {
                     original.setDebugPathSvc(proposed.getDebugPathSvc());
                     original._conditionalUnset(update.isUnsetUpdate(), 164);
                  } else if (prop.equals("DebugPathSvcVerbose")) {
                     original.setDebugPathSvcVerbose(proposed.getDebugPathSvcVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 165);
                  } else if (prop.equals("DebugPersistentStoreManager")) {
                     original.setDebugPersistentStoreManager(proposed.getDebugPersistentStoreManager());
                     original._conditionalUnset(update.isUnsetUpdate(), 463);
                  } else if (prop.equals("DebugPubSubBayeux")) {
                     original.setDebugPubSubBayeux(proposed.getDebugPubSubBayeux());
                     original._conditionalUnset(update.isUnsetUpdate(), 464);
                  } else if (prop.equals("DebugPubSubChannel")) {
                     original.setDebugPubSubChannel(proposed.getDebugPubSubChannel());
                     original._conditionalUnset(update.isUnsetUpdate(), 465);
                  } else if (prop.equals("DebugPubSubClient")) {
                     original.setDebugPubSubClient(proposed.getDebugPubSubClient());
                     original._conditionalUnset(update.isUnsetUpdate(), 466);
                  } else if (prop.equals("DebugPubSubSecurity")) {
                     original.setDebugPubSubSecurity(proposed.getDebugPubSubSecurity());
                     original._conditionalUnset(update.isUnsetUpdate(), 467);
                  } else if (prop.equals("DebugPubSubServer")) {
                     original.setDebugPubSubServer(proposed.getDebugPubSubServer());
                     original._conditionalUnset(update.isUnsetUpdate(), 468);
                  } else if (prop.equals("DebugRA")) {
                     original.setDebugRA(proposed.getDebugRA());
                     original._conditionalUnset(update.isUnsetUpdate(), 335);
                  } else if (prop.equals("DebugRAClassloader")) {
                     original.setDebugRAClassloader(proposed.getDebugRAClassloader());
                     original._conditionalUnset(update.isUnsetUpdate(), 350);
                  } else if (prop.equals("DebugRAConnEvents")) {
                     original.setDebugRAConnEvents(proposed.getDebugRAConnEvents());
                     original._conditionalUnset(update.isUnsetUpdate(), 347);
                  } else if (prop.equals("DebugRAConnections")) {
                     original.setDebugRAConnections(proposed.getDebugRAConnections());
                     original._conditionalUnset(update.isUnsetUpdate(), 346);
                  } else if (prop.equals("DebugRADeployment")) {
                     original.setDebugRADeployment(proposed.getDebugRADeployment());
                     original._conditionalUnset(update.isUnsetUpdate(), 342);
                  } else if (prop.equals("DebugRALifecycle")) {
                     original.setDebugRALifecycle(proposed.getDebugRALifecycle());
                     original._conditionalUnset(update.isUnsetUpdate(), 340);
                  } else if (prop.equals("DebugRALocalOut")) {
                     original.setDebugRALocalOut(proposed.getDebugRALocalOut());
                     original._conditionalUnset(update.isUnsetUpdate(), 339);
                  } else if (prop.equals("DebugRAParsing")) {
                     original.setDebugRAParsing(proposed.getDebugRAParsing());
                     original._conditionalUnset(update.isUnsetUpdate(), 343);
                  } else if (prop.equals("DebugRAPoolVerbose")) {
                     original.setDebugRAPoolVerbose(proposed.getDebugRAPoolVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 334);
                  } else if (prop.equals("DebugRAPooling")) {
                     original.setDebugRAPooling(proposed.getDebugRAPooling());
                     original._conditionalUnset(update.isUnsetUpdate(), 345);
                  } else if (prop.equals("DebugRASecurityCtx")) {
                     original.setDebugRASecurityCtx(proposed.getDebugRASecurityCtx());
                     original._conditionalUnset(update.isUnsetUpdate(), 344);
                  } else if (prop.equals("DebugRAWork")) {
                     original.setDebugRAWork(proposed.getDebugRAWork());
                     original._conditionalUnset(update.isUnsetUpdate(), 348);
                  } else if (prop.equals("DebugRAWorkEvents")) {
                     original.setDebugRAWorkEvents(proposed.getDebugRAWorkEvents());
                     original._conditionalUnset(update.isUnsetUpdate(), 349);
                  } else if (prop.equals("DebugRAXAin")) {
                     original.setDebugRAXAin(proposed.getDebugRAXAin());
                     original._conditionalUnset(update.isUnsetUpdate(), 336);
                  } else if (prop.equals("DebugRAXAout")) {
                     original.setDebugRAXAout(proposed.getDebugRAXAout());
                     original._conditionalUnset(update.isUnsetUpdate(), 337);
                  } else if (prop.equals("DebugRAXAwork")) {
                     original.setDebugRAXAwork(proposed.getDebugRAXAwork());
                     original._conditionalUnset(update.isUnsetUpdate(), 338);
                  } else if (prop.equals("DebugRCM")) {
                     original.setDebugRCM(proposed.getDebugRCM());
                     original._conditionalUnset(update.isUnsetUpdate(), 404);
                  } else if (prop.equals("DebugRESTNotifications")) {
                     original.setDebugRESTNotifications(proposed.getDebugRESTNotifications());
                     original._conditionalUnset(update.isUnsetUpdate(), 315);
                  } else if (prop.equals("DebugRMIDetailed")) {
                     original.setDebugRMIDetailed(proposed.getDebugRMIDetailed());
                     original._conditionalUnset(update.isUnsetUpdate(), 469);
                  } else if (prop.equals("DebugRMIRequestPerf")) {
                     original.setDebugRMIRequestPerf(proposed.getDebugRMIRequestPerf());
                     original._conditionalUnset(update.isUnsetUpdate(), 56);
                  } else if (prop.equals("DebugReadyApp")) {
                     original.setDebugReadyApp(proposed.getDebugReadyApp());
                     original._conditionalUnset(update.isUnsetUpdate(), 401);
                  } else if (prop.equals("DebugRedefAttach")) {
                     original.setDebugRedefAttach(proposed.getDebugRedefAttach());
                     original._conditionalUnset(update.isUnsetUpdate(), 470);
                  } else if (prop.equals("DebugReplication")) {
                     original.setDebugReplication(proposed.getDebugReplication());
                     original._conditionalUnset(update.isUnsetUpdate(), 92);
                  } else if (prop.equals("DebugReplicationDetails")) {
                     original.setDebugReplicationDetails(proposed.getDebugReplicationDetails());
                     original._conditionalUnset(update.isUnsetUpdate(), 93);
                  } else if (prop.equals("DebugReplicationSize")) {
                     original.setDebugReplicationSize(proposed.getDebugReplicationSize());
                     original._conditionalUnset(update.isUnsetUpdate(), 391);
                  } else if (prop.equals("DebugRequestManager")) {
                     original.setDebugRequestManager(proposed.getDebugRequestManager());
                     original._conditionalUnset(update.isUnsetUpdate(), 471);
                  } else if (prop.equals("DebugResourceGroupMigration")) {
                     original.setDebugResourceGroupMigration(proposed.getDebugResourceGroupMigration());
                     original._conditionalUnset(update.isUnsetUpdate(), 472);
                  } else if (prop.equals("DebugRestJersey1Integration")) {
                     original.setDebugRestJersey1Integration(proposed.getDebugRestJersey1Integration());
                     original._conditionalUnset(update.isUnsetUpdate(), 406);
                  } else if (prop.equals("DebugRestJersey2Integration")) {
                     original.setDebugRestJersey2Integration(proposed.getDebugRestJersey2Integration());
                     original._conditionalUnset(update.isUnsetUpdate(), 407);
                  } else if (prop.equals("DebugRestartInPlace")) {
                     original.setDebugRestartInPlace(proposed.getDebugRestartInPlace());
                     original._conditionalUnset(update.isUnsetUpdate(), 433);
                  } else if (prop.equals("DebugSAFAdmin")) {
                     original.setDebugSAFAdmin(proposed.getDebugSAFAdmin());
                     original._conditionalUnset(update.isUnsetUpdate(), 156);
                  } else if (prop.equals("DebugSAFLifeCycle")) {
                     original.setDebugSAFLifeCycle(proposed.getDebugSAFLifeCycle());
                     original._conditionalUnset(update.isUnsetUpdate(), 155);
                  } else if (prop.equals("DebugSAFManager")) {
                     original.setDebugSAFManager(proposed.getDebugSAFManager());
                     original._conditionalUnset(update.isUnsetUpdate(), 157);
                  } else if (prop.equals("DebugSAFMessagePath")) {
                     original.setDebugSAFMessagePath(proposed.getDebugSAFMessagePath());
                     original._conditionalUnset(update.isUnsetUpdate(), 161);
                  } else if (prop.equals("DebugSAFReceivingAgent")) {
                     original.setDebugSAFReceivingAgent(proposed.getDebugSAFReceivingAgent());
                     original._conditionalUnset(update.isUnsetUpdate(), 159);
                  } else if (prop.equals("DebugSAFSendingAgent")) {
                     original.setDebugSAFSendingAgent(proposed.getDebugSAFSendingAgent());
                     original._conditionalUnset(update.isUnsetUpdate(), 158);
                  } else if (prop.equals("DebugSAFStore")) {
                     original.setDebugSAFStore(proposed.getDebugSAFStore());
                     original._conditionalUnset(update.isUnsetUpdate(), 162);
                  } else if (prop.equals("DebugSAFTransport")) {
                     original.setDebugSAFTransport(proposed.getDebugSAFTransport());
                     original._conditionalUnset(update.isUnsetUpdate(), 160);
                  } else if (prop.equals("DebugSAFVerbose")) {
                     original.setDebugSAFVerbose(proposed.getDebugSAFVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 163);
                  } else if (prop.equals("DebugSNMPAgent")) {
                     original.setDebugSNMPAgent(proposed.getDebugSNMPAgent());
                     original._conditionalUnset(update.isUnsetUpdate(), 325);
                  } else if (prop.equals("DebugSNMPExtensionProvider")) {
                     original.setDebugSNMPExtensionProvider(proposed.getDebugSNMPExtensionProvider());
                     original._conditionalUnset(update.isUnsetUpdate(), 327);
                  } else if (prop.equals("DebugSNMPMib")) {
                     original.setDebugSNMPMib(proposed.getDebugSNMPMib());
                     original._conditionalUnset(update.isUnsetUpdate(), 473);
                  } else if (prop.equals("DebugSNMPProtocolTCP")) {
                     original.setDebugSNMPProtocolTCP(proposed.getDebugSNMPProtocolTCP());
                     original._conditionalUnset(update.isUnsetUpdate(), 326);
                  } else if (prop.equals("DebugSNMPToolkit")) {
                     original.setDebugSNMPToolkit(proposed.getDebugSNMPToolkit());
                     original._conditionalUnset(update.isUnsetUpdate(), 324);
                  } else if (prop.equals("DebugScaContainer")) {
                     original.setDebugScaContainer(proposed.getDebugScaContainer());
                     original._conditionalUnset(update.isUnsetUpdate(), 166);
                  } else if (prop.equals("DebugScrubberStartService")) {
                     original.setDebugScrubberStartService(proposed.getDebugScrubberStartService());
                     original._conditionalUnset(update.isUnsetUpdate(), 474);
                  } else if (prop.equals("DebugSecurity")) {
                     original.setDebugSecurity(proposed.getDebugSecurity());
                     original._conditionalUnset(update.isUnsetUpdate(), 168);
                  } else if (prop.equals("DebugSecurityAdjudicator")) {
                     original.setDebugSecurityAdjudicator(proposed.getDebugSecurityAdjudicator());
                     original._conditionalUnset(update.isUnsetUpdate(), 180);
                  } else if (prop.equals("DebugSecurityAtn")) {
                     original.setDebugSecurityAtn(proposed.getDebugSecurityAtn());
                     original._conditionalUnset(update.isUnsetUpdate(), 181);
                  } else if (prop.equals("DebugSecurityAtz")) {
                     original.setDebugSecurityAtz(proposed.getDebugSecurityAtz());
                     original._conditionalUnset(update.isUnsetUpdate(), 182);
                  } else if (prop.equals("DebugSecurityAuditor")) {
                     original.setDebugSecurityAuditor(proposed.getDebugSecurityAuditor());
                     original._conditionalUnset(update.isUnsetUpdate(), 183);
                  } else if (prop.equals("DebugSecurityCertPath")) {
                     original.setDebugSecurityCertPath(proposed.getDebugSecurityCertPath());
                     original._conditionalUnset(update.isUnsetUpdate(), 187);
                  } else if (prop.equals("DebugSecurityCredMap")) {
                     original.setDebugSecurityCredMap(proposed.getDebugSecurityCredMap());
                     original._conditionalUnset(update.isUnsetUpdate(), 184);
                  } else if (prop.equals("DebugSecurityEEngine")) {
                     original.setDebugSecurityEEngine(proposed.getDebugSecurityEEngine());
                     original._conditionalUnset(update.isUnsetUpdate(), 190);
                  } else if (prop.equals("DebugSecurityEncryptionService")) {
                     original.setDebugSecurityEncryptionService(proposed.getDebugSecurityEncryptionService());
                     original._conditionalUnset(update.isUnsetUpdate(), 185);
                  } else if (prop.equals("DebugSecurityJACC")) {
                     original.setDebugSecurityJACC(proposed.getDebugSecurityJACC());
                     original._conditionalUnset(update.isUnsetUpdate(), 191);
                  } else if (prop.equals("DebugSecurityJACCNonPolicy")) {
                     original.setDebugSecurityJACCNonPolicy(proposed.getDebugSecurityJACCNonPolicy());
                     original._conditionalUnset(update.isUnsetUpdate(), 192);
                  } else if (prop.equals("DebugSecurityJACCPolicy")) {
                     original.setDebugSecurityJACCPolicy(proposed.getDebugSecurityJACCPolicy());
                     original._conditionalUnset(update.isUnsetUpdate(), 193);
                  } else if (prop.equals("DebugSecurityKeyStore")) {
                     original.setDebugSecurityKeyStore(proposed.getDebugSecurityKeyStore());
                     original._conditionalUnset(update.isUnsetUpdate(), 186);
                  } else if (prop.equals("DebugSecurityPasswordPolicy")) {
                     original.setDebugSecurityPasswordPolicy(proposed.getDebugSecurityPasswordPolicy());
                     original._conditionalUnset(update.isUnsetUpdate(), 169);
                  } else if (prop.equals("DebugSecurityPredicate")) {
                     original.setDebugSecurityPredicate(proposed.getDebugSecurityPredicate());
                     original._conditionalUnset(update.isUnsetUpdate(), 172);
                  } else if (prop.equals("DebugSecurityProfiler")) {
                     original.setDebugSecurityProfiler(proposed.getDebugSecurityProfiler());
                     original._conditionalUnset(update.isUnsetUpdate(), 188);
                  } else if (prop.equals("DebugSecurityRealm")) {
                     original.setDebugSecurityRealm(proposed.getDebugSecurityRealm());
                     original._conditionalUnset(update.isUnsetUpdate(), 167);
                  } else if (prop.equals("DebugSecurityRoleMap")) {
                     original.setDebugSecurityRoleMap(proposed.getDebugSecurityRoleMap());
                     original._conditionalUnset(update.isUnsetUpdate(), 189);
                  } else if (prop.equals("DebugSecuritySAML2Atn")) {
                     original.setDebugSecuritySAML2Atn(proposed.getDebugSecuritySAML2Atn());
                     original._conditionalUnset(update.isUnsetUpdate(), 199);
                  } else if (prop.equals("DebugSecuritySAML2CredMap")) {
                     original.setDebugSecuritySAML2CredMap(proposed.getDebugSecuritySAML2CredMap());
                     original._conditionalUnset(update.isUnsetUpdate(), 200);
                  } else if (prop.equals("DebugSecuritySAML2Lib")) {
                     original.setDebugSecuritySAML2Lib(proposed.getDebugSecuritySAML2Lib());
                     original._conditionalUnset(update.isUnsetUpdate(), 198);
                  } else if (prop.equals("DebugSecuritySAML2Service")) {
                     original.setDebugSecuritySAML2Service(proposed.getDebugSecuritySAML2Service());
                     original._conditionalUnset(update.isUnsetUpdate(), 201);
                  } else if (prop.equals("DebugSecuritySAMLAtn")) {
                     original.setDebugSecuritySAMLAtn(proposed.getDebugSecuritySAMLAtn());
                     original._conditionalUnset(update.isUnsetUpdate(), 195);
                  } else if (prop.equals("DebugSecuritySAMLCredMap")) {
                     original.setDebugSecuritySAMLCredMap(proposed.getDebugSecuritySAMLCredMap());
                     original._conditionalUnset(update.isUnsetUpdate(), 196);
                  } else if (prop.equals("DebugSecuritySAMLLib")) {
                     original.setDebugSecuritySAMLLib(proposed.getDebugSecuritySAMLLib());
                     original._conditionalUnset(update.isUnsetUpdate(), 194);
                  } else if (prop.equals("DebugSecuritySAMLService")) {
                     original.setDebugSecuritySAMLService(proposed.getDebugSecuritySAMLService());
                     original._conditionalUnset(update.isUnsetUpdate(), 197);
                  } else if (prop.equals("DebugSecuritySSL")) {
                     original.setDebugSecuritySSL(proposed.getDebugSecuritySSL());
                     original._conditionalUnset(update.isUnsetUpdate(), 173);
                  } else if (prop.equals("DebugSecuritySSLEaten")) {
                     original.setDebugSecuritySSLEaten(proposed.getDebugSecuritySSLEaten());
                     original._conditionalUnset(update.isUnsetUpdate(), 174);
                  } else if (prop.equals("DebugSecurityService")) {
                     original.setDebugSecurityService(proposed.getDebugSecurityService());
                     original._conditionalUnset(update.isUnsetUpdate(), 171);
                  } else if (prop.equals("DebugSecurityUserLockout")) {
                     original.setDebugSecurityUserLockout(proposed.getDebugSecurityUserLockout());
                     original._conditionalUnset(update.isUnsetUpdate(), 170);
                  } else if (prop.equals("DebugSelfTuning")) {
                     original.setDebugSelfTuning(proposed.getDebugSelfTuning());
                     original._conditionalUnset(update.isUnsetUpdate(), 38);
                  } else if (prop.equals("DebugServerLifeCycle")) {
                     original.setDebugServerLifeCycle(proposed.getDebugServerLifeCycle());
                     original._conditionalUnset(update.isUnsetUpdate(), 367);
                  } else if (prop.equals("DebugServerMigration")) {
                     original.setDebugServerMigration(proposed.getDebugServerMigration());
                     original._conditionalUnset(update.isUnsetUpdate(), 87);
                  } else if (prop.equals("DebugServerRuntime")) {
                     original.setDebugServerRuntime(proposed.getDebugServerRuntime());
                     original._conditionalUnset(update.isUnsetUpdate(), 475);
                  } else if (prop.equals("DebugServerShutdownStatistics")) {
                     original.setDebugServerShutdownStatistics(proposed.getDebugServerShutdownStatistics());
                     original._conditionalUnset(update.isUnsetUpdate(), 476);
                  } else if (prop.equals("DebugServerShutdownTimer")) {
                     original.setDebugServerShutdownTimer(proposed.getDebugServerShutdownTimer());
                     original._conditionalUnset(update.isUnsetUpdate(), 477);
                  } else if (prop.equals("DebugServerStartStatistics")) {
                     original.setDebugServerStartStatistics(proposed.getDebugServerStartStatistics());
                     original._conditionalUnset(update.isUnsetUpdate(), 388);
                  } else if (prop.equals("DebugServerStartupTimer")) {
                     original.setDebugServerStartupTimer(proposed.getDebugServerStartupTimer());
                     original._conditionalUnset(update.isUnsetUpdate(), 478);
                  } else if (prop.equals("DebugSingletonServices")) {
                     original.setDebugSingletonServices(proposed.getDebugSingletonServices());
                     original._conditionalUnset(update.isUnsetUpdate(), 479);
                  } else if (prop.equals("DebugSituationalConfig")) {
                     original.setDebugSituationalConfig(proposed.getDebugSituationalConfig());
                     original._conditionalUnset(update.isUnsetUpdate(), 361);
                  } else if (prop.equals("DebugSpringStatistics")) {
                     original.setDebugSpringStatistics(proposed.getDebugSpringStatistics());
                     original._conditionalUnset(update.isUnsetUpdate(), 480);
                  } else if (prop.equals("DebugStore")) {
                     original.setDebugStore(proposed.getDebugStore());
                     original._conditionalUnset(update.isUnsetUpdate(), 481);
                  } else if (prop.equals("DebugStoreAdmin")) {
                     original.setDebugStoreAdmin(proposed.getDebugStoreAdmin());
                     original._conditionalUnset(update.isUnsetUpdate(), 222);
                  } else if (prop.equals("DebugStoreCache")) {
                     original.setDebugStoreCache(proposed.getDebugStoreCache());
                     original._conditionalUnset(update.isUnsetUpdate(), 482);
                  } else if (prop.equals("DebugStoreIOLogical")) {
                     original.setDebugStoreIOLogical(proposed.getDebugStoreIOLogical());
                     original._conditionalUnset(update.isUnsetUpdate(), 216);
                  } else if (prop.equals("DebugStoreIOLogicalBoot")) {
                     original.setDebugStoreIOLogicalBoot(proposed.getDebugStoreIOLogicalBoot());
                     original._conditionalUnset(update.isUnsetUpdate(), 217);
                  } else if (prop.equals("DebugStoreIOPhysical")) {
                     original.setDebugStoreIOPhysical(proposed.getDebugStoreIOPhysical());
                     original._conditionalUnset(update.isUnsetUpdate(), 218);
                  } else if (prop.equals("DebugStoreIOPhysicalVerbose")) {
                     original.setDebugStoreIOPhysicalVerbose(proposed.getDebugStoreIOPhysicalVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 219);
                  } else if (prop.equals("DebugStoreRCM")) {
                     original.setDebugStoreRCM(proposed.getDebugStoreRCM());
                     original._conditionalUnset(update.isUnsetUpdate(), 483);
                  } else if (prop.equals("DebugStoreRCMVerbose")) {
                     original.setDebugStoreRCMVerbose(proposed.getDebugStoreRCMVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 484);
                  } else if (prop.equals("DebugStoreXA")) {
                     original.setDebugStoreXA(proposed.getDebugStoreXA());
                     original._conditionalUnset(update.isUnsetUpdate(), 220);
                  } else if (prop.equals("DebugStoreXAVerbose")) {
                     original.setDebugStoreXAVerbose(proposed.getDebugStoreXAVerbose());
                     original._conditionalUnset(update.isUnsetUpdate(), 221);
                  } else if (prop.equals("DebugStubGeneration")) {
                     original.setDebugStubGeneration(proposed.getDebugStubGeneration());
                     original._conditionalUnset(update.isUnsetUpdate(), 485);
                  } else if (prop.equals("DebugTunnelingConnection")) {
                     original.setDebugTunnelingConnection(proposed.getDebugTunnelingConnection());
                     original._conditionalUnset(update.isUnsetUpdate(), 106);
                  } else if (prop.equals("DebugTunnelingConnectionTimeout")) {
                     original.setDebugTunnelingConnectionTimeout(proposed.getDebugTunnelingConnectionTimeout());
                     original._conditionalUnset(update.isUnsetUpdate(), 105);
                  } else if (prop.equals("DebugURLResolution")) {
                     original.setDebugURLResolution(proposed.getDebugURLResolution());
                     original._conditionalUnset(update.isUnsetUpdate(), 67);
                  } else if (prop.equals("DebugUnicastMessaging")) {
                     original.setDebugUnicastMessaging(proposed.getDebugUnicastMessaging());
                     original._conditionalUnset(update.isUnsetUpdate(), 486);
                  } else if (prop.equals("DebugValidation")) {
                     original.setDebugValidation(proposed.getDebugValidation());
                     original._conditionalUnset(update.isUnsetUpdate(), 487);
                  } else if (prop.equals("DebugValidationClassLoading")) {
                     original.setDebugValidationClassLoading(proposed.getDebugValidationClassLoading());
                     original._conditionalUnset(update.isUnsetUpdate(), 488);
                  } else if (prop.equals("DebugVerboseRCM")) {
                     original.setDebugVerboseRCM(proposed.getDebugVerboseRCM());
                     original._conditionalUnset(update.isUnsetUpdate(), 405);
                  } else if (prop.equals("DebugWANReplicationDetails")) {
                     original.setDebugWANReplicationDetails(proposed.getDebugWANReplicationDetails());
                     original._conditionalUnset(update.isUnsetUpdate(), 351);
                  } else if (prop.equals("DebugWTCConfig")) {
                     original.setDebugWTCConfig(proposed.getDebugWTCConfig());
                     original._conditionalUnset(update.isUnsetUpdate(), 368);
                  } else if (prop.equals("DebugWTCCorbaEx")) {
                     original.setDebugWTCCorbaEx(proposed.getDebugWTCCorbaEx());
                     original._conditionalUnset(update.isUnsetUpdate(), 373);
                  } else if (prop.equals("DebugWTCGwtEx")) {
                     original.setDebugWTCGwtEx(proposed.getDebugWTCGwtEx());
                     original._conditionalUnset(update.isUnsetUpdate(), 371);
                  } else if (prop.equals("DebugWTCJatmiEx")) {
                     original.setDebugWTCJatmiEx(proposed.getDebugWTCJatmiEx());
                     original._conditionalUnset(update.isUnsetUpdate(), 372);
                  } else if (prop.equals("DebugWTCTDomPdu")) {
                     original.setDebugWTCTDomPdu(proposed.getDebugWTCTDomPdu());
                     original._conditionalUnset(update.isUnsetUpdate(), 369);
                  } else if (prop.equals("DebugWTCTdomPdu")) {
                     original.setDebugWTCTdomPdu(proposed.getDebugWTCTdomPdu());
                     original._conditionalUnset(update.isUnsetUpdate(), 489);
                  } else if (prop.equals("DebugWTCUData")) {
                     original.setDebugWTCUData(proposed.getDebugWTCUData());
                     original._conditionalUnset(update.isUnsetUpdate(), 370);
                  } else if (prop.equals("DebugWTCtBridgeEx")) {
                     original.setDebugWTCtBridgeEx(proposed.getDebugWTCtBridgeEx());
                     original._conditionalUnset(update.isUnsetUpdate(), 374);
                  } else if (prop.equals("DebugWatchScalingActions")) {
                     original.setDebugWatchScalingActions(proposed.getDebugWatchScalingActions());
                     original._conditionalUnset(update.isUnsetUpdate(), 490);
                  } else if (prop.equals("DebugWebAppDI")) {
                     original.setDebugWebAppDI(proposed.getDebugWebAppDI());
                     original._conditionalUnset(update.isUnsetUpdate(), 491);
                  } else if (prop.equals("DebugWebAppIdentityAssertion")) {
                     original.setDebugWebAppIdentityAssertion(proposed.getDebugWebAppIdentityAssertion());
                     original._conditionalUnset(update.isUnsetUpdate(), 70);
                  } else if (prop.equals("DebugWebAppModule")) {
                     original.setDebugWebAppModule(proposed.getDebugWebAppModule());
                     original._conditionalUnset(update.isUnsetUpdate(), 72);
                  } else if (prop.equals("DebugWebAppSecurity")) {
                     original.setDebugWebAppSecurity(proposed.getDebugWebAppSecurity());
                     original._conditionalUnset(update.isUnsetUpdate(), 71);
                  } else if (prop.equals("DebugWebSocket")) {
                     original.setDebugWebSocket(proposed.getDebugWebSocket());
                     original._conditionalUnset(update.isUnsetUpdate(), 492);
                  } else if (prop.equals("DebugXMLEntityCacheDebugLevel")) {
                     original.setDebugXMLEntityCacheDebugLevel(proposed.getDebugXMLEntityCacheDebugLevel());
                     original._conditionalUnset(update.isUnsetUpdate(), 239);
                  } else if (prop.equals("DebugXMLEntityCacheDebugName")) {
                     original.setDebugXMLEntityCacheDebugName(proposed.getDebugXMLEntityCacheDebugName());
                     original._conditionalUnset(update.isUnsetUpdate(), 240);
                  } else if (prop.equals("DebugXMLEntityCacheIncludeClass")) {
                     original.setDebugXMLEntityCacheIncludeClass(proposed.getDebugXMLEntityCacheIncludeClass());
                     original._conditionalUnset(update.isUnsetUpdate(), 244);
                  } else if (prop.equals("DebugXMLEntityCacheIncludeLocation")) {
                     original.setDebugXMLEntityCacheIncludeLocation(proposed.getDebugXMLEntityCacheIncludeLocation());
                     original._conditionalUnset(update.isUnsetUpdate(), 245);
                  } else if (prop.equals("DebugXMLEntityCacheIncludeName")) {
                     original.setDebugXMLEntityCacheIncludeName(proposed.getDebugXMLEntityCacheIncludeName());
                     original._conditionalUnset(update.isUnsetUpdate(), 243);
                  } else if (prop.equals("DebugXMLEntityCacheIncludeTime")) {
                     original.setDebugXMLEntityCacheIncludeTime(proposed.getDebugXMLEntityCacheIncludeTime());
                     original._conditionalUnset(update.isUnsetUpdate(), 242);
                  } else if (!prop.equals("DebugXMLEntityCacheOutputStream")) {
                     if (prop.equals("DebugXMLEntityCacheUseShortClass")) {
                        original.setDebugXMLEntityCacheUseShortClass(proposed.getDebugXMLEntityCacheUseShortClass());
                        original._conditionalUnset(update.isUnsetUpdate(), 246);
                     } else if (prop.equals("DebugXMLRegistryDebugLevel")) {
                        original.setDebugXMLRegistryDebugLevel(proposed.getDebugXMLRegistryDebugLevel());
                        original._conditionalUnset(update.isUnsetUpdate(), 223);
                     } else if (prop.equals("DebugXMLRegistryDebugName")) {
                        original.setDebugXMLRegistryDebugName(proposed.getDebugXMLRegistryDebugName());
                        original._conditionalUnset(update.isUnsetUpdate(), 224);
                     } else if (prop.equals("DebugXMLRegistryIncludeClass")) {
                        original.setDebugXMLRegistryIncludeClass(proposed.getDebugXMLRegistryIncludeClass());
                        original._conditionalUnset(update.isUnsetUpdate(), 228);
                     } else if (prop.equals("DebugXMLRegistryIncludeLocation")) {
                        original.setDebugXMLRegistryIncludeLocation(proposed.getDebugXMLRegistryIncludeLocation());
                        original._conditionalUnset(update.isUnsetUpdate(), 229);
                     } else if (prop.equals("DebugXMLRegistryIncludeName")) {
                        original.setDebugXMLRegistryIncludeName(proposed.getDebugXMLRegistryIncludeName());
                        original._conditionalUnset(update.isUnsetUpdate(), 227);
                     } else if (prop.equals("DebugXMLRegistryIncludeTime")) {
                        original.setDebugXMLRegistryIncludeTime(proposed.getDebugXMLRegistryIncludeTime());
                        original._conditionalUnset(update.isUnsetUpdate(), 226);
                     } else if (!prop.equals("DebugXMLRegistryOutputStream")) {
                        if (prop.equals("DebugXMLRegistryUseShortClass")) {
                           original.setDebugXMLRegistryUseShortClass(proposed.getDebugXMLRegistryUseShortClass());
                           original._conditionalUnset(update.isUnsetUpdate(), 230);
                        } else if (prop.equals("DefaultStore")) {
                           original.setDefaultStore(proposed.getDefaultStore());
                           original._conditionalUnset(update.isUnsetUpdate(), 63);
                        } else if (prop.equals("DiagnosticContextDebugMode")) {
                           original.setDiagnosticContextDebugMode(proposed.getDiagnosticContextDebugMode());
                           original._conditionalUnset(update.isUnsetUpdate(), 41);
                        } else if (prop.equals("ForceShutdownTimeoutNumOfThreadDump")) {
                           original.setForceShutdownTimeoutNumOfThreadDump(proposed.getForceShutdownTimeoutNumOfThreadDump());
                           original._conditionalUnset(update.isUnsetUpdate(), 54);
                        } else if (prop.equals("ForceShutdownTimeoutThreadDumpInterval")) {
                           original.setForceShutdownTimeoutThreadDumpInterval(proposed.getForceShutdownTimeoutThreadDumpInterval());
                           original._conditionalUnset(update.isUnsetUpdate(), 55);
                        } else if (prop.equals("GlassFishWebAppParser")) {
                           original.setGlassFishWebAppParser(proposed.getGlassFishWebAppParser());
                           original._conditionalUnset(update.isUnsetUpdate(), 493);
                        } else if (prop.equals("GracefulShutdownTimeoutNumOfThreadDump")) {
                           original.setGracefulShutdownTimeoutNumOfThreadDump(proposed.getGracefulShutdownTimeoutNumOfThreadDump());
                           original._conditionalUnset(update.isUnsetUpdate(), 52);
                        } else if (prop.equals("GracefulShutdownTimeoutThreadDumpInterval")) {
                           original.setGracefulShutdownTimeoutThreadDumpInterval(proposed.getGracefulShutdownTimeoutThreadDumpInterval());
                           original._conditionalUnset(update.isUnsetUpdate(), 53);
                        } else if (prop.equals("ListenThreadDebug")) {
                           original.setListenThreadDebug(proposed.getListenThreadDebug());
                           original._conditionalUnset(update.isUnsetUpdate(), 44);
                        } else if (prop.equals("MagicThreadDumpBackToSocket")) {
                           original.setMagicThreadDumpBackToSocket(proposed.getMagicThreadDumpBackToSocket());
                           original._conditionalUnset(update.isUnsetUpdate(), 48);
                        } else if (prop.equals("MagicThreadDumpFile")) {
                           original.setMagicThreadDumpFile(proposed.getMagicThreadDumpFile());
                           original._conditionalUnset(update.isUnsetUpdate(), 47);
                        } else if (prop.equals("MagicThreadDumpHost")) {
                           original.setMagicThreadDumpHost(proposed.getMagicThreadDumpHost());
                           original._conditionalUnset(update.isUnsetUpdate(), 46);
                        } else if (prop.equals("MasterDeployer")) {
                           original.setMasterDeployer(proposed.getMasterDeployer());
                           original._conditionalUnset(update.isUnsetUpdate(), 255);
                        } else if (prop.equals("OSGiForApps")) {
                           original.setOSGiForApps(proposed.getOSGiForApps());
                           original._conditionalUnset(update.isUnsetUpdate(), 494);
                        } else if (prop.equals("PartitionEvenInterceptor")) {
                           original.setPartitionEvenInterceptor(proposed.getPartitionEvenInterceptor());
                           original._conditionalUnset(update.isUnsetUpdate(), 495);
                        } else if (prop.equals("PortablePartitionHelper")) {
                           original.setPortablePartitionHelper(proposed.getPortablePartitionHelper());
                           original._conditionalUnset(update.isUnsetUpdate(), 496);
                        } else if (prop.equals("RedefiningClassLoader")) {
                           original.setRedefiningClassLoader(proposed.getRedefiningClassLoader());
                           original._conditionalUnset(update.isUnsetUpdate(), 61);
                        } else if (prop.equals("ScriptExecutorCommand")) {
                           original.setScriptExecutorCommand(proposed.getScriptExecutorCommand());
                           original._conditionalUnset(update.isUnsetUpdate(), 497);
                        } else if (prop.equals("SecurityEncryptionService")) {
                           original.setSecurityEncryptionService(proposed.getSecurityEncryptionService());
                           original._conditionalUnset(update.isUnsetUpdate(), 498);
                        } else if (prop.equals("Server")) {
                           original.setServerAsString(proposed.getServerAsString());
                           original._conditionalUnset(update.isUnsetUpdate(), 43);
                        } else if (prop.equals("SlaveDeployer")) {
                           original.setSlaveDeployer(proposed.getSlaveDeployer());
                           original._conditionalUnset(update.isUnsetUpdate(), 256);
                        } else if (prop.equals("StartupTimeoutNumOfThreadDump")) {
                           original.setStartupTimeoutNumOfThreadDump(proposed.getStartupTimeoutNumOfThreadDump());
                           original._conditionalUnset(update.isUnsetUpdate(), 50);
                        } else if (prop.equals("StartupTimeoutThreadDumpInterval")) {
                           original.setStartupTimeoutThreadDumpInterval(proposed.getStartupTimeoutThreadDumpInterval());
                           original._conditionalUnset(update.isUnsetUpdate(), 51);
                        } else if (prop.equals("T3HttpUpgradeHandler")) {
                           original.setT3HttpUpgradeHandler(proposed.getT3HttpUpgradeHandler());
                           original._conditionalUnset(update.isUnsetUpdate(), 499);
                        } else if (prop.equals("WarExtraction")) {
                           original.setWarExtraction(proposed.getWarExtraction());
                           original._conditionalUnset(update.isUnsetUpdate(), 500);
                        } else if (prop.equals("WebModule")) {
                           original.setWebModule(proposed.getWebModule());
                           original._conditionalUnset(update.isUnsetUpdate(), 260);
                        } else if (prop.equals("MagicThreadDumpEnabled")) {
                           original.setMagicThreadDumpEnabled(proposed.isMagicThreadDumpEnabled());
                           original._conditionalUnset(update.isUnsetUpdate(), 45);
                        } else if (prop.equals("PartitionDebugLoggingEnabled")) {
                           original.setPartitionDebugLoggingEnabled(proposed.isPartitionDebugLoggingEnabled());
                           original._conditionalUnset(update.isUnsetUpdate(), 40);
                        } else {
                           super.applyPropertyUpdate(event, update);
                        }
                     }
                  }
               }

            }
         } catch (RuntimeException var7) {
            throw var7;
         } catch (Exception var8) {
            throw (Error)(new AssertionError("Impossible Exception")).initCause(var8);
         }
      }

      protected AbstractDescriptorBean finishCopy(AbstractDescriptorBean param1, boolean param2, List param3) {
         // $FF: Couldn't be decompiled
      }

      protected void inferSubTree(Class clazz, Object annotation) {
         super.inferSubTree(clazz, annotation);
         Object currentAnnotation = null;
         this.inferSubTree(this.bean.getServer(), clazz, annotation);
      }
   }
}
