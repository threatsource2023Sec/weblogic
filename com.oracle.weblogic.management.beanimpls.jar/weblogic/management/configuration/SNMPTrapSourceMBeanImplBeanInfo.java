package weblogic.management.configuration;

import java.beans.BeanDescriptor;
import java.beans.IntrospectionException;
import java.beans.MethodDescriptor;
import java.beans.ParameterDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.Map;
import weblogic.management.internal.mbean.BeanInfoHelper;

public class SNMPTrapSourceMBeanImplBeanInfo extends ConfigurationMBeanImplBeanInfo {
   public static final Class INTERFACE_CLASS = SNMPTrapSourceMBean.class;

   public SNMPTrapSourceMBeanImplBeanInfo(boolean readOnly, String targetVersion) throws IntrospectionException {
      super(readOnly, targetVersion);
   }

   public SNMPTrapSourceMBeanImplBeanInfo() throws IntrospectionException {
   }

   protected BeanDescriptor buildBeanDescriptor() {
      Class beanClass = null;

      try {
         beanClass = Class.forName("weblogic.management.configuration.SNMPTrapSourceMBeanImpl");
      } catch (Throwable var4) {
         beanClass = INTERFACE_CLASS;
      }

      BeanDescriptor beanDescriptor = new BeanDescriptor(beanClass, (Class)null);
      beanDescriptor.setValue("dynamic", Boolean.TRUE);
      beanDescriptor.setValue("package", "weblogic.management.configuration");
      String description = (new String("<p>This MBean is the base of SNMP TRAP related configuration MBeans.</p> ")).intern();
      beanDescriptor.setShortDescription(description);
      beanDescriptor.setValue("description", description);
      beanDescriptor.setValue("interfaceclassname", "weblogic.management.configuration.SNMPTrapSourceMBean");
      beanDescriptor.setValue("generatedByWLSInfoBinder", Boolean.TRUE);
      return beanDescriptor;
   }

   protected void buildPropertyDescriptors(Map descriptors) throws IntrospectionException {
      PropertyDescriptor currentResult = null;
      if (!descriptors.containsKey("EnabledServers")) {
         String getterName = "getEnabledServers";
         String setterName = null;
         if (!this.readOnly) {
            setterName = "setEnabledServers";
         }

         currentResult = new PropertyDescriptor("EnabledServers", SNMPTrapSourceMBean.class, getterName, setterName);
         descriptors.put("EnabledServers", currentResult);
         currentResult.setValue("description", "<p>This attribute is applicable only when the SNMP Agent is running on the Admin Server of a WebLogic Domain. The EnabledServers attribute allows the users to limit the scope of the monitored data sources to the specific named Servers. The EnabledServers list is ignored when the SNMAgentDeploymentMBean is targeted to a Managed Server. In the case of a Managed Server the SNMP Agent only looks at the data available in the WebLogic Server where the SNMP Agent is deployed. </p>  <p> For traps based on MBean attributes the SNMP Agent refers to the Domain Runtime MBean Server when it is running on the Admin Server and the Runtime MBean Server when it is deployed to a Managed Server. </p>  <p> In the case of <code>SNMPJMXMonitorMBean</code> and <code>SNMPAttributeChangeMBean</code> the <code>MonitoredMBeanType</code> and <code>MonitoredMBeanName</code> attributes specify the type and name of a WebLogic Server MBean for which the trap will be setup. MBeans that meet the Type and Name criteria are qualified to set the trap on. The EnabledServers attribute allows a user to specify additional criteria based on the Location of an MBean when the SNMP Agent is targeted to the Admin Server. MBeans whose Location matches one of the Servers in the EnabledServers list are considered eligible for the trap to be generated for a corresponding JMX notification. When the EnabledServers attribute is not specified all MBeans whose Type and Name match are considered as valid sources for the SNMP trap. </p>  <p> In the case of <code>SNMPLogFilterMBean</code> the EnabledServers attribute allows a user to specify the Servers in the Domain whose log messages will be monitored when the Agent is running on the Admin Server. When EnabledServers is not specified for an Agent running on the Admin Server log messages on all Managed Servers in the domain are monitored for sending traps. This attribute is not applicable when the SNMP Agent is targeted to a Managed Server, in this case the traps are sent based on log messages generated by the respective Managed Server where the Agent is deployed. </p> ");
         String[] seeObjectArray = new String[]{BeanInfoHelper.encodeEntities("weblogic.management.configuration.SNMPJMXMonitorMBean"), BeanInfoHelper.encodeEntities("weblogic.management.configuration.SNMPAttributeChangeMBean")};
         currentResult.setValue("see", seeObjectArray);
         currentResult.setValue("secureValueNull", Boolean.TRUE);
         currentResult.setValue("relationship", "reference");
         currentResult.setValue("adder", "addEnabledServer");
         currentResult.setValue("remover", "removeEnabledServer");
         currentResult.setValue("dynamic", Boolean.TRUE);
         currentResult.setValue("owner", "");
      }

      super.buildPropertyDescriptors(descriptors);
   }

   private void fillinFactoryMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinCollectionMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
      Method mth = SNMPTrapSourceMBean.class.getMethod("addEnabledServer", ServerMBean.class);
      ParameterDescriptor[] parameterDescriptors = new ParameterDescriptor[]{createParameterDescriptor("server", "The feature to be added to the EnabledServer attribute ")};
      String methodKey = BeanInfoHelper.buildMethodKey(mth);
      MethodDescriptor currentResult;
      if (!descriptors.containsKey(methodKey)) {
         currentResult = new MethodDescriptor(mth, parameterDescriptors);
         descriptors.put(methodKey, currentResult);
         currentResult.setValue("description", "<p>Adds a feature to the EnabledServer attribute of the SNMPTrapSourceMBean object</p> ");
         currentResult.setValue("role", "collection");
         currentResult.setValue("property", "EnabledServers");
      }

      mth = SNMPTrapSourceMBean.class.getMethod("removeEnabledServer", ServerMBean.class);
      parameterDescriptors = new ParameterDescriptor[]{createParameterDescriptor("server", (String)null)};
      methodKey = BeanInfoHelper.buildMethodKey(mth);
      if (!descriptors.containsKey(methodKey)) {
         currentResult = new MethodDescriptor(mth, parameterDescriptors);
         descriptors.put(methodKey, currentResult);
         currentResult.setValue("description", " ");
         currentResult.setValue("role", "collection");
         currentResult.setValue("property", "EnabledServers");
      }

   }

   private void fillinFinderMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinOperationMethodInfos(Map descriptors) throws IntrospectionException, NoSuchMethodException {
   }

   protected void buildMethodDescriptors(Map descriptors) throws IntrospectionException, NoSuchMethodException {
      this.fillinFinderMethodInfos(descriptors);
      if (!this.readOnly) {
         this.fillinCollectionMethodInfos(descriptors);
         this.fillinFactoryMethodInfos(descriptors);
      }

      this.fillinOperationMethodInfos(descriptors);
      super.buildMethodDescriptors(descriptors);
   }

   protected void buildEventSetDescriptors(Map descriptors) throws IntrospectionException {
   }
}
